{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/404.html","path":"404.html","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","path":"img/jelon.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","path":"img/no_found.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","path":"img/scrolltoparrow.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/share.png","path":"img/share.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","path":"img/unsigned_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/url.png","path":"img/url.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","path":"img/wechat_jelon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","path":"img/wechat_mp.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_reward.jpg","path":"img/wechat_reward.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/comment.js","path":"js/comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/html5.js","path":"js/html5.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","path":"img/lab/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","path":"img/thumbnail/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","path":"img/thumbnail/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","path":"img/thumbnail/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","path":"img/thumbnail/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","path":"img/thumbnail/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","path":"img/thumbnail/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","path":"img/thumbnail/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","path":"img/thumbnail/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","path":"img/thumbnail/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","path":"img/thumbnail/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","path":"css/fonts/homizio-nova/italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","path":"css/fonts/homizio-nova/italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","path":"css/fonts/homizio-nova/light.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","path":"css/fonts/homizio-nova/light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","path":"css/fonts/homizio-nova/light_italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","path":"css/fonts/homizio-nova/light_italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","path":"css/fonts/homizio-nova/regular.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","path":"css/fonts/homizio-nova/regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.css","path":"css/fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.eot","path":"css/fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.svg","path":"css/fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.ttf","path":"css/fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.woff","path":"css/fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.woff2","path":"css/fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"f5617971b77f185cfd2b4f0797e999271826aec6","modified":1756483024975},{"_id":"source/404.html","hash":"43573b7925c240a17e481d1ee224170b0ffaaa2e","modified":1753503031445},{"_id":"source/CNAME","hash":"f4d3a806c8913bbd925e7659c0417d3b5f625df1","modified":1753502965262},{"_id":"source/favicon.ico","hash":"bfb9b00e65b11c2b0e0d03023465803f800dae12","modified":1465393442000},{"_id":"source/_posts/.DS_Store","hash":"819e6db00cb0a2fdf28e4e8e0a13fd46c262b943","modified":1595293605338},{"_id":"source/robots.txt","hash":"a6c082d6519db3fe7353f9d37b9174dfcc8e5c2f","modified":1754063126228},{"_id":"source/_posts/139mailbuildtool.md","hash":"1f0ccc2582114c78f5431be6cf7fcbf90d26a004","modified":1756538540934},{"_id":"source/_posts/blog-https-suport.md","hash":"cf85312c84261c9de7e5b97f560531f3e07359f1","modified":1756538546320},{"_id":"source/_posts/create-a-vscode-plugin.md","hash":"e9f6e679b074b2d43f5080418ee2de2309681c31","modified":1678717624837},{"_id":"source/_posts/css-code-style.md","hash":"0017e329326386c10825758f0828514aacd6b948","modified":1756538563782},{"_id":"source/_posts/file-upload-header-content-type.md","hash":"1b67f0f56a9c142ec654d14395cb4bb07aa88d5a","modified":1756538574386},{"_id":"source/_posts/fill-hexo.md","hash":"7a4d1e7ca96cbabad30032502c3def1b740e9b3e","modified":1756538581141},{"_id":"source/_posts/front-end-notes-2.md","hash":"aaf219948ef6a81afa06c2da61e1a930588822d6","modified":1756538589429},{"_id":"source/_posts/front-end-notes-3.md","hash":"24f602e003d5aa8b25743ab3100ccdcc8f87bb69","modified":1756538600044},{"_id":"source/_posts/front-end-notes.md","hash":"b5f1efa358870415a87c297a9cec25c5bc6544af","modified":1756538605956},{"_id":"source/_posts/get-element-position.md","hash":"e70533b89a72c4f42d721ad06c3db697db49cb7d","modified":1756538611598},{"_id":"source/_posts/github-tutorial.md","hash":"9e39ae5b1ef37572ae5a7e69646422deb740c8f3","modified":1756538617546},{"_id":"source/_posts/http-status-code.md","hash":"748482cdd742133d35f3d48d9f67a6c23e5e7651","modified":1756538627650},{"_id":"source/_posts/hello-new-blog.md","hash":"570b39a01b557b28246633172577dbce6f95fcdb","modified":1756538622485},{"_id":"source/_posts/jquery-window-height-incorrect.md","hash":"eaf1cdfdfd381a824492bffa1c374af79f92ac4c","modified":1608353555021},{"_id":"source/_posts/js-docs.md","hash":"8075362c7f64c91a8d593ec27d9b6b7e3046a8b0","modified":1756538640160},{"_id":"source/_posts/js-type-implicit.md","hash":"e81fcf9a08beeb7ee9bab2fb5357b13a82cd290d","modified":1608352837578},{"_id":"source/_posts/eslintrc-js.md","hash":"c13c7e36ea0289a3c735e94995962f4cf29dded9","modified":1608352915845},{"_id":"source/_posts/leetcode-02-05.md","hash":"390575f96088798e7069730edb89bb909b933b1c","modified":1608352136586},{"_id":"source/_posts/leetcode-1013.md","hash":"87f14e7a7cd50230ab4c4c574ef2fc7c33c39cbf","modified":1608352728421},{"_id":"source/_posts/leetcode-102.md","hash":"6a6bd85444952735b3a569ee3fe56b506aa5d09e","modified":1608351987537},{"_id":"source/_posts/leetcode-11.md","hash":"3cd655ee233219d483823da3ae72280a9c0a58aa","modified":1608352035461},{"_id":"source/_posts/leetcode-1162.md","hash":"72dfed1ec1486cf2f5e05e68f7643c0996424895","modified":1608352409469},{"_id":"source/_posts/leetcode-1160.md","hash":"ebae8aca0b206326b5225d9ac8cb81d7975165da","modified":1608352615104},{"_id":"source/_posts/leetcode-13.md","hash":"44e2cd58e1b9e88ee2daaf7b01e2b4cac80fa4df","modified":1608352680300},{"_id":"source/_posts/leetcode-169.md","hash":"46381bb183d13a7efd6dc47333aef7ada0a58bca","modified":1608352715147},{"_id":"source/_posts/leetcode-22.md","hash":"9f991afbccba901be3e72f72b44c5934d7d9e9d6","modified":1608352344524},{"_id":"source/_posts/leetcode-409.md","hash":"9bbdddfb977f6598f766d7078a9f7212e5e707b4","modified":1608352499783},{"_id":"source/_posts/leetcode-209.md","hash":"776cb571d2f2ac18ccec4da41bbecde713904ac6","modified":1608351952445},{"_id":"source/_posts/leetcode-01-06.md","hash":"7995ea4dea06e2d86f8ffa07f2139cfae826f2c4","modified":1608352635350},{"_id":"source/_posts/leetcode-42.md","hash":"f2ec76907a2339333579f6e746593188b4c13137","modified":1608352357785},{"_id":"source/_posts/leetcode-56.md","hash":"c913bc1ef982158a7e7777b37b0512dedb9bf614","modified":1608351970663},{"_id":"source/_posts/leetcode-61.md","hash":"97b27a2f0773634b340808a147dab8078501646c","modified":1608352007661},{"_id":"source/_posts/leetcode-695.md","hash":"e6fb2ff585037270ae7ae9213b225387868321ff","modified":1608352651146},{"_id":"source/_posts/leetcode-8.md","hash":"c3fae325829bbd5ae142b2624eec1a9927a6ed37","modified":1608352372838},{"_id":"source/_posts/leetcode-836.md","hash":"e14cc9313299ee82ea84b27c9205e2ad4bbc9197","modified":1608352566829},{"_id":"source/_posts/leetcode-876.md","hash":"791bd3f5dd25303a5277618174c406a96a894e98","modified":1608352464840},{"_id":"source/_posts/leetcode-892.md","hash":"2aa6431d9397d163561b414265c7bb3903e07095","modified":1608352428591},{"_id":"source/_posts/leetcode-9.md","hash":"e8326569766f5ed4bae7c8b883a6f7e8c48a276d","modified":1608352697175},{"_id":"source/_posts/leetcode-93.md","hash":"c54af35cfc7955c4bb58835c85b75c162bc18496","modified":1608351890652},{"_id":"source/_posts/leetcode-912.md","hash":"01837de39a8d5b52136c8d88a34b9fb3ae793442","modified":1608352394574},{"_id":"source/_posts/leetcode-94.md","hash":"52d2c8fa813eadb54d1da7123a1f58cdcb5a0407","modified":1608352110944},{"_id":"source/_posts/leetcode-case-02-03.md","hash":"6fa44d1b628bca8405220430f263ff0d46179a98","modified":1608352318608},{"_id":"source/_posts/leetcode-case-16-01.md","hash":"f3a03ce3ae05b1590a6b4933d65ccefdc8aef2d2","modified":1608353858644},{"_id":"source/_posts/leetcode-case-17-16.md","hash":"69c97951c3eb4259e1a7a0aebdf941925c68cd2b","modified":1608352449096},{"_id":"source/_posts/leetcode-case-22.md","hash":"9f774e9a40176ad304cda2e4d119fac178434707","modified":1608352166260},{"_id":"source/_posts/leetcode-case-40.md","hash":"8aeb7420790e66de8056e5c2ac19f6347279bd92","modified":1608352484321},{"_id":"source/_posts/mac-command.md","hash":"c6b087c2ec6c7433e7095992aa5d2b3dfd509927","modified":1756538654389},{"_id":"source/_posts/mac-tips.md","hash":"240c8442fb316ab05fc17e95334839743eb75338","modified":1756538662898},{"_id":"source/_posts/mongodb-blog-design.md","hash":"30c2f65478f502a1f0c80326fa889922851219ec","modified":1756538668053},{"_id":"source/_posts/mongodb-for-mac.md","hash":"4e68b049ec9133b9ed8aae8148fa48a8f0c09aaa","modified":1756538673092},{"_id":"source/_posts/node-multi-process.md","hash":"9f15e8cd5c52b614890ac85e3e81ea397664ef76","modified":1756538677951},{"_id":"source/_posts/npm-check-updates.md","hash":"a08958950ad7d58879e2631108170dd12c88b30c","modified":1756538682709},{"_id":"source/_posts/open-source-license-tutorial.md","hash":"ec94beec1e075c75b39967fc277cac829c18a232","modified":1756538688182},{"_id":"source/_posts/package-json.md","hash":"74e8d2619f1d0b08a20af9d63ee98ed6f50097b9","modified":1756538693634},{"_id":"source/_posts/pnpm-workspace-changesets.md","hash":"ec95d4934bbc83d191d264841f36b7ad7dfef263","modified":1756534461811},{"_id":"source/_posts/react-native-learning.md","hash":"c620048fab4f1905026605b99315b3311f8d0fd2","modified":1756538699681},{"_id":"source/_posts/selenium.md","hash":"e5825dd858ed7947270731f7ce806229f3e023e1","modified":1679073367425},{"_id":"source/_posts/set-mysql-initial-password-on-mac.md","hash":"d717bcd180f7778e542e68d39739c257bf3854f2","modified":1756538708987},{"_id":"source/_posts/start-hexo.md","hash":"ae7861ef5605fdb856d81cf028c468a3f525cca1","modified":1756538740095},{"_id":"source/_posts/sorting-by-js.md","hash":"c513cc9b6b24519b7a7833cb7e44ddb191d7d713","modified":1756538732016},{"_id":"source/_posts/summary-of-mini-program.md","hash":"8a74077ddb91e7ee7b578944b57ac4671b1d6f38","modified":1756538745723},{"_id":"source/_posts/taonpm.md","hash":"15e113255880518ac3565e3d022cbf8af12efde1","modified":1756538750516},{"_id":"source/_posts/vue-next-tick.md","hash":"e95b8f3244961a30cd178ce75742fade400ef7b0","modified":1756538754763},{"_id":"source/_posts/vue-vuex-bootstrap.md","hash":"cedd240907d8d95f07d6b6d968eb05827e768654","modified":1756538759271},{"_id":"source/_posts/web-security.md","hash":"8d74bc7c938f9900642696645e4611c1ec4a94c9","modified":1756538764185},{"_id":"source/_posts/webpack-font-csp-problem.md","hash":"0b9f5561edcd1a2b5ed27bcc7dd51d3007ad61f0","modified":1756538769458},{"_id":"source/_posts/xups-comment-box.md","hash":"af5b5153eacfcca187deda819d659cd2f1f71b02","modified":1756538774166},{"_id":"source/_posts/yarn.md","hash":"7ba6d2d9449f0b6f1eaa112cbcef85b548d4e988","modified":1756538781795},{"_id":"source/about/index.md","hash":"412d256cac08818a734905b25131a2c67f81b656","modified":1474107337000},{"_id":"source/comment/index.md","hash":"7aa4e68e0b93e0120f5c04f7443737a63c3be04b","modified":1474107420000},{"_id":"source/lab/index.md","hash":"bf83356e2353a11b707bdcc2d41f7471609112fd","modified":1582437308617},{"_id":"source/_posts/leetcode-206.md","hash":"b1713269498d0d1de602467977a01b66469c461a","modified":1608352189384},{"_id":"source/_posts/leetcode-141.md","hash":"1cee2cde8efff5803e1efed9deb8872db6facc18","modified":1608352284555},{"_id":"themes/hexo-theme-xups/.gitignore","hash":"9549e6b32f95b988494f1316ca26d6314055a41b","modified":1609061492907},{"_id":"themes/hexo-theme-xups/.DS_Store","hash":"a9e1303c1ae8776a20be3562692d0a48602bde2f","modified":1612019428586},{"_id":"themes/hexo-theme-xups/_config.yml","hash":"2937afdda6a6c62dc805cf78368721cc1c932f1a","modified":1756483161320},{"_id":"themes/hexo-theme-xups/README.md","hash":"7ddfa99492bbd55d8d9ac9e51ff0da594f73a3c0","modified":1753503031436},{"_id":"themes/hexo-theme-xups/_config.example.yml","hash":"e1781691d99da1dfaa4db0077e858059e511ebc6","modified":1753502991037},{"_id":"themes/hexo-theme-xups/__scaffolds/draft.md","hash":"0995ef4969c2904392cedb95c0d1e9cee718675c","modified":1609641686724},{"_id":"themes/hexo-theme-xups/__scaffolds/post.md","hash":"0995ef4969c2904392cedb95c0d1e9cee718675c","modified":1609641686725},{"_id":"themes/hexo-theme-xups/layout/archive.ejs","hash":"584cc08f4bc2c8cfca8558a4ba67dcc572707b3e","modified":1612012281280},{"_id":"themes/hexo-theme-xups/__scaffolds/page.md","hash":"06399927c32262d6464f282a53a5c589af9c1ef1","modified":1609641686725},{"_id":"themes/hexo-theme-xups/layout/category.ejs","hash":"5a3966f0b066e92eca12640f04efedb3757fe59a","modified":1611491238022},{"_id":"themes/hexo-theme-xups/layout/layout.ejs","hash":"21a733ce942e5f057f17809e2d674899f6e6ea44","modified":1611491244613},{"_id":"themes/hexo-theme-xups/layout/page.ejs","hash":"f6ae36d5cafac288c02e89668e1e89d683922ac8","modified":1611491029580},{"_id":"themes/hexo-theme-xups/layout/post.ejs","hash":"73629cd376c721020bcf41428b5fef9a1b389180","modified":1611491251278},{"_id":"themes/hexo-theme-xups/layout/tag.ejs","hash":"cbb45ef59e4a77f6c6ff2d7a92a7a1642006fe03","modified":1611491255645},{"_id":"themes/hexo-theme-xups/source/.DS_Store","hash":"e053e45c2fe41fd39de93a457c2d87bee7cb8ff1","modified":1612019428584},{"_id":"themes/hexo-theme-xups/__source/comment/index.md","hash":"7aa4e68e0b93e0120f5c04f7443737a63c3be04b","modified":1609061492909},{"_id":"themes/hexo-theme-xups/__source/about/index.md","hash":"412d256cac08818a734905b25131a2c67f81b656","modified":1609061492908},{"_id":"themes/hexo-theme-xups/layout/index.ejs","hash":"8337b66fe9a2244755edc5f587a9884a021c7bd4","modified":1609061492920},{"_id":"themes/hexo-theme-xups/__source/lab/index.md","hash":"73536520b48a5d46cea0cf3639a3be0a023e7dc7","modified":1609061492909},{"_id":"themes/hexo-theme-xups/layout/_custom/about.ejs","hash":"020d38cf53220c96c20f089322f9521a85da85ac","modified":1753509328259},{"_id":"themes/hexo-theme-xups/layout/_custom/comment.ejs","hash":"fd40169b64ff9f1b0451f1bd67dad6975dad359e","modified":1609061492910},{"_id":"themes/hexo-theme-xups/layout/_custom/lab.ejs","hash":"015c0a57179b43a240e174bb4e00bbf243cb92d4","modified":1752913933817},{"_id":"themes/hexo-theme-xups/layout/_partial/after-footer.ejs","hash":"42b75417f9592d0391f32b678ba4fee4f0103a21","modified":1609647845158},{"_id":"themes/hexo-theme-xups/layout/_partial/archive-list.ejs","hash":"561d28efd34cd4004a54bd721a23aab2a90fbbe9","modified":1612060482300},{"_id":"themes/hexo-theme-xups/layout/_partial/footer.ejs","hash":"5bd84206b08c4ce264533f55ceda60ddb9d8aa1e","modified":1612064376308},{"_id":"themes/hexo-theme-xups/layout/_partial/baidu-analytics.ejs","hash":"7e9e39d51d9be8f742d555c73c72a4366d32c693","modified":1610119021157},{"_id":"themes/hexo-theme-xups/layout/_partial/head.ejs","hash":"3b7a8b3f70974e9c7289ed8f97e9a96874d2b4de","modified":1756483233740},{"_id":"themes/hexo-theme-xups/layout/_partial/header.ejs","hash":"bea34578adcd90168edeca8cbce759974b971cd0","modified":1754119671047},{"_id":"themes/hexo-theme-xups/layout/_partial/sidebar.ejs","hash":"584a5d3675ffc05e8e493c872b0bf604bba51586","modified":1609061492916},{"_id":"themes/hexo-theme-xups/layout/_partial/post-list.ejs","hash":"76d858a544d2511a690915927cb2247ef89ade3f","modified":1612061407129},{"_id":"themes/hexo-theme-xups/source/css/_extend.styl","hash":"69f347abc0f2342b17d6dd9ace36aaec3d508c3d","modified":1609061492924},{"_id":"themes/hexo-theme-xups/source/css/_variables.styl","hash":"b201d7579075f7ade4ec7af06baf51151bc7d0b0","modified":1753022621618},{"_id":"themes/hexo-theme-xups/source/css/.DS_Store","hash":"8a3aae72b3fb9e73316e8ca8a4aa809f6380a684","modified":1613656710268},{"_id":"themes/hexo-theme-xups/source/css/_markdown.styl","hash":"cce612ff67ad1d88a8cee1a5cfe3460f8f507e06","modified":1609061492925},{"_id":"themes/hexo-theme-xups/source/css/style.styl","hash":"64a8aa2f7c433cc4b3a20427ac0cad6554c38b37","modified":1754582417138},{"_id":"themes/hexo-theme-xups/source/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1609061492939},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1609061492940},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1609061492939},{"_id":"themes/hexo-theme-xups/source/img/.DS_Store","hash":"cb2387fe19057d2e82b128cc44a423cdaf7bf5fe","modified":1609061492939},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1609061492941},{"_id":"themes/hexo-theme-xups/source/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1609061492942},{"_id":"themes/hexo-theme-xups/source/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1609061492952},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1609061492952},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1609061492953},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1609061492953},{"_id":"themes/hexo-theme-xups/source/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1609061492960},{"_id":"themes/hexo-theme-xups/layout/_partial/post/category.ejs","hash":"c3fc5b276c66e5eb8caaae94e102f0f26150e112","modified":1609061492912},{"_id":"themes/hexo-theme-xups/source/js/comment.js","hash":"f460ca5671158b38691b5cc377ff5880c11abfa0","modified":1754109794592},{"_id":"themes/hexo-theme-xups/source/js/main.js","hash":"2dfea37dfb4c044ebe7db4588fffa657f8e4ccf4","modified":1754548668642},{"_id":"themes/hexo-theme-xups/layout/_partial/post/comment.ejs","hash":"2046e5a5ff347cc1e4cb296ccdc75dc2e6704193","modified":1609647876981},{"_id":"themes/hexo-theme-xups/layout/_partial/post/date.ejs","hash":"848f362936b3f21e067e2a0783efbdbdab338985","modified":1609061492913},{"_id":"themes/hexo-theme-xups/layout/_partial/post/gallery.ejs","hash":"967c57ae109f0ff35e326005f1d3408ab233fbbe","modified":1609061492913},{"_id":"themes/hexo-theme-xups/layout/_partial/post/nav.ejs","hash":"913216eaa215df6457fb4f67771cafc7574c2690","modified":1609061492913},{"_id":"themes/hexo-theme-xups/layout/_partial/post/post-item.ejs","hash":"f0d908b94bef46a890f8b4aab2632e50afbcb5c8","modified":1609061492913},{"_id":"themes/hexo-theme-xups/layout/_partial/post/share.ejs","hash":"c5100bd87020a3cfd0980144a7dc32aa2567c858","modified":1609061492914},{"_id":"themes/hexo-theme-xups/layout/_partial/post/tag.ejs","hash":"9828fcc52f7ace1436ffa5a5420506de0ab9e190","modified":1609061492915},{"_id":"themes/hexo-theme-xups/layout/_partial/post/title.ejs","hash":"bbdbc39e30776b6ac5a5f8d0d6220a75a644e45a","modified":1609061492915},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/categorys.ejs","hash":"93b8aae666a11c759c98907a7f78594bca029280","modified":1609061492916},{"_id":"themes/hexo-theme-xups/layout/_partial/article.ejs","hash":"a53b807c82bfd98421afcbd9a8ee2ff351401091","modified":1610119021156},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/friend_links.ejs","hash":"3989e3d7afa49fd632250b555a639efcdca28f96","modified":1609061492917},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/search.ejs","hash":"56374a5cc3aff0a87a3799e606877272d714e437","modified":1754187294485},{"_id":"themes/hexo-theme-xups/source/css/_base/font.styl","hash":"de31bbef31071005fada4b03a9fee56ef20d0af4","modified":1752912228201},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/weibo.ejs","hash":"db02c4b93932b5fe764ab018bb22a01f23b40d33","modified":1609061492919},{"_id":"themes/hexo-theme-xups/source/css/_base/global.styl","hash":"e1ac7156e045163c3ec78c248e441dc3ef3cf69d","modified":1752993200779},{"_id":"themes/hexo-theme-xups/source/css/_base/normalize.styl","hash":"cbff0cb51c494e3ceba25f34eafd3127ff5266e9","modified":1609061492924},{"_id":"themes/hexo-theme-xups/source/css/_base/reset.styl","hash":"8b00d7fea60bd1d9cbb532931693c9e303aaffc0","modified":1753500591307},{"_id":"themes/hexo-theme-xups/source/css/_partial/article.styl","hash":"3b2fdcc01fadfcab3b21b3a9f6222a224a8f343d","modified":1753022629544},{"_id":"themes/hexo-theme-xups/source/css/_base/mourning.styl","hash":"6edd1f9d62b4f83ca4fdb557dad23d13d2041f8b","modified":1609061492923},{"_id":"themes/hexo-theme-xups/source/css/_partial/comment.styl","hash":"8ba004f524c1b64f77262439c85dd029b8ff8cf3","modified":1752993391078},{"_id":"themes/hexo-theme-xups/source/css/_partial/.DS_Store","hash":"16121b987e7a7a6c89f78f512e6e63eea583e25a","modified":1609061492925},{"_id":"themes/hexo-theme-xups/source/css/_partial/footer.styl","hash":"d1f54068da8544a514e13d2c08d39b42dac1edf3","modified":1609061492926},{"_id":"themes/hexo-theme-xups/source/css/_partial/header.styl","hash":"e9d8d4d062d0cd5d4f86548e67c47c2c67866e6d","modified":1752916972927},{"_id":"themes/hexo-theme-xups/source/css/_partial/post.styl","hash":"bed62c4f685d916cf27257934215cbe1129647d0","modified":1756548500059},{"_id":"themes/hexo-theme-xups/source/css/_partial/highlight.styl","hash":"cd53e73ddee5258f3d2f2eb11737436b29b51236","modified":1609061492927},{"_id":"themes/hexo-theme-xups/source/css/_partial/responsive.styl","hash":"4817533a44b56c6b33d0d5be0dc82f3b5dc17833","modified":1756535066157},{"_id":"themes/hexo-theme-xups/source/css/_partial/searchform.styl","hash":"9fbf2b53162e2d64646304587eca81a2abb0c800","modified":1754155621852},{"_id":"themes/hexo-theme-xups/source/css/_partial/theme.styl","hash":"5d928942e4d8f88be30860452a491560c81aea02","modified":1609061492929},{"_id":"themes/hexo-theme-xups/source/css/_partial/sidebar.styl","hash":"35e9032bb071427ba242c8d47e30e9102408f966","modified":1752914443503},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1609061492940},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1609061492943},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1609061492946},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1609061492944},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1609061492948},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1609061492947},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1609061492949},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1609061492948},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1609061492950},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1609061492932},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1609061492933},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1609061492931},{"_id":"themes/hexo-theme-xups/source/css/fonts/.DS_Store","hash":"30a8c4baafa488cf0a908cab20d092efc0f30a81","modified":1613656710270},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/.DS_Store","hash":"94c491df2256ef547252eed029a8bfb2961da5fe","modified":1609061492930},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1609061492934},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1609061492935},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1609061492936},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.css","hash":"58c07b5b333f214b2a3b3f3d79f3bca2cda3cdb8","modified":1613656710275},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.eot","hash":"505ad08c20a2a2c78733aaf9a8f5c6cd08a3b986","modified":1613656710276},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.svg","hash":"789909dc68d8e298dd31e6efc56e2601e03ceede","modified":1613656710277},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.ttf","hash":"7bb1982d49e1cd160e3fe273736e84961a0e579b","modified":1613656710277},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.woff","hash":"23a0186130631c0524e67102561d29bf07e9367a","modified":1613656710278},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/.DS_Store","hash":"6ef120d72089cbd8f6fb18f93aca6b9e7129b162","modified":1612020365381},{"_id":"themes/hexo-theme-xups/source/css/fonts/iconfont/iconfont.woff2","hash":"bc0f44dfea3f5898b9a053b65e9954f456f2fe5b","modified":1613656710278},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/tags.ejs","hash":"6d166a14db37a22fc536a14a7ef0ef9505df6fd2","modified":1611477087529},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1609061492941},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1609061492951},{"_id":"themes/hexo-theme-xups/source/img/wechat_reward.jpg","hash":"948af73c7aa4ad3e74c046c11d5116c847cf67a6","modified":1609061492957},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1609061492945},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1609061492934},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1609061492936},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1609061492945},{"_id":"themes/hexo-theme-xups/xups.png","hash":"22f1fc32dea794370b4e791b885c2afb03c886c6","modified":1609061492969},{"_id":"public/baidu_urls.txt","hash":"4605140c94acdb9124d70b1ceac61f200c6e6931","modified":1756548512988},{"_id":"public/baidusitemap.xml","hash":"063a1fe39c5b9d1bfa3b20f5a2e2d3506c0197dd","modified":1756548512988},{"_id":"public/atom.xml","hash":"e484c87a4c3e945fb809623d73e18484ec6ba543","modified":1756548512988},{"_id":"public/sitemap.xml","hash":"a4d993abf783152c7f487b7314ff42c25bc59cdb","modified":1756548512988},{"_id":"public/lab/index.html","hash":"b85a0aaa416c0c68c88704c42705415d48080e19","modified":1756548512988},{"_id":"public/about/index.html","hash":"fde423a4046fd95c56fb8e6c5854034d22903796","modified":1756548512988},{"_id":"public/posts/pnpm-workspace-changesets/index.html","hash":"e425c20a9e4e4e4ee52b245edcc44aee41236427","modified":1756548512988},{"_id":"public/comment/index.html","hash":"9289b2fdbe48d395522445a90996088f60eb7614","modified":1756548512988},{"_id":"public/posts/node-multi-process/index.html","hash":"5c48c2910835001974581b4ceffc72b9cb99b49a","modified":1756548512988},{"_id":"public/posts/selenium/index.html","hash":"d7bf938b0bca4a2f8547bbf5ca8f1ec8994b33d5","modified":1756548512988},{"_id":"public/posts/create-a-vscode-plugin/index.html","hash":"76c86a8cd523669b1cceb396e0e39b6de679ab85","modified":1756548512988},{"_id":"public/posts/npm-check-updates/index.html","hash":"1ec8df2b3b0f4948aae02b9b1419cd52b51f1710","modified":1756548512988},{"_id":"public/posts/leetcode-93/index.html","hash":"2a4ba12d6c658a895ef2d72c3f69e5fdd218738c","modified":1756548512988},{"_id":"public/posts/leetcode-209/index.html","hash":"647739e81e05f712024ae6a95885156fb533a2fd","modified":1756548512988},{"_id":"public/posts/leetcode-56/index.html","hash":"45b5677bd023375cffa67fae606148263734b57b","modified":1756548512988},{"_id":"public/posts/leetcode-102/index.html","hash":"ea9af323119cadb26a3881f4f6164b986dfe0fec","modified":1756548512988},{"_id":"public/posts/leetcode-61/index.html","hash":"94683a452359f841f18ef815bb411ade75a82581","modified":1756548512988},{"_id":"public/posts/leetcode-11/index.html","hash":"3089fdf8dc76d3710ab585786cef7ff82b348ea6","modified":1756548512988},{"_id":"public/posts/front-end-notes-3/index.html","hash":"1f8bd898108708dcf2a80de945911adea7c040c2","modified":1756548512988},{"_id":"public/posts/leetcode-94/index.html","hash":"5371f6135ddaf6dc6ab07621001d712374ec663f","modified":1756548512988},{"_id":"public/posts/leetcode-02-05/index.html","hash":"a7e5f61e7d849d79c5a45398f12da941c2cda717","modified":1756548512988},{"_id":"public/posts/leetcode-case-22/index.html","hash":"eb0516f18427ee3f477ccb9a252b1db2852d8767","modified":1756548512988},{"_id":"public/posts/leetcode-206/index.html","hash":"64ba7b13446926ea5dcd635bbb32558dab5364ea","modified":1756548512988},{"_id":"public/posts/leetcode-case-16-01/index.html","hash":"549c5318203b2497e17b3324e133f5fd64a9f607","modified":1756548512988},{"_id":"public/posts/front-end-notes-2/index.html","hash":"6ded18e97d52e7e9389ad008443857ec08b1c216","modified":1756548512988},{"_id":"public/posts/leetcode-141/index.html","hash":"75905dfdc5a1c0c66ffb7277a8c51e152970e1f9","modified":1756548512988},{"_id":"public/posts/leetcode-case-02-03/index.html","hash":"6ddd54537dc4e99bdcc17bae8138ddfd70967ced","modified":1756548512988},{"_id":"public/posts/leetcode-22/index.html","hash":"1e08cad3130fdee71bd44b593d5a5e188645f172","modified":1756548512988},{"_id":"public/posts/leetcode-42/index.html","hash":"20bb4583bff1135e9572af38be87eecfce6cabf9","modified":1756548512988},{"_id":"public/posts/leetcode-8/index.html","hash":"2e30be4755cee1fcd285cf4220a0dd9e41c09124","modified":1756548512988},{"_id":"public/posts/leetcode-912/index.html","hash":"1fd3e0418b3c06715b0924e2aa9d0063ac9e2c7c","modified":1756548512988},{"_id":"public/posts/leetcode-1162/index.html","hash":"2160f5d8963ece98e967d3a9904cb2d62c348726","modified":1756548512988},{"_id":"public/posts/leetcode-892/index.html","hash":"2f3430993ae271c98a05a3997e34ff12bba5c934","modified":1756548512988},{"_id":"public/posts/leetcode-case-17-16/index.html","hash":"fe00a4a6527d3f4c1f2d6c6f31bf37f7b2f2e098","modified":1756548512988},{"_id":"public/posts/leetcode-876/index.html","hash":"3a7e56fe64d1c9a3dc4ff24dafe7ca337b4a9603","modified":1756548512988},{"_id":"public/posts/leetcode-case-40/index.html","hash":"05b8f3103784582b1b1402a613e969b1d060ca43","modified":1756548512988},{"_id":"public/posts/leetcode-409/index.html","hash":"6f5c661678e464f8c42cb8845846f91ee05cb437","modified":1756548512988},{"_id":"public/posts/leetcode-836/index.html","hash":"6134066296f6ac75abfb1c6635dbd70dd7678e2a","modified":1756548512988},{"_id":"public/posts/leetcode-1160/index.html","hash":"f9927f23c85dfba9817164c29ddaa776c6485499","modified":1756548512988},{"_id":"public/posts/leetcode-01-06/index.html","hash":"42d486037fe75fed5d1e7f8fff921a9ce0f429f9","modified":1756548512988},{"_id":"public/posts/leetcode-13/index.html","hash":"4b42147c320b9be322ad6c71bcda4aa6e95a1a01","modified":1756548512988},{"_id":"public/posts/leetcode-695/index.html","hash":"c030fa67d31fc3b6a4be8742c6f8560b302620b0","modified":1756548512988},{"_id":"public/posts/leetcode-9/index.html","hash":"9aed85f0edb28d1a264b04b840059a29b655c71a","modified":1756548512988},{"_id":"public/posts/leetcode-169/index.html","hash":"b1063c22b2a5384945f86d9dff243ee708ace2ee","modified":1756548512988},{"_id":"public/posts/leetcode-1013/index.html","hash":"f2336eeec389cbd8b8fca0b9e0b8b181ff6fb41d","modified":1756548512988},{"_id":"public/posts/webpack-font-csp-problem/index.html","hash":"b78f09b90e1e78b9397c952301afaf15c1e66381","modified":1756548512988},{"_id":"public/posts/js-type-implicit/index.html","hash":"c13af2daa61b02ebbbca155babf5d9a809b9a46e","modified":1756548512988},{"_id":"public/posts/file-upload-header-content-type/index.html","hash":"3dd955f131ddaa083c9ef7e377c9d154736cb150","modified":1756548512988},{"_id":"public/posts/eslintrc-js/index.html","hash":"3f951b6dc2b3c7d2255f5686df68c3628e31888e","modified":1756548512988},{"_id":"public/posts/front-end-notes/index.html","hash":"d0a4f09d1d8ef6132267bb8800b7847e6f592ff0","modified":1756548512988},{"_id":"public/posts/vue-next-tick/index.html","hash":"19af65d4f6151c67feac2b579e4434eaf3bfb953","modified":1756548512988},{"_id":"public/posts/package-json/index.html","hash":"47056d977399d111094586f26f70025234ce899b","modified":1756548512988},{"_id":"public/posts/get-element-position/index.html","hash":"84fe5c0a49420f7cc591caeafa5f84306db97f03","modified":1756548512988},{"_id":"public/posts/open-source-license-tutorial/index.html","hash":"e26aeb377c41fac3dd3c1ad520a13b563448284a","modified":1756548512988},{"_id":"public/posts/blog-https-suport/index.html","hash":"1e5176505c11ed43adfddc9c07eeb5ce802dd8b6","modified":1756548512988},{"_id":"public/posts/sorting-by-js/index.html","hash":"9e8bf99fb573ce4ef2bcf9d8dca17d9ff123c4c4","modified":1756548512988},{"_id":"public/posts/web-security/index.html","hash":"a2494960ec41ca188c9c5af53498ed48654e7925","modified":1756548512988},{"_id":"public/posts/xups-comment-box/index.html","hash":"414746b42f1197221bf7ecfd16b44b5fe6f4f678","modified":1756548512988},{"_id":"public/posts/set-mysql-initial-password-on-mac/index.html","hash":"361e95b2083ce5d11ef4ae28f4be9da76c14219c","modified":1756548512988},{"_id":"public/posts/summary-of-mini-program/index.html","hash":"3e8436f4dee4bd4db6525b38c3629d16a1976557","modified":1756548512988},{"_id":"public/posts/mongodb-blog-design/index.html","hash":"509e76983271123242791c48dcb0112d44de805a","modified":1756548512988},{"_id":"public/posts/mongodb-for-mac/index.html","hash":"546b13c031db8fa43efb75189d0377ade7e2e1e1","modified":1756548512988},{"_id":"public/posts/139mailbuildtool/index.html","hash":"2a875def3165bd746c3b3b24f49746bc32faf6cb","modified":1756548512988},{"_id":"public/posts/github-tutorial/index.html","hash":"edeaf7b0ba24a6dd5e953e81285bceb300c1b9de","modified":1756548512988},{"_id":"public/posts/mac-tips/index.html","hash":"422c2fe7c8e8f98d2a1c6aa0cdb94b9c28a9f67f","modified":1756548512988},{"_id":"public/posts/yarn/index.html","hash":"2383f64511ea2f6617718aa7d8f2fc45a285ce9a","modified":1756548512988},{"_id":"public/posts/vue-vuex-bootstrap/index.html","hash":"b44ff141df4634426018a91221453252fd588f19","modified":1756548512988},{"_id":"public/posts/jquery-window-height-incorrect/index.html","hash":"e1397b814523480b01a4ab6ba8430ebece297714","modified":1756548512988},{"_id":"public/posts/taonpm/index.html","hash":"2f2821464c14eac57a9418c04ca1002a848c0f95","modified":1756548512988},{"_id":"public/posts/react-native-learning/index.html","hash":"40c2220d6f11d36d0d3654a6d8fc3145eda89742","modified":1756548512988},{"_id":"public/posts/mac-command/index.html","hash":"e4e49532bb51b7377a41e137c43ac936f91bbb99","modified":1756548512988},{"_id":"public/posts/fill-hexo/index.html","hash":"99e33244e82591d0b18827b848d606035ab75a58","modified":1756548512988},{"_id":"public/posts/http-status-code/index.html","hash":"998245efccc99951db145f0a17c0b2278213a52e","modified":1756548512988},{"_id":"public/posts/css-code-style/index.html","hash":"c209eb0f52ddb27eed30f9f497fc091cc2738d33","modified":1756548512988},{"_id":"public/posts/js-docs/index.html","hash":"95efb4ec7b2ec57bfd21f8afbe8000923c160104","modified":1756548512988},{"_id":"public/posts/hello-new-blog/index.html","hash":"ae41204b688ec0c2ea52a6498c2bedfc4a9f86ee","modified":1756548512988},{"_id":"public/posts/start-hexo/index.html","hash":"a4dbb14c9827609604e3736a98c38d9d203a6ca7","modified":1756548512988},{"_id":"public/archives/index.html","hash":"33b7b62fe6ac5279dba14431fdc62c68754632b4","modified":1756548512988},{"_id":"public/archives/page/2/index.html","hash":"74a87ae52763a726ec2fcbcfa6d8c0a478a5eddf","modified":1756548512988},{"_id":"public/archives/page/3/index.html","hash":"a9c9839a10e149487ab6e73d78a5c021b403b367","modified":1756548512988},{"_id":"public/archives/2015/index.html","hash":"a5475281386018141eff2f6be15c2c7f29983c42","modified":1756548512988},{"_id":"public/archives/2015/10/index.html","hash":"50bca978ed94b0c5520f2b3575199a43a8f9f2dd","modified":1756548512988},{"_id":"public/archives/2016/index.html","hash":"971a0a250d3e94a31c69603b6f178d3272285b23","modified":1756548512988},{"_id":"public/archives/2016/03/index.html","hash":"1d55b9fbc944b52d808cb964ea89d1c1d9d52b8b","modified":1756548512988},{"_id":"public/archives/2016/04/index.html","hash":"38eb1b002d4481699c84a68f649df86f5563c8fa","modified":1756548512988},{"_id":"public/archives/2016/05/index.html","hash":"bbcc008b978de197e4d21dad5eea5a1a372d6342","modified":1756548512988},{"_id":"public/archives/2016/06/index.html","hash":"3f4db18b1d9ac93780d2677691611bdf7f6c0ed2","modified":1756548512988},{"_id":"public/archives/2016/07/index.html","hash":"57359ad962d799ce92c28f29b8657949b6c08a0a","modified":1756548512988},{"_id":"public/archives/2016/08/index.html","hash":"cb08e53c77c3079ff0bdac8b43fb12d9488b9a6a","modified":1756548512988},{"_id":"public/archives/2016/10/index.html","hash":"0e30fb0db2d776a6297bcde7ab351351b519f2c5","modified":1756548512988},{"_id":"public/archives/2016/11/index.html","hash":"0adc3ae2d77f08e58a10bd428cbd4314655f5c6e","modified":1756548512988},{"_id":"public/archives/2016/12/index.html","hash":"002182a0b8fe6ce4ef79f28729ec51aee496f460","modified":1756548512988},{"_id":"public/archives/2017/index.html","hash":"1a0d18d452e26c96c96bfb62fd5157a39ef4929b","modified":1756548512988},{"_id":"public/archives/2017/02/index.html","hash":"f919416454aedd4a81a6db282c4ffe0d3a7fbe0d","modified":1756548512988},{"_id":"public/archives/2017/03/index.html","hash":"21e3e020dd8fa4791703b2d85931f97f66b8ae3a","modified":1756548512988},{"_id":"public/archives/2017/05/index.html","hash":"b51d8c5e395fc47c68eeddd7c571ecb5c4ccc256","modified":1756548512988},{"_id":"public/archives/2017/08/index.html","hash":"1986f53808859438fe46d717062798612f01aa29","modified":1756548512988},{"_id":"public/archives/2017/09/index.html","hash":"bcac3c4faa42a04a7bc3a35617ef727492bbc709","modified":1756548512988},{"_id":"public/archives/2017/10/index.html","hash":"5114465a9ad2cf3f33482ac2331cc10ea2520db7","modified":1756548512988},{"_id":"public/archives/2018/index.html","hash":"18683f49b5cc308d6aa5dd7ac455fdb5e33d92bd","modified":1756548512988},{"_id":"public/archives/2018/02/index.html","hash":"e09365352983286f81d9000950e3a7483a44c3f2","modified":1756548512988},{"_id":"public/archives/2018/04/index.html","hash":"e0b6444530a77965c7201ab68cd97b73fda0c00e","modified":1756548512988},{"_id":"public/archives/2018/08/index.html","hash":"3c9aacb12a7789288f2a58f4dcbedf42166dfcf1","modified":1756548512988},{"_id":"public/archives/2018/09/index.html","hash":"0efc8886a9b80b956b37e8baa7491c2d867315c9","modified":1756548512988},{"_id":"public/archives/2019/index.html","hash":"326d37834c7eb56a1fefb6f2f51e50e17c068f7c","modified":1756548512988},{"_id":"public/archives/2019/03/index.html","hash":"1520dc78493f1ca9765ee8abbaa52cce7c5b49db","modified":1756548512988},{"_id":"public/archives/2019/06/index.html","hash":"4bc325f3170981a476a41e33d332b996eb6a0d42","modified":1756548512988},{"_id":"public/archives/2019/12/index.html","hash":"a0d3b861dea0acf1648e177c0f90e4d395b8d564","modified":1756548512988},{"_id":"public/archives/2020/index.html","hash":"b90201988d79c324bf3f9314ae7ac024880df61f","modified":1756548512988},{"_id":"public/archives/2020/page/2/index.html","hash":"0d4ada7131ad9c6e682adb5ae9f0cef6900c54f9","modified":1756548512988},{"_id":"public/archives/2020/03/index.html","hash":"7580208ed3c95dc5143f79f3ecf1cc16426e7ff5","modified":1756548512988},{"_id":"public/archives/2020/04/index.html","hash":"18e49bf77ee0c2625f0c7b2d58fe52993c01a4b6","modified":1756548512988},{"_id":"public/archives/2020/05/index.html","hash":"b1e5d2e74b0ffac4c0b015e7b92efbb650d93f74","modified":1756548512988},{"_id":"public/archives/2020/06/index.html","hash":"6e2ae4abc87a691c79419a545b4643a681fa1c85","modified":1756548512988},{"_id":"public/archives/2020/07/index.html","hash":"3263a3040d1f4fe15f9f40793edd149607a7edcc","modified":1756548512988},{"_id":"public/archives/2020/08/index.html","hash":"872c6474d6d046fa97285fb94cda3a2d19c96f02","modified":1756548512988},{"_id":"public/archives/2021/index.html","hash":"48c98db803783264bf3eb3169e800019b7effcef","modified":1756548512988},{"_id":"public/archives/2021/01/index.html","hash":"506654a8772427ffd6200a7d844c3c72f2cd5718","modified":1756548512988},{"_id":"public/archives/2023/index.html","hash":"d746a4be9aa5d49a8ead01b726e0fd4a52d3dc2f","modified":1756548512988},{"_id":"public/archives/2023/03/index.html","hash":"24284caaaf0ecd23e642a925e8378beabb204f76","modified":1756548512988},{"_id":"public/archives/2023/04/index.html","hash":"2d15bd499b9fb7e027c587d8999cd1bfbd2a1f26","modified":1756548512988},{"_id":"public/archives/2025/index.html","hash":"775498c82b626f0ed2eda65f0ccf79aceeb06e3a","modified":1756548512988},{"_id":"public/archives/2025/03/index.html","hash":"3ab141558e2eac19922f76b89c2d94fd75f2b893","modified":1756548512988},{"_id":"public/categories/Web技术/index.html","hash":"3bb40d26b89385dd5a81741ff1544cc67888d326","modified":1756548512988},{"_id":"public/categories/Web技术/page/2/index.html","hash":"6dd64e65d1ce23e97370eef80f67030990092d7b","modified":1756548512988},{"_id":"public/categories/Web技术/page/3/index.html","hash":"4d06108ee5551ed411ce70372c25a8bfbafa1013","modified":1756548512988},{"_id":"public/categories/Web技术/page/4/index.html","hash":"c4927265c0c45eb25623cde8f23114d7a025b56b","modified":1756548512988},{"_id":"public/categories/Web技术/page/5/index.html","hash":"67b3968fa21c2a4b962ba8c2ea26ae42c6733304","modified":1756548512988},{"_id":"public/categories/Web技术/page/6/index.html","hash":"7592fc81f9d75357c29a745cb1d83e6b32ed87c6","modified":1756548512988},{"_id":"public/categories/Web技术/page/7/index.html","hash":"1f9d9e7c02af6aba3ca40d8b9b23b6b21ad3898f","modified":1756548512988},{"_id":"public/categories/Web技术/page/8/index.html","hash":"3311349f3ee4c56402861e34b2cbfe0b7ca663d9","modified":1756548512988},{"_id":"public/categories/生活琐事/index.html","hash":"24dbc152cab88f32a44c12c6dfa6f831cd610076","modified":1756548512988},{"_id":"public/categories/算法练习/index.html","hash":"a0423f282d4ce2a4286fa97598bcd1e23553ff3b","modified":1756548512988},{"_id":"public/categories/算法练习/page/2/index.html","hash":"fabdfdd091c96ee7e41056bf91263ce66c97cdb8","modified":1756548512988},{"_id":"public/categories/算法练习/page/3/index.html","hash":"964189f2dd4416e8419e4b450567f378c3c41423","modified":1756548512988},{"_id":"public/categories/算法练习/page/4/index.html","hash":"973157c21b1eeb4eb3ada1db063d890a34961a78","modified":1756548512988},{"_id":"public/categories/算法练习/page/5/index.html","hash":"77a03ecf3f077ba43f216e1f1bf412320473ca49","modified":1756548512988},{"_id":"public/categories/算法练习/page/6/index.html","hash":"f91e817f47cde50ad7db83d38e91168734294087","modified":1756548512988},{"_id":"public/categories/算法练习/page/7/index.html","hash":"4c976d26518748509984476c46192fe10bb787ce","modified":1756548512988},{"_id":"public/index.html","hash":"bb1a664949f99e3c9e9852b35f695c834ef8096b","modified":1756548512988},{"_id":"public/page/2/index.html","hash":"517025ac5d79bebdaf0e697d700cd62edc65806d","modified":1756548512988},{"_id":"public/page/3/index.html","hash":"2d2ecab05c18d4c1a56b025430b2cce596779807","modified":1756548512988},{"_id":"public/page/4/index.html","hash":"d003593366eaf24f84e0c76ebd36d365c24efe78","modified":1756548512988},{"_id":"public/page/5/index.html","hash":"37e13db31a19e0bf24a656f0a367a23eabb2567d","modified":1756548512988},{"_id":"public/page/7/index.html","hash":"21db88face144395136282129fe6b5494a0881d9","modified":1756548512988},{"_id":"public/page/8/index.html","hash":"a36b1ac0d3098089d6d97baf4e321b3f0d2c7c4f","modified":1756548512988},{"_id":"public/page/6/index.html","hash":"abc38307e618fd29c4b784a00ef2bdd67f689970","modified":1756548512988},{"_id":"public/page/9/index.html","hash":"55e0c523cf0860706e696f62918f12f318ed7b1d","modified":1756548512988},{"_id":"public/page/10/index.html","hash":"08b6a2646ed70c3a5cee6a2fb9b8565202b57bd8","modified":1756548512988},{"_id":"public/page/12/index.html","hash":"23959a4ac976f7b931d28cd16bddb8e01bd573d2","modified":1756548512988},{"_id":"public/page/11/index.html","hash":"febbb12185c465e2e08f1282b27e64d9a482f839","modified":1756548512988},{"_id":"public/page/13/index.html","hash":"d12f6518fc3f0ff362b84dcc40beaa64e0d96f9b","modified":1756548512988},{"_id":"public/page/14/index.html","hash":"3cfd9ad2b81a0243457a97a5dcb017785a1e850b","modified":1756548512988},{"_id":"public/tags/gulp/index.html","hash":"09d060cdf693c20c7ffa333c90280ffbffdc58ee","modified":1756548512988},{"_id":"public/tags/Electron/index.html","hash":"5bc8432aa618b11f346734101ef825ffed40e324","modified":1756548512988},{"_id":"public/tags/构建工具/index.html","hash":"072a203b64ef3f0a60ab07c4d7ed405bd8f11e80","modified":1756548512988},{"_id":"public/tags/HTTPS/index.html","hash":"abfa8471df93baff10757d221dfc687c2fa2738e","modified":1756548512988},{"_id":"public/tags/静态博客/index.html","hash":"a612878b119c03a0a49a46655c4e254811e61d30","modified":1756548512988},{"_id":"public/tags/vscode/index.html","hash":"f179a667b683309c23fa5d5ee50f96b1f8d4dfe9","modified":1756548512988},{"_id":"public/tags/css/index.html","hash":"b7808a0efc90e4aa7da2c04d125f783d7ef00546","modified":1756548512988},{"_id":"public/tags/编码规范/index.html","hash":"8c06583f65e95ba44b01f32213acf8eb0a53ec84","modified":1756548512988},{"_id":"public/tags/js/index.html","hash":"66a501cf08c4f2e845e1d988fa0eea3ab6eb5b96","modified":1756548512988},{"_id":"public/tags/eslint/index.html","hash":"d7966504b859b89619b9b7668ea1dedf58a227f1","modified":1756548512988},{"_id":"public/tags/文件上传/index.html","hash":"6094acf4f825bebc41b9e137898e17b5e9ec5552","modified":1756548512988},{"_id":"public/tags/content-type/index.html","hash":"f7452a11eaab757e82f6cf0766af9ef90e02b755","modified":1756548512988},{"_id":"public/tags/Hexo/index.html","hash":"5ced8e0a1fd1d86f9508a0aceb5307f77450fa84","modified":1756548512988},{"_id":"public/tags/github-pages/index.html","hash":"4a30cdaf2027ad9a17e18cd86c264ec1e403f7e0","modified":1756548512988},{"_id":"public/tags/前端/index.html","hash":"d08d2e1642336bb570ea5d920780895ab242ddc7","modified":1756548512988},{"_id":"public/tags/Github/index.html","hash":"4afa4b7e778a5ce73cc2a1b9010d1bcc9f48c26e","modified":1756548512988},{"_id":"public/tags/Git/index.html","hash":"d3c31d33eb43d0a5915e6c64b56728762f7d3bff","modified":1756548512988},{"_id":"public/tags/HTTP/index.html","hash":"6ab4f40a36ba4086b5ddd469e17e4b0ed79ac7ee","modified":1756548512988},{"_id":"public/tags/网络状态码/index.html","hash":"123a826bf5a1b1b2a5cf2319362f92aafd3692a6","modified":1756548512988},{"_id":"public/tags/新博客/index.html","hash":"e5a1dd689aefdbb93f310cfcffb10d5ab9ae32e1","modified":1756548512988},{"_id":"public/tags/jQuery/index.html","hash":"d5339be9f7bfaec53d6d41946aad85baa7a5f9a9","modified":1756548512988},{"_id":"public/tags/浏览器高度/index.html","hash":"0f097605db1f0c77666b6fa181125d285b326be0","modified":1756548512988},{"_id":"public/tags/js类型/index.html","hash":"529cbd40690ae297abbd66795be1bde2c1c8a7fd","modified":1756548512988},{"_id":"public/tags/隐式转换/index.html","hash":"a93d2e59e16d4a038bad4961fd9fb87047d903ef","modified":1756548512988},{"_id":"public/tags/LeetCode/index.html","hash":"cf1a7137f02271dcd504656cd8e1ce11505f8ffa","modified":1756548512988},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"149039c692765017c36ca1f603cc50517db717f5","modified":1756548512988},{"_id":"public/tags/LeetCode/page/3/index.html","hash":"fd9f33335401950d8863ba2e95b72b180abcdfed","modified":1756548512988},{"_id":"public/tags/LeetCode/page/4/index.html","hash":"d743bf6a7afa052b13c8fb19b399357e3b9fe529","modified":1756548512988},{"_id":"public/tags/LeetCode/page/5/index.html","hash":"ec4d9fb0f109d626be1d01d5c9aeac3c4d545386","modified":1756548512988},{"_id":"public/tags/LeetCode/page/6/index.html","hash":"4cd73c1e05691294ef3a7e4db18b881f7e0cb0b9","modified":1756548512988},{"_id":"public/tags/LeetCode/page/7/index.html","hash":"b96869529e9d3b8a38e90ef43138eea5205ccd46","modified":1756548512988},{"_id":"public/tags/算法/index.html","hash":"31aaaa80d2a2126a7177f61458eefe73a0e17b1a","modified":1756548512988},{"_id":"public/tags/算法/page/2/index.html","hash":"1eda94a38805f26adab92858722fe34a4f407b43","modified":1756548512988},{"_id":"public/tags/算法/page/3/index.html","hash":"0ae9b1c988451706c1d44f3edf43ea55d7fb47fb","modified":1756548512988},{"_id":"public/tags/算法/page/4/index.html","hash":"6fec093b50634012c842782795d78b957fa881f2","modified":1756548512988},{"_id":"public/tags/算法/page/5/index.html","hash":"82222e2ec46baa38ea413af6baeb8bdd9be5ea54","modified":1756548512988},{"_id":"public/tags/算法/page/6/index.html","hash":"3b2b02168c93bb2343b6a4b28af1f48acdd7dd2a","modified":1756548512988},{"_id":"public/tags/算法/page/7/index.html","hash":"fc757db8bc27a402ded0f4f1dce77a367c4de401","modified":1756548512988},{"_id":"public/tags/Mac-OSX/index.html","hash":"7f745053f20bd1ad7619098fc4e7c50e117a860f","modified":1756548512988},{"_id":"public/tags/命令大全/index.html","hash":"515e88d91f20a7cc7f3774264d397f21c9eecbc7","modified":1756548512988},{"_id":"public/tags/Mac/index.html","hash":"5a241dfa806373ff2b5c3479d855aa42c9ad5e99","modified":1756548512988},{"_id":"public/tags/开机变慢/index.html","hash":"74442abb9ec45a58be674040c6cf84ef97246cb8","modified":1756548512988},{"_id":"public/tags/Mongoose/index.html","hash":"3d44cbd43c2f263f43930efedde52020ed64c036","modified":1756548512988},{"_id":"public/tags/Node-js/index.html","hash":"3a27662cb9f7d0b4b0c56ee78908ba52053e27db","modified":1756548512988},{"_id":"public/tags/MongoDB/index.html","hash":"200ac378ce420e796f7923e7b4e27dd2c4873751","modified":1756548512988},{"_id":"public/tags/npm/index.html","hash":"847c115fec8da017c726594ec4e7839e9a543bad","modified":1756548512988},{"_id":"public/tags/开源许可证/index.html","hash":"7ec44b266d576ba0abe4577b58499751fa2c2539","modified":1756548512988},{"_id":"public/tags/node/index.html","hash":"289da4b1838aa5c860018fc6e383f9dd202e8829","modified":1756548512988},{"_id":"public/tags/pnpm/index.html","hash":"4fed009e9fd2971e288e03e44d6c37319c12a0ef","modified":1756548512988},{"_id":"public/tags/monorepo/index.html","hash":"b46f4c7d2b4880539a31228c54e5bbad4c677daa","modified":1756548512988},{"_id":"public/tags/changesets/index.html","hash":"9f75eaaf4d51828c3e855597781bcfff704260c3","modified":1756548512988},{"_id":"public/tags/react/index.html","hash":"85358dd8287752fba6ed4700d60886d280d5e4e5","modified":1756548512988},{"_id":"public/tags/react-native/index.html","hash":"712a119b218ed817a53ea49043498c2f33e245d5","modified":1756548512988},{"_id":"public/tags/iOS/index.html","hash":"e3f0c9aac203ea2f994efec60a07fadcffc4bbf6","modified":1756548512988},{"_id":"public/tags/Selenium/index.html","hash":"2d7d6e3bdcffbc5c4e9c9be174279d33b6a90e6a","modified":1756548512988},{"_id":"public/tags/测试/index.html","hash":"0dffd1141ad5aab3a9ade17d4acb1c4051c9b5b6","modified":1756548512988},{"_id":"public/tags/MySQL/index.html","hash":"709be5838170e95b67a196313dfd65bf305228af","modified":1756548512988},{"_id":"public/tags/小程序/index.html","hash":"519e0079935a1e9303a02e6d249ebdf838687f7c","modified":1756548512988},{"_id":"public/tags/WeChat/index.html","hash":"261f856d6df820ef8bd31aeeba938964541abd14","modified":1756548512988},{"_id":"public/tags/淘宝npm/index.html","hash":"4ca2d3bf6a9f8f519c0001685c36a58a1554e09f","modified":1756548512988},{"_id":"public/tags/vue/index.html","hash":"ca407e31430853490c83d017d36e73ec950fc1ad","modified":1756548512988},{"_id":"public/tags/nextTick/index.html","hash":"a418f7157a62f3e6377eeb47adcaf1ac0cff7ed3","modified":1756548512988},{"_id":"public/tags/Vue-js/index.html","hash":"0f37e77b13d46ab82cd8d3f2ea146e45db9957ef","modified":1756548512988},{"_id":"public/tags/Vuex/index.html","hash":"9e223e3c60963a0f07b73cc5e75d21f2f81744c4","modified":1756548512988},{"_id":"public/tags/Bootstrap/index.html","hash":"b265e3500b69431c3427c0f0a39e8952808d151c","modified":1756548512988},{"_id":"public/tags/MVVM/index.html","hash":"ca981b9419aa06611f71b5741a0d6a0fca246430","modified":1756548512988},{"_id":"public/tags/Web安全/index.html","hash":"64871586fe7bba29cc92d2c832befbfd946e1b67","modified":1756548512988},{"_id":"public/tags/webpack/index.html","hash":"76140c48c267d1a427971ad271cd6ae7d84b1902","modified":1756548512988},{"_id":"public/tags/web-font/index.html","hash":"f8df642b1d3fe84d67d7084e22915d4f11ff4e08","modified":1756548512988},{"_id":"public/tags/gitHub-issue/index.html","hash":"d92546a389fb75e9ebdc7103d4848b34d1a9587f","modified":1756548512988},{"_id":"public/tags/Yarn/index.html","hash":"1807df45f369a6dca7fef729016aa1cc482d3f7e","modified":1756548512988},{"_id":"public/tags/第三方评论框/index.html","hash":"f150d3a1032fcd77a8db8fe48ddda2d13e85093a","modified":1756548512988},{"_id":"public/404.html","hash":"43573b7925c240a17e481d1ee224170b0ffaaa2e","modified":1756548512988},{"_id":"public/CNAME","hash":"f4d3a806c8913bbd925e7659c0417d3b5f625df1","modified":1756548512988},{"_id":"public/favicon.ico","hash":"bfb9b00e65b11c2b0e0d03023465803f800dae12","modified":1756548512988},{"_id":"public/robots.txt","hash":"a6c082d6519db3fe7353f9d37b9174dfcc8e5c2f","modified":1756548512988},{"_id":"public/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1756548512988},{"_id":"public/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1756548512988},{"_id":"public/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1756548512988},{"_id":"public/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1756548512988},{"_id":"public/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1756548512988},{"_id":"public/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1756548512988},{"_id":"public/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1756548512988},{"_id":"public/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1756548512988},{"_id":"public/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1756548512988},{"_id":"public/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1756548512988},{"_id":"public/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1756548512988},{"_id":"public/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1756548512988},{"_id":"public/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1756548512988},{"_id":"public/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1756548512988},{"_id":"public/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1756548512988},{"_id":"public/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1756548512988},{"_id":"public/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.eot","hash":"505ad08c20a2a2c78733aaf9a8f5c6cd08a3b986","modified":1756548512988},{"_id":"public/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.svg","hash":"789909dc68d8e298dd31e6efc56e2601e03ceede","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.ttf","hash":"7bb1982d49e1cd160e3fe273736e84961a0e579b","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.woff","hash":"23a0186130631c0524e67102561d29bf07e9367a","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.woff2","hash":"bc0f44dfea3f5898b9a053b65e9954f456f2fe5b","modified":1756548512988},{"_id":"public/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1756548512988},{"_id":"public/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1756548512988},{"_id":"public/img/wechat_reward.jpg","hash":"948af73c7aa4ad3e74c046c11d5116c847cf67a6","modified":1756548512988},{"_id":"public/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1756548512988},{"_id":"public/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1756548512988},{"_id":"public/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1756548512988},{"_id":"public/css/style.css","hash":"d9d5bdd5ddadc2485daec639a4d3516992e1f21b","modified":1756548512988},{"_id":"public/css/fonts/iconfont/iconfont.css","hash":"c6a0eb6c790180b77a039fcd39e2705c98478a2e","modified":1756548512988},{"_id":"public/js/comment.js","hash":"50d0dadf6f61536a30152b5dbd6959045db5c334","modified":1756548512988},{"_id":"public/js/main.js","hash":"5f87b4426f50bab33e5d4a10d451944c8b68b874","modified":1756548512988},{"_id":"public/js/html5.js","hash":"6aae38921f723a4c421c38483147080bb5acae81","modified":1756548512988},{"_id":"source/fauicon.png","hash":"63727d96e77bb6ccd45339c4fba02eaa73c89cfc","modified":1694652842141},{"_id":"public/fauicon.png","hash":"63727d96e77bb6ccd45339c4fba02eaa73c89cfc","modified":1756483245252},{"_id":"source/favicon.png","hash":"63727d96e77bb6ccd45339c4fba02eaa73c89cfc","modified":1694652842141},{"_id":"public/favicon.png","hash":"63727d96e77bb6ccd45339c4fba02eaa73c89cfc","modified":1756548512988}],"Category":[{"name":"Web技术","_id":"cmduj3n1r0004k8sv5q76087d"},{"name":"生活琐事","_id":"cmduj3n2k0014k8sv9a8p3exv"},{"name":"算法练习","_id":"cmduj3n2p001hk8sv3osw0m1k"}],"Data":[],"Page":[{"title":"实验室","date":"2016-02-01T20:29:57.000Z","pageid":"lab","projects":{"react_demo":{"title":"React Demo","time":"2020-02-23T00:00:00.000Z","content":{"1":{"name":"基于create-react-app的脚手架"}}},"blog_demo":{"title":"Blog Demo","time":"2016-10-10T00:00:00.000Z","content":{"1":{"name":"基于 vue + vuex + bootstrap 的 blog demo","link":"https://github.com/jangdelong/vue-blog-demo"}}},"hexo_theme_xups":{"title":"hexo-theme-xups 博客主题","time":"2016-03-12T00:00:00.000Z","content":{"1":{"name":"基于 hexo 静态博客系统的 博客主题 xups","link":"https://github.com/jangdelong/hexo-theme-xups"}}},"typecho_theme_xups":{"title":"Typecho 博客主题","time":"2015-10-15T00:00:00.000Z","content":{"1":{"name":"基于 php 博客系统 typecho 的主题 xups","link":"https://github.com/jangdelong/typecho-theme-xups"}}}},"_content":"","source":"lab/index.md","raw":"---\ntitle: 实验室\ndate: 2016-02-01 20:29:57\npageid: lab\n\nprojects:\n    react_demo:\n        title: React Demo\n        time: 2020-02-23\n        content:\n            1:\n                name: 基于create-react-app的脚手架\n    blog_demo:\n        title: Blog Demo\n        time: 2016-10-10\n        content:\n            1:\n                name: 基于 vue + vuex + bootstrap 的 blog demo\n                link: https://github.com/jangdelong/vue-blog-demo\n    hexo_theme_xups:\n        title: hexo-theme-xups 博客主题\n        time: 2016-03-12\n        content:\n            1:\n                name: 基于 hexo 静态博客系统的 博客主题 xups\n                link: https://github.com/jangdelong/hexo-theme-xups\n    typecho_theme_xups:\n        title: Typecho 博客主题\n        time: 2015-10-15\n        content:\n            1:\n                name: 基于 php 博客系统 typecho 的主题 xups\n                link: https://github.com/jangdelong/typecho-theme-xups  \n---\n","updated":"2016-02-01T20:29:57.000Z","path":"lab/index.html","comments":1,"layout":"page","_id":"cmduj3n1e0000k8svhknv9afv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言","date":"2016-02-01T20:29:57.000Z","pageid":"comment","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言\ndate: 2016-02-01 20:29:57\npageid: comment\n---\n","updated":"2016-02-01T20:29:57.000Z","path":"comment/index.html","comments":1,"layout":"page","_id":"cmduj3n1p0002k8svbsr9fn74","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2016-01-31T22:10:28.000Z","pageid":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-01-31 22:10:28\npageid: about\n---","updated":"2016-01-31T22:10:28.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmduj3n1u0006k8sval1fh5nj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"139邮箱图形化前端构建小工具","author":"Jelon","date":"2016-12-19T00:00:00.000Z","thumbnail":null,"blogexcerpt":"自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足。比如像我这样的前端小白，我对命令行不是很敏感...","_content":"<!-- toc -->\n\n### 背景目的\n\n自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足：第一，比如像我这样的前端小白，我对命令行不是很敏感，甚至我不太喜欢敲一串串的命令行去执行一个任务，我希望能有一个图形化界面工具，能点点按钮什么的就可以完成一个构建任务，那该多爽。第二，目前的 gulp 构建还不支持自定义构建，这个自定义构建其实就是，比如说，我想打包某个目标文件（这个文件可能由好几个文件合并压缩而成），只要选择了这个文件的文件名，然后点击按钮，就可以帮你执行的任务，帮你构建好这个文件，甚至可以帮你部署到资源服务器上。\n\n简单的说就是：\n\n- 需要一个构建工具图形化界面\n- 需要自定义构建功能\n\n基于以上两个目的，所以就做了一个这样的图形化前端构建小工具。\n\n### 效果展示\n\n- **全量构建**\n \n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/1.png)\n \n- **JavaScript 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/2.png)\n\n- **CSS 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/3.png)\n\n- **HTML 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/4.png)\n\n### 运用技术\n\n- **基于现有的 gulp 构建**\n\n![基于现有的 gulp 构建](https://jangdelong.github.io/blog_img/images/139mailbuildtool/5.png)\n\n目前的 gulp 构建通过命令行可执行独立任务任务有\n\n```bash\ngulp  # 构建全量包\ngulp deploy  # 构建全量包并自动部署到资源服务器\ngulp uploadStaticFiles # 部署静态资源到服务器\ngulp restartNodeServer # 部署并重启测试线的 node 服务\ngulp watch # 实时代码监听\n```\n\n说明：以上的命令除了部署并重启测试线的 node 服务之外，其他的任务都将加到本次的小工具上。\n\n- **Electron** \n\n最重要的东西要来了，它就是 Electron。在这之前，大家应该都有听说过 Node-Webkit （后期改名 NW.js）。NW.js 允许您直接从 DOM 层调用所有 Node.js 模块，并允许使用所有Web技术编写 PC 端的应用程序。而 Electron 也差不多类似这样的一种工具或者说框架。\n\nElectron 是允许使用 JavaScript，HTML 和 CSS 等 Web 技术创建 PC 应用程序的框架。 它负责跟系统打交道，使得开发者可以更加专注于应用本身。Electron 官网 [http://electron.atom.io/](http://electron.atom.io/) 。\n\nElectron 的主要特点有：\n\n1. *Web 技术。* Electron 是基于 Chromium 和 Node.js，因此您可以使用HTML，CSS和JavaScript构建应用程序。\n\n2. *开源。* Electron是由GitHub和活跃的贡献者社区维护的开源项目。\n\n3. *跨平台。* 兼容 Mac，Windows 和 Linux 系统，Electron 应用程序可在三个平台上构建和运行。\n\nElectron 快速入手：\n\n```bash\n# Clone the Quick Start repository\n$ git clone https://github.com/electron/electron-quick-start\n\n# Go into the repository\n$ cd electron-quick-start\n\n# Install the dependencies and run\n$ npm install && npm start\n```\n\n我为什么要用 Electron 而不用 NW.js ？\n\n1. 好奇心的我，想接触一下新事物；\n\n2. 剩下的理由主要是受了知乎一些吐槽的影响。《[用Nodejs开发桌面应用。NW.js 和 Electron 各有什么优缺点，你选择哪个？](https://www.zhihu.com/question/38854224?sort=created)》 \n\n有哪些公司或者 App 在用 Electron？\n\n其实，Electron 已经被微软，Facebook，Slack 和 Docker 等公司用来创建应用程序。成功案例有很多，比较有代表性的有如下这些：\n\n1. Atom 编辑器\n\n2. Slack（那个独角兽公司）\n\n3. Visual Studio Code\n\n4. WordPress 桌面版\n\n- **Bootstrap**\n\nUI 界面用的是 Bootstrap，简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。\n\n- **Q.js**\n\n由于本图形构建工具功能比较简单，所以想做一个单页面就好，但是又不想用像 vue 这样的框架，网上找了一下，发现 Q.js 这个路由框架。\n\nQ.js 是一个炒鸡轻量的前端单页路由框架。官网地址是 [http://mouto.org/#!54092](http://mouto.org/#!54092)，Github 地址是 [https://github.com/itorr/q.js](https://github.com/itorr/q.js)。\n\nQ.js 特点是轻量、快速、极简。为了更好的利用缓存以及更少的后端支援，Q.js放弃了 HTML5 State，通过#!格式的 url hach 重现了 url 路由功能。\n\n1. 无 JavaScript 库依托，可随意搭配使用；\n\n2. 源代码不及百行压缩后 834byte ；\n\n3. 支持 IE6+ Chrome Safari FF （其实 Electron 算是很新的浏览器内核，已经没必要考虑这一点）；\n\n4. 未做情况判定，使用 Q.js 必然会注册 window.Q 。\n\n来一段简单的 `Hello, World` 来简单演示：\n\n```html\n<!doctype>\n<html>\n<head>\n\t<meta charset=\"UTF-8\" >\n\t<title>演示</title>\n\t<script src=\"a.js\"></script>\n</head>\n\n<body>\n\t<div id=\"m\"></div>\n\t<script>\n\tQ.reg('home', function () {\n\t  document.getElementById('m').innerHTML = 'Hello, World!';\n\t});\n\tQ.init({\n\t  index: 'home' /* 首页地址 */\n\t});\n\t</script>\n</body>\n</html>\n```\n\n打开例子后，浏览器会从 `http://simple.com/` 跳转到 `http://simple.com/#!home` ，并且在页面显示 Hello World。\n\n### 技术实现\n\n首先，我们整体看一下，整个应用的目录结构：\n\n![项目结构](https://jangdelong.github.io/blog_img/images/139mailbuildtool/6.png)\n\n在执行 gulp 各个任务，主要用了 node.js 的 child_process 进程模块的 spawn 方法。`spawn` 使用如下：\n\n```javascript\nconst spawn    = require('child_process').spawn;\nconst gulpTask = spawn('gulp', [ 'default' ]);\n```\n\n对自定义构建，主要通过命令行传参的方式指定的 gulp 构建的 json 配置，从而实现文件的自定义构建，代码如下：\n\n```javascript\n// 前端获取选择的配置文件的文件名并以`,`号分隔\n// 如 --fileConf=/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_birthday.html.pack.js.json,/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_calendar.html.pack.js.json\n\nlet yargv = require('yargs').argv;\nvar fileConf = yargv.fileConf;\n```\n\n- **全量构建**\n\n全量构建里面包含“构建全量包”、“构建并部署”、“构建并监听”三个任务。实现代码如下：\n\n```javascript\n  //-- renders.js --\n  /**\n   * 构建全量包\n   * @description  gulp default\n   */\n  $E('btnBuildGlobal').onclick = function () {\n    executeBuild({\n      processingBarId: 'btnBuildGlobalProgress',\n      processingName: '构建全量包',\n      command: 'gulp'\n    });\n  };\n\n  /**\n   * 构建并部署\n   * @deacription gulp deploy\n   */\n  $E('btnBuildDeploy').onclick = function () {\n    executeBuild({\n      processingBarId: 'btnBuildDeployProgress',\n      processingName: '构建并部署',\n      command: 'gulp',\n      args: [ 'deploy' ]\n    });\n  };\n  \n  /**\n   * 构建并监听\n   * @description  gulp watch\n   */\n  $E('btnBuildWatch').onclick = function () {\n    var _this = this;\n\n    if (_this.dataset.watching === 'off') {\n      if (processingObject.processingGulp) return;\n      // 关闭其他线程的提示框\n      closeTips();\n      \n      processingObject.processingGulp = spawn('gulp', [ 'watch' ], {\n        cwd: config[$E('btnSwitchRDlines').dataset['switch']]\n      });\n      processingObject.processingName = '构建并监听';\n      processingObject.processingBarId = 'btnBuildWatchProgress';\n      _this.innerHTML = '点击不监听';\n      _this.dataset.watching = 'on';\n      $E('btnBuildWatchProgress').style.width = '100%';\n\n      processingObject.processingGulp.stdout.on('data', (data) => {\n        console.log(`stdout: ${data}`);\n      });\n      processingObject.processingGulp.on('close', (data) => {\n        console.log(`stdout close: ${data}`);\n        if (data === null) {\n          _this.innerHTML = '构建并监听';\n          _this.dataset.watching = 'off';\n        }\n      });\n    } else if (_this.dataset.watching === 'on') {\n      _this.innerHTML = '构建并监听';\n      _this.dataset.watching = 'off';\n      $E('btnBuildWatchProgress').style.width = '0%';\n\n      showTips('代码监听已取消！', 'alert-danger');\n      killCurrentProcessing();\n    }\n  };\n```\n\n- **JavaScript 自定义构建**\n\nJavaScript 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：\n\n```javascript\n  //-- renders.js --\n  /**\n   * 自定义构建JS\n   * @description gulp customBuildJs --fileConf\n   *\n   */\n  $E('btnBuildJS').onclick = function () {\n    var oCheckeds = $E('jsBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 js 文件！');\n      return;\n    }\n    \n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressJS',\n      processingName: 'JS文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildJs', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署JS\n   * @description gulp customBuildAndDeployJs --fileConf\n   *\n   */\n  $E('btnBuildDeployJS').onclick = function () {\n    var oCheckeds = $E('jsBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包部署的 js 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressJS',\n      processingName: 'JS文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployJs', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  \n  //-- gulpfile.js --\n  // 自定义构建打包 js \n// 参考：task uglifyJs\ngulp.task('customBuildJs', [ 'clean', 'compileTsFiles', 'updateJsConcatConfig' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n\n    return pump([\n        concatJsFiles({\n            concatConfig: fileConf.split(',')\n         }),\n        debug({title: \"concating --> \"}),\n        // sourcemaps.init(),\n        uglify(),\n        debug({title: \"uglifying --> \"}),\n        // sourcemaps.write(\"./\"),\n        gulp.dest( path.join(destDir))\n    ]);\n});\n// 自定义构建打包并部署 js\ngulp.task('customBuildAndDeployJs', [ 'customBuildJs' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 JavaScript 自定义构建，在 gulpfile.js 里面新加了 customBuildJs、customBuildAndDeployJs 两个 task。\n\n- **CSS 自定义构建**\n\nCSS 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：\n\n```javascript\n//-- renders.js --\n  /**\n   * 自定义构建CSS\n   * @description gulp customBuildCss --fileConf\n   *\n   */\n  $E('btnBuildCSS').onclick = function () {\n    var oCheckeds = $E('cssBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 css 文件配置');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressCSS',\n      processingName: 'CSS文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildCss', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署CSS\n   * @description gulp customBuildAndDeployCss --fileConf\n   *\n   */\n  $E('btnBuildDeployCSS').onclick = function () {\n    var oCheckeds = $E('cssBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 css 文件配置');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressCSS',\n      processingName: 'CSS文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployCss', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n\n//-- gulpfile.js --\n// 自定义构建 css\n// 参考 task compressCss\ngulp.task('customBuildCss', [ 'clean' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n\n    // 压缩css文件\n    // return concatCssFiles({concatConfig: './config/cssFiles/concatcss.json'})\n    return concatCssFiles({ concatConfig: fileConf })\n        .pipe(debug({title: 'concating css file --> '}))\n        .pipe(replaceImageVersion({\n            rootDir: html5Dir, \n            images: path.join(html5Dir, '/**/*.{png,gif,jpg,ico}')                    \n        }))\n        .pipe(debug({title: 'img url reversion file --> '}))        \n        .pipe(minifyCss({processImport: false}))\n        .pipe(debug({title: 'compress css file --> '}))\n        .pipe(gulp.dest(path.join(resourceDir, 'css')));\n});\n// 自定义构建并部署 css\ngulp.task('customBuildAndDeployCss', [ 'customBuildCss' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 CSS 自定义构建，在 gulpfile.js 里面新加了 customBuildCss、customBuildAndDeployCss 两个 task。\n\n\n- **HTML 自定义构建**\n\n```javascript\n  //-- renders.js --\n  /**\n   * 自定义构建HTML\n   * @description gulp customBuildHtml --fileConf\n   *\n   */\n  $E('btnBuildHTML').onclick = function () {\n    var oCheckeds = $E('htmlBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 html 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressHTML',\n      processingName: 'HTML文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildHtml', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署HTML\n   * @description gulp customBuildAndDeployHtml --fileConf\n   *\n   */\n  $E('btnBuildDeployHTML').onclick = function () {\n    var oCheckeds = $E('htmlBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 html 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressHTML',\n      processingName: 'HTML文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployHtml', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  \n  //-- gulpfile.js --\n  // 自定义构建 html\n// 参考 task htmlminFiles\ngulp.task('customBuildHtml', [ 'clean' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n    // fileConf = fileConf.replace(/(\\/mpost_operation\\/)|(\\/mpost_topic\\/)|(\\/mpost_v2\\/)|(\\/operation\\/)|(\\/umcupgrade\\/)|(\\/upPackage\\/)|(\\/weixin\\/)/, '/**/');\n    // 因为 html 目录下还包含一些二级目录的 html 文件\n    fileConf = fileConf.replace(/\\/html\\/\\w+\\//g, '/html/**/');\n\n    return gulp.src(fileConf.split(','))\n        .pipe(debug({title: 'htmlmin file --> '})) \n        .pipe(htmlmin())\n        .pipe(debug({title: 'minify-inline file --> '}))\n        .pipe(minifyInline())\n        .pipe(gulp.dest(resourceDir));            \n});\n// 自定义构建 html\ngulp.task('customBuildAndDeployHtml', [ 'customBuildHtml' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是 host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 HTML 自定义构建，在 gulpfile.js 里面新加了 customBuildHtml、customBuildAndDeployHtml 两个 task。\n\n### 总结\n\n- 工具可以随意切换139邮箱代码当前工作目录，全网（release）、灰度（beta）、测试线（trunk），甚至可以手动输入分支（branch）目录； \n\n- 工具执行任务是单线程，当前执行任务最多只有 1 个；即，如果当前正在构建时，点击其他按钮是无效的，应该等待当前任务执行完毕之后，才去点击执行其他任务。当然，你也可以右键终止当前任务；\n\n- 由于工具是基于 Electron 的，所以包比较大，这个你懂的。\n\n### 参考\n\n1. Electron 官网：[http://electron.atom.io/](http://electron.atom.io/)\n2. gulp 中文网：[http://www.gulpjs.com.cn/](http://www.gulpjs.com.cn/)\n3. Q.js Github项目地址：[https://github.com/itorr/q.js](https://github.com/itorr/q.js)\n\n\n\n\n\n","source":"_posts/139mailbuildtool.md","raw":"---\ntitle: 139邮箱图形化前端构建小工具\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-12-19\ntags:\n\t- gulp\n\t- Electron\n\t- 构建工具\nthumbnail:\nblogexcerpt: 自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足。比如像我这样的前端小白，我对命令行不是很敏感...\n\n---\n<!-- toc -->\n\n### 背景目的\n\n自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足：第一，比如像我这样的前端小白，我对命令行不是很敏感，甚至我不太喜欢敲一串串的命令行去执行一个任务，我希望能有一个图形化界面工具，能点点按钮什么的就可以完成一个构建任务，那该多爽。第二，目前的 gulp 构建还不支持自定义构建，这个自定义构建其实就是，比如说，我想打包某个目标文件（这个文件可能由好几个文件合并压缩而成），只要选择了这个文件的文件名，然后点击按钮，就可以帮你执行的任务，帮你构建好这个文件，甚至可以帮你部署到资源服务器上。\n\n简单的说就是：\n\n- 需要一个构建工具图形化界面\n- 需要自定义构建功能\n\n基于以上两个目的，所以就做了一个这样的图形化前端构建小工具。\n\n### 效果展示\n\n- **全量构建**\n \n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/1.png)\n \n- **JavaScript 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/2.png)\n\n- **CSS 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/3.png)\n\n- **HTML 增量构建**\n\n![全量构建效果图](https://jangdelong.github.io/blog_img/images/139mailbuildtool/4.png)\n\n### 运用技术\n\n- **基于现有的 gulp 构建**\n\n![基于现有的 gulp 构建](https://jangdelong.github.io/blog_img/images/139mailbuildtool/5.png)\n\n目前的 gulp 构建通过命令行可执行独立任务任务有\n\n```bash\ngulp  # 构建全量包\ngulp deploy  # 构建全量包并自动部署到资源服务器\ngulp uploadStaticFiles # 部署静态资源到服务器\ngulp restartNodeServer # 部署并重启测试线的 node 服务\ngulp watch # 实时代码监听\n```\n\n说明：以上的命令除了部署并重启测试线的 node 服务之外，其他的任务都将加到本次的小工具上。\n\n- **Electron** \n\n最重要的东西要来了，它就是 Electron。在这之前，大家应该都有听说过 Node-Webkit （后期改名 NW.js）。NW.js 允许您直接从 DOM 层调用所有 Node.js 模块，并允许使用所有Web技术编写 PC 端的应用程序。而 Electron 也差不多类似这样的一种工具或者说框架。\n\nElectron 是允许使用 JavaScript，HTML 和 CSS 等 Web 技术创建 PC 应用程序的框架。 它负责跟系统打交道，使得开发者可以更加专注于应用本身。Electron 官网 [http://electron.atom.io/](http://electron.atom.io/) 。\n\nElectron 的主要特点有：\n\n1. *Web 技术。* Electron 是基于 Chromium 和 Node.js，因此您可以使用HTML，CSS和JavaScript构建应用程序。\n\n2. *开源。* Electron是由GitHub和活跃的贡献者社区维护的开源项目。\n\n3. *跨平台。* 兼容 Mac，Windows 和 Linux 系统，Electron 应用程序可在三个平台上构建和运行。\n\nElectron 快速入手：\n\n```bash\n# Clone the Quick Start repository\n$ git clone https://github.com/electron/electron-quick-start\n\n# Go into the repository\n$ cd electron-quick-start\n\n# Install the dependencies and run\n$ npm install && npm start\n```\n\n我为什么要用 Electron 而不用 NW.js ？\n\n1. 好奇心的我，想接触一下新事物；\n\n2. 剩下的理由主要是受了知乎一些吐槽的影响。《[用Nodejs开发桌面应用。NW.js 和 Electron 各有什么优缺点，你选择哪个？](https://www.zhihu.com/question/38854224?sort=created)》 \n\n有哪些公司或者 App 在用 Electron？\n\n其实，Electron 已经被微软，Facebook，Slack 和 Docker 等公司用来创建应用程序。成功案例有很多，比较有代表性的有如下这些：\n\n1. Atom 编辑器\n\n2. Slack（那个独角兽公司）\n\n3. Visual Studio Code\n\n4. WordPress 桌面版\n\n- **Bootstrap**\n\nUI 界面用的是 Bootstrap，简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。\n\n- **Q.js**\n\n由于本图形构建工具功能比较简单，所以想做一个单页面就好，但是又不想用像 vue 这样的框架，网上找了一下，发现 Q.js 这个路由框架。\n\nQ.js 是一个炒鸡轻量的前端单页路由框架。官网地址是 [http://mouto.org/#!54092](http://mouto.org/#!54092)，Github 地址是 [https://github.com/itorr/q.js](https://github.com/itorr/q.js)。\n\nQ.js 特点是轻量、快速、极简。为了更好的利用缓存以及更少的后端支援，Q.js放弃了 HTML5 State，通过#!格式的 url hach 重现了 url 路由功能。\n\n1. 无 JavaScript 库依托，可随意搭配使用；\n\n2. 源代码不及百行压缩后 834byte ；\n\n3. 支持 IE6+ Chrome Safari FF （其实 Electron 算是很新的浏览器内核，已经没必要考虑这一点）；\n\n4. 未做情况判定，使用 Q.js 必然会注册 window.Q 。\n\n来一段简单的 `Hello, World` 来简单演示：\n\n```html\n<!doctype>\n<html>\n<head>\n\t<meta charset=\"UTF-8\" >\n\t<title>演示</title>\n\t<script src=\"a.js\"></script>\n</head>\n\n<body>\n\t<div id=\"m\"></div>\n\t<script>\n\tQ.reg('home', function () {\n\t  document.getElementById('m').innerHTML = 'Hello, World!';\n\t});\n\tQ.init({\n\t  index: 'home' /* 首页地址 */\n\t});\n\t</script>\n</body>\n</html>\n```\n\n打开例子后，浏览器会从 `http://simple.com/` 跳转到 `http://simple.com/#!home` ，并且在页面显示 Hello World。\n\n### 技术实现\n\n首先，我们整体看一下，整个应用的目录结构：\n\n![项目结构](https://jangdelong.github.io/blog_img/images/139mailbuildtool/6.png)\n\n在执行 gulp 各个任务，主要用了 node.js 的 child_process 进程模块的 spawn 方法。`spawn` 使用如下：\n\n```javascript\nconst spawn    = require('child_process').spawn;\nconst gulpTask = spawn('gulp', [ 'default' ]);\n```\n\n对自定义构建，主要通过命令行传参的方式指定的 gulp 构建的 json 配置，从而实现文件的自定义构建，代码如下：\n\n```javascript\n// 前端获取选择的配置文件的文件名并以`,`号分隔\n// 如 --fileConf=/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_birthday.html.pack.js.json,/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_calendar.html.pack.js.json\n\nlet yargv = require('yargs').argv;\nvar fileConf = yargv.fileConf;\n```\n\n- **全量构建**\n\n全量构建里面包含“构建全量包”、“构建并部署”、“构建并监听”三个任务。实现代码如下：\n\n```javascript\n  //-- renders.js --\n  /**\n   * 构建全量包\n   * @description  gulp default\n   */\n  $E('btnBuildGlobal').onclick = function () {\n    executeBuild({\n      processingBarId: 'btnBuildGlobalProgress',\n      processingName: '构建全量包',\n      command: 'gulp'\n    });\n  };\n\n  /**\n   * 构建并部署\n   * @deacription gulp deploy\n   */\n  $E('btnBuildDeploy').onclick = function () {\n    executeBuild({\n      processingBarId: 'btnBuildDeployProgress',\n      processingName: '构建并部署',\n      command: 'gulp',\n      args: [ 'deploy' ]\n    });\n  };\n  \n  /**\n   * 构建并监听\n   * @description  gulp watch\n   */\n  $E('btnBuildWatch').onclick = function () {\n    var _this = this;\n\n    if (_this.dataset.watching === 'off') {\n      if (processingObject.processingGulp) return;\n      // 关闭其他线程的提示框\n      closeTips();\n      \n      processingObject.processingGulp = spawn('gulp', [ 'watch' ], {\n        cwd: config[$E('btnSwitchRDlines').dataset['switch']]\n      });\n      processingObject.processingName = '构建并监听';\n      processingObject.processingBarId = 'btnBuildWatchProgress';\n      _this.innerHTML = '点击不监听';\n      _this.dataset.watching = 'on';\n      $E('btnBuildWatchProgress').style.width = '100%';\n\n      processingObject.processingGulp.stdout.on('data', (data) => {\n        console.log(`stdout: ${data}`);\n      });\n      processingObject.processingGulp.on('close', (data) => {\n        console.log(`stdout close: ${data}`);\n        if (data === null) {\n          _this.innerHTML = '构建并监听';\n          _this.dataset.watching = 'off';\n        }\n      });\n    } else if (_this.dataset.watching === 'on') {\n      _this.innerHTML = '构建并监听';\n      _this.dataset.watching = 'off';\n      $E('btnBuildWatchProgress').style.width = '0%';\n\n      showTips('代码监听已取消！', 'alert-danger');\n      killCurrentProcessing();\n    }\n  };\n```\n\n- **JavaScript 自定义构建**\n\nJavaScript 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：\n\n```javascript\n  //-- renders.js --\n  /**\n   * 自定义构建JS\n   * @description gulp customBuildJs --fileConf\n   *\n   */\n  $E('btnBuildJS').onclick = function () {\n    var oCheckeds = $E('jsBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 js 文件！');\n      return;\n    }\n    \n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressJS',\n      processingName: 'JS文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildJs', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署JS\n   * @description gulp customBuildAndDeployJs --fileConf\n   *\n   */\n  $E('btnBuildDeployJS').onclick = function () {\n    var oCheckeds = $E('jsBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包部署的 js 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressJS',\n      processingName: 'JS文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployJs', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  \n  //-- gulpfile.js --\n  // 自定义构建打包 js \n// 参考：task uglifyJs\ngulp.task('customBuildJs', [ 'clean', 'compileTsFiles', 'updateJsConcatConfig' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n\n    return pump([\n        concatJsFiles({\n            concatConfig: fileConf.split(',')\n         }),\n        debug({title: \"concating --> \"}),\n        // sourcemaps.init(),\n        uglify(),\n        debug({title: \"uglifying --> \"}),\n        // sourcemaps.write(\"./\"),\n        gulp.dest( path.join(destDir))\n    ]);\n});\n// 自定义构建打包并部署 js\ngulp.task('customBuildAndDeployJs', [ 'customBuildJs' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 JavaScript 自定义构建，在 gulpfile.js 里面新加了 customBuildJs、customBuildAndDeployJs 两个 task。\n\n- **CSS 自定义构建**\n\nCSS 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：\n\n```javascript\n//-- renders.js --\n  /**\n   * 自定义构建CSS\n   * @description gulp customBuildCss --fileConf\n   *\n   */\n  $E('btnBuildCSS').onclick = function () {\n    var oCheckeds = $E('cssBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 css 文件配置');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressCSS',\n      processingName: 'CSS文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildCss', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署CSS\n   * @description gulp customBuildAndDeployCss --fileConf\n   *\n   */\n  $E('btnBuildDeployCSS').onclick = function () {\n    var oCheckeds = $E('cssBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 css 文件配置');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressCSS',\n      processingName: 'CSS文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployCss', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n\n//-- gulpfile.js --\n// 自定义构建 css\n// 参考 task compressCss\ngulp.task('customBuildCss', [ 'clean' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n\n    // 压缩css文件\n    // return concatCssFiles({concatConfig: './config/cssFiles/concatcss.json'})\n    return concatCssFiles({ concatConfig: fileConf })\n        .pipe(debug({title: 'concating css file --> '}))\n        .pipe(replaceImageVersion({\n            rootDir: html5Dir, \n            images: path.join(html5Dir, '/**/*.{png,gif,jpg,ico}')                    \n        }))\n        .pipe(debug({title: 'img url reversion file --> '}))        \n        .pipe(minifyCss({processImport: false}))\n        .pipe(debug({title: 'compress css file --> '}))\n        .pipe(gulp.dest(path.join(resourceDir, 'css')));\n});\n// 自定义构建并部署 css\ngulp.task('customBuildAndDeployCss', [ 'customBuildCss' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 CSS 自定义构建，在 gulpfile.js 里面新加了 customBuildCss、customBuildAndDeployCss 两个 task。\n\n\n- **HTML 自定义构建**\n\n```javascript\n  //-- renders.js --\n  /**\n   * 自定义构建HTML\n   * @description gulp customBuildHtml --fileConf\n   *\n   */\n  $E('btnBuildHTML').onclick = function () {\n    var oCheckeds = $E('htmlBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 html 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressHTML',\n      processingName: 'HTML文件自定义构建',\n      command: 'gulp',\n      args: [ 'customBuildHtml', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  /**\n   * 自定义构建并自动部署HTML\n   * @description gulp customBuildAndDeployHtml --fileConf\n   *\n   */\n  $E('btnBuildDeployHTML').onclick = function () {\n    var oCheckeds = $E('htmlBuildContainerContent').querySelectorAll('input[type=\"checkbox\"]:checked');\n    console.log('oCheckeds =>', oCheckeds);\n    if (!oCheckeds.length) {\n      alert('请选择要打包的 html 文件');\n      return;\n    }\n\n    let fileConf = [];\n    for (var i = 0, len = oCheckeds.length; i < len; ++i) {\n      fileConf.push(oCheckeds[i].value);\n    }\n    console.log('fileConf =>', fileConf.join(','));\n    executeBuild({\n      processingBarId: 'btnBuildProgressHTML',\n      processingName: 'HTML文件自定义构建并自动部署',\n      command: 'gulp',\n      args: [ 'customBuildAndDeployHtml', '--fileConf=' + fileConf.join(',') ]\n    });\n  };\n  \n  //-- gulpfile.js --\n  // 自定义构建 html\n// 参考 task htmlminFiles\ngulp.task('customBuildHtml', [ 'clean' ], function () {\n    console.log(`yargv.fileConf => ${yargv.fileConf}`);\n    var fileConf = yargv.fileConf;\n    // fileConf = fileConf.replace(/(\\/mpost_operation\\/)|(\\/mpost_topic\\/)|(\\/mpost_v2\\/)|(\\/operation\\/)|(\\/umcupgrade\\/)|(\\/upPackage\\/)|(\\/weixin\\/)/, '/**/');\n    // 因为 html 目录下还包含一些二级目录的 html 文件\n    fileConf = fileConf.replace(/\\/html\\/\\w+\\//g, '/html/**/');\n\n    return gulp.src(fileConf.split(','))\n        .pipe(debug({title: 'htmlmin file --> '})) \n        .pipe(htmlmin())\n        .pipe(debug({title: 'minify-inline file --> '}))\n        .pipe(minifyInline())\n        .pipe(gulp.dest(resourceDir));            \n});\n// 自定义构建 html\ngulp.task('customBuildAndDeployHtml', [ 'customBuildHtml' ], function () {\n    let conn = ftp.create( {\n        host:     '此处是 host ip',\n        user:     'root',\n        password: '此处是密码',\n        parallel: 10,\n        log:      gutil.log\n        // debug: gutil.log\n    } );\n\n    gutil.log(\"----------**********-----------\");\n    gutil.log(gutil.colors.magenta(\"---------上传静态资源文件--------\"));\n    gutil.log(\"----------**********-----------\");\n\n    // gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高\n    // turn off buffering in gulp.src for best performance\n    return gulp.src( path.join( resourceDir, \"**/*\"), { buffer: false } )\n        .pipe( conn.dest('/home/richmail/nginx/htdocs/html5') );\n});\n```\n\n对于 HTML 自定义构建，在 gulpfile.js 里面新加了 customBuildHtml、customBuildAndDeployHtml 两个 task。\n\n### 总结\n\n- 工具可以随意切换139邮箱代码当前工作目录，全网（release）、灰度（beta）、测试线（trunk），甚至可以手动输入分支（branch）目录； \n\n- 工具执行任务是单线程，当前执行任务最多只有 1 个；即，如果当前正在构建时，点击其他按钮是无效的，应该等待当前任务执行完毕之后，才去点击执行其他任务。当然，你也可以右键终止当前任务；\n\n- 由于工具是基于 Electron 的，所以包比较大，这个你懂的。\n\n### 参考\n\n1. Electron 官网：[http://electron.atom.io/](http://electron.atom.io/)\n2. gulp 中文网：[http://www.gulpjs.com.cn/](http://www.gulpjs.com.cn/)\n3. Q.js Github项目地址：[https://github.com/itorr/q.js](https://github.com/itorr/q.js)\n\n\n\n\n\n","slug":"139mailbuildtool","published":1,"updated":"2016-12-19T00:00:00.000Z","_id":"cmduj3n1j0001k8sv3wpxelhb","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E8%83%8C%E6%99%AF%E7%9B%AE%E7%9A%84\">背景目的</a></li>\n<li><a href=\"#%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA\">效果展示</a></li>\n<li><a href=\"#%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF\">运用技术</a></li>\n<li><a href=\"#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0\">技术实现</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"背景目的\">背景目的</span></h3><p>自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足：第一，比如像我这样的前端小白，我对命令行不是很敏感，甚至我不太喜欢敲一串串的命令行去执行一个任务，我希望能有一个图形化界面工具，能点点按钮什么的就可以完成一个构建任务，那该多爽。第二，目前的 gulp 构建还不支持自定义构建，这个自定义构建其实就是，比如说，我想打包某个目标文件（这个文件可能由好几个文件合并压缩而成），只要选择了这个文件的文件名，然后点击按钮，就可以帮你执行的任务，帮你构建好这个文件，甚至可以帮你部署到资源服务器上。</p>\n<p>简单的说就是：</p>\n<ul>\n<li>需要一个构建工具图形化界面</li>\n<li>需要自定义构建功能</li>\n</ul>\n<p>基于以上两个目的，所以就做了一个这样的图形化前端构建小工具。</p>\n<h3><span id=\"效果展示\">效果展示</span></h3><ul>\n<li><strong>全量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/1.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>JavaScript 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/2.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>CSS 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/3.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>HTML 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/4.png\" alt=\"全量构建效果图\"></p>\n<h3><span id=\"运用技术\">运用技术</span></h3><ul>\n<li><strong>基于现有的 gulp 构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/5.png\" alt=\"基于现有的 gulp 构建\"></p>\n<p>目前的 gulp 构建通过命令行可执行独立任务任务有</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp  <span class=\"comment\"># 构建全量包</span></span><br><span class=\"line\">gulp deploy  <span class=\"comment\"># 构建全量包并自动部署到资源服务器</span></span><br><span class=\"line\">gulp uploadStaticFiles <span class=\"comment\"># 部署静态资源到服务器</span></span><br><span class=\"line\">gulp restartNodeServer <span class=\"comment\"># 部署并重启测试线的 node 服务</span></span><br><span class=\"line\">gulp watch <span class=\"comment\"># 实时代码监听</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：以上的命令除了部署并重启测试线的 node 服务之外，其他的任务都将加到本次的小工具上。</p>\n<ul>\n<li><strong>Electron</strong></li>\n</ul>\n<p>最重要的东西要来了，它就是 Electron。在这之前，大家应该都有听说过 Node-Webkit （后期改名 NW.js）。NW.js 允许您直接从 DOM 层调用所有 Node.js 模块，并允许使用所有Web技术编写 PC 端的应用程序。而 Electron 也差不多类似这样的一种工具或者说框架。</p>\n<p>Electron 是允许使用 JavaScript，HTML 和 CSS 等 Web 技术创建 PC 应用程序的框架。 它负责跟系统打交道，使得开发者可以更加专注于应用本身。Electron 官网 <a href=\"http://electron.atom.io/\">http://electron.atom.io/</a> 。</p>\n<p>Electron 的主要特点有：</p>\n<ol>\n<li><p><em>Web 技术。</em> Electron 是基于 Chromium 和 Node.js，因此您可以使用HTML，CSS和JavaScript构建应用程序。</p>\n</li>\n<li><p><em>开源。</em> Electron是由GitHub和活跃的贡献者社区维护的开源项目。</p>\n</li>\n<li><p><em>跨平台。</em> 兼容 Mac，Windows 和 Linux 系统，Electron 应用程序可在三个平台上构建和运行。</p>\n</li>\n</ol>\n<p>Electron 快速入手：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Clone the Quick Start repository</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/electron/electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Go into the repository</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the dependencies and run</span></span><br><span class=\"line\">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure>\n\n<p>我为什么要用 Electron 而不用 NW.js ？</p>\n<ol>\n<li><p>好奇心的我，想接触一下新事物；</p>\n</li>\n<li><p>剩下的理由主要是受了知乎一些吐槽的影响。《<a href=\"https://www.zhihu.com/question/38854224?sort=created\">用Nodejs开发桌面应用。NW.js 和 Electron 各有什么优缺点，你选择哪个？</a>》</p>\n</li>\n</ol>\n<p>有哪些公司或者 App 在用 Electron？</p>\n<p>其实，Electron 已经被微软，Facebook，Slack 和 Docker 等公司用来创建应用程序。成功案例有很多，比较有代表性的有如下这些：</p>\n<ol>\n<li><p>Atom 编辑器</p>\n</li>\n<li><p>Slack（那个独角兽公司）</p>\n</li>\n<li><p>Visual Studio Code</p>\n</li>\n<li><p>WordPress 桌面版</p>\n</li>\n</ol>\n<ul>\n<li><strong>Bootstrap</strong></li>\n</ul>\n<p>UI 界面用的是 Bootstrap，简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</p>\n<ul>\n<li><strong>Q.js</strong></li>\n</ul>\n<p>由于本图形构建工具功能比较简单，所以想做一个单页面就好，但是又不想用像 vue 这样的框架，网上找了一下，发现 Q.js 这个路由框架。</p>\n<p>Q.js 是一个炒鸡轻量的前端单页路由框架。官网地址是 <a href=\"http://mouto.org/#!54092\">http://mouto.org/#!54092</a>，Github 地址是 <a href=\"https://github.com/itorr/q.js\">https://github.com/itorr/q.js</a>。</p>\n<p>Q.js 特点是轻量、快速、极简。为了更好的利用缓存以及更少的后端支援，Q.js放弃了 HTML5 State，通过#!格式的 url hach 重现了 url 路由功能。</p>\n<ol>\n<li><p>无 JavaScript 库依托，可随意搭配使用；</p>\n</li>\n<li><p>源代码不及百行压缩后 834byte ；</p>\n</li>\n<li><p>支持 IE6+ Chrome Safari FF （其实 Electron 算是很新的浏览器内核，已经没必要考虑这一点）；</p>\n</li>\n<li><p>未做情况判定，使用 Q.js 必然会注册 window.Q 。</p>\n</li>\n</ol>\n<p>来一段简单的 <code>Hello, World</code> 来简单演示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;m&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\tQ.<span class=\"title function_\">reg</span>(<span class=\"string\">&#x27;home&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;m&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;Hello, World!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\tQ.<span class=\"title function_\">init</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"attr\">index</span>: <span class=\"string\">&#x27;home&#x27;</span> <span class=\"comment\">/* 首页地址 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开例子后，浏览器会从 <code>http://simple.com/</code> 跳转到 <code>http://simple.com/#!home</code> ，并且在页面显示 Hello World。</p>\n<h3><span id=\"技术实现\">技术实现</span></h3><p>首先，我们整体看一下，整个应用的目录结构：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/6.png\" alt=\"项目结构\"></p>\n<p>在执行 gulp 各个任务，主要用了 node.js 的 child_process 进程模块的 spawn 方法。<code>spawn</code> 使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spawn    = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpTask = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;gulp&#x27;</span>, [ <span class=\"string\">&#x27;default&#x27;</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>对自定义构建，主要通过命令行传参的方式指定的 gulp 构建的 json 配置，从而实现文件的自定义构建，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前端获取选择的配置文件的文件名并以`,`号分隔</span></span><br><span class=\"line\"><span class=\"comment\">// 如 --fileConf=/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_birthday.html.pack.js.json,/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_calendar.html.pack.js.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> yargv = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yargs&#x27;</span>).<span class=\"property\">argv</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>全量构建</strong></li>\n</ul>\n<p>全量构建里面包含“构建全量包”、“构建并部署”、“构建并监听”三个任务。实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建全量包</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>  gulp default</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildGlobal&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildGlobalProgress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;构建全量包&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建并部署</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@deacription</span> gulp deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildDeploy&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildDeployProgress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;构建并部署&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;deploy&#x27;</span> ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建并监听</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>  gulp watch</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildWatch&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> === <span class=\"string\">&#x27;off&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (processingObject.<span class=\"property\">processingGulp</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭其他线程的提示框</span></span><br><span class=\"line\">    <span class=\"title function_\">closeTips</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span> = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;gulp&#x27;</span>, [ <span class=\"string\">&#x27;watch&#x27;</span> ], &#123;</span><br><span class=\"line\">      <span class=\"attr\">cwd</span>: config[$E(<span class=\"string\">&#x27;btnSwitchRDlines&#x27;</span>).<span class=\"property\">dataset</span>[<span class=\"string\">&#x27;switch&#x27;</span>]]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingName</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingBarId</span> = <span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;点击不监听&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\">    $E(<span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span>.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout close: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">        _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;off&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> === <span class=\"string\">&#x27;on&#x27;</span>) &#123;</span><br><span class=\"line\">    _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;off&#x27;</span>;</span><br><span class=\"line\">    $E(<span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;0%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">showTips</span>(<span class=\"string\">&#x27;代码监听已取消！&#x27;</span>, <span class=\"string\">&#x27;alert-danger&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">killCurrentProcessing</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>JavaScript 自定义构建</strong></li>\n</ul>\n<p>JavaScript 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建JS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildJs --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildJS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;jsBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 js 文件！&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressJS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;JS文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildJs&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署JS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployJs --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployJS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;jsBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包部署的 js 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressJS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;JS文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployJs&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\">  <span class=\"comment\">// 自定义构建打包 js </span></span><br><span class=\"line\"><span class=\"comment\">// 参考：task uglifyJs</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildJs&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"string\">&#x27;compileTsFiles&#x27;</span>, <span class=\"string\">&#x27;updateJsConcatConfig&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">pump</span>([</span><br><span class=\"line\">        <span class=\"title function_\">concatJsFiles</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">concatConfig</span>: fileConf.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        <span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&quot;concating --&gt; &quot;</span>&#125;),</span><br><span class=\"line\">        <span class=\"comment\">// sourcemaps.init(),</span></span><br><span class=\"line\">        <span class=\"title function_\">uglify</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&quot;uglifying --&gt; &quot;</span>&#125;),</span><br><span class=\"line\">        <span class=\"comment\">// sourcemaps.write(&quot;./&quot;),</span></span><br><span class=\"line\">        gulp.<span class=\"title function_\">dest</span>( path.<span class=\"title function_\">join</span>(destDir))</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建打包并部署 js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployJs&#x27;</span>, [ <span class=\"string\">&#x27;customBuildJs&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 JavaScript 自定义构建，在 gulpfile.js 里面新加了 customBuildJs、customBuildAndDeployJs 两个 task。</p>\n<ul>\n<li><strong>CSS 自定义构建</strong></li>\n</ul>\n<p>CSS 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建CSS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildCss --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildCSS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;cssBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 css 文件配置&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressCSS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;CSS文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildCss&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署CSS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployCss --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployCSS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;cssBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 css 文件配置&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressCSS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;CSS文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployCss&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义构建 css</span></span><br><span class=\"line\"><span class=\"comment\">// 参考 task compressCss</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildCss&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 压缩css文件</span></span><br><span class=\"line\">    <span class=\"comment\">// return concatCssFiles(&#123;concatConfig: &#x27;./config/cssFiles/concatcss.json&#x27;&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">concatCssFiles</span>(&#123; <span class=\"attr\">concatConfig</span>: fileConf &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;concating css file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">replaceImageVersion</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">rootDir</span>: html5Dir, </span><br><span class=\"line\">            <span class=\"attr\">images</span>: path.<span class=\"title function_\">join</span>(html5Dir, <span class=\"string\">&#x27;/**/*.&#123;png,gif,jpg,ico&#125;&#x27;</span>)                    </span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;img url reversion file --&gt; &#x27;</span>&#125;))        </span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifyCss</span>(&#123;<span class=\"attr\">processImport</span>: <span class=\"literal\">false</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;compress css file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(path.<span class=\"title function_\">join</span>(resourceDir, <span class=\"string\">&#x27;css&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建并部署 css</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployCss&#x27;</span>, [ <span class=\"string\">&#x27;customBuildCss&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 CSS 自定义构建，在 gulpfile.js 里面新加了 customBuildCss、customBuildAndDeployCss 两个 task。</p>\n<ul>\n<li><strong>HTML 自定义构建</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建HTML</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildHtml --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildHTML&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;htmlBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 html 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressHTML&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;HTML文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildHtml&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署HTML</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployHtml --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployHTML&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;htmlBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 html 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressHTML&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;HTML文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployHtml&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\">  <span class=\"comment\">// 自定义构建 html</span></span><br><span class=\"line\"><span class=\"comment\">// 参考 task htmlminFiles</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildHtml&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fileConf = fileConf.replace(/(\\/mpost_operation\\/)|(\\/mpost_topic\\/)|(\\/mpost_v2\\/)|(\\/operation\\/)|(\\/umcupgrade\\/)|(\\/upPackage\\/)|(\\/weixin\\/)/, &#x27;/**/&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为 html 目录下还包含一些二级目录的 html 文件</span></span><br><span class=\"line\">    fileConf = fileConf.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\/html\\/\\w+\\//g</span>, <span class=\"string\">&#x27;/html/**/&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(fileConf.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;htmlmin file --&gt; &#x27;</span>&#125;)) </span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;minify-inline file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifyInline</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(resourceDir));            </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建 html</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployHtml&#x27;</span>, [ <span class=\"string\">&#x27;customBuildHtml&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是 host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 HTML 自定义构建，在 gulpfile.js 里面新加了 customBuildHtml、customBuildAndDeployHtml 两个 task。</p>\n<h3><span id=\"总结\">总结</span></h3><ul>\n<li><p>工具可以随意切换139邮箱代码当前工作目录，全网（release）、灰度（beta）、测试线（trunk），甚至可以手动输入分支（branch）目录； </p>\n</li>\n<li><p>工具执行任务是单线程，当前执行任务最多只有 1 个；即，如果当前正在构建时，点击其他按钮是无效的，应该等待当前任务执行完毕之后，才去点击执行其他任务。当然，你也可以右键终止当前任务；</p>\n</li>\n<li><p>由于工具是基于 Electron 的，所以包比较大，这个你懂的。</p>\n</li>\n</ul>\n<h3><span id=\"参考\">参考</span></h3><ol>\n<li>Electron 官网：<a href=\"http://electron.atom.io/\">http://electron.atom.io/</a></li>\n<li>gulp 中文网：<a href=\"http://www.gulpjs.com.cn/\">http://www.gulpjs.com.cn/</a></li>\n<li>Q.js Github项目地址：<a href=\"https://github.com/itorr/q.js\">https://github.com/itorr/q.js</a></li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E8%83%8C%E6%99%AF%E7%9B%AE%E7%9A%84\">背景目的</a></li>\n<li><a href=\"#%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA\">效果展示</a></li>\n<li><a href=\"#%E8%BF%90%E7%94%A8%E6%8A%80%E6%9C%AF\">运用技术</a></li>\n<li><a href=\"#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0\">技术实现</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"背景目的\"><a href=\"#背景目的\" class=\"headerlink\" title=\"背景目的\"></a>背景目的</h3><p>自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足：第一，比如像我这样的前端小白，我对命令行不是很敏感，甚至我不太喜欢敲一串串的命令行去执行一个任务，我希望能有一个图形化界面工具，能点点按钮什么的就可以完成一个构建任务，那该多爽。第二，目前的 gulp 构建还不支持自定义构建，这个自定义构建其实就是，比如说，我想打包某个目标文件（这个文件可能由好几个文件合并压缩而成），只要选择了这个文件的文件名，然后点击按钮，就可以帮你执行的任务，帮你构建好这个文件，甚至可以帮你部署到资源服务器上。</p>\n<p>简单的说就是：</p>\n<ul>\n<li>需要一个构建工具图形化界面</li>\n<li>需要自定义构建功能</li>\n</ul>\n<p>基于以上两个目的，所以就做了一个这样的图形化前端构建小工具。</p>\n<h3 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h3><ul>\n<li><strong>全量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/1.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>JavaScript 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/2.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>CSS 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/3.png\" alt=\"全量构建效果图\"></p>\n<ul>\n<li><strong>HTML 增量构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/4.png\" alt=\"全量构建效果图\"></p>\n<h3 id=\"运用技术\"><a href=\"#运用技术\" class=\"headerlink\" title=\"运用技术\"></a>运用技术</h3><ul>\n<li><strong>基于现有的 gulp 构建</strong></li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/5.png\" alt=\"基于现有的 gulp 构建\"></p>\n<p>目前的 gulp 构建通过命令行可执行独立任务任务有</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp  <span class=\"comment\"># 构建全量包</span></span><br><span class=\"line\">gulp deploy  <span class=\"comment\"># 构建全量包并自动部署到资源服务器</span></span><br><span class=\"line\">gulp uploadStaticFiles <span class=\"comment\"># 部署静态资源到服务器</span></span><br><span class=\"line\">gulp restartNodeServer <span class=\"comment\"># 部署并重启测试线的 node 服务</span></span><br><span class=\"line\">gulp watch <span class=\"comment\"># 实时代码监听</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：以上的命令除了部署并重启测试线的 node 服务之外，其他的任务都将加到本次的小工具上。</p>\n<ul>\n<li><strong>Electron</strong></li>\n</ul>\n<p>最重要的东西要来了，它就是 Electron。在这之前，大家应该都有听说过 Node-Webkit （后期改名 NW.js）。NW.js 允许您直接从 DOM 层调用所有 Node.js 模块，并允许使用所有Web技术编写 PC 端的应用程序。而 Electron 也差不多类似这样的一种工具或者说框架。</p>\n<p>Electron 是允许使用 JavaScript，HTML 和 CSS 等 Web 技术创建 PC 应用程序的框架。 它负责跟系统打交道，使得开发者可以更加专注于应用本身。Electron 官网 <a href=\"http://electron.atom.io/\">http://electron.atom.io/</a> 。</p>\n<p>Electron 的主要特点有：</p>\n<ol>\n<li><p><em>Web 技术。</em> Electron 是基于 Chromium 和 Node.js，因此您可以使用HTML，CSS和JavaScript构建应用程序。</p>\n</li>\n<li><p><em>开源。</em> Electron是由GitHub和活跃的贡献者社区维护的开源项目。</p>\n</li>\n<li><p><em>跨平台。</em> 兼容 Mac，Windows 和 Linux 系统，Electron 应用程序可在三个平台上构建和运行。</p>\n</li>\n</ol>\n<p>Electron 快速入手：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Clone the Quick Start repository</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/electron/electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Go into the repository</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> electron-quick-start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install the dependencies and run</span></span><br><span class=\"line\">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure>\n\n<p>我为什么要用 Electron 而不用 NW.js ？</p>\n<ol>\n<li><p>好奇心的我，想接触一下新事物；</p>\n</li>\n<li><p>剩下的理由主要是受了知乎一些吐槽的影响。《<a href=\"https://www.zhihu.com/question/38854224?sort=created\">用Nodejs开发桌面应用。NW.js 和 Electron 各有什么优缺点，你选择哪个？</a>》</p>\n</li>\n</ol>\n<p>有哪些公司或者 App 在用 Electron？</p>\n<p>其实，Electron 已经被微软，Facebook，Slack 和 Docker 等公司用来创建应用程序。成功案例有很多，比较有代表性的有如下这些：</p>\n<ol>\n<li><p>Atom 编辑器</p>\n</li>\n<li><p>Slack（那个独角兽公司）</p>\n</li>\n<li><p>Visual Studio Code</p>\n</li>\n<li><p>WordPress 桌面版</p>\n</li>\n</ol>\n<ul>\n<li><strong>Bootstrap</strong></li>\n</ul>\n<p>UI 界面用的是 Bootstrap，简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</p>\n<ul>\n<li><strong>Q.js</strong></li>\n</ul>\n<p>由于本图形构建工具功能比较简单，所以想做一个单页面就好，但是又不想用像 vue 这样的框架，网上找了一下，发现 Q.js 这个路由框架。</p>\n<p>Q.js 是一个炒鸡轻量的前端单页路由框架。官网地址是 <a href=\"http://mouto.org/#!54092\">http://mouto.org/#!54092</a>，Github 地址是 <a href=\"https://github.com/itorr/q.js\">https://github.com/itorr/q.js</a>。</p>\n<p>Q.js 特点是轻量、快速、极简。为了更好的利用缓存以及更少的后端支援，Q.js放弃了 HTML5 State，通过#!格式的 url hach 重现了 url 路由功能。</p>\n<ol>\n<li><p>无 JavaScript 库依托，可随意搭配使用；</p>\n</li>\n<li><p>源代码不及百行压缩后 834byte ；</p>\n</li>\n<li><p>支持 IE6+ Chrome Safari FF （其实 Electron 算是很新的浏览器内核，已经没必要考虑这一点）；</p>\n</li>\n<li><p>未做情况判定，使用 Q.js 必然会注册 window.Q 。</p>\n</li>\n</ol>\n<p>来一段简单的 <code>Hello, World</code> 来简单演示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;m&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\tQ.<span class=\"title function_\">reg</span>(<span class=\"string\">&#x27;home&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;m&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;Hello, World!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\tQ.<span class=\"title function_\">init</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"attr\">index</span>: <span class=\"string\">&#x27;home&#x27;</span> <span class=\"comment\">/* 首页地址 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开例子后，浏览器会从 <code>http://simple.com/</code> 跳转到 <code>http://simple.com/#!home</code> ，并且在页面显示 Hello World。</p>\n<h3 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h3><p>首先，我们整体看一下，整个应用的目录结构：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/139mailbuildtool/6.png\" alt=\"项目结构\"></p>\n<p>在执行 gulp 各个任务，主要用了 node.js 的 child_process 进程模块的 spawn 方法。<code>spawn</code> 使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spawn    = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpTask = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;gulp&#x27;</span>, [ <span class=\"string\">&#x27;default&#x27;</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>对自定义构建，主要通过命令行传参的方式指定的 gulp 构建的 json 配置，从而实现文件的自定义构建，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前端获取选择的配置文件的文件名并以`,`号分隔</span></span><br><span class=\"line\"><span class=\"comment\">// 如 --fileConf=/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_birthday.html.pack.js.json,/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_calendar.html.pack.js.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> yargv = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yargs&#x27;</span>).<span class=\"property\">argv</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>全量构建</strong></li>\n</ul>\n<p>全量构建里面包含“构建全量包”、“构建并部署”、“构建并监听”三个任务。实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建全量包</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>  gulp default</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildGlobal&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildGlobalProgress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;构建全量包&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建并部署</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@deacription</span> gulp deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildDeploy&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildDeployProgress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;构建并部署&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;deploy&#x27;</span> ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建并监听</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>  gulp watch</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">$E(<span class=\"string\">&#x27;btnBuildWatch&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> === <span class=\"string\">&#x27;off&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (processingObject.<span class=\"property\">processingGulp</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭其他线程的提示框</span></span><br><span class=\"line\">    <span class=\"title function_\">closeTips</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span> = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;gulp&#x27;</span>, [ <span class=\"string\">&#x27;watch&#x27;</span> ], &#123;</span><br><span class=\"line\">      <span class=\"attr\">cwd</span>: config[$E(<span class=\"string\">&#x27;btnSwitchRDlines&#x27;</span>).<span class=\"property\">dataset</span>[<span class=\"string\">&#x27;switch&#x27;</span>]]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingName</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingBarId</span> = <span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;点击不监听&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;on&#x27;</span>;</span><br><span class=\"line\">    $E(<span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span>.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    processingObject.<span class=\"property\">processingGulp</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout close: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">        _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;off&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> === <span class=\"string\">&#x27;on&#x27;</span>) &#123;</span><br><span class=\"line\">    _this.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;构建并监听&#x27;</span>;</span><br><span class=\"line\">    _this.<span class=\"property\">dataset</span>.<span class=\"property\">watching</span> = <span class=\"string\">&#x27;off&#x27;</span>;</span><br><span class=\"line\">    $E(<span class=\"string\">&#x27;btnBuildWatchProgress&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;0%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">showTips</span>(<span class=\"string\">&#x27;代码监听已取消！&#x27;</span>, <span class=\"string\">&#x27;alert-danger&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">killCurrentProcessing</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>JavaScript 自定义构建</strong></li>\n</ul>\n<p>JavaScript 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建JS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildJs --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildJS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;jsBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 js 文件！&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressJS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;JS文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildJs&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署JS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployJs --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployJS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;jsBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包部署的 js 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressJS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;JS文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployJs&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\">  <span class=\"comment\">// 自定义构建打包 js </span></span><br><span class=\"line\"><span class=\"comment\">// 参考：task uglifyJs</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildJs&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"string\">&#x27;compileTsFiles&#x27;</span>, <span class=\"string\">&#x27;updateJsConcatConfig&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">pump</span>([</span><br><span class=\"line\">        <span class=\"title function_\">concatJsFiles</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">concatConfig</span>: fileConf.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        <span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&quot;concating --&gt; &quot;</span>&#125;),</span><br><span class=\"line\">        <span class=\"comment\">// sourcemaps.init(),</span></span><br><span class=\"line\">        <span class=\"title function_\">uglify</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&quot;uglifying --&gt; &quot;</span>&#125;),</span><br><span class=\"line\">        <span class=\"comment\">// sourcemaps.write(&quot;./&quot;),</span></span><br><span class=\"line\">        gulp.<span class=\"title function_\">dest</span>( path.<span class=\"title function_\">join</span>(destDir))</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建打包并部署 js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployJs&#x27;</span>, [ <span class=\"string\">&#x27;customBuildJs&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 JavaScript 自定义构建，在 gulpfile.js 里面新加了 customBuildJs、customBuildAndDeployJs 两个 task。</p>\n<ul>\n<li><strong>CSS 自定义构建</strong></li>\n</ul>\n<p>CSS 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建CSS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildCss --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildCSS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;cssBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 css 文件配置&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressCSS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;CSS文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildCss&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署CSS</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployCss --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployCSS&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;cssBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 css 文件配置&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressCSS&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;CSS文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployCss&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义构建 css</span></span><br><span class=\"line\"><span class=\"comment\">// 参考 task compressCss</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildCss&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 压缩css文件</span></span><br><span class=\"line\">    <span class=\"comment\">// return concatCssFiles(&#123;concatConfig: &#x27;./config/cssFiles/concatcss.json&#x27;&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">concatCssFiles</span>(&#123; <span class=\"attr\">concatConfig</span>: fileConf &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;concating css file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">replaceImageVersion</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">rootDir</span>: html5Dir, </span><br><span class=\"line\">            <span class=\"attr\">images</span>: path.<span class=\"title function_\">join</span>(html5Dir, <span class=\"string\">&#x27;/**/*.&#123;png,gif,jpg,ico&#125;&#x27;</span>)                    </span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;img url reversion file --&gt; &#x27;</span>&#125;))        </span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifyCss</span>(&#123;<span class=\"attr\">processImport</span>: <span class=\"literal\">false</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;compress css file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(path.<span class=\"title function_\">join</span>(resourceDir, <span class=\"string\">&#x27;css&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建并部署 css</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployCss&#x27;</span>, [ <span class=\"string\">&#x27;customBuildCss&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 CSS 自定义构建，在 gulpfile.js 里面新加了 customBuildCss、customBuildAndDeployCss 两个 task。</p>\n<ul>\n<li><strong>HTML 自定义构建</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//-- renders.js --</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建HTML</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildHtml --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildHTML&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;htmlBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 html 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressHTML&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;HTML文件自定义构建&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildHtml&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自定义构建并自动部署HTML</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@description</span> gulp customBuildAndDeployHtml --fileConf</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  $E(<span class=\"string\">&#x27;btnBuildDeployHTML&#x27;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oCheckeds = $E(<span class=\"string\">&#x27;htmlBuildContainerContent&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;input[type=&quot;checkbox&quot;]:checked&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;oCheckeds =&gt;&#x27;</span>, oCheckeds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!oCheckeds.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;请选择要打包的 html 文件&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileConf = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = oCheckeds.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      fileConf.<span class=\"title function_\">push</span>(oCheckeds[i].<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fileConf =&gt;&#x27;</span>, fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    <span class=\"title function_\">executeBuild</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">processingBarId</span>: <span class=\"string\">&#x27;btnBuildProgressHTML&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">processingName</span>: <span class=\"string\">&#x27;HTML文件自定义构建并自动部署&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">command</span>: <span class=\"string\">&#x27;gulp&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">args</span>: [ <span class=\"string\">&#x27;customBuildAndDeployHtml&#x27;</span>, <span class=\"string\">&#x27;--fileConf=&#x27;</span> + fileConf.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//-- gulpfile.js --</span></span><br><span class=\"line\">  <span class=\"comment\">// 自定义构建 html</span></span><br><span class=\"line\"><span class=\"comment\">// 参考 task htmlminFiles</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildHtml&#x27;</span>, [ <span class=\"string\">&#x27;clean&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`yargv.fileConf =&gt; <span class=\"subst\">$&#123;yargv.fileConf&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileConf = yargv.<span class=\"property\">fileConf</span>;</span><br><span class=\"line\">    <span class=\"comment\">// fileConf = fileConf.replace(/(\\/mpost_operation\\/)|(\\/mpost_topic\\/)|(\\/mpost_v2\\/)|(\\/operation\\/)|(\\/umcupgrade\\/)|(\\/upPackage\\/)|(\\/weixin\\/)/, &#x27;/**/&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为 html 目录下还包含一些二级目录的 html 文件</span></span><br><span class=\"line\">    fileConf = fileConf.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\/html\\/\\w+\\//g</span>, <span class=\"string\">&#x27;/html/**/&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(fileConf.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;htmlmin file --&gt; &#x27;</span>&#125;)) </span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">debug</span>(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;minify-inline file --&gt; &#x27;</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifyInline</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(resourceDir));            </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 自定义构建 html</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;customBuildAndDeployHtml&#x27;</span>, [ <span class=\"string\">&#x27;customBuildHtml&#x27;</span> ], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> conn = ftp.<span class=\"title function_\">create</span>( &#123;</span><br><span class=\"line\">        <span class=\"attr\">host</span>:     <span class=\"string\">&#x27;此处是 host ip&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">user</span>:     <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;此处是密码&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">log</span>:      gutil.<span class=\"property\">log</span></span><br><span class=\"line\">        <span class=\"comment\">// debug: gutil.log</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">magenta</span>(<span class=\"string\">&quot;---------上传静态资源文件--------&quot;</span>));</span><br><span class=\"line\">    gutil.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------**********-----------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></span><br><span class=\"line\">    <span class=\"comment\">// turn off buffering in gulp.src for best performance</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>( path.<span class=\"title function_\">join</span>( resourceDir, <span class=\"string\">&quot;**/*&quot;</span>), &#123; <span class=\"attr\">buffer</span>: <span class=\"literal\">false</span> &#125; )</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>( conn.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;/home/richmail/nginx/htdocs/html5&#x27;</span>) );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于 HTML 自定义构建，在 gulpfile.js 里面新加了 customBuildHtml、customBuildAndDeployHtml 两个 task。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>工具可以随意切换139邮箱代码当前工作目录，全网（release）、灰度（beta）、测试线（trunk），甚至可以手动输入分支（branch）目录； </p>\n</li>\n<li><p>工具执行任务是单线程，当前执行任务最多只有 1 个；即，如果当前正在构建时，点击其他按钮是无效的，应该等待当前任务执行完毕之后，才去点击执行其他任务。当然，你也可以右键终止当前任务；</p>\n</li>\n<li><p>由于工具是基于 Electron 的，所以包比较大，这个你懂的。</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li>Electron 官网：<a href=\"http://electron.atom.io/\">http://electron.atom.io/</a></li>\n<li>gulp 中文网：<a href=\"http://www.gulpjs.com.cn/\">http://www.gulpjs.com.cn/</a></li>\n<li>Q.js Github项目地址：<a href=\"https://github.com/itorr/q.js\">https://github.com/itorr/q.js</a></li>\n</ol>\n"},{"title":"博客开始支持 HTTPS","author":"Jelon","date":"2017-09-10T00:00:00.000Z","thumbnail":null,"blogexcerpt":"在博客没有支持 https 之前，经常会遇到类似以下这样的情况：[图片]咋一看，好像并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？","_content":"\n<!-- toc -->\n\n### 事情背景\n\n在博客没有支持 HTTPS 之前，经常会遇到类似以下这样的情况：\n\n![运营商劫持](https://jangdelong.github.io/blog_img/images/blog-https-suport/1.jpg)\n\n咋一看，好像还并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持、篡改之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？确实。\n\n而 HTTPS 可以轻松化解这种运营商劫持和篡改的问题。那么 https 到底为何方神圣？HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP的 安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。通俗来讲，就是用户向服务器发起请求的同时，会增加一个“数据加密”的技术，中间一些“传输”过程都被加密和认证，第三方无法获取，这样就轻松化解了数据被劫持、篡改的隐患。\n\n### 改造实践\n\n1. SSL 证书\n\t\n\t本人的博客是托管在 [Coding Pages](https://pages.coding.net/)，SSL 证书是免费的，并且支持自定义域名。只需要在 Pages 服务设置里面开启强制 HTTPS 访问选项即可。\n\t\n\t![强制 HTTPS 访问](https://jangdelong.github.io/blog_img/images/blog-https-suport/2.jpg)\n\n2. CDN 迁移\n\t\n\t本博原来图片等一些文件是放在七牛云存储的，毕竟是国内比较厉害的云存储，访问速度毫无疑问是相当快的。没毛病。那为什么还要迁移？总结起来就是一个字，穷。整个博客除了域名花几十块钱一年之外，其他服务都免费的，当然 CDN 也是使用七牛的免费功能，用的是测试域名。免费功能嘛，当然是不支持 HTTPS 啦，更何况我的博客域名还没有在国内备案呢。\n\t\n\t为了保证整个博客都使用上 HTTPS ，我竟然想到了 Github Pages , 单个免费仓库 高达 1G。按每张图片 100K 来计算，可以存储 10000 多张呢，在未来很长的一段时间这绝对是够用的。🙄\n\t\n\t同时 Github Pages 虽然自定义域名并不支持 HTTPS ，但是其自带域名是是完全支持 HTTPS 的。这也是我为什么想到用 Github Pages 作为 CDN 的一大理由。\n\t\n\t![Github Pages](https://jangdelong.github.io/blog_img/images/blog-https-suport/3.png)\n\n\n### 改造总结\n\n1. 总的来说，改造之后感觉还可以，轻轻松松就解决了前面说的运营商劫持和篡改问题；\n\n2. 美中不足，就是访问速度似乎有点变慢了，不知道是不是 HTTPS 解析原因，但是 CDN 从七牛迁移到 Github 肯定脱不了干系。\n\n\n\n\n\n","source":"_posts/blog-https-suport.md","raw":"---\ntitle: 博客开始支持 HTTPS\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-09-10\ntags:\n\t- HTTPS\n\t- 静态博客\nthumbnail:\nblogexcerpt: 在博客没有支持 https 之前，经常会遇到类似以下这样的情况：[图片]咋一看，好像并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？\n\n---\n\n<!-- toc -->\n\n### 事情背景\n\n在博客没有支持 HTTPS 之前，经常会遇到类似以下这样的情况：\n\n![运营商劫持](https://jangdelong.github.io/blog_img/images/blog-https-suport/1.jpg)\n\n咋一看，好像还并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持、篡改之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？确实。\n\n而 HTTPS 可以轻松化解这种运营商劫持和篡改的问题。那么 https 到底为何方神圣？HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP的 安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。通俗来讲，就是用户向服务器发起请求的同时，会增加一个“数据加密”的技术，中间一些“传输”过程都被加密和认证，第三方无法获取，这样就轻松化解了数据被劫持、篡改的隐患。\n\n### 改造实践\n\n1. SSL 证书\n\t\n\t本人的博客是托管在 [Coding Pages](https://pages.coding.net/)，SSL 证书是免费的，并且支持自定义域名。只需要在 Pages 服务设置里面开启强制 HTTPS 访问选项即可。\n\t\n\t![强制 HTTPS 访问](https://jangdelong.github.io/blog_img/images/blog-https-suport/2.jpg)\n\n2. CDN 迁移\n\t\n\t本博原来图片等一些文件是放在七牛云存储的，毕竟是国内比较厉害的云存储，访问速度毫无疑问是相当快的。没毛病。那为什么还要迁移？总结起来就是一个字，穷。整个博客除了域名花几十块钱一年之外，其他服务都免费的，当然 CDN 也是使用七牛的免费功能，用的是测试域名。免费功能嘛，当然是不支持 HTTPS 啦，更何况我的博客域名还没有在国内备案呢。\n\t\n\t为了保证整个博客都使用上 HTTPS ，我竟然想到了 Github Pages , 单个免费仓库 高达 1G。按每张图片 100K 来计算，可以存储 10000 多张呢，在未来很长的一段时间这绝对是够用的。🙄\n\t\n\t同时 Github Pages 虽然自定义域名并不支持 HTTPS ，但是其自带域名是是完全支持 HTTPS 的。这也是我为什么想到用 Github Pages 作为 CDN 的一大理由。\n\t\n\t![Github Pages](https://jangdelong.github.io/blog_img/images/blog-https-suport/3.png)\n\n\n### 改造总结\n\n1. 总的来说，改造之后感觉还可以，轻轻松松就解决了前面说的运营商劫持和篡改问题；\n\n2. 美中不足，就是访问速度似乎有点变慢了，不知道是不是 HTTPS 解析原因，但是 CDN 从七牛迁移到 Github 肯定脱不了干系。\n\n\n\n\n\n","slug":"blog-https-suport","published":1,"updated":"2017-09-10T00:00:00.000Z","_id":"cmduj3n1q0003k8sv26bsaf25","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BA%8B%E6%83%85%E8%83%8C%E6%99%AF\">事情背景</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5\">改造实践</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0%E6%80%BB%E7%BB%93\">改造总结</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"事情背景\">事情背景</span></h3><p>在博客没有支持 HTTPS 之前，经常会遇到类似以下这样的情况：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/1.jpg\" alt=\"运营商劫持\"></p>\n<p>咋一看，好像还并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持、篡改之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？确实。</p>\n<p>而 HTTPS 可以轻松化解这种运营商劫持和篡改的问题。那么 https 到底为何方神圣？HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP的 安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。通俗来讲，就是用户向服务器发起请求的同时，会增加一个“数据加密”的技术，中间一些“传输”过程都被加密和认证，第三方无法获取，这样就轻松化解了数据被劫持、篡改的隐患。</p>\n<h3><span id=\"改造实践\">改造实践</span></h3><ol>\n<li><p>SSL 证书</p>\n<p> 本人的博客是托管在 <a href=\"https://pages.coding.net/\">Coding Pages</a>，SSL 证书是免费的，并且支持自定义域名。只需要在 Pages 服务设置里面开启强制 HTTPS 访问选项即可。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/2.jpg\" alt=\"强制 HTTPS 访问\"></p>\n</li>\n<li><p>CDN 迁移</p>\n<p> 本博原来图片等一些文件是放在七牛云存储的，毕竟是国内比较厉害的云存储，访问速度毫无疑问是相当快的。没毛病。那为什么还要迁移？总结起来就是一个字，穷。整个博客除了域名花几十块钱一年之外，其他服务都免费的，当然 CDN 也是使用七牛的免费功能，用的是测试域名。免费功能嘛，当然是不支持 HTTPS 啦，更何况我的博客域名还没有在国内备案呢。</p>\n<p> 为了保证整个博客都使用上 HTTPS ，我竟然想到了 Github Pages , 单个免费仓库 高达 1G。按每张图片 100K 来计算，可以存储 10000 多张呢，在未来很长的一段时间这绝对是够用的。🙄</p>\n<p> 同时 Github Pages 虽然自定义域名并不支持 HTTPS ，但是其自带域名是是完全支持 HTTPS 的。这也是我为什么想到用 Github Pages 作为 CDN 的一大理由。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/3.png\" alt=\"Github Pages\"></p>\n</li>\n</ol>\n<h3><span id=\"改造总结\">改造总结</span></h3><ol>\n<li><p>总的来说，改造之后感觉还可以，轻轻松松就解决了前面说的运营商劫持和篡改问题；</p>\n</li>\n<li><p>美中不足，就是访问速度似乎有点变慢了，不知道是不是 HTTPS 解析原因，但是 CDN 从七牛迁移到 Github 肯定脱不了干系。</p>\n</li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BA%8B%E6%83%85%E8%83%8C%E6%99%AF\">事情背景</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0%E5%AE%9E%E8%B7%B5\">改造实践</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0%E6%80%BB%E7%BB%93\">改造总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"事情背景\"><a href=\"#事情背景\" class=\"headerlink\" title=\"事情背景\"></a>事情背景</h3><p>在博客没有支持 HTTPS 之前，经常会遇到类似以下这样的情况：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/1.jpg\" alt=\"运营商劫持\"></p>\n<p>咋一看，好像还并没有任何的违和感，就感觉那个气泡和那个 Banner 就是网站的一部分。事实上，并不是的，它们是电信运营商强制塞进来的内容。网上搜索了一下这种案例，叫做运营商劫持、篡改之类的，就是电信、移动、联通这些运营商会在你的网站给你推送一些广告界面。现在想想，是不是觉得这些运营商行为很无耻了呢？确实。</p>\n<p>而 HTTPS 可以轻松化解这种运营商劫持和篡改的问题。那么 https 到底为何方神圣？HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP的 安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。通俗来讲，就是用户向服务器发起请求的同时，会增加一个“数据加密”的技术，中间一些“传输”过程都被加密和认证，第三方无法获取，这样就轻松化解了数据被劫持、篡改的隐患。</p>\n<h3 id=\"改造实践\"><a href=\"#改造实践\" class=\"headerlink\" title=\"改造实践\"></a>改造实践</h3><ol>\n<li><p>SSL 证书</p>\n<p> 本人的博客是托管在 <a href=\"https://pages.coding.net/\">Coding Pages</a>，SSL 证书是免费的，并且支持自定义域名。只需要在 Pages 服务设置里面开启强制 HTTPS 访问选项即可。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/2.jpg\" alt=\"强制 HTTPS 访问\"></p>\n</li>\n<li><p>CDN 迁移</p>\n<p> 本博原来图片等一些文件是放在七牛云存储的，毕竟是国内比较厉害的云存储，访问速度毫无疑问是相当快的。没毛病。那为什么还要迁移？总结起来就是一个字，穷。整个博客除了域名花几十块钱一年之外，其他服务都免费的，当然 CDN 也是使用七牛的免费功能，用的是测试域名。免费功能嘛，当然是不支持 HTTPS 啦，更何况我的博客域名还没有在国内备案呢。</p>\n<p> 为了保证整个博客都使用上 HTTPS ，我竟然想到了 Github Pages , 单个免费仓库 高达 1G。按每张图片 100K 来计算，可以存储 10000 多张呢，在未来很长的一段时间这绝对是够用的。🙄</p>\n<p> 同时 Github Pages 虽然自定义域名并不支持 HTTPS ，但是其自带域名是是完全支持 HTTPS 的。这也是我为什么想到用 Github Pages 作为 CDN 的一大理由。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/blog-https-suport/3.png\" alt=\"Github Pages\"></p>\n</li>\n</ol>\n<h3 id=\"改造总结\"><a href=\"#改造总结\" class=\"headerlink\" title=\"改造总结\"></a>改造总结</h3><ol>\n<li><p>总的来说，改造之后感觉还可以，轻轻松松就解决了前面说的运营商劫持和篡改问题；</p>\n</li>\n<li><p>美中不足，就是访问速度似乎有点变慢了，不知道是不是 HTTPS 解析原因，但是 CDN 从七牛迁移到 Github 肯定脱不了干系。</p>\n</li>\n</ol>\n"},{"title":"如何开发一个vscode插件","date":"2023-03-13T18:32:24.000Z","author":"Jelon","thumbnail":null,"blogexcerpt":"开发 Visual Studio Code（VS Code）插件可以按照以下步骤进行： 安装 VS Code首先，您需要安装 VS Code。您可以在官方网站上下载并安装 VS Code：https://code.visualstudio.com/ ...","_content":"\n如果您想要开发 Visual Studio Code 的插件，以下是一些可以帮助您入门的步骤：\n\n1. 准备工作\n\n在开始之前，请确保您安装了 Visual Studio Code。您还需要安装 Node.js 和 npm。npm 是 Node.js 的包管理器，可以用来安装和管理项目中的依赖项。\n\n2. 创建一个插件项目\n\n您可以使用 Yeoman 和 Generator Code 生成器来快速创建一个插件项目。Generator Code 是一个官方的生成器，它会自动生成一个基本的插件项目，并提供一些示例代码和文件。您可以使用以下命令安装 Yeoman 和 Generator Code：\n\n```sh\nnpm install -g yo generator-code\n```\n\n然后，您可以使用以下命令来生成插件项目：\n\n```sh\nyo code\n```\n\n此命令将引导您完成创建插件项目的过程，并要求您提供一些信息，例如插件名称、描述等。\n\n3. 编写插件代码\n\n在项目中，您可以在 src 文件夹中找到 extension.ts 文件。这是插件的主要文件，您可以在其中编写插件逻辑。这个文件导出了一个名为 activate 的函数，这个函数将在插件被激活时调用。您可以在这个函数中注册命令、添加菜单等。\n\n4. 调试插件\n\nVisual Studio Code 提供了一个内置的调试器，可以帮助您调试插件代码。您可以在 launch.json 文件中配置调试器选项，并使用 F5 键启动调试会话。\n\n5. 发布插件\n\n如果您准备将您的插件发布到 Visual Studio Code 的市场，请先在 Visual Studio Code Marketplace 中注册一个账户。然后，在项目根目录中创建一个名为 vscode-extension.vsix 的文件，这是您的插件包。您可以使用以下命令将插件打包：\n\n```sh\nvsce package\n```\n\n然后，您可以使用以下命令将插件发布到市场：\n\n```sh\nvsce publish\n```\n\n注意：在发布插件之前，请确保您遵循了 Visual Studio Code 的插件发布指南，确保您的插件符合市场的规定和要求。\n","source":"_posts/create-a-vscode-plugin.md","raw":"title: 如何开发一个vscode插件\ncategories:\n  - Web技术\ndate: 2023-03-13 18:32:24\nauthor: Jelon\ntags:\n  - vscode\nthumbnail:\nblogexcerpt: 开发 Visual Studio Code（VS Code）插件可以按照以下步骤进行： 安装 VS Code首先，您需要安装 VS Code。您可以在官方网站上下载并安装 VS Code：https://code.visualstudio.com/ ...\n\n---\n\n如果您想要开发 Visual Studio Code 的插件，以下是一些可以帮助您入门的步骤：\n\n1. 准备工作\n\n在开始之前，请确保您安装了 Visual Studio Code。您还需要安装 Node.js 和 npm。npm 是 Node.js 的包管理器，可以用来安装和管理项目中的依赖项。\n\n2. 创建一个插件项目\n\n您可以使用 Yeoman 和 Generator Code 生成器来快速创建一个插件项目。Generator Code 是一个官方的生成器，它会自动生成一个基本的插件项目，并提供一些示例代码和文件。您可以使用以下命令安装 Yeoman 和 Generator Code：\n\n```sh\nnpm install -g yo generator-code\n```\n\n然后，您可以使用以下命令来生成插件项目：\n\n```sh\nyo code\n```\n\n此命令将引导您完成创建插件项目的过程，并要求您提供一些信息，例如插件名称、描述等。\n\n3. 编写插件代码\n\n在项目中，您可以在 src 文件夹中找到 extension.ts 文件。这是插件的主要文件，您可以在其中编写插件逻辑。这个文件导出了一个名为 activate 的函数，这个函数将在插件被激活时调用。您可以在这个函数中注册命令、添加菜单等。\n\n4. 调试插件\n\nVisual Studio Code 提供了一个内置的调试器，可以帮助您调试插件代码。您可以在 launch.json 文件中配置调试器选项，并使用 F5 键启动调试会话。\n\n5. 发布插件\n\n如果您准备将您的插件发布到 Visual Studio Code 的市场，请先在 Visual Studio Code Marketplace 中注册一个账户。然后，在项目根目录中创建一个名为 vscode-extension.vsix 的文件，这是您的插件包。您可以使用以下命令将插件打包：\n\n```sh\nvsce package\n```\n\n然后，您可以使用以下命令将插件发布到市场：\n\n```sh\nvsce publish\n```\n\n注意：在发布插件之前，请确保您遵循了 Visual Studio Code 的插件发布指南，确保您的插件符合市场的规定和要求。\n","slug":"create-a-vscode-plugin","published":1,"updated":"2023-03-13T18:32:24.000Z","_id":"cmduj3n1u0007k8sv1cx7f3iy","comments":1,"layout":"post","photos":[],"content":"<p>如果您想要开发 Visual Studio Code 的插件，以下是一些可以帮助您入门的步骤：</p>\n<ol>\n<li>准备工作</li>\n</ol>\n<p>在开始之前，请确保您安装了 Visual Studio Code。您还需要安装 Node.js 和 npm。npm 是 Node.js 的包管理器，可以用来安装和管理项目中的依赖项。</p>\n<ol start=\"2\">\n<li>创建一个插件项目</li>\n</ol>\n<p>您可以使用 Yeoman 和 Generator Code 生成器来快速创建一个插件项目。Generator Code 是一个官方的生成器，它会自动生成一个基本的插件项目，并提供一些示例代码和文件。您可以使用以下命令安装 Yeoman 和 Generator Code：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n\n<p>然后，您可以使用以下命令来生成插件项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>\n\n<p>此命令将引导您完成创建插件项目的过程，并要求您提供一些信息，例如插件名称、描述等。</p>\n<ol start=\"3\">\n<li>编写插件代码</li>\n</ol>\n<p>在项目中，您可以在 src 文件夹中找到 extension.ts 文件。这是插件的主要文件，您可以在其中编写插件逻辑。这个文件导出了一个名为 activate 的函数，这个函数将在插件被激活时调用。您可以在这个函数中注册命令、添加菜单等。</p>\n<ol start=\"4\">\n<li>调试插件</li>\n</ol>\n<p>Visual Studio Code 提供了一个内置的调试器，可以帮助您调试插件代码。您可以在 launch.json 文件中配置调试器选项，并使用 F5 键启动调试会话。</p>\n<ol start=\"5\">\n<li>发布插件</li>\n</ol>\n<p>如果您准备将您的插件发布到 Visual Studio Code 的市场，请先在 Visual Studio Code Marketplace 中注册一个账户。然后，在项目根目录中创建一个名为 vscode-extension.vsix 的文件，这是您的插件包。您可以使用以下命令将插件打包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce package</span><br></pre></td></tr></table></figure>\n\n<p>然后，您可以使用以下命令将插件发布到市场：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce publish</span><br></pre></td></tr></table></figure>\n\n<p>注意：在发布插件之前，请确保您遵循了 Visual Studio Code 的插件发布指南，确保您的插件符合市场的规定和要求。</p>\n","excerpt":"","more":"<p>如果您想要开发 Visual Studio Code 的插件，以下是一些可以帮助您入门的步骤：</p>\n<ol>\n<li>准备工作</li>\n</ol>\n<p>在开始之前，请确保您安装了 Visual Studio Code。您还需要安装 Node.js 和 npm。npm 是 Node.js 的包管理器，可以用来安装和管理项目中的依赖项。</p>\n<ol start=\"2\">\n<li>创建一个插件项目</li>\n</ol>\n<p>您可以使用 Yeoman 和 Generator Code 生成器来快速创建一个插件项目。Generator Code 是一个官方的生成器，它会自动生成一个基本的插件项目，并提供一些示例代码和文件。您可以使用以下命令安装 Yeoman 和 Generator Code：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>\n\n<p>然后，您可以使用以下命令来生成插件项目：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yo code</span><br></pre></td></tr></table></figure>\n\n<p>此命令将引导您完成创建插件项目的过程，并要求您提供一些信息，例如插件名称、描述等。</p>\n<ol start=\"3\">\n<li>编写插件代码</li>\n</ol>\n<p>在项目中，您可以在 src 文件夹中找到 extension.ts 文件。这是插件的主要文件，您可以在其中编写插件逻辑。这个文件导出了一个名为 activate 的函数，这个函数将在插件被激活时调用。您可以在这个函数中注册命令、添加菜单等。</p>\n<ol start=\"4\">\n<li>调试插件</li>\n</ol>\n<p>Visual Studio Code 提供了一个内置的调试器，可以帮助您调试插件代码。您可以在 launch.json 文件中配置调试器选项，并使用 F5 键启动调试会话。</p>\n<ol start=\"5\">\n<li>发布插件</li>\n</ol>\n<p>如果您准备将您的插件发布到 Visual Studio Code 的市场，请先在 Visual Studio Code Marketplace 中注册一个账户。然后，在项目根目录中创建一个名为 vscode-extension.vsix 的文件，这是您的插件包。您可以使用以下命令将插件打包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce package</span><br></pre></td></tr></table></figure>\n\n<p>然后，您可以使用以下命令将插件发布到市场：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce publish</span><br></pre></td></tr></table></figure>\n\n<p>注意：在发布插件之前，请确保您遵循了 Visual Studio Code 的插件发布指南，确保您的插件符合市场的规定和要求。</p>\n"},{"title":"CSS 编码规范","date":"2016-04-17T12:08:47.000Z","_content":"\n<!-- toc -->\n\n### 代码规范\n\n**一般性命名**\n\n使用小写字母，复合词以 - 分隔; 例如` nav.css , login-nav.css , login-page.css`\n\n<!-- more -->\n\n**id 和类的命名**\n\n为 id 和样式类使用有意义或通用的名字，避免由于 css 命名更改引起的不必要的文档或模板改变；\n\n例如：\n\n```css\n/* 不推荐： 无意义 */\n#yee-1901 {}\n\n/* 不推荐： 表现层的命名 */\n.button-green {}\n/* 推荐: 具体 */\n#gallery {}\n#login {}\n.video {}\n\n/* 推荐: 通用 */\n.effect {}\n.alt {}\n```\n\nid 和 class 的命名长度应该适中，不要太简略也不要太详细；\n\n例如：\n\n```css\n/* 不推荐 */\n#navigation {}\n.atr {}\n/* 推荐 */\n#nav {}\n.author {}\n```\n\n**元素选择器**\n\n为了 性能原因 ， 请避免元素选择器和类选择器以及 id 选择器混用；\n\n例如：\n\n\n```css\n/* 不推荐 */\nul#example {}\ndiv.error {}\n/* 推荐 */\n#example {}\n.error {}\n```\n\n**简写属性名字**\n\n为了提高可读性，尽可能的使用简写属性；\n\n例如：\n\n```css\n/* 不推荐 */\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n/* 推荐 */\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n**0 和单位**\n\n对属性值为 0 的情况省略单位；\n\n例如：\n\n```css\nmargin: 0;\npadding: 0;\n```\n\n**0 前缀情况**\n\n省略属性值中的 0 前缀；\n\n例如：\n\n```css\nfont-size: .8em;\n```\n\n**16 进制的颜色值表示**\n\n尽可能使用 3 个字符的 16 进制颜色值；\n\n例如：\n\n```css\n/* 不推荐 */\ncolor: #eebbcc;\n/* 推荐 */\ncolor: #ebc;\n```\n\n**前缀**\n\n为了防止冲突，对于应用特定的样式附加应用前缀；\n\n例如：\n\n```css\n.login-help {} /* login page */\n#detail-note {} /* detail page */\n```\n\n**hacks**\n\n避免 css hack ， 考虑使用特定浏览器前缀表示；\n\n例如：\n\n```css\n.ks-ie6 p {\n    margin: 1em 0;\n}\n```\n\n\n### 格式规范\n\n**属性声明顺序**\n\n按照字母顺序声明属性，排序时忽略私有的浏览器前缀，对于特定的浏览器，私有的浏览器前缀应该参与排序；\n\n例如：\n\n```css\nbackground: fuchsia;\nborder: 1px solid;\n-moz-border-radius: 4px;\n-webkit-border-radius: 4px;\nborder-radius: 4px;\ncolor: black;\ntext-align: center;\ntext-indent: 2em;\n```\n\n**块缩进**\n\n块的内容应该被缩进；\n\n例如：\n\n```css\n@media screen, projection {\n\n  html {\n    background: #fff;\n    color: #444;\n  }\n\n}\n```\n\n\n**分号**\n\n使用分号结束单个属性的定义；\n\n例如：\n\n```css\n/* 不推荐 */\n.test {\n  display: block;\n  height: 100px\n}\n/* 推荐 */\n.test {\n  display: block;\n  height: 100px;\n}\n```\n\n**空格**\n\n在属性名冒号后加一个空格；\n\n例如：\n\n```css\n/* 不推荐 */\n.test {\n  display:block;\n}\n/* 推荐 */\n.test {\n  display: block;\n}\n```\n\n\n**空行**\n\n多个选择以及声明间以行分隔；\n\n例如：\n\n```css\n/* 不推荐 */\na:focus, a:active {\n  position: relative; top: 1px;\n}\n/* 推荐 */\nh1,\nh2,\nh3 {\n  font-weight: normal;\n  line-height: 1.2;\n}\n```\n\n多个 css 规则间以空行分隔；\n\n例如：\n\n```css\nhtml {\n  background: #fff;\n}\n\nbody {\n  margin: auto;\n  width: 50%;\n}\n```\n\n\n**引号**\n\n尽可能的不用引号，迫不得已时使用单引号；\n\n```css\n/* 不推荐 */\n@import url(\"//www.google.com/css/maia.css\");\n\nhtml {\n  font-family: \"open sans\", arial, sans-serif;\n}\n/* 推荐 */\n@import url(//www.google.com/css/maia.css);\n\nhtml {\n  font-family: 'open sans', arial, sans-serif;\n}\n```\n\n**注释**\n\n成组的 css 规则间用块状注释和空行分离；\n\n例如：\n\n```css\n/* Header */\n\n#login-header {}\n\n#login-header-below {}\n\n/* Footer */\n\n#login-footer {}\n\n#login-footer-below {}\n\n/* Gallery */\n\n.login-gallery {}\n\n.login-gallery-other {}\n```\n","source":"_posts/css-code-style.md","raw":"title: CSS 编码规范\ndate: 2016-04-17 12:08:47\ntags:\n    - css\n    - 编码规范\ncategories:\n    - Web技术\n---\n\n<!-- toc -->\n\n### 代码规范\n\n**一般性命名**\n\n使用小写字母，复合词以 - 分隔; 例如` nav.css , login-nav.css , login-page.css`\n\n<!-- more -->\n\n**id 和类的命名**\n\n为 id 和样式类使用有意义或通用的名字，避免由于 css 命名更改引起的不必要的文档或模板改变；\n\n例如：\n\n```css\n/* 不推荐： 无意义 */\n#yee-1901 {}\n\n/* 不推荐： 表现层的命名 */\n.button-green {}\n/* 推荐: 具体 */\n#gallery {}\n#login {}\n.video {}\n\n/* 推荐: 通用 */\n.effect {}\n.alt {}\n```\n\nid 和 class 的命名长度应该适中，不要太简略也不要太详细；\n\n例如：\n\n```css\n/* 不推荐 */\n#navigation {}\n.atr {}\n/* 推荐 */\n#nav {}\n.author {}\n```\n\n**元素选择器**\n\n为了 性能原因 ， 请避免元素选择器和类选择器以及 id 选择器混用；\n\n例如：\n\n\n```css\n/* 不推荐 */\nul#example {}\ndiv.error {}\n/* 推荐 */\n#example {}\n.error {}\n```\n\n**简写属性名字**\n\n为了提高可读性，尽可能的使用简写属性；\n\n例如：\n\n```css\n/* 不推荐 */\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n/* 推荐 */\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n**0 和单位**\n\n对属性值为 0 的情况省略单位；\n\n例如：\n\n```css\nmargin: 0;\npadding: 0;\n```\n\n**0 前缀情况**\n\n省略属性值中的 0 前缀；\n\n例如：\n\n```css\nfont-size: .8em;\n```\n\n**16 进制的颜色值表示**\n\n尽可能使用 3 个字符的 16 进制颜色值；\n\n例如：\n\n```css\n/* 不推荐 */\ncolor: #eebbcc;\n/* 推荐 */\ncolor: #ebc;\n```\n\n**前缀**\n\n为了防止冲突，对于应用特定的样式附加应用前缀；\n\n例如：\n\n```css\n.login-help {} /* login page */\n#detail-note {} /* detail page */\n```\n\n**hacks**\n\n避免 css hack ， 考虑使用特定浏览器前缀表示；\n\n例如：\n\n```css\n.ks-ie6 p {\n    margin: 1em 0;\n}\n```\n\n\n### 格式规范\n\n**属性声明顺序**\n\n按照字母顺序声明属性，排序时忽略私有的浏览器前缀，对于特定的浏览器，私有的浏览器前缀应该参与排序；\n\n例如：\n\n```css\nbackground: fuchsia;\nborder: 1px solid;\n-moz-border-radius: 4px;\n-webkit-border-radius: 4px;\nborder-radius: 4px;\ncolor: black;\ntext-align: center;\ntext-indent: 2em;\n```\n\n**块缩进**\n\n块的内容应该被缩进；\n\n例如：\n\n```css\n@media screen, projection {\n\n  html {\n    background: #fff;\n    color: #444;\n  }\n\n}\n```\n\n\n**分号**\n\n使用分号结束单个属性的定义；\n\n例如：\n\n```css\n/* 不推荐 */\n.test {\n  display: block;\n  height: 100px\n}\n/* 推荐 */\n.test {\n  display: block;\n  height: 100px;\n}\n```\n\n**空格**\n\n在属性名冒号后加一个空格；\n\n例如：\n\n```css\n/* 不推荐 */\n.test {\n  display:block;\n}\n/* 推荐 */\n.test {\n  display: block;\n}\n```\n\n\n**空行**\n\n多个选择以及声明间以行分隔；\n\n例如：\n\n```css\n/* 不推荐 */\na:focus, a:active {\n  position: relative; top: 1px;\n}\n/* 推荐 */\nh1,\nh2,\nh3 {\n  font-weight: normal;\n  line-height: 1.2;\n}\n```\n\n多个 css 规则间以空行分隔；\n\n例如：\n\n```css\nhtml {\n  background: #fff;\n}\n\nbody {\n  margin: auto;\n  width: 50%;\n}\n```\n\n\n**引号**\n\n尽可能的不用引号，迫不得已时使用单引号；\n\n```css\n/* 不推荐 */\n@import url(\"//www.google.com/css/maia.css\");\n\nhtml {\n  font-family: \"open sans\", arial, sans-serif;\n}\n/* 推荐 */\n@import url(//www.google.com/css/maia.css);\n\nhtml {\n  font-family: 'open sans', arial, sans-serif;\n}\n```\n\n**注释**\n\n成组的 css 规则间用块状注释和空行分离；\n\n例如：\n\n```css\n/* Header */\n\n#login-header {}\n\n#login-header-below {}\n\n/* Footer */\n\n#login-footer {}\n\n#login-footer-below {}\n\n/* Gallery */\n\n.login-gallery {}\n\n.login-gallery-other {}\n```\n","slug":"css-code-style","published":1,"updated":"2016-04-17T12:08:47.000Z","_id":"cmduj3n1x0008k8sv9v29amw7","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\">代码规范</a></li>\n<li><a href=\"#%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83\">格式规范</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"代码规范\">代码规范</span></h3><p><strong>一般性命名</strong></p>\n<p>使用小写字母，复合词以 - 分隔; 例如<code> nav.css , login-nav.css , login-page.css</code></p>\n<span id=\"more\"></span>\n\n<p><strong>id 和类的命名</strong></p>\n<p>为 id 和样式类使用有意义或通用的名字，避免由于 css 命名更改引起的不必要的文档或模板改变；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐： 无意义 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#yee-1901</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不推荐： 表现层的命名 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.button-green</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐: 具体 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#gallery</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#login</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.video</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐: 通用 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.effect</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.alt</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>id 和 class 的命名长度应该适中，不要太简略也不要太详细；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#navigation</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.atr</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#nav</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>元素选择器</strong></p>\n<p>为了 性能原因 ， 请避免元素选择器和类选择器以及 id 选择器混用；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-id\">#example</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.error</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>简写属性名字</strong></p>\n<p>为了提高可读性，尽可能的使用简写属性；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">border-top-style</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: palatino, georgia, serif;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">1.6</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-left</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-right</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">border-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">font</span>: <span class=\"number\">100%</span>/<span class=\"number\">1.6</span> palatino, georgia, serif;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1em</span> <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>0 和单位</strong></p>\n<p>对属性值为 0 的情况省略单位；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>0 前缀情况</strong></p>\n<p>省略属性值中的 0 前缀；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: .<span class=\"number\">8em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>16 进制的颜色值表示</strong></p>\n<p>尽可能使用 3 个字符的 16 进制颜色值；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#eebbcc</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#ebc</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>前缀</strong></p>\n<p>为了防止冲突，对于应用特定的样式附加应用前缀；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.login-help</span> &#123;&#125; <span class=\"comment\">/* login page */</span></span><br><span class=\"line\"><span class=\"selector-id\">#detail-note</span> &#123;&#125; <span class=\"comment\">/* detail page */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>hacks</strong></p>\n<p>避免 css hack ， 考虑使用特定浏览器前缀表示；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ks-ie6</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"格式规范\">格式规范</span></h3><p><strong>属性声明顺序</strong></p>\n<p>按照字母顺序声明属性，排序时忽略私有的浏览器前缀，对于特定的浏览器，私有的浏览器前缀应该参与排序；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: fuchsia;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">-moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">-webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: black;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>块缩进</strong></p>\n<p>块的内容应该被缩进；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen, projection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>分号</strong></p>\n<p>使用分号结束单个属性的定义；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>空格</strong></p>\n<p>在属性名冒号后加一个空格；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>空行</strong></p>\n<p>多个选择以及声明间以行分隔；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">top</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个 css 规则间以空行分隔；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>引号</strong></p>\n<p>尽可能的不用引号，迫不得已时使用单引号；</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&quot;//www.google.com/css/maia.css&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;open sans&quot;</span>, arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(//www.google.com/css/maia.css);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;open sans&#x27;</span>, arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注释</strong></p>\n<p>成组的 css 规则间用块状注释和空行分离；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-header</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-header-below</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Footer */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-footer</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-footer-below</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Gallery */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.login-gallery</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.login-gallery-other</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\">代码规范</a></li>\n<li><a href=\"#%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83\">格式规范</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h3><p><strong>一般性命名</strong></p>\n<p>使用小写字母，复合词以 - 分隔; 例如<code> nav.css , login-nav.css , login-page.css</code></p>","more":"<p><strong>id 和类的命名</strong></p>\n<p>为 id 和样式类使用有意义或通用的名字，避免由于 css 命名更改引起的不必要的文档或模板改变；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐： 无意义 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#yee-1901</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不推荐： 表现层的命名 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.button-green</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐: 具体 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#gallery</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#login</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.video</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 推荐: 通用 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.effect</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.alt</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>id 和 class 的命名长度应该适中，不要太简略也不要太详细；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#navigation</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.atr</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#nav</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>元素选择器</strong></p>\n<p>为了 性能原因 ， 请避免元素选择器和类选择器以及 id 选择器混用；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-id\">#example</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.error</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#example</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>简写属性名字</strong></p>\n<p>为了提高可读性，尽可能的使用简写属性；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">border-top-style</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">font-family</span>: palatino, georgia, serif;</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">1.6</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-left</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-right</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">border-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">font</span>: <span class=\"number\">100%</span>/<span class=\"number\">1.6</span> palatino, georgia, serif;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1em</span> <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>0 和单位</strong></p>\n<p>对属性值为 0 的情况省略单位；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>0 前缀情况</strong></p>\n<p>省略属性值中的 0 前缀；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">font-size</span>: .<span class=\"number\">8em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>16 进制的颜色值表示</strong></p>\n<p>尽可能使用 3 个字符的 16 进制颜色值；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#eebbcc</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#ebc</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>前缀</strong></p>\n<p>为了防止冲突，对于应用特定的样式附加应用前缀；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.login-help</span> &#123;&#125; <span class=\"comment\">/* login page */</span></span><br><span class=\"line\"><span class=\"selector-id\">#detail-note</span> &#123;&#125; <span class=\"comment\">/* detail page */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>hacks</strong></p>\n<p>避免 css hack ， 考虑使用特定浏览器前缀表示；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ks-ie6</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"格式规范\"><a href=\"#格式规范\" class=\"headerlink\" title=\"格式规范\"></a>格式规范</h3><p><strong>属性声明顺序</strong></p>\n<p>按照字母顺序声明属性，排序时忽略私有的浏览器前缀，对于特定的浏览器，私有的浏览器前缀应该参与排序；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background</span>: fuchsia;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">-moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">-webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: black;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>块缩进</strong></p>\n<p>块的内容应该被缩进；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen, projection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>分号</strong></p>\n<p>使用分号结束单个属性的定义；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>空格</strong></p>\n<p>在属性名冒号后加一个空格；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>空行</strong></p>\n<p>多个选择以及声明间以行分隔；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">top</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个 css 规则间以空行分隔；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>引号</strong></p>\n<p>尽可能的不用引号，迫不得已时使用单引号；</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&quot;//www.google.com/css/maia.css&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;open sans&quot;</span>, arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> url(//www.google.com/css/maia.css);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;open sans&#x27;</span>, arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注释</strong></p>\n<p>成组的 css 规则间用块状注释和空行分离；</p>\n<p>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-header</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-header-below</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Footer */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-footer</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#login-footer-below</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Gallery */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.login-gallery</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.login-gallery-other</span> &#123;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"项目 eslint 配置 eslintrc.js","author":"Jelon","date":"2019-03-06T00:00:00.000Z","thumbnail":null,"blogexcerpt":"使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件...","_content":"\n使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件。\n\nESLint 支持几种格式的配置文件：\n\n- JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。\n- YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。\n- JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许JavaScript 风格的注释。\n- (弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。\n- package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。\n\n如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：\n\n1. .eslintrc.js\n2. .eslintrc.yaml\n3. .eslintrc.yml\n4. .eslintrc.json\n5. .eslintrc\n6. package.json\n\n以 eslintrc.js 为例演示项目中的一些常用的 eslint 配置规则。\n\n```js\n// https://eslint.org/docs/user-guide/configuring\n\nmodule.exports = {\n\n  // 此项是用来告诉eslint找当前配置文件不能往父级查找\n  root: true,\n\n  // 此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析\n  parser: 'babel-eslint',\n\n  // 此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式\n  parserOptions: {\n    // 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块\n    sourceType: 'module',\n    \"ecmaVersion\": 6,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n\n  // 此项指定环境的全局变量，下面的配置指定为浏览器环境\n  env: {\n    \"browser\": true,\n    \"node\": true,\n    \"commonjs\": true,\n    \"es6\": true,\n    \"amd\": true\n  },\n  // https://github.com/standard/standard/blob/master/docs/RULES-en.md\n  // 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错\n  extends: 'vue',\n  // 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的\n  plugins: [\n    'html',\n    \"flow-vars\", \n    \"react\"\n  ],\n  /* \n   下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-\n    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致\n    \"off\" -> 0 关闭规则\n    \"warn\" -> 1 开启警告规则\n    \"error\" -> 2 开启错误规则\n  */\n  rules: {\n    // 不需要\n    \"space-before-function-paren\": 0,  // 函数定义时括号前面要不要有空格\n    \"eol-last\": 0,  // 文件以单一的换行符结束\n    \"no-extra-semi\": 0, // 可以多余的冒号\n    \"semi\": 0,  // 语句可以不需要分号结尾\n    \"eqeqeq\": 0, // 必须使用全等\n    \"one-var\": 0, // 连续声明\n    \"no-undef\": 0, // 可以 有未定义的变量\n\n    // 警告\n    \"no-extra-boolean-cast\": 1, // 不必要的bool转换\n    \"no-extra-parens\": 1, // 非必要的括号\n    \"no-empty\": 1, // 块语句中的内容不能为空\n    \"no-use-before-define\": [1, \"nofunc\"], // 未定义前不能使用\n    \"complexity\": [1, 10], // 循环复杂度\n    \"no-unused-vars\": 1, // 不能有声明后未被使用的变量或参数\n    // vue\n    \"flow-vars/define-flow-type\": 1,\n    \"flow-vars/use-flow-type\": 1,\n\n    // react\n    \"react/jsx-uses-react\": 2,\n    \"react/jsx-uses-vars\": 2,\n\n    // 错误\n    \"comma-dangle\": [2, \"never\"], // 对象字面量项尾不能有逗号\n    \"no-debugger\": 2, // 禁止使用debugger\n    \"no-constant-condition\": 2, // 禁止在条件中使用常量表达式 if(true) if(1)\n    \"no-dupe-args\": 2, // 函数参数不能重复\n    \"no-dupe-keys\": 2, // 在创建对象字面量时不允许键重复 {a:1,a:1}\n    \"no-duplicate-case\": 2, // switch中的case标签不能重复\n    \"no-empty-character-class\": 2, // 正则表达式中的[]内容不能为空\n    \"no-invalid-regexp\": 2, // 禁止无效的正则表达式\n    \"no-func-assign\": 2, // 禁止重复的函数声明\n    \"valid-typeof\": 2,  // 必须使用合法的typeof的值\n    \"no-unreachable\": 2, // 不能有无法执行的代码\n    \"no-unexpected-multiline\": 2, // 避免多行表达式\n    \"no-sparse-arrays\": 2, // 禁止稀疏数组， [1,,2]\n    \"no-shadow-restricted-names\": 2, // 严格模式中规定的限制标识符不能作为声明时的变量名使用\n    \"no-cond-assign\": 2, // 禁止在条件表达式中使用赋值语句\n    \"no-native-reassign\": 2, // 不能重写native对象\n\n    // 代码风格\n    \"no-else-return\": 1, // 如果if语句里面有return,后面不能跟else语句\n    \"no-multi-spaces\": 1, // 不能用多余的空格\n    \"key-spacing\": [1, {  // 对象字面量中冒号的前后空格\n      \"beforeColon\": false,\n      \"afterColon\": true\n    }],\n    \"block-scoped-var\": 2, // 块语句中使用var\n    \"consistent-return\": 2, // return 后面是否允许省略\n    \"accessor-pairs\": 2, // 在对象中使用getter/setter\n    \"dot-location\": [2, \"property\"], // 对象访问符的位置，换行的时候在行首还是行尾\n    \"no-lone-blocks\": 2, // 禁止不必要的嵌套块\n    \"no-labels\": 2, // 禁止标签声明\n    \"no-extend-native\": 2, // 禁止扩展native对象\n    \"no-floating-decimal\": 2, // 禁止省略浮点数中的0 .5 3.\n    \"no-loop-func\": 2, // 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n    \"no-new-func\": 2,  // 禁止使用new Function\n    \"no-self-compare\": 2, // 不能比较自身\n    \"no-sequences\": 2, // 禁止使用逗号运算符\n    \"no-throw-literal\": 2, // 禁止抛出字面量错误 throw \"error\";\n    \"no-return-assign\": [2, \"always\"], // return 语句中不能有赋值表达式\n    \"no-redeclare\": [2, {   // 禁止重复声明变量\n      \"builtinGlobals\": true\n    }],\n    \"no-unused-expressions\": [2, {  // 禁止无用的表达式\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true\n    }],\n    \"no-useless-call\": 2, // 禁止不必要的call和apply\n    \"no-useless-concat\": 2,\n    \"no-void\": 2, // 禁用void操作符\n    \"no-with\": 2, // 禁用with\n    \"space-infix-ops\": 2, // 中缀操作符周围要不要有空格\n    \"valid-jsdoc\": [2, { // jsdoc规则\n      \"requireParamDescription\": true,\n      \"requireReturnDescription\": true\n    }],\n    \"no-warning-comments\": [2, {  // 不能有警告备注\n      \"terms\": [\"todo\", \"fixme\", \"any other term\"],\n      \"location\": \"anywhere\"\n    }],\n    \"curly\": 1, // 必须使用 if(){} 中的{}\n\n    // common js\n    \"no-duplicate-imports\": 1\n  }\n}\n```\n\n了解更多关于 eslint 配置可以访问 [https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring)。\n","source":"_posts/eslintrc-js.md","raw":"---\n\ntitle: 项目 eslint 配置 eslintrc.js\ncategories:\n\t- Web技术\nauthor: Jelon\ndate: 2019-03-06\ntags:\n\t- js\n\t- eslint\nthumbnail:\nblogexcerpt: 使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件...\n\n---\n\n使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件。\n\nESLint 支持几种格式的配置文件：\n\n- JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。\n- YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。\n- JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许JavaScript 风格的注释。\n- (弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。\n- package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。\n\n如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：\n\n1. .eslintrc.js\n2. .eslintrc.yaml\n3. .eslintrc.yml\n4. .eslintrc.json\n5. .eslintrc\n6. package.json\n\n以 eslintrc.js 为例演示项目中的一些常用的 eslint 配置规则。\n\n```js\n// https://eslint.org/docs/user-guide/configuring\n\nmodule.exports = {\n\n  // 此项是用来告诉eslint找当前配置文件不能往父级查找\n  root: true,\n\n  // 此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析\n  parser: 'babel-eslint',\n\n  // 此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式\n  parserOptions: {\n    // 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块\n    sourceType: 'module',\n    \"ecmaVersion\": 6,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n\n  // 此项指定环境的全局变量，下面的配置指定为浏览器环境\n  env: {\n    \"browser\": true,\n    \"node\": true,\n    \"commonjs\": true,\n    \"es6\": true,\n    \"amd\": true\n  },\n  // https://github.com/standard/standard/blob/master/docs/RULES-en.md\n  // 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错\n  extends: 'vue',\n  // 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的\n  plugins: [\n    'html',\n    \"flow-vars\", \n    \"react\"\n  ],\n  /* \n   下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-\n    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致\n    \"off\" -> 0 关闭规则\n    \"warn\" -> 1 开启警告规则\n    \"error\" -> 2 开启错误规则\n  */\n  rules: {\n    // 不需要\n    \"space-before-function-paren\": 0,  // 函数定义时括号前面要不要有空格\n    \"eol-last\": 0,  // 文件以单一的换行符结束\n    \"no-extra-semi\": 0, // 可以多余的冒号\n    \"semi\": 0,  // 语句可以不需要分号结尾\n    \"eqeqeq\": 0, // 必须使用全等\n    \"one-var\": 0, // 连续声明\n    \"no-undef\": 0, // 可以 有未定义的变量\n\n    // 警告\n    \"no-extra-boolean-cast\": 1, // 不必要的bool转换\n    \"no-extra-parens\": 1, // 非必要的括号\n    \"no-empty\": 1, // 块语句中的内容不能为空\n    \"no-use-before-define\": [1, \"nofunc\"], // 未定义前不能使用\n    \"complexity\": [1, 10], // 循环复杂度\n    \"no-unused-vars\": 1, // 不能有声明后未被使用的变量或参数\n    // vue\n    \"flow-vars/define-flow-type\": 1,\n    \"flow-vars/use-flow-type\": 1,\n\n    // react\n    \"react/jsx-uses-react\": 2,\n    \"react/jsx-uses-vars\": 2,\n\n    // 错误\n    \"comma-dangle\": [2, \"never\"], // 对象字面量项尾不能有逗号\n    \"no-debugger\": 2, // 禁止使用debugger\n    \"no-constant-condition\": 2, // 禁止在条件中使用常量表达式 if(true) if(1)\n    \"no-dupe-args\": 2, // 函数参数不能重复\n    \"no-dupe-keys\": 2, // 在创建对象字面量时不允许键重复 {a:1,a:1}\n    \"no-duplicate-case\": 2, // switch中的case标签不能重复\n    \"no-empty-character-class\": 2, // 正则表达式中的[]内容不能为空\n    \"no-invalid-regexp\": 2, // 禁止无效的正则表达式\n    \"no-func-assign\": 2, // 禁止重复的函数声明\n    \"valid-typeof\": 2,  // 必须使用合法的typeof的值\n    \"no-unreachable\": 2, // 不能有无法执行的代码\n    \"no-unexpected-multiline\": 2, // 避免多行表达式\n    \"no-sparse-arrays\": 2, // 禁止稀疏数组， [1,,2]\n    \"no-shadow-restricted-names\": 2, // 严格模式中规定的限制标识符不能作为声明时的变量名使用\n    \"no-cond-assign\": 2, // 禁止在条件表达式中使用赋值语句\n    \"no-native-reassign\": 2, // 不能重写native对象\n\n    // 代码风格\n    \"no-else-return\": 1, // 如果if语句里面有return,后面不能跟else语句\n    \"no-multi-spaces\": 1, // 不能用多余的空格\n    \"key-spacing\": [1, {  // 对象字面量中冒号的前后空格\n      \"beforeColon\": false,\n      \"afterColon\": true\n    }],\n    \"block-scoped-var\": 2, // 块语句中使用var\n    \"consistent-return\": 2, // return 后面是否允许省略\n    \"accessor-pairs\": 2, // 在对象中使用getter/setter\n    \"dot-location\": [2, \"property\"], // 对象访问符的位置，换行的时候在行首还是行尾\n    \"no-lone-blocks\": 2, // 禁止不必要的嵌套块\n    \"no-labels\": 2, // 禁止标签声明\n    \"no-extend-native\": 2, // 禁止扩展native对象\n    \"no-floating-decimal\": 2, // 禁止省略浮点数中的0 .5 3.\n    \"no-loop-func\": 2, // 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n    \"no-new-func\": 2,  // 禁止使用new Function\n    \"no-self-compare\": 2, // 不能比较自身\n    \"no-sequences\": 2, // 禁止使用逗号运算符\n    \"no-throw-literal\": 2, // 禁止抛出字面量错误 throw \"error\";\n    \"no-return-assign\": [2, \"always\"], // return 语句中不能有赋值表达式\n    \"no-redeclare\": [2, {   // 禁止重复声明变量\n      \"builtinGlobals\": true\n    }],\n    \"no-unused-expressions\": [2, {  // 禁止无用的表达式\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true\n    }],\n    \"no-useless-call\": 2, // 禁止不必要的call和apply\n    \"no-useless-concat\": 2,\n    \"no-void\": 2, // 禁用void操作符\n    \"no-with\": 2, // 禁用with\n    \"space-infix-ops\": 2, // 中缀操作符周围要不要有空格\n    \"valid-jsdoc\": [2, { // jsdoc规则\n      \"requireParamDescription\": true,\n      \"requireReturnDescription\": true\n    }],\n    \"no-warning-comments\": [2, {  // 不能有警告备注\n      \"terms\": [\"todo\", \"fixme\", \"any other term\"],\n      \"location\": \"anywhere\"\n    }],\n    \"curly\": 1, // 必须使用 if(){} 中的{}\n\n    // common js\n    \"no-duplicate-imports\": 1\n  }\n}\n```\n\n了解更多关于 eslint 配置可以访问 [https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring)。\n","slug":"eslintrc-js","published":1,"updated":"2019-03-06T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n1z0009k8sv75r9hnvz","content":"<p>使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件。</p>\n<p>ESLint 支持几种格式的配置文件：</p>\n<ul>\n<li>JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。</li>\n<li>YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li>\n<li>JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许JavaScript 风格的注释。</li>\n<li>(弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。</li>\n<li>package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。</li>\n</ul>\n<p>如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</p>\n<ol>\n<li>.eslintrc.js</li>\n<li>.eslintrc.yaml</li>\n<li>.eslintrc.yml</li>\n<li>.eslintrc.json</li>\n<li>.eslintrc</li>\n<li>package.json</li>\n</ol>\n<p>以 eslintrc.js 为例演示项目中的一些常用的 eslint 配置规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://eslint.org/docs/user-guide/configuring</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来告诉eslint找当前配置文件不能往父级查找</span></span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析</span></span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;babel-eslint&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式</span></span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块</span></span><br><span class=\"line\">    sourceType: <span class=\"string\">&#x27;module&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ecmaVersion&quot;</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项指定环境的全局变量，下面的配置指定为浏览器环境</span></span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;browser&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;node&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;commonjs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;es6&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;amd&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// https://github.com/standard/standard/blob/master/docs/RULES-en.md</span></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错</span></span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: <span class=\"string\">&#x27;vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars&quot;</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">   下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-</span></span><br><span class=\"line\"><span class=\"comment\">    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;off&quot; -&gt; 0 关闭规则</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;warn&quot; -&gt; 1 开启警告规则</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;error&quot; -&gt; 2 开启错误规则</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要</span></span><br><span class=\"line\">    <span class=\"string\">&quot;space-before-function-paren&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 函数定义时括号前面要不要有空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;eol-last&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 文件以单一的换行符结束</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-semi&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 可以多余的冒号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;semi&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 语句可以不需要分号结尾</span></span><br><span class=\"line\">    <span class=\"string\">&quot;eqeqeq&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 必须使用全等</span></span><br><span class=\"line\">    <span class=\"string\">&quot;one-var&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 连续声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-undef&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 可以 有未定义的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-boolean-cast&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不必要的bool转换</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-parens&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 非必要的括号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 块语句中的内容不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-use-before-define&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;nofunc&quot;</span>], <span class=\"comment\">// 未定义前不能使用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;complexity&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">10</span>], <span class=\"comment\">// 循环复杂度</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unused-vars&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不能有声明后未被使用的变量或参数</span></span><br><span class=\"line\">    <span class=\"comment\">// vue</span></span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars/define-flow-type&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars/use-flow-type&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// react</span></span><br><span class=\"line\">    <span class=\"string\">&quot;react/jsx-uses-react&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;react/jsx-uses-vars&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误</span></span><br><span class=\"line\">    <span class=\"string\">&quot;comma-dangle&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>], <span class=\"comment\">// 对象字面量项尾不能有逗号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用debugger</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-constant-condition&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-dupe-args&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 函数参数不能重复</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-dupe-keys&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-duplicate-case&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// switch中的case标签不能重复</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-empty-character-class&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 正则表达式中的[]内容不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-invalid-regexp&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止无效的正则表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-func-assign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止重复的函数声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;valid-typeof&quot;</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 必须使用合法的typeof的值</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unreachable&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能有无法执行的代码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unexpected-multiline&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 避免多行表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-sparse-arrays&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止稀疏数组， [1,,2]</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-shadow-restricted-names&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-cond-assign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在条件表达式中使用赋值语句</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-native-reassign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能重写native对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 代码风格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-else-return&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 如果if语句里面有return,后面不能跟else语句</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-multi-spaces&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不能用多余的空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;key-spacing&quot;</span>: [<span class=\"number\">1</span>, &#123;  <span class=\"comment\">// 对象字面量中冒号的前后空格</span></span><br><span class=\"line\">      <span class=\"string\">&quot;beforeColon&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;afterColon&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;block-scoped-var&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 块语句中使用var</span></span><br><span class=\"line\">    <span class=\"string\">&quot;consistent-return&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// return 后面是否允许省略</span></span><br><span class=\"line\">    <span class=\"string\">&quot;accessor-pairs&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 在对象中使用getter/setter</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dot-location&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;property&quot;</span>], <span class=\"comment\">// 对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-lone-blocks&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止不必要的嵌套块</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-labels&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止标签声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extend-native&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止扩展native对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-floating-decimal&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止省略浮点数中的0 .5 3.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-loop-func&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-new-func&quot;</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 禁止使用new Function</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-self-compare&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能比较自身</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-sequences&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用逗号运算符</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-throw-literal&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-return-assign&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>], <span class=\"comment\">// return 语句中不能有赋值表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-redeclare&quot;</span>: [<span class=\"number\">2</span>, &#123;   <span class=\"comment\">// 禁止重复声明变量</span></span><br><span class=\"line\">      <span class=\"string\">&quot;builtinGlobals&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-unused-expressions&quot;</span>: [<span class=\"number\">2</span>, &#123;  <span class=\"comment\">// 禁止无用的表达式</span></span><br><span class=\"line\">      <span class=\"string\">&quot;allowShortCircuit&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;allowTernary&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-useless-call&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止不必要的call和apply</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-useless-concat&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;no-void&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用void操作符</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-with&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用with</span></span><br><span class=\"line\">    <span class=\"string\">&quot;space-infix-ops&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 中缀操作符周围要不要有空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;valid-jsdoc&quot;</span>: [<span class=\"number\">2</span>, &#123; <span class=\"comment\">// jsdoc规则</span></span><br><span class=\"line\">      <span class=\"string\">&quot;requireParamDescription&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;requireReturnDescription&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-warning-comments&quot;</span>: [<span class=\"number\">2</span>, &#123;  <span class=\"comment\">// 不能有警告备注</span></span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: [<span class=\"string\">&quot;todo&quot;</span>, <span class=\"string\">&quot;fixme&quot;</span>, <span class=\"string\">&quot;any other term&quot;</span>],</span><br><span class=\"line\">      <span class=\"string\">&quot;location&quot;</span>: <span class=\"string\">&quot;anywhere&quot;</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;curly&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// common js</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-duplicate-imports&quot;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>了解更多关于 eslint 配置可以访问 <a href=\"https://eslint.org/docs/user-guide/configuring\">https://eslint.org/docs/user-guide/configuring</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 JavaScript、JSON 或者 YAML 文件为整个目录（处理你的主目录）和它的子目录指定配置信息。可以配置一个独立的 .eslintrc.* 文件，或者直接在 package.json 文件里的 eslintConfig 字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在命令行运行时指定一个任意的配置文件。</p>\n<p>ESLint 支持几种格式的配置文件：</p>\n<ul>\n<li>JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。</li>\n<li>YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li>\n<li>JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许JavaScript 风格的注释。</li>\n<li>(弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。</li>\n<li>package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。</li>\n</ul>\n<p>如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</p>\n<ol>\n<li>.eslintrc.js</li>\n<li>.eslintrc.yaml</li>\n<li>.eslintrc.yml</li>\n<li>.eslintrc.json</li>\n<li>.eslintrc</li>\n<li>package.json</li>\n</ol>\n<p>以 eslintrc.js 为例演示项目中的一些常用的 eslint 配置规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://eslint.org/docs/user-guide/configuring</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来告诉eslint找当前配置文件不能往父级查找</span></span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析</span></span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;babel-eslint&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式</span></span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块</span></span><br><span class=\"line\">    sourceType: <span class=\"string\">&#x27;module&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ecmaVersion&quot;</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此项指定环境的全局变量，下面的配置指定为浏览器环境</span></span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;browser&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;node&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;commonjs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;es6&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;amd&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// https://github.com/standard/standard/blob/master/docs/RULES-en.md</span></span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错</span></span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: <span class=\"string\">&#x27;vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars&quot;</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">   下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-</span></span><br><span class=\"line\"><span class=\"comment\">    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;off&quot; -&gt; 0 关闭规则</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;warn&quot; -&gt; 1 开启警告规则</span></span><br><span class=\"line\"><span class=\"comment\">    &quot;error&quot; -&gt; 2 开启错误规则</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要</span></span><br><span class=\"line\">    <span class=\"string\">&quot;space-before-function-paren&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 函数定义时括号前面要不要有空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;eol-last&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 文件以单一的换行符结束</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-semi&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 可以多余的冒号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;semi&quot;</span>: <span class=\"number\">0</span>,  <span class=\"comment\">// 语句可以不需要分号结尾</span></span><br><span class=\"line\">    <span class=\"string\">&quot;eqeqeq&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 必须使用全等</span></span><br><span class=\"line\">    <span class=\"string\">&quot;one-var&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 连续声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-undef&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 可以 有未定义的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-boolean-cast&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不必要的bool转换</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extra-parens&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 非必要的括号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 块语句中的内容不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-use-before-define&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;nofunc&quot;</span>], <span class=\"comment\">// 未定义前不能使用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;complexity&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">10</span>], <span class=\"comment\">// 循环复杂度</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unused-vars&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不能有声明后未被使用的变量或参数</span></span><br><span class=\"line\">    <span class=\"comment\">// vue</span></span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars/define-flow-type&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;flow-vars/use-flow-type&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// react</span></span><br><span class=\"line\">    <span class=\"string\">&quot;react/jsx-uses-react&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;react/jsx-uses-vars&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误</span></span><br><span class=\"line\">    <span class=\"string\">&quot;comma-dangle&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>], <span class=\"comment\">// 对象字面量项尾不能有逗号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用debugger</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-constant-condition&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-dupe-args&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 函数参数不能重复</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-dupe-keys&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-duplicate-case&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// switch中的case标签不能重复</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-empty-character-class&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 正则表达式中的[]内容不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-invalid-regexp&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止无效的正则表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-func-assign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止重复的函数声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;valid-typeof&quot;</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 必须使用合法的typeof的值</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unreachable&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能有无法执行的代码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-unexpected-multiline&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 避免多行表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-sparse-arrays&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止稀疏数组， [1,,2]</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-shadow-restricted-names&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-cond-assign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在条件表达式中使用赋值语句</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-native-reassign&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能重写native对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 代码风格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-else-return&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 如果if语句里面有return,后面不能跟else语句</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-multi-spaces&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 不能用多余的空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;key-spacing&quot;</span>: [<span class=\"number\">1</span>, &#123;  <span class=\"comment\">// 对象字面量中冒号的前后空格</span></span><br><span class=\"line\">      <span class=\"string\">&quot;beforeColon&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;afterColon&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;block-scoped-var&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 块语句中使用var</span></span><br><span class=\"line\">    <span class=\"string\">&quot;consistent-return&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// return 后面是否允许省略</span></span><br><span class=\"line\">    <span class=\"string\">&quot;accessor-pairs&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 在对象中使用getter/setter</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dot-location&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;property&quot;</span>], <span class=\"comment\">// 对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-lone-blocks&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止不必要的嵌套块</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-labels&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止标签声明</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-extend-native&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止扩展native对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-floating-decimal&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止省略浮点数中的0 .5 3.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-loop-func&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-new-func&quot;</span>: <span class=\"number\">2</span>,  <span class=\"comment\">// 禁止使用new Function</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-self-compare&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能比较自身</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-sequences&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用逗号运算符</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-throw-literal&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-return-assign&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>], <span class=\"comment\">// return 语句中不能有赋值表达式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-redeclare&quot;</span>: [<span class=\"number\">2</span>, &#123;   <span class=\"comment\">// 禁止重复声明变量</span></span><br><span class=\"line\">      <span class=\"string\">&quot;builtinGlobals&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-unused-expressions&quot;</span>: [<span class=\"number\">2</span>, &#123;  <span class=\"comment\">// 禁止无用的表达式</span></span><br><span class=\"line\">      <span class=\"string\">&quot;allowShortCircuit&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;allowTernary&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-useless-call&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止不必要的call和apply</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-useless-concat&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;no-void&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用void操作符</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-with&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用with</span></span><br><span class=\"line\">    <span class=\"string\">&quot;space-infix-ops&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 中缀操作符周围要不要有空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;valid-jsdoc&quot;</span>: [<span class=\"number\">2</span>, &#123; <span class=\"comment\">// jsdoc规则</span></span><br><span class=\"line\">      <span class=\"string\">&quot;requireParamDescription&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;requireReturnDescription&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;no-warning-comments&quot;</span>: [<span class=\"number\">2</span>, &#123;  <span class=\"comment\">// 不能有警告备注</span></span><br><span class=\"line\">      <span class=\"string\">&quot;terms&quot;</span>: [<span class=\"string\">&quot;todo&quot;</span>, <span class=\"string\">&quot;fixme&quot;</span>, <span class=\"string\">&quot;any other term&quot;</span>],</span><br><span class=\"line\">      <span class=\"string\">&quot;location&quot;</span>: <span class=\"string\">&quot;anywhere&quot;</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;curly&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// common js</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-duplicate-imports&quot;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>了解更多关于 eslint 配置可以访问 <a href=\"https://eslint.org/docs/user-guide/configuring\">https://eslint.org/docs/user-guide/configuring</a>。</p>\n"},{"title":"文件上传header字段content-type设置问题","author":"Jelon","date":"2019-06-01T00:00:00.000Z","thumbnail":null,"blogexcerpt":"问题描述 文件通过FormData的方式去上传，头部字段content-type字段设置为`multipart/form-data`，会导致后端无法解析文件内容，导致文件上传失败。文件上传header字段无需设置`multipart/form-data`，因为如果设置了`multipart/form-data`将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的...","_content":"\n<!-- toc -->\n\n### 问题描述\n\n文件通过FormData的方式去上传，头部字段content-type字段设置为`multipart/form-data`，会导致后端无法解析文件内容，导致文件上传失败。\n\n![image](https://user-images.githubusercontent.com/5547151/58750385-5cfc3600-84c4-11e9-8fa2-11e6d7bc2f60.png)\n![image](https://user-images.githubusercontent.com/5547151/58750394-69808e80-84c4-11e9-80db-1b4167e72b82.png)\n\n### 解决方案\n\n文件上传header字段无需设置`multipart/form-data`，因为如果设置了`multipart/form-data`将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的content-type。\n\n![5cef4547ea3b4a792301f475_origin](https://user-images.githubusercontent.com/5547151/58750454-53270280-84c5-11e9-96f2-f7714888a0dc.png)\n\nps，个人封装的ajax库代码如下：\n\n```js\nconst ajax = opt => {\n  opt = opt || {}\n  opt.method = opt.method.toUpperCase() || 'POST'\n  opt.url = opt.url || ''\n  opt.async = opt.async || true\n  opt.data = opt.data || {}\n  opt.success = opt.success || (() => {})\n  opt.fail = opt.fail || (() => {})\n  opt.header = opt.header || {}\n  opt.contentType = opt.contentType || ''\n  const xmlHttp = new XMLHttpRequest()\n  let params = []\n  if (typeof opt.data === 'object') {\n    for (let key in opt.data){\n      params.push(key + '=' + opt.data[key])\n    }\n  }\n  let postData = params.join('&')\n\n  if (opt.method.toUpperCase() === 'POST') {\n    xmlHttp.open(opt.method, opt.url, opt.async)\n    for (const headerKey in opt.header) {\n      xmlHttp.setRequestHeader(headerKey, opt.header[headerKey])\n    }\n    \n    if (opt.data.constructor === FormData) {\n      xmlHttp.setRequestHeader('Accept', '*/*')\n      // 注释掉以下一行代码\n      // xmlHttp.setRequestHeader('Content-Type', 'multipart/form-data')\n      xmlHttp.send(opt.data)\n    } else if (/application\\/x-www-form-urlencoded/i.test(opt.contentType)) {\n      xmlHttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8')\n      xmlHttp.send(postData)\n    } else {\n      xmlHttp.setRequestHeader('Content-Type', 'application/json;charset=utf-8')\n      xmlHttp.send(JSON.stringify(opt.data))\n    }\n  } else if (opt.method.toUpperCase() === 'GET') {\n    if (postData) {\n      if (opt.url.indexOf('?') > -1) {\n        opt.url += '&' + postData\n      } else {\n        opt.url += '?' + postData\n      }\n    }\n    xmlHttp.open(opt.method, opt.url, opt.async)\n    for (const headerKey in opt.header) {\n      xmlHttp.setRequestHeader(headerKey, opt.header[headerKey])\n    }\n    xmlHttp.send(null)\n  }\n  xmlHttp.onreadystatechange = function () {\n    if (xmlHttp.readyState === 4) {\n      if (xmlHttp.status === 200) {\n        opt.success(xmlHttp.responseText)\n      } else {\n        opt.fail(xmlHttp.responseText)\n      }\n    }\n  }\n}\n```","source":"_posts/file-upload-header-content-type.md","raw":"---\ntitle: 文件上传header字段content-type设置问题\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2019-06-01\ntags:\n\t- 文件上传\n\t- content-type\nthumbnail:\nblogexcerpt: 问题描述 文件通过FormData的方式去上传，头部字段content-type字段设置为`multipart/form-data`，会导致后端无法解析文件内容，导致文件上传失败。文件上传header字段无需设置`multipart/form-data`，因为如果设置了`multipart/form-data`将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的...\n\n---\n\n<!-- toc -->\n\n### 问题描述\n\n文件通过FormData的方式去上传，头部字段content-type字段设置为`multipart/form-data`，会导致后端无法解析文件内容，导致文件上传失败。\n\n![image](https://user-images.githubusercontent.com/5547151/58750385-5cfc3600-84c4-11e9-8fa2-11e6d7bc2f60.png)\n![image](https://user-images.githubusercontent.com/5547151/58750394-69808e80-84c4-11e9-80db-1b4167e72b82.png)\n\n### 解决方案\n\n文件上传header字段无需设置`multipart/form-data`，因为如果设置了`multipart/form-data`将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的content-type。\n\n![5cef4547ea3b4a792301f475_origin](https://user-images.githubusercontent.com/5547151/58750454-53270280-84c5-11e9-96f2-f7714888a0dc.png)\n\nps，个人封装的ajax库代码如下：\n\n```js\nconst ajax = opt => {\n  opt = opt || {}\n  opt.method = opt.method.toUpperCase() || 'POST'\n  opt.url = opt.url || ''\n  opt.async = opt.async || true\n  opt.data = opt.data || {}\n  opt.success = opt.success || (() => {})\n  opt.fail = opt.fail || (() => {})\n  opt.header = opt.header || {}\n  opt.contentType = opt.contentType || ''\n  const xmlHttp = new XMLHttpRequest()\n  let params = []\n  if (typeof opt.data === 'object') {\n    for (let key in opt.data){\n      params.push(key + '=' + opt.data[key])\n    }\n  }\n  let postData = params.join('&')\n\n  if (opt.method.toUpperCase() === 'POST') {\n    xmlHttp.open(opt.method, opt.url, opt.async)\n    for (const headerKey in opt.header) {\n      xmlHttp.setRequestHeader(headerKey, opt.header[headerKey])\n    }\n    \n    if (opt.data.constructor === FormData) {\n      xmlHttp.setRequestHeader('Accept', '*/*')\n      // 注释掉以下一行代码\n      // xmlHttp.setRequestHeader('Content-Type', 'multipart/form-data')\n      xmlHttp.send(opt.data)\n    } else if (/application\\/x-www-form-urlencoded/i.test(opt.contentType)) {\n      xmlHttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8')\n      xmlHttp.send(postData)\n    } else {\n      xmlHttp.setRequestHeader('Content-Type', 'application/json;charset=utf-8')\n      xmlHttp.send(JSON.stringify(opt.data))\n    }\n  } else if (opt.method.toUpperCase() === 'GET') {\n    if (postData) {\n      if (opt.url.indexOf('?') > -1) {\n        opt.url += '&' + postData\n      } else {\n        opt.url += '?' + postData\n      }\n    }\n    xmlHttp.open(opt.method, opt.url, opt.async)\n    for (const headerKey in opt.header) {\n      xmlHttp.setRequestHeader(headerKey, opt.header[headerKey])\n    }\n    xmlHttp.send(null)\n  }\n  xmlHttp.onreadystatechange = function () {\n    if (xmlHttp.readyState === 4) {\n      if (xmlHttp.status === 200) {\n        opt.success(xmlHttp.responseText)\n      } else {\n        opt.fail(xmlHttp.responseText)\n      }\n    }\n  }\n}\n```","slug":"file-upload-header-content-type","published":1,"updated":"2019-06-01T00:00:00.000Z","_id":"cmduj3n23000ck8sv07kk7p6w","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\">问题描述</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"问题描述\">问题描述</span></h3><p>文件通过FormData的方式去上传，头部字段content-type字段设置为<code>multipart/form-data</code>，会导致后端无法解析文件内容，导致文件上传失败。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/58750385-5cfc3600-84c4-11e9-8fa2-11e6d7bc2f60.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/5547151/58750394-69808e80-84c4-11e9-80db-1b4167e72b82.png\" alt=\"image\"></p>\n<h3><span id=\"解决方案\">解决方案</span></h3><p>文件上传header字段无需设置<code>multipart/form-data</code>，因为如果设置了<code>multipart/form-data</code>将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的content-type。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/58750454-53270280-84c5-11e9-96f2-f7714888a0dc.png\" alt=\"5cef4547ea3b4a792301f475_origin\"></p>\n<p>ps，个人封装的ajax库代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ajax</span> = opt =&gt; &#123;</span><br><span class=\"line\">  opt = opt || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">method</span> = opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() || <span class=\"string\">&#x27;POST&#x27;</span></span><br><span class=\"line\">  opt.<span class=\"property\">url</span> = opt.<span class=\"property\">url</span> || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  opt.<span class=\"property\">async</span> = opt.<span class=\"property\">async</span> || <span class=\"literal\">true</span></span><br><span class=\"line\">  opt.<span class=\"property\">data</span> = opt.<span class=\"property\">data</span> || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">success</span> = opt.<span class=\"property\">success</span> || (<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  opt.<span class=\"property\">fail</span> = opt.<span class=\"property\">fail</span> || (<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  opt.<span class=\"property\">header</span> = opt.<span class=\"property\">header</span> || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">contentType</span> = opt.<span class=\"property\">contentType</span> || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xmlHttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opt.<span class=\"property\">data</span> === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> opt.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">      params.<span class=\"title function_\">push</span>(key + <span class=\"string\">&#x27;=&#x27;</span> + opt.<span class=\"property\">data</span>[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() === <span class=\"string\">&#x27;POST&#x27;</span>) &#123;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">open</span>(opt.<span class=\"property\">method</span>, opt.<span class=\"property\">url</span>, opt.<span class=\"property\">async</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> headerKey <span class=\"keyword\">in</span> opt.<span class=\"property\">header</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(headerKey, opt.<span class=\"property\">header</span>[headerKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opt.<span class=\"property\">data</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">FormData</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Accept&#x27;</span>, <span class=\"string\">&#x27;*/*&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 注释掉以下一行代码</span></span><br><span class=\"line\">      <span class=\"comment\">// xmlHttp.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;multipart/form-data&#x27;)</span></span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(opt.<span class=\"property\">data</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/application\\/x-www-form-urlencoded/i</span>.<span class=\"title function_\">test</span>(opt.<span class=\"property\">contentType</span>)) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(postData)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(opt.<span class=\"property\">data</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() === <span class=\"string\">&#x27;GET&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postData) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (opt.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        opt.<span class=\"property\">url</span> += <span class=\"string\">&#x27;&amp;&#x27;</span> + postData</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        opt.<span class=\"property\">url</span> += <span class=\"string\">&#x27;?&#x27;</span> + postData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">open</span>(opt.<span class=\"property\">method</span>, opt.<span class=\"property\">url</span>, opt.<span class=\"property\">async</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> headerKey <span class=\"keyword\">in</span> opt.<span class=\"property\">header</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(headerKey, opt.<span class=\"property\">header</span>[headerKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xmlHttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xmlHttp.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (xmlHttp.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        opt.<span class=\"title function_\">success</span>(xmlHttp.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        opt.<span class=\"title function_\">fail</span>(xmlHttp.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\">问题描述</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>文件通过FormData的方式去上传，头部字段content-type字段设置为<code>multipart/form-data</code>，会导致后端无法解析文件内容，导致文件上传失败。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/58750385-5cfc3600-84c4-11e9-8fa2-11e6d7bc2f60.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/5547151/58750394-69808e80-84c4-11e9-80db-1b4167e72b82.png\" alt=\"image\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>文件上传header字段无需设置<code>multipart/form-data</code>，因为如果设置了<code>multipart/form-data</code>将导致content-type没有边界boundary，从而使得后端无法解释文件流。因为这种情况下建议，header不对content-type进行设置，使用浏览器默认匹配的content-type。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/58750454-53270280-84c5-11e9-96f2-f7714888a0dc.png\" alt=\"5cef4547ea3b4a792301f475_origin\"></p>\n<p>ps，个人封装的ajax库代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ajax</span> = opt =&gt; &#123;</span><br><span class=\"line\">  opt = opt || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">method</span> = opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() || <span class=\"string\">&#x27;POST&#x27;</span></span><br><span class=\"line\">  opt.<span class=\"property\">url</span> = opt.<span class=\"property\">url</span> || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  opt.<span class=\"property\">async</span> = opt.<span class=\"property\">async</span> || <span class=\"literal\">true</span></span><br><span class=\"line\">  opt.<span class=\"property\">data</span> = opt.<span class=\"property\">data</span> || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">success</span> = opt.<span class=\"property\">success</span> || (<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  opt.<span class=\"property\">fail</span> = opt.<span class=\"property\">fail</span> || (<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  opt.<span class=\"property\">header</span> = opt.<span class=\"property\">header</span> || &#123;&#125;</span><br><span class=\"line\">  opt.<span class=\"property\">contentType</span> = opt.<span class=\"property\">contentType</span> || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xmlHttp = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opt.<span class=\"property\">data</span> === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> opt.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">      params.<span class=\"title function_\">push</span>(key + <span class=\"string\">&#x27;=&#x27;</span> + opt.<span class=\"property\">data</span>[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() === <span class=\"string\">&#x27;POST&#x27;</span>) &#123;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">open</span>(opt.<span class=\"property\">method</span>, opt.<span class=\"property\">url</span>, opt.<span class=\"property\">async</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> headerKey <span class=\"keyword\">in</span> opt.<span class=\"property\">header</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(headerKey, opt.<span class=\"property\">header</span>[headerKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opt.<span class=\"property\">data</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">FormData</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Accept&#x27;</span>, <span class=\"string\">&#x27;*/*&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 注释掉以下一行代码</span></span><br><span class=\"line\">      <span class=\"comment\">// xmlHttp.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;multipart/form-data&#x27;)</span></span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(opt.<span class=\"property\">data</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/application\\/x-www-form-urlencoded/i</span>.<span class=\"title function_\">test</span>(opt.<span class=\"property\">contentType</span>)) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(postData)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(opt.<span class=\"property\">data</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>() === <span class=\"string\">&#x27;GET&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postData) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (opt.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        opt.<span class=\"property\">url</span> += <span class=\"string\">&#x27;&amp;&#x27;</span> + postData</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        opt.<span class=\"property\">url</span> += <span class=\"string\">&#x27;?&#x27;</span> + postData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">open</span>(opt.<span class=\"property\">method</span>, opt.<span class=\"property\">url</span>, opt.<span class=\"property\">async</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> headerKey <span class=\"keyword\">in</span> opt.<span class=\"property\">header</span>) &#123;</span><br><span class=\"line\">      xmlHttp.<span class=\"title function_\">setRequestHeader</span>(headerKey, opt.<span class=\"property\">header</span>[headerKey])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xmlHttp.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xmlHttp.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xmlHttp.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (xmlHttp.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        opt.<span class=\"title function_\">success</span>(xmlHttp.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        opt.<span class=\"title function_\">fail</span>(xmlHttp.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hexo填坑教程整理","date":"2016-05-15T11:01:11.000Z","author":"简书","thumbnail":null,"blogexcerpt":"本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。","_content":"\n<!-- toc -->\n\n## 简述\n\n本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自[简书](http://www.jianshu.com/)，后续我也会陆续补充。\n\n<!-- more -->\n\n### 1. 安装Hexo\n\n```bash\n$ npm install -g hexo\n```\n\n这里可能安装失败，可能权限不够，在命令前加sudo\n\n```bash\n$ sudo npm install -g hexo\n```\n\n### 2. 部署Hexo\n\n```bash\n$ hexo init\n```\n \n注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。\n执行命令生，会在当前命令的路径下，生成以下文件：\n\n```\n    .\n    ├── .deploy\n    ├── public\n    ├── scaffolds\n    ├── scripts\n    ├── source\n    |   ├── _drafts\n    |   └── _posts\n    ├── themes\n    ├── _config.yml\n    └── package.json\n```\n\n- .deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n- _drafts：草稿文章\n- _posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n### 3. Hexo命令\n\nHexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。\n\n#### 全局设置\n在你博客目录下有一个文件名_config.yml，打开可以配置信息。\n\n#### 局部页面\n在你博客目录下 \\themes\\你使用的主题\\_config.yml\n\n### 写博客相关命令\n\nHexo常用命令：\n\n```bash\nhexo new \"postName\"       #新建文章\nhexo new page \"pageName\"  #新建页面\nhexo generate             #生成静态页面至public目录\nhexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy               #将.deploy目录部署到GitHub\n```\n\n当然，如果每次输入那么长命令，那么一定想到用简写：\n\n```bash\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n其它的，还可以复合命令：\n\n```bash\nhexo deploy -g\nhexo server -g\n```\n\n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧\n\n```bash\n$ hexo clean\n```\n\n当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。\n\n注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n\n### 4. 一些报错处理\n\n- 在本地调试开启server的时候出现如下提示：\n\n```bash\nERROR Plugin load failed: hexo-server\n```\n\n原因：\n\n\nBesides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n解决方法，执行命令：\n\n```bash\nsudo npm install hexo-server\n```\n\n- 执行命令hexo server，有如下提示：\n\n```bash\nUsage: hexo\n...\n```\n\n原因：\n\n我认为是没有生成本地服务\n解决方法，执行命令：\n\n```bash\nnpm install hexo-server --save\n```\n\n- 提示：hexo-server@0.1.2 node_modules/hexo-server\n\n白板和Cannot GET / 几个字\n\n原因:\n\n由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n```bash\n$ npm install hexo-renderer-ejs --save\n$ npm install hexo-renderer-stylus --save\n$ npm install hexo-renderer-marked --save\n```\n\n这个时候再重新生成静态文件，命令：\n\n```bash\n$ hexo generate （或hexo g）\n\n```\n\n\n启动本地服务器：\n\n\n```bash\n$ hexo server （或hexo s）\n\n```\n\n- 升级 node 版本之后编译报错\n\n原因：可能是由于 hexo 依赖的 node 版本号还是以前版本而导致\n\n解决方法：建议重装一下 hexo ，重新执行一遍 `npm install -g hexo-cli` 即可。\n\n \n### 5. 博客管理\n\n\n上面命令中，其实生成文章，可以直接把写好的文章插入到目录`/_posts` 下面，后缀为.MD就行，在文章头部固定格式：\n\n\n- title: Mac提高使用效率的一些方法   # 文章的标题，这个才是显示的文章标题，其实文件名不影响\n- date: 2015-09-01 20:33:26      # 用命令会自动生成，也可以自己写，所以文章时间可以改\n- categories: technology         # 文章的分类，这个可以自己定义\n- tags: [Mac,效率,快捷方式]        # tag，为文章添加标签，方便搜索\n\n\n当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。\n\n\n```\ntags:\n  - tag1\n  - tag2\n```\n\n\n如果在博客文章列表中，不想全文显示，可以增加*<!--more-->* , 后面的内容就不会显示在列表。\n\n\n### 6. 插件\n\n\n安装插件\n\n\n```bash\n$ npm install <plugin-name> --save\n```\n\n添加RSS\n\n```bash\n$ npm install hexo-generator-feed\n```\n\n然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)\n解决方法：\n\n```bash\n$ npm install hexo-generator-feed --save\n```\n\n这个命令来自hexo-generator-feed\n\n```bash\n  Install\n     $ npm install hexo-generator-feed --save\n   Hexo 3: 1.x\n   Hexo 2: 0.x\n  Options\n     You can configure this plugin in _config.yml.\n\n    feed:\n       type: atom\n       path: atom.xml\n       limit: 20\n\n      type - Feed type. (atom/rss2)\n      path - Feed path. (Default: atom.xml/rss2.xml)\n      limit - Maximum number of posts in the feed (Use 0 or false to show all posts)\n```\n\n其中可以选择：\n然后在 Hexo 根目录下的 _config.yml 里配置一下\n\n```bash\n    feed:\n        type: atom\n        path: atom.xml\n        limit: 20\n    #type 表示类型, 是 atom 还是 rss2.\n    #path 表示 Feed 路径\n    #limit 最多多少篇最近文章\n```\n\n最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！\n\n例如要订阅我的blog只要输入ihtc.cc/atom就可以搜寻到啦！\n\n添加Sitemap\nSitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。\n\n```bash\n$ npm install hexo-generator-sitemap --save\n```\n\n这个命令来自hexo-generator-sitemap\n\n```bash\nInstall\n    $ npm install hexo-generator-sitemap --save\n\n    Hexo 3: 1.x\n    Hexo 2: 0.x\nOptions\n    You can configure this plugin in _config.yml.\n\n    sitemap:\n        path: sitemap.xml\n    path - Sitemap path. (Default: sitemap.xml)\n```\n\n同样可以选择：\n在 Hexo 根目录下的 _config.yml 里配置一下\n\n```\nsitemap:\n   path: sitemap.xml\n   #path 表示 Sitemap 的路径. 默认为 sitemap.xml.\n```\n\n对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的。 \n\n安装\n\n```bash\n$ npm install hexo-generator-baidu-sitemap --save\n```\n\n然后在 Hexo 根目录下的 _config.yml 里配置一下\n\n```\nbaidusitemap:\n\tpath: baidusitemap.xml\n```\n\n其它插件\nPlugins · hexojs/hexo\n\n### 7. 评论设置\n\n在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。\n\n需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：jelon.duoshuo.com，那么我的short_name: \"jelon\"\n\n### 8. 404页面\n\nGitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。\n其实，404页面可以做更多有意义的事，来做个404公益项目吧。\n腾讯公益 404.html :\n\n```html\n    <html>\n    <head>   \n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n    \n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    \n    <!--\n    公益404介接入地址\n    益云公益404 http://yibo.iyiyun.com/Index/web404\n    腾讯公益404 http://www.qq.com/404\n    失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n    -->\n    \n    </body>\n    </html>\n```\n\n复制上面代码，贴粘到目录下新建的404.html即可！\n\n### 9. 统计\n\n因Google Analytics偶尔被墙，故国内用百度统计\n最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子\n本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。\n\n\n### 10. 更新\n\n更新hexo：\n\n```bash \n$ npm update -g hexo\n```\n更新主题：\n\n```bash\n$ cd themes/你的主题\n$ git pull\n```\n\n更新插件：\n\n```bash\n$  npm update\n```\n\n### 11. 参考\n\n- [简书](http://www.jianshu.com/p/35e197cb1273)\n","source":"_posts/fill-hexo.md","raw":"title: Hexo填坑教程整理\ncategories:\n  - Web技术\ndate: 2016-05-15 11:01:11\nauthor: 简书\ntags: \n\t- Hexo\n\t- github pages\nthumbnail:\nblogexcerpt: 本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。\n\n---\n\n<!-- toc -->\n\n## 简述\n\n本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自[简书](http://www.jianshu.com/)，后续我也会陆续补充。\n\n<!-- more -->\n\n### 1. 安装Hexo\n\n```bash\n$ npm install -g hexo\n```\n\n这里可能安装失败，可能权限不够，在命令前加sudo\n\n```bash\n$ sudo npm install -g hexo\n```\n\n### 2. 部署Hexo\n\n```bash\n$ hexo init\n```\n \n注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。\n执行命令生，会在当前命令的路径下，生成以下文件：\n\n```\n    .\n    ├── .deploy\n    ├── public\n    ├── scaffolds\n    ├── scripts\n    ├── source\n    |   ├── _drafts\n    |   └── _posts\n    ├── themes\n    ├── _config.yml\n    └── package.json\n```\n\n- .deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n- _drafts：草稿文章\n- _posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n### 3. Hexo命令\n\nHexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。\n\n#### 全局设置\n在你博客目录下有一个文件名_config.yml，打开可以配置信息。\n\n#### 局部页面\n在你博客目录下 \\themes\\你使用的主题\\_config.yml\n\n### 写博客相关命令\n\nHexo常用命令：\n\n```bash\nhexo new \"postName\"       #新建文章\nhexo new page \"pageName\"  #新建页面\nhexo generate             #生成静态页面至public目录\nhexo server               #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy               #将.deploy目录部署到GitHub\n```\n\n当然，如果每次输入那么长命令，那么一定想到用简写：\n\n```bash\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n其它的，还可以复合命令：\n\n```bash\nhexo deploy -g\nhexo server -g\n```\n\n有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧\n\n```bash\n$ hexo clean\n```\n\n当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。\n\n注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n\n### 4. 一些报错处理\n\n- 在本地调试开启server的时候出现如下提示：\n\n```bash\nERROR Plugin load failed: hexo-server\n```\n\n原因：\n\n\nBesides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n解决方法，执行命令：\n\n```bash\nsudo npm install hexo-server\n```\n\n- 执行命令hexo server，有如下提示：\n\n```bash\nUsage: hexo\n...\n```\n\n原因：\n\n我认为是没有生成本地服务\n解决方法，执行命令：\n\n```bash\nnpm install hexo-server --save\n```\n\n- 提示：hexo-server@0.1.2 node_modules/hexo-server\n\n白板和Cannot GET / 几个字\n\n原因:\n\n由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n```bash\n$ npm install hexo-renderer-ejs --save\n$ npm install hexo-renderer-stylus --save\n$ npm install hexo-renderer-marked --save\n```\n\n这个时候再重新生成静态文件，命令：\n\n```bash\n$ hexo generate （或hexo g）\n\n```\n\n\n启动本地服务器：\n\n\n```bash\n$ hexo server （或hexo s）\n\n```\n\n- 升级 node 版本之后编译报错\n\n原因：可能是由于 hexo 依赖的 node 版本号还是以前版本而导致\n\n解决方法：建议重装一下 hexo ，重新执行一遍 `npm install -g hexo-cli` 即可。\n\n \n### 5. 博客管理\n\n\n上面命令中，其实生成文章，可以直接把写好的文章插入到目录`/_posts` 下面，后缀为.MD就行，在文章头部固定格式：\n\n\n- title: Mac提高使用效率的一些方法   # 文章的标题，这个才是显示的文章标题，其实文件名不影响\n- date: 2015-09-01 20:33:26      # 用命令会自动生成，也可以自己写，所以文章时间可以改\n- categories: technology         # 文章的分类，这个可以自己定义\n- tags: [Mac,效率,快捷方式]        # tag，为文章添加标签，方便搜索\n\n\n当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。\n\n\n```\ntags:\n  - tag1\n  - tag2\n```\n\n\n如果在博客文章列表中，不想全文显示，可以增加*<!--more-->* , 后面的内容就不会显示在列表。\n\n\n### 6. 插件\n\n\n安装插件\n\n\n```bash\n$ npm install <plugin-name> --save\n```\n\n添加RSS\n\n```bash\n$ npm install hexo-generator-feed\n```\n\n然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)\n解决方法：\n\n```bash\n$ npm install hexo-generator-feed --save\n```\n\n这个命令来自hexo-generator-feed\n\n```bash\n  Install\n     $ npm install hexo-generator-feed --save\n   Hexo 3: 1.x\n   Hexo 2: 0.x\n  Options\n     You can configure this plugin in _config.yml.\n\n    feed:\n       type: atom\n       path: atom.xml\n       limit: 20\n\n      type - Feed type. (atom/rss2)\n      path - Feed path. (Default: atom.xml/rss2.xml)\n      limit - Maximum number of posts in the feed (Use 0 or false to show all posts)\n```\n\n其中可以选择：\n然后在 Hexo 根目录下的 _config.yml 里配置一下\n\n```bash\n    feed:\n        type: atom\n        path: atom.xml\n        limit: 20\n    #type 表示类型, 是 atom 还是 rss2.\n    #path 表示 Feed 路径\n    #limit 最多多少篇最近文章\n```\n\n最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！\n\n例如要订阅我的blog只要输入ihtc.cc/atom就可以搜寻到啦！\n\n添加Sitemap\nSitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。\n\n```bash\n$ npm install hexo-generator-sitemap --save\n```\n\n这个命令来自hexo-generator-sitemap\n\n```bash\nInstall\n    $ npm install hexo-generator-sitemap --save\n\n    Hexo 3: 1.x\n    Hexo 2: 0.x\nOptions\n    You can configure this plugin in _config.yml.\n\n    sitemap:\n        path: sitemap.xml\n    path - Sitemap path. (Default: sitemap.xml)\n```\n\n同样可以选择：\n在 Hexo 根目录下的 _config.yml 里配置一下\n\n```\nsitemap:\n   path: sitemap.xml\n   #path 表示 Sitemap 的路径. 默认为 sitemap.xml.\n```\n\n对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的。 \n\n安装\n\n```bash\n$ npm install hexo-generator-baidu-sitemap --save\n```\n\n然后在 Hexo 根目录下的 _config.yml 里配置一下\n\n```\nbaidusitemap:\n\tpath: baidusitemap.xml\n```\n\n其它插件\nPlugins · hexojs/hexo\n\n### 7. 评论设置\n\n在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。\n\n需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：jelon.duoshuo.com，那么我的short_name: \"jelon\"\n\n### 8. 404页面\n\nGitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。\n其实，404页面可以做更多有意义的事，来做个404公益项目吧。\n腾讯公益 404.html :\n\n```html\n    <html>\n    <head>   \n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n    \n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n    \n    <!--\n    公益404介接入地址\n    益云公益404 http://yibo.iyiyun.com/Index/web404\n    腾讯公益404 http://www.qq.com/404\n    失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw\n    -->\n    \n    </body>\n    </html>\n```\n\n复制上面代码，贴粘到目录下新建的404.html即可！\n\n### 9. 统计\n\n因Google Analytics偶尔被墙，故国内用百度统计\n最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子\n本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。\n\n\n### 10. 更新\n\n更新hexo：\n\n```bash \n$ npm update -g hexo\n```\n更新主题：\n\n```bash\n$ cd themes/你的主题\n$ git pull\n```\n\n更新插件：\n\n```bash\n$  npm update\n```\n\n### 11. 参考\n\n- [简书](http://www.jianshu.com/p/35e197cb1273)\n","slug":"fill-hexo","published":1,"updated":"2016-05-15T11:01:11.000Z","_id":"cmduj3n24000dk8sv1kkxdo54","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%AE%80%E8%BF%B0\">简述</a><ul>\n<li><a href=\"#1-%E5%AE%89%E8%A3%85hexo\">1. 安装Hexo</a></li>\n<li><a href=\"#2-%E9%83%A8%E7%BD%B2hexo\">2. 部署Hexo</a></li>\n<li><a href=\"#3-hexo%E5%91%BD%E4%BB%A4\">3. Hexo命令</a></li>\n<li><a href=\"#%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4\">写博客相关命令</a></li>\n<li><a href=\"#4-%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86\">4. 一些报错处理</a></li>\n<li><a href=\"#5-%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86\">5. 博客管理</a></li>\n<li><a href=\"#6-%E6%8F%92%E4%BB%B6\">6. 插件</a></li>\n<li><a href=\"#7-%E8%AF%84%E8%AE%BA%E8%AE%BE%E7%BD%AE\">7. 评论设置</a></li>\n<li><a href=\"#8-404%E9%A1%B5%E9%9D%A2\">8. 404页面</a></li>\n<li><a href=\"#9-%E7%BB%9F%E8%AE%A1\">9. 统计</a></li>\n<li><a href=\"#10-%E6%9B%B4%E6%96%B0\">10. 更新</a></li>\n<li><a href=\"#11-%E5%8F%82%E8%80%83\">11. 参考</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h2><span id=\"简述\">简述</span></h2><p>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自<a href=\"http://www.jianshu.com/\">简书</a>，后续我也会陆续补充。</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"1-安装hexo\">1. 安装Hexo</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>这里可能安装失败，可能权限不够，在命令前加sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">sudo</span> npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"2-部署hexo\">2. 部署Hexo</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<p>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。<br>执行命令生，会在当前命令的路径下，生成以下文件：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .deploy</span><br><span class=\"line\">├── <span class=\"keyword\">public</span></span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── <span class=\"keyword\">source</span></span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">└── <span class=\"keyword\">package</span>.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li>\n<li>_drafts：草稿文章</li>\n<li>_posts：发布文章</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<h3><span id=\"3-hexo命令\">3. Hexo命令</span></h3><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p>\n<h4><span id=\"全局设置\">全局设置</span></h4><p>在你博客目录下有一个文件名_config.yml，打开可以配置信息。</p>\n<h4><span id=\"局部页面\">局部页面</span></h4><p>在你博客目录下 \\themes\\你使用的主题_config.yml</p>\n<h3><span id=\"写博客相关命令\">写博客相关命令</span></h3><p>Hexo常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;postName&quot;</span>       <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;pageName&quot;</span>  <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate             <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server               <span class=\"comment\">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class=\"line\">hexo deploy               <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，如果每次输入那么长命令，那么一定想到用简写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>其它的，还可以复合命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n\n<p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p>\n<p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>\n<h3><span id=\"4-一些报错处理\">4. 一些报错处理</span></h3><ul>\n<li>在本地调试开启server的时候出现如下提示：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server</span><br></pre></td></tr></table></figure>\n\n<p>原因：</p>\n<p>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</p>\n<p>解决方法，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> npm install hexo-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令hexo server，有如下提示：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>原因：</p>\n<p>我认为是没有生成本地服务<br>解决方法，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提示：<a href=\"mailto:&#104;&#101;&#120;&#x6f;&#x2d;&#x73;&#x65;&#x72;&#118;&#101;&#114;&#x40;&#x30;&#46;&#x31;&#46;&#50;\">hexo-server@0.1.2</a> node_modules&#x2F;hexo-server</li>\n</ul>\n<p>白板和Cannot GET &#x2F; 几个字</p>\n<p>原因:</p>\n<p>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-renderer-ejs --save</span><br><span class=\"line\">$ npm install hexo-renderer-stylus --save</span><br><span class=\"line\">$ npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>\n\n<p>这个时候再重新生成静态文件，命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate （或hexo g）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server （或hexo s）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>升级 node 版本之后编译报错</li>\n</ul>\n<p>原因：可能是由于 hexo 依赖的 node 版本号还是以前版本而导致</p>\n<p>解决方法：建议重装一下 hexo ，重新执行一遍 <code>npm install -g hexo-cli</code> 即可。</p>\n<h3><span id=\"5-博客管理\">5. 博客管理</span></h3><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录<code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p>\n<ul>\n<li>title: Mac提高使用效率的一些方法   # 文章的标题，这个才是显示的文章标题，其实文件名不影响</li>\n<li>date: 2015-09-01 20:33:26      # 用命令会自动生成，也可以自己写，所以文章时间可以改</li>\n<li>categories: technology         # 文章的分类，这个可以自己定义</li>\n<li>tags: [Mac,效率,快捷方式]        # tag，为文章添加标签，方便搜索</li>\n</ul>\n<p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">tags:</span></span><br><span class=\"line\">  - tag1</span><br><span class=\"line\">  - tag2</span><br></pre></td></tr></table></figure>\n\n\n<p>如果在博客文章列表中，不想全文显示，可以增加*<!--more-->* , 后面的内容就不会显示在列表。</p>\n<h3><span id=\"6-插件\">6. 插件</span></h3><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>\n\n<p>添加RSS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>然后，到博客目录 &#x2F;public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令来自hexo-generator-feed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install</span><br><span class=\"line\">   $ npm install hexo-generator-feed --save</span><br><span class=\"line\"> Hexo 3: 1.x</span><br><span class=\"line\"> Hexo 2: 0.x</span><br><span class=\"line\">Options</span><br><span class=\"line\">   You can configure this plugin <span class=\"keyword\">in</span> _config.yml.</span><br><span class=\"line\"></span><br><span class=\"line\">  feed:</span><br><span class=\"line\">     <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">     path: atom.xml</span><br><span class=\"line\">     <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">type</span> - Feed <span class=\"built_in\">type</span>. (atom/rss2)</span><br><span class=\"line\">    path - Feed path. (Default: atom.xml/rss2.xml)</span><br><span class=\"line\">    <span class=\"built_in\">limit</span> - Maximum number of posts <span class=\"keyword\">in</span> the feed (Use 0 or <span class=\"literal\">false</span> to show all posts)</span><br></pre></td></tr></table></figure>\n\n<p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"><span class=\"comment\">#type 表示类型, 是 atom 还是 rss2.</span></span><br><span class=\"line\"><span class=\"comment\">#path 表示 Feed 路径</span></span><br><span class=\"line\"><span class=\"comment\">#limit 最多多少篇最近文章</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！</p>\n<p>例如要订阅我的blog只要输入ihtc.cc&#x2F;atom就可以搜寻到啦！</p>\n<p>添加Sitemap<br>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令来自hexo-generator-sitemap</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install</span><br><span class=\"line\">    $ npm install hexo-generator-sitemap --save</span><br><span class=\"line\"></span><br><span class=\"line\">    Hexo 3: 1.x</span><br><span class=\"line\">    Hexo 2: 0.x</span><br><span class=\"line\">Options</span><br><span class=\"line\">    You can configure this plugin <span class=\"keyword\">in</span> _config.yml.</span><br><span class=\"line\"></span><br><span class=\"line\">    sitemap:</span><br><span class=\"line\">        path: sitemap.xml</span><br><span class=\"line\">    path - Sitemap path. (Default: sitemap.xml)</span><br></pre></td></tr></table></figure>\n\n<p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">   <span class=\"selector-tag\">path</span>: sitemap<span class=\"selector-class\">.xml</span></span><br><span class=\"line\">   <span class=\"selector-id\">#path</span> 表示 Sitemap 的路径. 默认为 sitemap<span class=\"selector-class\">.xml</span>.</span><br></pre></td></tr></table></figure>\n\n<p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的。 </p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"symbol\">\tpath:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n<p>其它插件<br>Plugins · hexojs&#x2F;hexo</p>\n<h3><span id=\"7-评论设置\">7. 评论设置</span></h3><p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。</p>\n<p>需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：jelon.duoshuo.com，那么我的short_name: “jelon”</p>\n<h3><span id=\"8-404页面\">8. 404页面</span></h3><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。<br>腾讯公益 404.html :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://www.qq.com/404/search_children.js&quot;</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">公益404介接入地址</span></span><br><span class=\"line\"><span class=\"comment\">益云公益404 http://yibo.iyiyun.com/Index/web404</span></span><br><span class=\"line\"><span class=\"comment\">腾讯公益404 http://www.qq.com/404</span></span><br><span class=\"line\"><span class=\"comment\">失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>\n<h3><span id=\"9-统计\">9. 统计</span></h3><p>因Google Analytics偶尔被墙，故国内用百度统计<br>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子<br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p>\n<h3><span id=\"10-更新\">10. 更新</span></h3><p>更新hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm update -g hexo</span><br></pre></td></tr></table></figure>\n<p>更新主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/你的主题</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n<p>更新插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  npm update</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"11-参考\">11. 参考</span></h3><ul>\n<li><a href=\"http://www.jianshu.com/p/35e197cb1273\">简书</a></li>\n</ul>\n","excerpt":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%AE%80%E8%BF%B0\">简述</a><ul>\n<li><a href=\"#1-%E5%AE%89%E8%A3%85hexo\">1. 安装Hexo</a></li>\n<li><a href=\"#2-%E9%83%A8%E7%BD%B2hexo\">2. 部署Hexo</a></li>\n<li><a href=\"#3-hexo%E5%91%BD%E4%BB%A4\">3. Hexo命令</a></li>\n<li><a href=\"#%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4\">写博客相关命令</a></li>\n<li><a href=\"#4-%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86\">4. 一些报错处理</a></li>\n<li><a href=\"#5-%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86\">5. 博客管理</a></li>\n<li><a href=\"#6-%E6%8F%92%E4%BB%B6\">6. 插件</a></li>\n<li><a href=\"#7-%E8%AF%84%E8%AE%BA%E8%AE%BE%E7%BD%AE\">7. 评论设置</a></li>\n<li><a href=\"#8-404%E9%A1%B5%E9%9D%A2\">8. 404页面</a></li>\n<li><a href=\"#9-%E7%BB%9F%E8%AE%A1\">9. 统计</a></li>\n<li><a href=\"#10-%E6%9B%B4%E6%96%B0\">10. 更新</a></li>\n<li><a href=\"#11-%E5%8F%82%E8%80%83\">11. 参考</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自<a href=\"http://www.jianshu.com/\">简书</a>，后续我也会陆续补充。</p>","more":"<h3 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1. 安装Hexo\"></a>1. 安装Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>这里可能安装失败，可能权限不够，在命令前加sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">sudo</span> npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-部署Hexo\"><a href=\"#2-部署Hexo\" class=\"headerlink\" title=\"2. 部署Hexo\"></a>2. 部署Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<p>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。<br>执行命令生，会在当前命令的路径下，生成以下文件：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .deploy</span><br><span class=\"line\">├── <span class=\"keyword\">public</span></span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── <span class=\"keyword\">source</span></span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">└── <span class=\"keyword\">package</span>.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li>\n<li>_drafts：草稿文章</li>\n<li>_posts：发布文章</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<h3 id=\"3-Hexo命令\"><a href=\"#3-Hexo命令\" class=\"headerlink\" title=\"3. Hexo命令\"></a>3. Hexo命令</h3><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><p>在你博客目录下有一个文件名_config.yml，打开可以配置信息。</p>\n<h4 id=\"局部页面\"><a href=\"#局部页面\" class=\"headerlink\" title=\"局部页面\"></a>局部页面</h4><p>在你博客目录下 \\themes\\你使用的主题_config.yml</p>\n<h3 id=\"写博客相关命令\"><a href=\"#写博客相关命令\" class=\"headerlink\" title=\"写博客相关命令\"></a>写博客相关命令</h3><p>Hexo常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;postName&quot;</span>       <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;pageName&quot;</span>  <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate             <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server               <span class=\"comment\">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class=\"line\">hexo deploy               <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，如果每次输入那么长命令，那么一定想到用简写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>其它的，还可以复合命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n\n<p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p>\n<p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>\n<h3 id=\"4-一些报错处理\"><a href=\"#4-一些报错处理\" class=\"headerlink\" title=\"4. 一些报错处理\"></a>4. 一些报错处理</h3><ul>\n<li>在本地调试开启server的时候出现如下提示：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server</span><br></pre></td></tr></table></figure>\n\n<p>原因：</p>\n<p>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</p>\n<p>解决方法，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> npm install hexo-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令hexo server，有如下提示：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: hexo</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>原因：</p>\n<p>我认为是没有生成本地服务<br>解决方法，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提示：<a href=\"mailto:&#104;&#101;&#120;&#x6f;&#x2d;&#x73;&#x65;&#x72;&#118;&#101;&#114;&#x40;&#x30;&#46;&#x31;&#46;&#50;\">hexo-server@0.1.2</a> node_modules&#x2F;hexo-server</li>\n</ul>\n<p>白板和Cannot GET &#x2F; 几个字</p>\n<p>原因:</p>\n<p>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-renderer-ejs --save</span><br><span class=\"line\">$ npm install hexo-renderer-stylus --save</span><br><span class=\"line\">$ npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>\n\n<p>这个时候再重新生成静态文件，命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate （或hexo g）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>启动本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server （或hexo s）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>升级 node 版本之后编译报错</li>\n</ul>\n<p>原因：可能是由于 hexo 依赖的 node 版本号还是以前版本而导致</p>\n<p>解决方法：建议重装一下 hexo ，重新执行一遍 <code>npm install -g hexo-cli</code> 即可。</p>\n<h3 id=\"5-博客管理\"><a href=\"#5-博客管理\" class=\"headerlink\" title=\"5. 博客管理\"></a>5. 博客管理</h3><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录<code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p>\n<ul>\n<li>title: Mac提高使用效率的一些方法   # 文章的标题，这个才是显示的文章标题，其实文件名不影响</li>\n<li>date: 2015-09-01 20:33:26      # 用命令会自动生成，也可以自己写，所以文章时间可以改</li>\n<li>categories: technology         # 文章的分类，这个可以自己定义</li>\n<li>tags: [Mac,效率,快捷方式]        # tag，为文章添加标签，方便搜索</li>\n</ul>\n<p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">tags:</span></span><br><span class=\"line\">  - tag1</span><br><span class=\"line\">  - tag2</span><br></pre></td></tr></table></figure>\n\n\n<p>如果在博客文章列表中，不想全文显示，可以增加*<!--more-->* , 后面的内容就不会显示在列表。</p>\n<h3 id=\"6-插件\"><a href=\"#6-插件\" class=\"headerlink\" title=\"6. 插件\"></a>6. 插件</h3><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>\n\n<p>添加RSS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>然后，到博客目录 &#x2F;public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令来自hexo-generator-feed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install</span><br><span class=\"line\">   $ npm install hexo-generator-feed --save</span><br><span class=\"line\"> Hexo 3: 1.x</span><br><span class=\"line\"> Hexo 2: 0.x</span><br><span class=\"line\">Options</span><br><span class=\"line\">   You can configure this plugin <span class=\"keyword\">in</span> _config.yml.</span><br><span class=\"line\"></span><br><span class=\"line\">  feed:</span><br><span class=\"line\">     <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">     path: atom.xml</span><br><span class=\"line\">     <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">type</span> - Feed <span class=\"built_in\">type</span>. (atom/rss2)</span><br><span class=\"line\">    path - Feed path. (Default: atom.xml/rss2.xml)</span><br><span class=\"line\">    <span class=\"built_in\">limit</span> - Maximum number of posts <span class=\"keyword\">in</span> the feed (Use 0 or <span class=\"literal\">false</span> to show all posts)</span><br></pre></td></tr></table></figure>\n\n<p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"><span class=\"comment\">#type 表示类型, 是 atom 还是 rss2.</span></span><br><span class=\"line\"><span class=\"comment\">#path 表示 Feed 路径</span></span><br><span class=\"line\"><span class=\"comment\">#limit 最多多少篇最近文章</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！</p>\n<p>例如要订阅我的blog只要输入ihtc.cc&#x2F;atom就可以搜寻到啦！</p>\n<p>添加Sitemap<br>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令来自hexo-generator-sitemap</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install</span><br><span class=\"line\">    $ npm install hexo-generator-sitemap --save</span><br><span class=\"line\"></span><br><span class=\"line\">    Hexo 3: 1.x</span><br><span class=\"line\">    Hexo 2: 0.x</span><br><span class=\"line\">Options</span><br><span class=\"line\">    You can configure this plugin <span class=\"keyword\">in</span> _config.yml.</span><br><span class=\"line\"></span><br><span class=\"line\">    sitemap:</span><br><span class=\"line\">        path: sitemap.xml</span><br><span class=\"line\">    path - Sitemap path. (Default: sitemap.xml)</span><br></pre></td></tr></table></figure>\n\n<p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">   <span class=\"selector-tag\">path</span>: sitemap<span class=\"selector-class\">.xml</span></span><br><span class=\"line\">   <span class=\"selector-id\">#path</span> 表示 Sitemap 的路径. 默认为 sitemap<span class=\"selector-class\">.xml</span>.</span><br></pre></td></tr></table></figure>\n\n<p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的。 </p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"symbol\">\tpath:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n<p>其它插件<br>Plugins · hexojs&#x2F;hexo</p>\n<h3 id=\"7-评论设置\"><a href=\"#7-评论设置\" class=\"headerlink\" title=\"7. 评论设置\"></a>7. 评论设置</h3><p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。</p>\n<p>需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：jelon.duoshuo.com，那么我的short_name: “jelon”</p>\n<h3 id=\"8-404页面\"><a href=\"#8-404页面\" class=\"headerlink\" title=\"8. 404页面\"></a>8. 404页面</h3><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。<br>腾讯公益 404.html :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://www.qq.com/404/search_children.js&quot;</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">公益404介接入地址</span></span><br><span class=\"line\"><span class=\"comment\">益云公益404 http://yibo.iyiyun.com/Index/web404</span></span><br><span class=\"line\"><span class=\"comment\">腾讯公益404 http://www.qq.com/404</span></span><br><span class=\"line\"><span class=\"comment\">失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>\n<h3 id=\"9-统计\"><a href=\"#9-统计\" class=\"headerlink\" title=\"9. 统计\"></a>9. 统计</h3><p>因Google Analytics偶尔被墙，故国内用百度统计<br>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子<br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p>\n<h3 id=\"10-更新\"><a href=\"#10-更新\" class=\"headerlink\" title=\"10. 更新\"></a>10. 更新</h3><p>更新hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm update -g hexo</span><br></pre></td></tr></table></figure>\n<p>更新主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/你的主题</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n<p>更新插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  npm update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-参考\"><a href=\"#11-参考\" class=\"headerlink\" title=\"11. 参考\"></a>11. 参考</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/35e197cb1273\">简书</a></li>\n</ul>"},{"title":"前端散记 2","author":"Jelon","date":"2020-05-08T00:00:00.000Z","thumbnail":null,"blogexcerpt":"keep-alive vs http2有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection：Keep-Alive。keep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间...","_content":"\n<!-- toc -->\n\n> 在写这篇前端散记之前有写过另外一篇散记，可点击 [前端散记](https://jelon.xyz/posts/front-end-notes/) 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。\n\n# keep-alive vs http2\n\n> 有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。\n\n**在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。** 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection: Keep-Alive。\n\nkeep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间。如下图：\n\n\n![keep-alive](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/langzh-450px-HTTP_persistent_connection.svg.png)\n\n优势有：\n\n* 较少的CPU和内存的使用（由于同时打开的连接的减少了）；\n* 允许请求和应答的HTTP管线化；\n* 降低拥塞控制 （TCP连接减少了）；\n* 减少了后续请求的延迟（无需再进行握手）；\n* 报告错误无需关闭TCP连接。\n\n## http pipelining\n\n有些文章中会有一个误区，就是TCP连接必须等一个请求响应完成后，才能复用。这是不对的，但其实可以注意上面优势里提到到 http pipelining，如下图：\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/HTTP_pipelining.svg/450px-HTTP_pipelining.svg.png)\n\nHTTP1.1 中，一个TCP连接里是可以同时发送（实际有先后，但可以在响应前）多个请求的。但它是有序的，遵循先进先出，服务端只能按顺序响应请求（如果前面的请求没有响应完成或需要很长时间，后面的请求就会被阻塞），所以可能发生 队头阻塞（HOL blocking），造成延迟。\n\n连续的 GET 和 HEAD 请求总可以管线化的。一个连续的幂等请求，如 GET，HEAD，PUT，DELETE，是否可以被管线化取决于一连串请求是否依赖于其他的。\n\n所以keep-alive 的劣势也很明显：\n\n* Keep-Alive可能会极大的影响服务器性能，因为它在文件被请求之后还保持了不必要的连接很长时间；\n* 可能发生队头阻塞（HOL blocking），造成延迟。\n\n## HTTP2\n\nHTTP2 主要解决的问题也是 TCP连接复用。但它比 keep-alive 更彻底，类似于通信工程里的时分复用，多个请求可以同时发送（不分先后），同时响应，解决了 队头阻塞（HOL blocking）的问题，极大提高效率。\n\n![](https://upload.wikimedia.org/wikipedia/commons/7/73/Mux_color.png)\n\nkeep-alive 的 HTTP pipelining 相当于单线程的，而 HTTP2 相当于并发。\n\nHTTP2 的优点：\n\n* 对HTTP头字段进行数据压缩(即HPACK算法)；\n* HTTP/2 服务端推送(Server Push)；\n* 请求管线化；\n* 修复HTTP/1.0版本以来未修复的队头阻塞问题；\n* 对数据传输采用多路复用，让多个请求合并在同一 TCP连接内。\n\n后三个优点其实都是**多路复用**带来的优点。\n\n\n\n# HTTP3相关\n\n## HTTP/3 新特性\n\n### 1. HTTP/3简介\n\n虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。\n\n上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\n\n因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\n\n那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\n\n基于这个原因，**Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上**，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\n\nQUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。\n\n### 2. QUIC新功能\n\n- **0-RTT**\n\n通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？\n\n这里面有两层含义:\n\n1. 传输层 0RTT 就能建立连接。\n2. 加密层 0RTT 就能建立加密连接。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/1.jpg)\n\n上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。\n\n而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。\n\n- **多路复用**\n\n虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\n\n同HTTP2.0一样，同一条 QUIC连接上可以创建多个stream，来发送多个HTTP请求，但是，QUIC是基于UDP的，一个连接上的多个stream之间没有依赖。比如下图中stream2丢了一个UDP包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然stream2的那个包需要重新传，但是stream3、stream4的包无需等待，就可以发给用户。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/2.jpg)\n\n另外QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\n\n\n- **加密认证的报文**\n\nTCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。\n\n但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。\n\n这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/3.jpg)\n\n如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。\n\n- **向前纠错机制**\n\nQUIC协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间（包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗）。\n\n假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。\n\n## 总结\n\nHTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷；\nHTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的；\nQUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。\n\n# 小程序优化\n\n> 以本人所项接触的项目（IM相关）实战为例\n\n1. 去除后端返回来的冗余字段；\n2. 状态管理（以为项目使用的是 `mpVue` 小程序开发框架） ；\n3. 图片资源优化（采用 CDN）；\n4. 图片使用 CDN 之后发现网络请求多了还是给人感觉体验不好，所以又采取了部分较小的图片直接打包进了项目 JS，由于担心小程序项目大小过大，所以才去分包；\n5. 群组人员 ID 缓存，并通过 ID 数组是否变化来加载人员信息。\n\n# Webpack 优化\n\n1. externals + cdn；\n2. cache-loader；\n3. happy-pack、thread-loader；\n4. webpack-bundle-analyzer\n5. Tree Shaking\n6. CommonChunkPlugin (Webpack 4.0移除，使用 SplitChunkPlugin 替代)；\n7. DllPlugin 和 DllReferencePlugin：DLLPlugin 就是将包含大量复用模块且不会频繁更新的库进行编译，只需要编译一次，编译完成后存在指定的文件（这里可以称为动态链接库）中。在之后的构建过程中不会再对这些模块进行编译，而是直接使用 DllReferencePlugin 来引用动态链接库的代码。\n\n# 浏览器渲染页面的过程\n\n从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：\n\n1. DNS 查询\n2. TCP 连接\n3. HTTP 请求即响应\n4. 服务器响应\n5. 客户端渲染\n\n浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面五个步骤：\n\n1. 处理 HTML 标记并构建 DOM 树。\n2. 处理 CSS 标记并构建 CSSOM 树。\n3. 将 DOM 与 CSSOM 合并成一个渲染树。\n4. 根据渲染树来布局，以计算每个节点的几何信息。\n5. 将各个节点绘制到屏幕上。\n\n\n# async/await 与 Generator 区别\n\nES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。No more callback hell。\n\nasync 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。\n\n想较于 Generator，Async 函数的改进在于下面四点：\n\n- **内置执行器**。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样；\n- **更好的语义**。async 和 await 相较于 * 和 yield 更加语义化；\n- **更广的适用性**。co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise对象。而 async 函数的 await 命令后面则可以是 Promise 或者 原始类型的值（Number，string，boolean，但这时等同于同步操作）；\n- **返回值是 Promise**。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。\n\n# JSONP 封装\n\n> 以下是之前在做跨域项目所封装的 jsonp 库\n\n```js\nfunction jsonp(options) {\n  options = options || {}\n  if (!options.url) {\n    throw new Error('参数不合法')\n  }\n\n  // 创建 script 标签并加入到页面中, 如果没传callback默认生成一个\n  let callbackName = options.callback || options.data['callback'] ||　('jsonp_' + Math.random()).replace('.', '')\n\n  let oHead = document.getElementsByTagName('head')[0]\n  options.data['callback'] = callbackName\n  let params = formatParams(options.data)\n\n  let oScript = document.createElement('script')\n  oHead.appendChild(oScript);\n  // 创建jsonp回调函数\n  window[callbackName] = function (json) {\n    oHead.removeChild(oScript)\n    clearTimeout(oScript.timer)\n    window[callbackName] = null\n    if (json) {\n      options.success && options.success(json)\n    } else {\n      options.fail && options.fail({ code: 'FS_UNKNOW', summary: '请求错误' })\n    }\n  }\n\n  // 发送请求\n  oScript.src = options.url + (options.url.indexOf('?') > -1 ? '&' : '?') + params\n\n  // 超时处理\n  if (options.time) {\n    oScript.timer = setTimeout(function () {\n      window[callbackName] = null\n      oHead.removeChild(oScript)\n      options.fail && options.fail({ code: 'S_FAIL', summary: '请求超时' })\n    }, options.time)\n  }\n}\n```\n\n# 平民版深度拷贝\n\n> 比乞丐版 `JSON.parse(JSON.stringify(obj))` 好点的深度拷贝\n\n```js\n/**\n * 深拷贝\n * @param {*} target\n */\nexport const deepClone = target => {\n  if (typeof target === 'object') {\n    let newTarget = Array.isArray(target) ? [] : {}\n    for (const i in target) {\n      if (typeof target[i] === 'object') {\n        newTarget[i] = deepClone(target[i])\n      } else {\n        newTarget[i] = target[i]\n      }\n    }\n    return newTarget\n  } else {\n    return target\n  }\n}\n```\n\n# instanceof 实现\n\n```js\nfunction new_instance_of(leftVaule, rightVaule) { \n    let rightProto = rightVaule.prototype; // 取右表达式的 prototype 值\n    leftVaule = leftVaule.__proto__; // 取左表达式的__proto__值\n    while (true) {\n    \tif (leftVaule === null) {\n            return false;\t\n        }\n        if (leftVaule === rightProto) {\n            return true;\t\n        } \n        leftVaule = leftVaule.__proto__ \n    }\n}\n```\n\n# new 封装\n\n```js\nfunction myNew(Con, ...args) {\n  let obj = Object.create(Con.prototype)\n  let result = Con.apply(obj, args)\n  return typeof obj === 'object' ? result : obj\n}\n```\n\n# 手写 Promise （乞丐版）\n\n```js\nfunction MyPromise (executor) {\n  this.value = undefined\n  this.reason = undefined\n  this.status = 'pending' // 状态 pending、resolved、rejected，默认为 pending\n  this.resolvedCallbacks = []\n  this.rejectedCallbacks = []\n\n  function resolve (value) {\n    if (this.pending === 'pending') {\n      this.value = value\n      this.status = 'resolved'\n      this.resolvedCallbacks.forEach(fn => fn())\n    }\n  }\n  function reject (reason) {\n    if (this.pending === 'pending') {\n      this.reason = reason\n      this.status = 'rejected'\n      this.rejectedCallbacks.forEach(fn => fn())\n    }\n  }\n\n  executor(resolve, reject)\n}\nMyPromise.prototype.then = function (fn) {\n  if (this.status === 'resolved') {\n    fn(this.value)\n  }\n  if (this.status === 'pending') {\n    this.resolvedCallbacks.push(function () {\n      fn(this.value)\n    })\n  }\n}\nMyPromise.prototype.catch = function (fn) {\n  if (this.status === 'rejected') {\n    fn(this.reason)\n  }\n  if (this.status === 'pending') {\n    this.rejectedCallbacks.push(function () {\n      fn(this.reason)\n    })\n  }\n}\n```\n\n# flex\n\n- flex-grow属性\n\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n- flex-shrink属性\n\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值对该属性无效。\n\n- flex-basis属性\n\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。","source":"_posts/front-end-notes-2.md","raw":"---\ntitle: 前端散记 2\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2020-05-08\ntags:\n  - 前端\nthumbnail:\nblogexcerpt: keep-alive vs http2有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection：Keep-Alive。keep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间...\n\n---\n\n<!-- toc -->\n\n> 在写这篇前端散记之前有写过另外一篇散记，可点击 [前端散记](https://jelon.xyz/posts/front-end-notes/) 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。\n\n# keep-alive vs http2\n\n> 有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。\n\n**在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。** 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection: Keep-Alive。\n\nkeep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间。如下图：\n\n\n![keep-alive](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/langzh-450px-HTTP_persistent_connection.svg.png)\n\n优势有：\n\n* 较少的CPU和内存的使用（由于同时打开的连接的减少了）；\n* 允许请求和应答的HTTP管线化；\n* 降低拥塞控制 （TCP连接减少了）；\n* 减少了后续请求的延迟（无需再进行握手）；\n* 报告错误无需关闭TCP连接。\n\n## http pipelining\n\n有些文章中会有一个误区，就是TCP连接必须等一个请求响应完成后，才能复用。这是不对的，但其实可以注意上面优势里提到到 http pipelining，如下图：\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/HTTP_pipelining.svg/450px-HTTP_pipelining.svg.png)\n\nHTTP1.1 中，一个TCP连接里是可以同时发送（实际有先后，但可以在响应前）多个请求的。但它是有序的，遵循先进先出，服务端只能按顺序响应请求（如果前面的请求没有响应完成或需要很长时间，后面的请求就会被阻塞），所以可能发生 队头阻塞（HOL blocking），造成延迟。\n\n连续的 GET 和 HEAD 请求总可以管线化的。一个连续的幂等请求，如 GET，HEAD，PUT，DELETE，是否可以被管线化取决于一连串请求是否依赖于其他的。\n\n所以keep-alive 的劣势也很明显：\n\n* Keep-Alive可能会极大的影响服务器性能，因为它在文件被请求之后还保持了不必要的连接很长时间；\n* 可能发生队头阻塞（HOL blocking），造成延迟。\n\n## HTTP2\n\nHTTP2 主要解决的问题也是 TCP连接复用。但它比 keep-alive 更彻底，类似于通信工程里的时分复用，多个请求可以同时发送（不分先后），同时响应，解决了 队头阻塞（HOL blocking）的问题，极大提高效率。\n\n![](https://upload.wikimedia.org/wikipedia/commons/7/73/Mux_color.png)\n\nkeep-alive 的 HTTP pipelining 相当于单线程的，而 HTTP2 相当于并发。\n\nHTTP2 的优点：\n\n* 对HTTP头字段进行数据压缩(即HPACK算法)；\n* HTTP/2 服务端推送(Server Push)；\n* 请求管线化；\n* 修复HTTP/1.0版本以来未修复的队头阻塞问题；\n* 对数据传输采用多路复用，让多个请求合并在同一 TCP连接内。\n\n后三个优点其实都是**多路复用**带来的优点。\n\n\n\n# HTTP3相关\n\n## HTTP/3 新特性\n\n### 1. HTTP/3简介\n\n虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。\n\n上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\n\n因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\n\n那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\n\n基于这个原因，**Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上**，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\n\nQUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。\n\n### 2. QUIC新功能\n\n- **0-RTT**\n\n通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？\n\n这里面有两层含义:\n\n1. 传输层 0RTT 就能建立连接。\n2. 加密层 0RTT 就能建立加密连接。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/1.jpg)\n\n上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。\n\n而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。\n\n- **多路复用**\n\n虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\n\n同HTTP2.0一样，同一条 QUIC连接上可以创建多个stream，来发送多个HTTP请求，但是，QUIC是基于UDP的，一个连接上的多个stream之间没有依赖。比如下图中stream2丢了一个UDP包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然stream2的那个包需要重新传，但是stream3、stream4的包无需等待，就可以发给用户。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/2.jpg)\n\n另外QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\n\n\n- **加密认证的报文**\n\nTCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。\n\n但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。\n\n这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-2/3.jpg)\n\n如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。\n\n- **向前纠错机制**\n\nQUIC协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间（包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗）。\n\n假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。\n\n## 总结\n\nHTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷；\nHTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的；\nQUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。\n\n# 小程序优化\n\n> 以本人所项接触的项目（IM相关）实战为例\n\n1. 去除后端返回来的冗余字段；\n2. 状态管理（以为项目使用的是 `mpVue` 小程序开发框架） ；\n3. 图片资源优化（采用 CDN）；\n4. 图片使用 CDN 之后发现网络请求多了还是给人感觉体验不好，所以又采取了部分较小的图片直接打包进了项目 JS，由于担心小程序项目大小过大，所以才去分包；\n5. 群组人员 ID 缓存，并通过 ID 数组是否变化来加载人员信息。\n\n# Webpack 优化\n\n1. externals + cdn；\n2. cache-loader；\n3. happy-pack、thread-loader；\n4. webpack-bundle-analyzer\n5. Tree Shaking\n6. CommonChunkPlugin (Webpack 4.0移除，使用 SplitChunkPlugin 替代)；\n7. DllPlugin 和 DllReferencePlugin：DLLPlugin 就是将包含大量复用模块且不会频繁更新的库进行编译，只需要编译一次，编译完成后存在指定的文件（这里可以称为动态链接库）中。在之后的构建过程中不会再对这些模块进行编译，而是直接使用 DllReferencePlugin 来引用动态链接库的代码。\n\n# 浏览器渲染页面的过程\n\n从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：\n\n1. DNS 查询\n2. TCP 连接\n3. HTTP 请求即响应\n4. 服务器响应\n5. 客户端渲染\n\n浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面五个步骤：\n\n1. 处理 HTML 标记并构建 DOM 树。\n2. 处理 CSS 标记并构建 CSSOM 树。\n3. 将 DOM 与 CSSOM 合并成一个渲染树。\n4. 根据渲染树来布局，以计算每个节点的几何信息。\n5. 将各个节点绘制到屏幕上。\n\n\n# async/await 与 Generator 区别\n\nES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。No more callback hell。\n\nasync 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。\n\n想较于 Generator，Async 函数的改进在于下面四点：\n\n- **内置执行器**。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样；\n- **更好的语义**。async 和 await 相较于 * 和 yield 更加语义化；\n- **更广的适用性**。co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise对象。而 async 函数的 await 命令后面则可以是 Promise 或者 原始类型的值（Number，string，boolean，但这时等同于同步操作）；\n- **返回值是 Promise**。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。\n\n# JSONP 封装\n\n> 以下是之前在做跨域项目所封装的 jsonp 库\n\n```js\nfunction jsonp(options) {\n  options = options || {}\n  if (!options.url) {\n    throw new Error('参数不合法')\n  }\n\n  // 创建 script 标签并加入到页面中, 如果没传callback默认生成一个\n  let callbackName = options.callback || options.data['callback'] ||　('jsonp_' + Math.random()).replace('.', '')\n\n  let oHead = document.getElementsByTagName('head')[0]\n  options.data['callback'] = callbackName\n  let params = formatParams(options.data)\n\n  let oScript = document.createElement('script')\n  oHead.appendChild(oScript);\n  // 创建jsonp回调函数\n  window[callbackName] = function (json) {\n    oHead.removeChild(oScript)\n    clearTimeout(oScript.timer)\n    window[callbackName] = null\n    if (json) {\n      options.success && options.success(json)\n    } else {\n      options.fail && options.fail({ code: 'FS_UNKNOW', summary: '请求错误' })\n    }\n  }\n\n  // 发送请求\n  oScript.src = options.url + (options.url.indexOf('?') > -1 ? '&' : '?') + params\n\n  // 超时处理\n  if (options.time) {\n    oScript.timer = setTimeout(function () {\n      window[callbackName] = null\n      oHead.removeChild(oScript)\n      options.fail && options.fail({ code: 'S_FAIL', summary: '请求超时' })\n    }, options.time)\n  }\n}\n```\n\n# 平民版深度拷贝\n\n> 比乞丐版 `JSON.parse(JSON.stringify(obj))` 好点的深度拷贝\n\n```js\n/**\n * 深拷贝\n * @param {*} target\n */\nexport const deepClone = target => {\n  if (typeof target === 'object') {\n    let newTarget = Array.isArray(target) ? [] : {}\n    for (const i in target) {\n      if (typeof target[i] === 'object') {\n        newTarget[i] = deepClone(target[i])\n      } else {\n        newTarget[i] = target[i]\n      }\n    }\n    return newTarget\n  } else {\n    return target\n  }\n}\n```\n\n# instanceof 实现\n\n```js\nfunction new_instance_of(leftVaule, rightVaule) { \n    let rightProto = rightVaule.prototype; // 取右表达式的 prototype 值\n    leftVaule = leftVaule.__proto__; // 取左表达式的__proto__值\n    while (true) {\n    \tif (leftVaule === null) {\n            return false;\t\n        }\n        if (leftVaule === rightProto) {\n            return true;\t\n        } \n        leftVaule = leftVaule.__proto__ \n    }\n}\n```\n\n# new 封装\n\n```js\nfunction myNew(Con, ...args) {\n  let obj = Object.create(Con.prototype)\n  let result = Con.apply(obj, args)\n  return typeof obj === 'object' ? result : obj\n}\n```\n\n# 手写 Promise （乞丐版）\n\n```js\nfunction MyPromise (executor) {\n  this.value = undefined\n  this.reason = undefined\n  this.status = 'pending' // 状态 pending、resolved、rejected，默认为 pending\n  this.resolvedCallbacks = []\n  this.rejectedCallbacks = []\n\n  function resolve (value) {\n    if (this.pending === 'pending') {\n      this.value = value\n      this.status = 'resolved'\n      this.resolvedCallbacks.forEach(fn => fn())\n    }\n  }\n  function reject (reason) {\n    if (this.pending === 'pending') {\n      this.reason = reason\n      this.status = 'rejected'\n      this.rejectedCallbacks.forEach(fn => fn())\n    }\n  }\n\n  executor(resolve, reject)\n}\nMyPromise.prototype.then = function (fn) {\n  if (this.status === 'resolved') {\n    fn(this.value)\n  }\n  if (this.status === 'pending') {\n    this.resolvedCallbacks.push(function () {\n      fn(this.value)\n    })\n  }\n}\nMyPromise.prototype.catch = function (fn) {\n  if (this.status === 'rejected') {\n    fn(this.reason)\n  }\n  if (this.status === 'pending') {\n    this.rejectedCallbacks.push(function () {\n      fn(this.reason)\n    })\n  }\n}\n```\n\n# flex\n\n- flex-grow属性\n\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n- flex-shrink属性\n\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值对该属性无效。\n\n- flex-basis属性\n\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。","slug":"front-end-notes-2","published":1,"updated":"2020-05-08T00:00:00.000Z","_id":"cmduj3n27000hk8sv2klv0ipz","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#keep-alive-vs-http2\">keep-alive vs http2</a><ul>\n<li><a href=\"#http-pipelining\">http pipelining</a></li>\n<li><a href=\"#http2\">HTTP2</a></li>\n</ul>\n</li>\n<li><a href=\"#http3%E7%9B%B8%E5%85%B3\">HTTP3相关</a><ul>\n<li><a href=\"#http3-%E6%96%B0%E7%89%B9%E6%80%A7\">HTTP&#x2F;3 新特性</a><ul>\n<li><a href=\"#1-http3%E7%AE%80%E4%BB%8B\">1. HTTP&#x2F;3简介</a></li>\n<li><a href=\"#2-quic%E6%96%B0%E5%8A%9F%E8%83%BD\">2. QUIC新功能</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96\">小程序优化</a></li>\n<li><a href=\"#webpack-%E4%BC%98%E5%8C%96\">Webpack 优化</a></li>\n<li><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B\">浏览器渲染页面的过程</a></li>\n<li><a href=\"#asyncawait-%E4%B8%8E-generator-%E5%8C%BA%E5%88%AB\">async&#x2F;await 与 Generator 区别</a></li>\n<li><a href=\"#jsonp-%E5%B0%81%E8%A3%85\">JSONP 封装</a></li>\n<li><a href=\"#%E5%B9%B3%E6%B0%91%E7%89%88%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D\">平民版深度拷贝</a></li>\n<li><a href=\"#instanceof-%E5%AE%9E%E7%8E%B0\">instanceof 实现</a></li>\n<li><a href=\"#new-%E5%B0%81%E8%A3%85\">new 封装</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-promise-%E4%B9%9E%E4%B8%90%E7%89%88\">手写 Promise （乞丐版）</a></li>\n<li><a href=\"#flex\">flex</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<blockquote>\n<p>在写这篇前端散记之前有写过另外一篇散记，可点击 <a href=\"https://jelon.xyz/posts/front-end-notes/\">前端散记</a> 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。</p>\n</blockquote>\n<h1><span id=\"keep-alive-vs-http2\">keep-alive vs http2</span></h1><blockquote>\n<p>有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。</p>\n</blockquote>\n<p><strong>在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。</strong> 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection: Keep-Alive。</p>\n<p>keep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间。如下图：</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/langzh-450px-HTTP_persistent_connection.svg.png\" alt=\"keep-alive\"></p>\n<p>优势有：</p>\n<ul>\n<li>较少的CPU和内存的使用（由于同时打开的连接的减少了）；</li>\n<li>允许请求和应答的HTTP管线化；</li>\n<li>降低拥塞控制 （TCP连接减少了）；</li>\n<li>减少了后续请求的延迟（无需再进行握手）；</li>\n<li>报告错误无需关闭TCP连接。</li>\n</ul>\n<h2><span id=\"http-pipelining\">http pipelining</span></h2><p>有些文章中会有一个误区，就是TCP连接必须等一个请求响应完成后，才能复用。这是不对的，但其实可以注意上面优势里提到到 http pipelining，如下图：</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/HTTP_pipelining.svg/450px-HTTP_pipelining.svg.png\"></p>\n<p>HTTP1.1 中，一个TCP连接里是可以同时发送（实际有先后，但可以在响应前）多个请求的。但它是有序的，遵循先进先出，服务端只能按顺序响应请求（如果前面的请求没有响应完成或需要很长时间，后面的请求就会被阻塞），所以可能发生 队头阻塞（HOL blocking），造成延迟。</p>\n<p>连续的 GET 和 HEAD 请求总可以管线化的。一个连续的幂等请求，如 GET，HEAD，PUT，DELETE，是否可以被管线化取决于一连串请求是否依赖于其他的。</p>\n<p>所以keep-alive 的劣势也很明显：</p>\n<ul>\n<li>Keep-Alive可能会极大的影响服务器性能，因为它在文件被请求之后还保持了不必要的连接很长时间；</li>\n<li>可能发生队头阻塞（HOL blocking），造成延迟。</li>\n</ul>\n<h2><span id=\"http2\">HTTP2</span></h2><p>HTTP2 主要解决的问题也是 TCP连接复用。但它比 keep-alive 更彻底，类似于通信工程里的时分复用，多个请求可以同时发送（不分先后），同时响应，解决了 队头阻塞（HOL blocking）的问题，极大提高效率。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/7/73/Mux_color.png\"></p>\n<p>keep-alive 的 HTTP pipelining 相当于单线程的，而 HTTP2 相当于并发。</p>\n<p>HTTP2 的优点：</p>\n<ul>\n<li>对HTTP头字段进行数据压缩(即HPACK算法)；</li>\n<li>HTTP&#x2F;2 服务端推送(Server Push)；</li>\n<li>请求管线化；</li>\n<li>修复HTTP&#x2F;1.0版本以来未修复的队头阻塞问题；</li>\n<li>对数据传输采用多路复用，让多个请求合并在同一 TCP连接内。</li>\n</ul>\n<p>后三个优点其实都是<strong>多路复用</strong>带来的优点。</p>\n<h1><span id=\"http3相关\">HTTP3相关</span></h1><h2><span id=\"httpx2f3-新特性\">HTTP&#x2F;3 新特性</span></h2><h3><span id=\"1-httpx2f3简介\">1. HTTP&#x2F;3简介</span></h3><p>虽然 HTTP&#x2F;2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p>\n<p>上文提到 HTTP&#x2F;2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP&#x2F;2 的表现情况反倒不如 HTTP&#x2F;1 了。</p>\n<p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP&#x2F;1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>\n<p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p>\n<p>基于这个原因，<strong>Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP&#x2F;3 上</strong>，HTTP&#x2F;3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP&#x2F;3 最大的改造就是使用了 QUIC。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。</p>\n<h3><span id=\"2-quic新功能\">2. QUIC新功能</span></h3><ul>\n<li><strong>0-RTT</strong></li>\n</ul>\n<p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？</p>\n<p>这里面有两层含义:</p>\n<ol>\n<li>传输层 0RTT 就能建立连接。</li>\n<li>加密层 0RTT 就能建立加密连接。</li>\n</ol>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/1.jpg\"></p>\n<p>上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。</p>\n<p>而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p>\n<ul>\n<li><strong>多路复用</strong></li>\n</ul>\n<p>虽然 HTTP&#x2F;2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p>\n<p>同HTTP2.0一样，同一条 QUIC连接上可以创建多个stream，来发送多个HTTP请求，但是，QUIC是基于UDP的，一个连接上的多个stream之间没有依赖。比如下图中stream2丢了一个UDP包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然stream2的那个包需要重新传，但是stream3、stream4的包无需等待，就可以发给用户。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/2.jpg\"></p>\n<p>另外QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p>\n<ul>\n<li><strong>加密认证的报文</strong></li>\n</ul>\n<p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p>\n<p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p>\n<p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/3.jpg\"></p>\n<p>如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。</p>\n<ul>\n<li><strong>向前纠错机制</strong></li>\n</ul>\n<p>QUIC协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间（包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗）。</p>\n<p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。</p>\n<h2><span id=\"总结\">总结</span></h2><p>HTTP&#x2F;1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷；<br>HTTP&#x2F;2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的；<br>QUIC 基于 UDP 实现，是 HTTP&#x2F;3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</p>\n<h1><span id=\"小程序优化\">小程序优化</span></h1><blockquote>\n<p>以本人所项接触的项目（IM相关）实战为例</p>\n</blockquote>\n<ol>\n<li>去除后端返回来的冗余字段；</li>\n<li>状态管理（以为项目使用的是 <code>mpVue</code> 小程序开发框架） ；</li>\n<li>图片资源优化（采用 CDN）；</li>\n<li>图片使用 CDN 之后发现网络请求多了还是给人感觉体验不好，所以又采取了部分较小的图片直接打包进了项目 JS，由于担心小程序项目大小过大，所以才去分包；</li>\n<li>群组人员 ID 缓存，并通过 ID 数组是否变化来加载人员信息。</li>\n</ol>\n<h1><span id=\"webpack-优化\">Webpack 优化</span></h1><ol>\n<li>externals + cdn；</li>\n<li>cache-loader；</li>\n<li>happy-pack、thread-loader；</li>\n<li>webpack-bundle-analyzer</li>\n<li>Tree Shaking</li>\n<li>CommonChunkPlugin (Webpack 4.0移除，使用 SplitChunkPlugin 替代)；</li>\n<li>DllPlugin 和 DllReferencePlugin：DLLPlugin 就是将包含大量复用模块且不会频繁更新的库进行编译，只需要编译一次，编译完成后存在指定的文件（这里可以称为动态链接库）中。在之后的构建过程中不会再对这些模块进行编译，而是直接使用 DllReferencePlugin 来引用动态链接库的代码。</li>\n</ol>\n<h1><span id=\"浏览器渲染页面的过程\">浏览器渲染页面的过程</span></h1><p>从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：</p>\n<ol>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求即响应</li>\n<li>服务器响应</li>\n<li>客户端渲染</li>\n</ol>\n<p>浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面五个步骤：</p>\n<ol>\n<li>处理 HTML 标记并构建 DOM 树。</li>\n<li>处理 CSS 标记并构建 CSSOM 树。</li>\n<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>\n<li>根据渲染树来布局，以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上。</li>\n</ol>\n<h1><span id=\"asyncx2fawait-与-generator-区别\">async&#x2F;await 与 Generator 区别</span></h1><p>ES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。No more callback hell。</p>\n<p>async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。</p>\n<p>想较于 Generator，Async 函数的改进在于下面四点：</p>\n<ul>\n<li><strong>内置执行器</strong>。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样；</li>\n<li><strong>更好的语义</strong>。async 和 await 相较于 * 和 yield 更加语义化；</li>\n<li><strong>更广的适用性</strong>。co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise对象。而 async 函数的 await 命令后面则可以是 Promise 或者 原始类型的值（Number，string，boolean，但这时等同于同步操作）；</li>\n<li><strong>返回值是 Promise</strong>。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。</li>\n</ul>\n<h1><span id=\"jsonp-封装\">JSONP 封装</span></h1><blockquote>\n<p>以下是之前在做跨域项目所封装的 jsonp 库</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonp</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数不合法&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建 script 标签并加入到页面中, 如果没传callback默认生成一个</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> callbackName = options.<span class=\"property\">callback</span> || options.<span class=\"property\">data</span>[<span class=\"string\">&#x27;callback&#x27;</span>] ||　(<span class=\"string\">&#x27;jsonp_&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oHead = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  options.<span class=\"property\">data</span>[<span class=\"string\">&#x27;callback&#x27;</span>] = callbackName</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = <span class=\"title function_\">formatParams</span>(options.<span class=\"property\">data</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  oHead.<span class=\"title function_\">appendChild</span>(oScript);</span><br><span class=\"line\">  <span class=\"comment\">// 创建jsonp回调函数</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>[callbackName] = <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">    oHead.<span class=\"title function_\">removeChild</span>(oScript)</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(oScript.<span class=\"property\">timer</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[callbackName] = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (json) &#123;</span><br><span class=\"line\">      options.<span class=\"property\">success</span> &amp;&amp; options.<span class=\"title function_\">success</span>(json)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      options.<span class=\"property\">fail</span> &amp;&amp; options.<span class=\"title function_\">fail</span>(&#123; <span class=\"attr\">code</span>: <span class=\"string\">&#x27;FS_UNKNOW&#x27;</span>, <span class=\"attr\">summary</span>: <span class=\"string\">&#x27;请求错误&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发送请求</span></span><br><span class=\"line\">  oScript.<span class=\"property\">src</span> = options.<span class=\"property\">url</span> + (options.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) &gt; -<span class=\"number\">1</span> ? <span class=\"string\">&#x27;&amp;&#x27;</span> : <span class=\"string\">&#x27;?&#x27;</span>) + params</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 超时处理</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">time</span>) &#123;</span><br><span class=\"line\">    oScript.<span class=\"property\">timer</span> = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>[callbackName] = <span class=\"literal\">null</span></span><br><span class=\"line\">      oHead.<span class=\"title function_\">removeChild</span>(oScript)</span><br><span class=\"line\">      options.<span class=\"property\">fail</span> &amp;&amp; options.<span class=\"title function_\">fail</span>(&#123; <span class=\"attr\">code</span>: <span class=\"string\">&#x27;S_FAIL&#x27;</span>, <span class=\"attr\">summary</span>: <span class=\"string\">&#x27;请求超时&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;, options.<span class=\"property\">time</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"平民版深度拷贝\">平民版深度拷贝</span></h1><blockquote>\n<p>比乞丐版 <code>JSON.parse(JSON.stringify(obj))</code> 好点的深度拷贝</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">deepClone</span> = target =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        newTarget[i] = <span class=\"title function_\">deepClone</span>(target[i])</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newTarget[i] = target[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTarget</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"instanceof-实现\">instanceof 实现</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">new_instance_of</span>(<span class=\"params\">leftVaule, rightVaule</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightProto = rightVaule.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// 取右表达式的 prototype 值</span></span><br><span class=\"line\">    leftVaule = leftVaule.<span class=\"property\">__proto__</span>; <span class=\"comment\">// 取左表达式的__proto__值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (leftVaule === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftVaule === rightProto) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        leftVaule = leftVaule.<span class=\"property\">__proto__</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"new-封装\">new 封装</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">Con, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Con</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title class_\">Con</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span> ? result : obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"手写-promise-乞丐版\">手写 Promise （乞丐版）</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;pending&#x27;</span> <span class=\"comment\">// 状态 pending、resolved、rejected，默认为 pending</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span> = []</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span> (<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">executor</span>(resolve, reject)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"flex\">flex</span></h1><ul>\n<li>flex-grow属性</li>\n</ul>\n<p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<ul>\n<li>flex-shrink属性</li>\n</ul>\n<p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n<ul>\n<li>flex-basis属性</li>\n</ul>\n<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#keep-alive-vs-http2\">keep-alive vs http2</a><ul>\n<li><a href=\"#http-pipelining\">http pipelining</a></li>\n<li><a href=\"#http2\">HTTP2</a></li>\n</ul>\n</li>\n<li><a href=\"#http3%E7%9B%B8%E5%85%B3\">HTTP3相关</a><ul>\n<li><a href=\"#http3-%E6%96%B0%E7%89%B9%E6%80%A7\">HTTP&#x2F;3 新特性</a><ul>\n<li><a href=\"#1-http3%E7%AE%80%E4%BB%8B\">1. HTTP&#x2F;3简介</a></li>\n<li><a href=\"#2-quic%E6%96%B0%E5%8A%9F%E8%83%BD\">2. QUIC新功能</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96\">小程序优化</a></li>\n<li><a href=\"#webpack-%E4%BC%98%E5%8C%96\">Webpack 优化</a></li>\n<li><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B\">浏览器渲染页面的过程</a></li>\n<li><a href=\"#asyncawait-%E4%B8%8E-generator-%E5%8C%BA%E5%88%AB\">async&#x2F;await 与 Generator 区别</a></li>\n<li><a href=\"#jsonp-%E5%B0%81%E8%A3%85\">JSONP 封装</a></li>\n<li><a href=\"#%E5%B9%B3%E6%B0%91%E7%89%88%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D\">平民版深度拷贝</a></li>\n<li><a href=\"#instanceof-%E5%AE%9E%E7%8E%B0\">instanceof 实现</a></li>\n<li><a href=\"#new-%E5%B0%81%E8%A3%85\">new 封装</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-promise-%E4%B9%9E%E4%B8%90%E7%89%88\">手写 Promise （乞丐版）</a></li>\n<li><a href=\"#flex\">flex</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<blockquote>\n<p>在写这篇前端散记之前有写过另外一篇散记，可点击 <a href=\"https://jelon.xyz/posts/front-end-notes/\">前端散记</a> 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。</p>\n</blockquote>\n<h1 id=\"keep-alive-vs-http2\"><a href=\"#keep-alive-vs-http2\" class=\"headerlink\" title=\"keep-alive vs http2\"></a>keep-alive vs http2</h1><blockquote>\n<p>有很多文章都说 http2 相比 http1.1 增加了连接复用。这句话其实是不准确的。</p>\n</blockquote>\n<p><strong>在 HTTP 1.1 中 所有的连接默认都是持续连接，除非特殊声明不支持。</strong> 而在 http1.0 中，官方没有支持 keep-alive, 通常会手动在请求头中添加 Connection: Keep-Alive。</p>\n<p>keep-alive 就是 TCP 连接复用的开端。改善的效果就是不再重新建立TCP连接，省去 三次握手 的时间。如下图：</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/langzh-450px-HTTP_persistent_connection.svg.png\" alt=\"keep-alive\"></p>\n<p>优势有：</p>\n<ul>\n<li>较少的CPU和内存的使用（由于同时打开的连接的减少了）；</li>\n<li>允许请求和应答的HTTP管线化；</li>\n<li>降低拥塞控制 （TCP连接减少了）；</li>\n<li>减少了后续请求的延迟（无需再进行握手）；</li>\n<li>报告错误无需关闭TCP连接。</li>\n</ul>\n<h2 id=\"http-pipelining\"><a href=\"#http-pipelining\" class=\"headerlink\" title=\"http pipelining\"></a>http pipelining</h2><p>有些文章中会有一个误区，就是TCP连接必须等一个请求响应完成后，才能复用。这是不对的，但其实可以注意上面优势里提到到 http pipelining，如下图：</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/HTTP_pipelining.svg/450px-HTTP_pipelining.svg.png\"></p>\n<p>HTTP1.1 中，一个TCP连接里是可以同时发送（实际有先后，但可以在响应前）多个请求的。但它是有序的，遵循先进先出，服务端只能按顺序响应请求（如果前面的请求没有响应完成或需要很长时间，后面的请求就会被阻塞），所以可能发生 队头阻塞（HOL blocking），造成延迟。</p>\n<p>连续的 GET 和 HEAD 请求总可以管线化的。一个连续的幂等请求，如 GET，HEAD，PUT，DELETE，是否可以被管线化取决于一连串请求是否依赖于其他的。</p>\n<p>所以keep-alive 的劣势也很明显：</p>\n<ul>\n<li>Keep-Alive可能会极大的影响服务器性能，因为它在文件被请求之后还保持了不必要的连接很长时间；</li>\n<li>可能发生队头阻塞（HOL blocking），造成延迟。</li>\n</ul>\n<h2 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h2><p>HTTP2 主要解决的问题也是 TCP连接复用。但它比 keep-alive 更彻底，类似于通信工程里的时分复用，多个请求可以同时发送（不分先后），同时响应，解决了 队头阻塞（HOL blocking）的问题，极大提高效率。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/7/73/Mux_color.png\"></p>\n<p>keep-alive 的 HTTP pipelining 相当于单线程的，而 HTTP2 相当于并发。</p>\n<p>HTTP2 的优点：</p>\n<ul>\n<li>对HTTP头字段进行数据压缩(即HPACK算法)；</li>\n<li>HTTP&#x2F;2 服务端推送(Server Push)；</li>\n<li>请求管线化；</li>\n<li>修复HTTP&#x2F;1.0版本以来未修复的队头阻塞问题；</li>\n<li>对数据传输采用多路复用，让多个请求合并在同一 TCP连接内。</li>\n</ul>\n<p>后三个优点其实都是<strong>多路复用</strong>带来的优点。</p>\n<h1 id=\"HTTP3相关\"><a href=\"#HTTP3相关\" class=\"headerlink\" title=\"HTTP3相关\"></a>HTTP3相关</h1><h2 id=\"HTTP-3-新特性\"><a href=\"#HTTP-3-新特性\" class=\"headerlink\" title=\"HTTP&#x2F;3 新特性\"></a>HTTP&#x2F;3 新特性</h2><h3 id=\"1-HTTP-3简介\"><a href=\"#1-HTTP-3简介\" class=\"headerlink\" title=\"1. HTTP&#x2F;3简介\"></a>1. HTTP&#x2F;3简介</h3><p>虽然 HTTP&#x2F;2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p>\n<p>上文提到 HTTP&#x2F;2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP&#x2F;2 的表现情况反倒不如 HTTP&#x2F;1 了。</p>\n<p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP&#x2F;1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>\n<p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p>\n<p>基于这个原因，<strong>Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP&#x2F;3 上</strong>，HTTP&#x2F;3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP&#x2F;3 最大的改造就是使用了 QUIC。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。</p>\n<h3 id=\"2-QUIC新功能\"><a href=\"#2-QUIC新功能\" class=\"headerlink\" title=\"2. QUIC新功能\"></a>2. QUIC新功能</h3><ul>\n<li><strong>0-RTT</strong></li>\n</ul>\n<p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？</p>\n<p>这里面有两层含义:</p>\n<ol>\n<li>传输层 0RTT 就能建立连接。</li>\n<li>加密层 0RTT 就能建立加密连接。</li>\n</ol>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/1.jpg\"></p>\n<p>上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。</p>\n<p>而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p>\n<ul>\n<li><strong>多路复用</strong></li>\n</ul>\n<p>虽然 HTTP&#x2F;2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p>\n<p>同HTTP2.0一样，同一条 QUIC连接上可以创建多个stream，来发送多个HTTP请求，但是，QUIC是基于UDP的，一个连接上的多个stream之间没有依赖。比如下图中stream2丢了一个UDP包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然stream2的那个包需要重新传，但是stream3、stream4的包无需等待，就可以发给用户。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/2.jpg\"></p>\n<p>另外QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p>\n<ul>\n<li><strong>加密认证的报文</strong></li>\n</ul>\n<p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p>\n<p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p>\n<p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-2/3.jpg\"></p>\n<p>如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。</p>\n<ul>\n<li><strong>向前纠错机制</strong></li>\n</ul>\n<p>QUIC协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间（包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗）。</p>\n<p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>HTTP&#x2F;1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷；<br>HTTP&#x2F;2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的；<br>QUIC 基于 UDP 实现，是 HTTP&#x2F;3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</p>\n<h1 id=\"小程序优化\"><a href=\"#小程序优化\" class=\"headerlink\" title=\"小程序优化\"></a>小程序优化</h1><blockquote>\n<p>以本人所项接触的项目（IM相关）实战为例</p>\n</blockquote>\n<ol>\n<li>去除后端返回来的冗余字段；</li>\n<li>状态管理（以为项目使用的是 <code>mpVue</code> 小程序开发框架） ；</li>\n<li>图片资源优化（采用 CDN）；</li>\n<li>图片使用 CDN 之后发现网络请求多了还是给人感觉体验不好，所以又采取了部分较小的图片直接打包进了项目 JS，由于担心小程序项目大小过大，所以才去分包；</li>\n<li>群组人员 ID 缓存，并通过 ID 数组是否变化来加载人员信息。</li>\n</ol>\n<h1 id=\"Webpack-优化\"><a href=\"#Webpack-优化\" class=\"headerlink\" title=\"Webpack 优化\"></a>Webpack 优化</h1><ol>\n<li>externals + cdn；</li>\n<li>cache-loader；</li>\n<li>happy-pack、thread-loader；</li>\n<li>webpack-bundle-analyzer</li>\n<li>Tree Shaking</li>\n<li>CommonChunkPlugin (Webpack 4.0移除，使用 SplitChunkPlugin 替代)；</li>\n<li>DllPlugin 和 DllReferencePlugin：DLLPlugin 就是将包含大量复用模块且不会频繁更新的库进行编译，只需要编译一次，编译完成后存在指定的文件（这里可以称为动态链接库）中。在之后的构建过程中不会再对这些模块进行编译，而是直接使用 DllReferencePlugin 来引用动态链接库的代码。</li>\n</ol>\n<h1 id=\"浏览器渲染页面的过程\"><a href=\"#浏览器渲染页面的过程\" class=\"headerlink\" title=\"浏览器渲染页面的过程\"></a>浏览器渲染页面的过程</h1><p>从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：</p>\n<ol>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求即响应</li>\n<li>服务器响应</li>\n<li>客户端渲染</li>\n</ol>\n<p>浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面五个步骤：</p>\n<ol>\n<li>处理 HTML 标记并构建 DOM 树。</li>\n<li>处理 CSS 标记并构建 CSSOM 树。</li>\n<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>\n<li>根据渲染树来布局，以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上。</li>\n</ol>\n<h1 id=\"async-await-与-Generator-区别\"><a href=\"#async-await-与-Generator-区别\" class=\"headerlink\" title=\"async&#x2F;await 与 Generator 区别\"></a>async&#x2F;await 与 Generator 区别</h1><p>ES7 提出的async 函数，终于让 JavaScript 对于异步操作有了终极解决方案。No more callback hell。</p>\n<p>async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。</p>\n<p>想较于 Generator，Async 函数的改进在于下面四点：</p>\n<ul>\n<li><strong>内置执行器</strong>。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样；</li>\n<li><strong>更好的语义</strong>。async 和 await 相较于 * 和 yield 更加语义化；</li>\n<li><strong>更广的适用性</strong>。co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise对象。而 async 函数的 await 命令后面则可以是 Promise 或者 原始类型的值（Number，string，boolean，但这时等同于同步操作）；</li>\n<li><strong>返回值是 Promise</strong>。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。</li>\n</ul>\n<h1 id=\"JSONP-封装\"><a href=\"#JSONP-封装\" class=\"headerlink\" title=\"JSONP 封装\"></a>JSONP 封装</h1><blockquote>\n<p>以下是之前在做跨域项目所封装的 jsonp 库</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonp</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.<span class=\"property\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数不合法&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建 script 标签并加入到页面中, 如果没传callback默认生成一个</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> callbackName = options.<span class=\"property\">callback</span> || options.<span class=\"property\">data</span>[<span class=\"string\">&#x27;callback&#x27;</span>] ||　(<span class=\"string\">&#x27;jsonp_&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oHead = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  options.<span class=\"property\">data</span>[<span class=\"string\">&#x27;callback&#x27;</span>] = callbackName</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = <span class=\"title function_\">formatParams</span>(options.<span class=\"property\">data</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oScript = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  oHead.<span class=\"title function_\">appendChild</span>(oScript);</span><br><span class=\"line\">  <span class=\"comment\">// 创建jsonp回调函数</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>[callbackName] = <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">    oHead.<span class=\"title function_\">removeChild</span>(oScript)</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(oScript.<span class=\"property\">timer</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[callbackName] = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (json) &#123;</span><br><span class=\"line\">      options.<span class=\"property\">success</span> &amp;&amp; options.<span class=\"title function_\">success</span>(json)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      options.<span class=\"property\">fail</span> &amp;&amp; options.<span class=\"title function_\">fail</span>(&#123; <span class=\"attr\">code</span>: <span class=\"string\">&#x27;FS_UNKNOW&#x27;</span>, <span class=\"attr\">summary</span>: <span class=\"string\">&#x27;请求错误&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 发送请求</span></span><br><span class=\"line\">  oScript.<span class=\"property\">src</span> = options.<span class=\"property\">url</span> + (options.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>) &gt; -<span class=\"number\">1</span> ? <span class=\"string\">&#x27;&amp;&#x27;</span> : <span class=\"string\">&#x27;?&#x27;</span>) + params</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 超时处理</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">time</span>) &#123;</span><br><span class=\"line\">    oScript.<span class=\"property\">timer</span> = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>[callbackName] = <span class=\"literal\">null</span></span><br><span class=\"line\">      oHead.<span class=\"title function_\">removeChild</span>(oScript)</span><br><span class=\"line\">      options.<span class=\"property\">fail</span> &amp;&amp; options.<span class=\"title function_\">fail</span>(&#123; <span class=\"attr\">code</span>: <span class=\"string\">&#x27;S_FAIL&#x27;</span>, <span class=\"attr\">summary</span>: <span class=\"string\">&#x27;请求超时&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;, options.<span class=\"property\">time</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"平民版深度拷贝\"><a href=\"#平民版深度拷贝\" class=\"headerlink\" title=\"平民版深度拷贝\"></a>平民版深度拷贝</h1><blockquote>\n<p>比乞丐版 <code>JSON.parse(JSON.stringify(obj))</code> 好点的深度拷贝</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">deepClone</span> = target =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        newTarget[i] = <span class=\"title function_\">deepClone</span>(target[i])</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newTarget[i] = target[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTarget</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"instanceof-实现\"><a href=\"#instanceof-实现\" class=\"headerlink\" title=\"instanceof 实现\"></a>instanceof 实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">new_instance_of</span>(<span class=\"params\">leftVaule, rightVaule</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightProto = rightVaule.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// 取右表达式的 prototype 值</span></span><br><span class=\"line\">    leftVaule = leftVaule.<span class=\"property\">__proto__</span>; <span class=\"comment\">// 取左表达式的__proto__值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (leftVaule === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftVaule === rightProto) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        leftVaule = leftVaule.<span class=\"property\">__proto__</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"new-封装\"><a href=\"#new-封装\" class=\"headerlink\" title=\"new 封装\"></a>new 封装</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">Con, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Con</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title class_\">Con</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span> ? result : obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写-Promise-（乞丐版）\"><a href=\"#手写-Promise-（乞丐版）\" class=\"headerlink\" title=\"手写 Promise （乞丐版）\"></a>手写 Promise （乞丐版）</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span> (<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;pending&#x27;</span> <span class=\"comment\">// 状态 pending、resolved、rejected，默认为 pending</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span> = []</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span> (<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">executor</span>(resolve, reject)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h1><ul>\n<li>flex-grow属性</li>\n</ul>\n<p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<ul>\n<li>flex-shrink属性</li>\n</ul>\n<p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n<ul>\n<li>flex-basis属性</li>\n</ul>\n<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n"},{"title":"前端散记 3","author":"Jelon","date":"2020-06-17T00:00:00.000Z","thumbnail":null,"blogexcerpt":"async await 实现原理 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版...","_content":"\n<!-- toc -->\n\n> 在写这篇前端散记之前有写过另外两篇散记，可点击 [前端散记](https://jelon.xyz/posts/front-end-notes/) 和 [前端散记 2](https://jelon.xyz/posts/front-end-notes-2/) 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。\n\n# async await 实现原理\n\n**async 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。**\n\n```js\nasync function fn(args){\n  // ...\n}\n\n// 等同于\n\nfunction fn(args){ \n  return spawn(function*() {\n    // ...\n  }); \n}\n```\n\n所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。\n\n下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版。\n\n```js\n\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n\n    function step(nextF) {\n      try {\n        var next = nextF();\n      } catch(e) {\n        return reject(e); \n      }\n      if(next.done) {\n        return resolve(next.value);\n      } \n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });      \n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\n```\n\nasync 函数是非常新的语法功能，新到都不属于 ES6，而是属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持，转码后就能使用。\n\n# async await 注意点\n\nawait 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try...catch 代码块中。\n\n```js\nsync function myFunction() {\n  try {\n    await somethingThatReturnsAPromise();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n// 另一种写法\n\nasync function myFunction() {\n  await somethingThatReturnsAPromise().catch(function (err){\n    console.log(err);\n  });\n}\n```\n\nawait 命令只能用在 async 函数之中，如果用在普通函数，就会报错。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 报错\n  docs.forEach(function (doc) {\n    await db.post(doc);\n  });\n}\n```\n\n上面代码会报错，因为 await 用在普通函数之中了。但是，如果将 forEach 方法的参数改成 async 函数，也有问题。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 可能得到错误结果\n  docs.forEach(async function (doc) {\n    await db.post(doc);\n  });\n}\n```\n\n上面代码可能不会正常工作，原因是这时三个 db.post 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  for (let doc of docs) {\n    await db.post(doc);\n  }\n}\n```\n\n**如果确实希望多个请求并发执行，可以使用 Promise.all 方法。**\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = await Promise.all(promises);\n  console.log(results);\n}\n\n// 或者使用下面的写法\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = [];\n  for (let promise of promises) {\n    results.push(await promise);\n  }\n  console.log(results);\n}\n```\n\n# ES5 实现继承\n\n**第一种方式是借助call实现继承：**\n\n```js\n  function Parent1(){\n    this.name = 'parent1';\n  }\n  function Child1(){\n    Parent1.call(this);\n    this.type = 'child1'\n  }\n  console.log(new Child1);\n```\n\n复制代码这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。\n\n**第二种方式借助原型链实现继承：**\n\n```js\n  function Parent2() {\n    this.name = 'parent2';\n    this.play = [1, 2, 3]\n  }\n  function Child2() {\n    this.type = 'child2';\n  }\n  Child2.prototype = new Parent2();\n\n  console.log(new Child2());\n```\n\n看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：\n\n```js\n  var s1 = new Child2();\n  var s2 = new Child2();\n  s1.play.push(4);\n  console.log(s1.play, s2.play);\n```\n\n可以看到控制台：\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/1.jpg)\n\n明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。\n\n那么还有更好的方式么？\n\n**第三种方式：将前两种组合：**\n\n```js\n  function Parent3 () {\n    this.name = 'parent3';\n    this.play = [1, 2, 3];\n  }\n  function Child3() {\n    Parent3.call(this);\n    this.type = 'child3';\n  }\n  Child3.prototype = new Parent3();\n  var s3 = new Child3();\n  var s4 = new Child3();\n  s3.play.push(4);\n  console.log(s3.play, s4.play);\n```\n\n可以看到控制台：\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/2.png)\n\n之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？\n\n**第四种方式: 组合继承的优化1**\n\n```js\n  function Parent4 () {\n    this.name = 'parent4';\n    this.play = [1, 2, 3];\n  }\n  function Child4() {\n    Parent4.call(this);\n    this.type = 'child4';\n  }\n  Child4.prototype = Parent4.prototype;\n\n```\n\n这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：\n\n```js\n  var s3 = new Child4();\n  var s4 = new Child4();\n  console.log(s3)\n```\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/3.png)\n\n子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。\n\n**第五种方式(最推荐使用)：优化2**\n\n```js\n  function Parent5 () {\n    this.name = 'parent5';\n    this.play = [1, 2, 3];\n  }\n  function Child5() {\n    Parent5.call(this);\n    this.type = 'child5';\n  }\n  Child5.prototype = Object.create(Parent5.prototype);\n  Child5.prototype.constructor = Child5;\n\n```\n\n这是最推荐的一种方式，接近完美的继承。\n\n因此，小小的继承虽然ES6当中简化了很多，但毋庸置疑的是，js是一门基于原型的语言，所以，用ES5来完成继承非常考验面试者对JS语言本身的理解，尤其是对于原型链是否理解清楚。\n\n# 虚拟DOM和Diff算法\n\n**虚拟DOM**\n\n虚拟Dom(virtual dom)到底是什么，简单来讲，就是将真实的dom节点用JavaScript来模拟出来，而Dom变化的对比，放到 Js 层来做。\n\n- 传统DOM节点\n\n```html\n<ul id=\"list\">\n  <li class=\"item\">jelon1</li>\n  <li class=\"item\">jelon2</li>\n</ul>\n```\n\n- 对应虚拟DOM\n\n```js\n{\n  tag: 'ul',\n  attrs: {\n    id: 'list'\n  },\n  children: [\n  \t{\n  \t  tag: 'li',\n  \t  attrs: {\n  \t    className: 'item'\n  \t  },\n  \t  children: [ 'jelon1' ]\n  \t},\n  \t{\n  \t  tag: 'li',\n  \t  attrs: {\n  \t    className: 'item'\n  \t  },\n  \t  children: [ 'jelon2' ]\n  \t}\n  ]\n}\n```\n\n- render方法\n\n\n**diff算法**\n\n关键词：patch\n\n可参考[详解vue的diff算法](https://juejin.im/post/5affd01551882542c83301da#comment)\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/4.png?v=1)\n\n# 工作中项目优化实践\n\n> 前端优化主要基于两个目的：\n> 1. 提升加载速度；\n> 2. 用户操作起来流畅。 \n> 因此，以下优化主要是围绕这两个目的展开。\n\n1. css sprite（雪碧图），iconfont；\n2. 资源懒加载、异步路由；\n3. 前端缓存 LocalStorage 及混合应用 Storage；\n4. 使用 CDN（JS、CSS等资源使用外部域名）；\n5. Tree Shaking （Webpack 4.0+）；\n6. 预请求；\n7. 资源按需加载；\n8. gzip （服务器）；\n9. 减少 DOM 操作；\n10. 防抖节流；\n11. 尽量少用iframe；\n12. 尽量规避 CSS 计算。\n\n**参考思路**\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/5.jpeg?v=1)\n\n**雅虎军规**\n\n[Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html?guccounter=1)\n\n# defineProperty vs proxy\n\n- Proxy可以直接监听对象而非属性；\n- Proxy直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于Object.defineProperty；\n- Proxy可以直接监听数组的变化；\n- Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。\n\n# 手写 call\n\n```js\nFunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n\n    delete context.fn\n    return result;\n}\n```\n\n# 手写 apply\n\n```js\nFunction.prototype.apply = function (context, arr) {\n    var context = Object(context) || window;\n    context.fn = this;\n\n    var result;\n    if (!arr) {\n        result = context.fn();\n    }\n    else {\n        var args = [];\n        for (var i = 0, len = arr.length; i < len; i++) {\n            args.push('arr[' + i + ']');\n        }\n        result = eval('context.fn(' + args + ')')\n    }\n\n    delete context.fn\n    return result;\n}\n```\n\n# 手写bind\n\n```js\nFunction.prototype.bind2 = function (asThis, ...args1) {\n\t let fn = this;  // 函数调用时，原this其实就是这个调用函数\n    return function(...args2) {  // 同时，返回的新函数也可以接受参数\n        return fn.call(asThis, ...args1, ...args2);\n    }\n}\n```\n\n# preload和prefetch\n\npreload特点\n\npreload加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞onload事件；\npreload可以支持加载多种类型的资源，并且可以加载跨域资源；\npreload加载的js脚本其加载和执行的过程是分离的。即preload会预加载相应的脚本代码，待到需要时自行调用；\nprefetch\n\nprefetch是一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制；通常可以用于加载非首页的其他页面所需要的资源，以便加快后续页面的首屏速度；\n\nprefetch特点\n\nprefetch加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）；并且，当页面跳转时，未完成的prefetch请求不会被中断。\n\n## 对比\n\nChrome有四种缓存：http cache、memory cache、Service Worker cache和Push\ncache。在preload或prefetch的资源加载时，两者均存储在http\ncache。当资源加载完成后，如果资源是可以被缓存的，那么其被存储在http\ncache中等待后续使用；如果资源不可被缓存，那么其在被使用前均存储在memory cache；\npreload和prefetch都没有同域名的限制；\npreload主要用于预加载当前页面需要的资源；而prefetch主要用于加载将来页面可能需要的资源；\n不论资源是否可以缓存，prefecth会存储在net-stack cache中至少5分钟；\npreload需要使用as属性指定特定的资源类型以便浏览器为其分配一定的优先级，并能够正确加载资源；\n\n# 如何比较两个 DOM 树的差异？\n\n两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\n\n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\n\n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\n","source":"_posts/front-end-notes-3.md","raw":"title: 前端散记 3\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2020-06-17\ntags:\n  - 前端\nthumbnail:\nblogexcerpt: async await 实现原理 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版...\n\n---\n\n<!-- toc -->\n\n> 在写这篇前端散记之前有写过另外两篇散记，可点击 [前端散记](https://jelon.xyz/posts/front-end-notes/) 和 [前端散记 2](https://jelon.xyz/posts/front-end-notes-2/) 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。\n\n# async await 实现原理\n\n**async 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。**\n\n```js\nasync function fn(args){\n  // ...\n}\n\n// 等同于\n\nfunction fn(args){ \n  return spawn(function*() {\n    // ...\n  }); \n}\n```\n\n所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。\n\n下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版。\n\n```js\n\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n\n    function step(nextF) {\n      try {\n        var next = nextF();\n      } catch(e) {\n        return reject(e); \n      }\n      if(next.done) {\n        return resolve(next.value);\n      } \n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });      \n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\n```\n\nasync 函数是非常新的语法功能，新到都不属于 ES6，而是属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持，转码后就能使用。\n\n# async await 注意点\n\nawait 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try...catch 代码块中。\n\n```js\nsync function myFunction() {\n  try {\n    await somethingThatReturnsAPromise();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n// 另一种写法\n\nasync function myFunction() {\n  await somethingThatReturnsAPromise().catch(function (err){\n    console.log(err);\n  });\n}\n```\n\nawait 命令只能用在 async 函数之中，如果用在普通函数，就会报错。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 报错\n  docs.forEach(function (doc) {\n    await db.post(doc);\n  });\n}\n```\n\n上面代码会报错，因为 await 用在普通函数之中了。但是，如果将 forEach 方法的参数改成 async 函数，也有问题。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 可能得到错误结果\n  docs.forEach(async function (doc) {\n    await db.post(doc);\n  });\n}\n```\n\n上面代码可能不会正常工作，原因是这时三个 db.post 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  for (let doc of docs) {\n    await db.post(doc);\n  }\n}\n```\n\n**如果确实希望多个请求并发执行，可以使用 Promise.all 方法。**\n\n```js\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = await Promise.all(promises);\n  console.log(results);\n}\n\n// 或者使用下面的写法\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = [];\n  for (let promise of promises) {\n    results.push(await promise);\n  }\n  console.log(results);\n}\n```\n\n# ES5 实现继承\n\n**第一种方式是借助call实现继承：**\n\n```js\n  function Parent1(){\n    this.name = 'parent1';\n  }\n  function Child1(){\n    Parent1.call(this);\n    this.type = 'child1'\n  }\n  console.log(new Child1);\n```\n\n复制代码这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。\n\n**第二种方式借助原型链实现继承：**\n\n```js\n  function Parent2() {\n    this.name = 'parent2';\n    this.play = [1, 2, 3]\n  }\n  function Child2() {\n    this.type = 'child2';\n  }\n  Child2.prototype = new Parent2();\n\n  console.log(new Child2());\n```\n\n看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：\n\n```js\n  var s1 = new Child2();\n  var s2 = new Child2();\n  s1.play.push(4);\n  console.log(s1.play, s2.play);\n```\n\n可以看到控制台：\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/1.jpg)\n\n明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。\n\n那么还有更好的方式么？\n\n**第三种方式：将前两种组合：**\n\n```js\n  function Parent3 () {\n    this.name = 'parent3';\n    this.play = [1, 2, 3];\n  }\n  function Child3() {\n    Parent3.call(this);\n    this.type = 'child3';\n  }\n  Child3.prototype = new Parent3();\n  var s3 = new Child3();\n  var s4 = new Child3();\n  s3.play.push(4);\n  console.log(s3.play, s4.play);\n```\n\n可以看到控制台：\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/2.png)\n\n之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？\n\n**第四种方式: 组合继承的优化1**\n\n```js\n  function Parent4 () {\n    this.name = 'parent4';\n    this.play = [1, 2, 3];\n  }\n  function Child4() {\n    Parent4.call(this);\n    this.type = 'child4';\n  }\n  Child4.prototype = Parent4.prototype;\n\n```\n\n这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：\n\n```js\n  var s3 = new Child4();\n  var s4 = new Child4();\n  console.log(s3)\n```\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/3.png)\n\n子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。\n\n**第五种方式(最推荐使用)：优化2**\n\n```js\n  function Parent5 () {\n    this.name = 'parent5';\n    this.play = [1, 2, 3];\n  }\n  function Child5() {\n    Parent5.call(this);\n    this.type = 'child5';\n  }\n  Child5.prototype = Object.create(Parent5.prototype);\n  Child5.prototype.constructor = Child5;\n\n```\n\n这是最推荐的一种方式，接近完美的继承。\n\n因此，小小的继承虽然ES6当中简化了很多，但毋庸置疑的是，js是一门基于原型的语言，所以，用ES5来完成继承非常考验面试者对JS语言本身的理解，尤其是对于原型链是否理解清楚。\n\n# 虚拟DOM和Diff算法\n\n**虚拟DOM**\n\n虚拟Dom(virtual dom)到底是什么，简单来讲，就是将真实的dom节点用JavaScript来模拟出来，而Dom变化的对比，放到 Js 层来做。\n\n- 传统DOM节点\n\n```html\n<ul id=\"list\">\n  <li class=\"item\">jelon1</li>\n  <li class=\"item\">jelon2</li>\n</ul>\n```\n\n- 对应虚拟DOM\n\n```js\n{\n  tag: 'ul',\n  attrs: {\n    id: 'list'\n  },\n  children: [\n  \t{\n  \t  tag: 'li',\n  \t  attrs: {\n  \t    className: 'item'\n  \t  },\n  \t  children: [ 'jelon1' ]\n  \t},\n  \t{\n  \t  tag: 'li',\n  \t  attrs: {\n  \t    className: 'item'\n  \t  },\n  \t  children: [ 'jelon2' ]\n  \t}\n  ]\n}\n```\n\n- render方法\n\n\n**diff算法**\n\n关键词：patch\n\n可参考[详解vue的diff算法](https://juejin.im/post/5affd01551882542c83301da#comment)\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/4.png?v=1)\n\n# 工作中项目优化实践\n\n> 前端优化主要基于两个目的：\n> 1. 提升加载速度；\n> 2. 用户操作起来流畅。 \n> 因此，以下优化主要是围绕这两个目的展开。\n\n1. css sprite（雪碧图），iconfont；\n2. 资源懒加载、异步路由；\n3. 前端缓存 LocalStorage 及混合应用 Storage；\n4. 使用 CDN（JS、CSS等资源使用外部域名）；\n5. Tree Shaking （Webpack 4.0+）；\n6. 预请求；\n7. 资源按需加载；\n8. gzip （服务器）；\n9. 减少 DOM 操作；\n10. 防抖节流；\n11. 尽量少用iframe；\n12. 尽量规避 CSS 计算。\n\n**参考思路**\n\n![](https://jangdelong.github.io/blog_img/images/front-end-notes-3/5.jpeg?v=1)\n\n**雅虎军规**\n\n[Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html?guccounter=1)\n\n# defineProperty vs proxy\n\n- Proxy可以直接监听对象而非属性；\n- Proxy直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于Object.defineProperty；\n- Proxy可以直接监听数组的变化；\n- Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。\n\n# 手写 call\n\n```js\nFunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n\n    delete context.fn\n    return result;\n}\n```\n\n# 手写 apply\n\n```js\nFunction.prototype.apply = function (context, arr) {\n    var context = Object(context) || window;\n    context.fn = this;\n\n    var result;\n    if (!arr) {\n        result = context.fn();\n    }\n    else {\n        var args = [];\n        for (var i = 0, len = arr.length; i < len; i++) {\n            args.push('arr[' + i + ']');\n        }\n        result = eval('context.fn(' + args + ')')\n    }\n\n    delete context.fn\n    return result;\n}\n```\n\n# 手写bind\n\n```js\nFunction.prototype.bind2 = function (asThis, ...args1) {\n\t let fn = this;  // 函数调用时，原this其实就是这个调用函数\n    return function(...args2) {  // 同时，返回的新函数也可以接受参数\n        return fn.call(asThis, ...args1, ...args2);\n    }\n}\n```\n\n# preload和prefetch\n\npreload特点\n\npreload加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞onload事件；\npreload可以支持加载多种类型的资源，并且可以加载跨域资源；\npreload加载的js脚本其加载和执行的过程是分离的。即preload会预加载相应的脚本代码，待到需要时自行调用；\nprefetch\n\nprefetch是一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制；通常可以用于加载非首页的其他页面所需要的资源，以便加快后续页面的首屏速度；\n\nprefetch特点\n\nprefetch加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）；并且，当页面跳转时，未完成的prefetch请求不会被中断。\n\n## 对比\n\nChrome有四种缓存：http cache、memory cache、Service Worker cache和Push\ncache。在preload或prefetch的资源加载时，两者均存储在http\ncache。当资源加载完成后，如果资源是可以被缓存的，那么其被存储在http\ncache中等待后续使用；如果资源不可被缓存，那么其在被使用前均存储在memory cache；\npreload和prefetch都没有同域名的限制；\npreload主要用于预加载当前页面需要的资源；而prefetch主要用于加载将来页面可能需要的资源；\n不论资源是否可以缓存，prefecth会存储在net-stack cache中至少5分钟；\npreload需要使用as属性指定特定的资源类型以便浏览器为其分配一定的优先级，并能够正确加载资源；\n\n# 如何比较两个 DOM 树的差异？\n\n两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\n\n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\n\n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\n","slug":"front-end-notes-3","published":1,"updated":"2020-06-17T00:00:00.000Z","_id":"cmduj3n28000jk8svdd9ca3ii","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#async-await-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">async await 实现原理</a></li>\n<li><a href=\"#async-await-%E6%B3%A8%E6%84%8F%E7%82%B9\">async await 注意点</a></li>\n<li><a href=\"#es5-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\">ES5 实现继承</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9Fdom%E5%92%8Cdiff%E7%AE%97%E6%B3%95\">虚拟DOM和Diff算法</a></li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5\">工作中项目优化实践</a></li>\n<li><a href=\"#defineproperty-vs-proxy\">defineProperty vs proxy</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-call\">手写 call</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-apply\">手写 apply</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99bind\">手写bind</a></li>\n<li><a href=\"#preload%E5%92%8Cprefetch\">preload和prefetch</a><ul>\n<li><a href=\"#%E5%AF%B9%E6%AF%94\">对比</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA-dom-%E6%A0%91%E7%9A%84%E5%B7%AE%E5%BC%82\">如何比较两个 DOM 树的差异？</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<blockquote>\n<p>在写这篇前端散记之前有写过另外两篇散记，可点击 <a href=\"https://jelon.xyz/posts/front-end-notes/\">前端散记</a> 和 <a href=\"https://jelon.xyz/posts/front-end-notes-2/\">前端散记 2</a> 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。</p>\n</blockquote>\n<h1><span id=\"async-await-实现原理\">async await 实现原理</span></h1><p><strong>async 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>)&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">spawn</span>(<span class=\"keyword\">function</span>*() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。</p>\n<p>下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">spawn</span>(<span class=\"params\">genF</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = <span class=\"title function_\">genF</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">nextF</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"title function_\">nextF</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(next.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"title function_\">next</span>(v); &#125;);      </span><br><span class=\"line\">      &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"keyword\">throw</span>(e); &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"title function_\">next</span>(<span class=\"literal\">undefined</span>); &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>async 函数是非常新的语法功能，新到都不属于 ES6，而是属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持，转码后就能使用。</p>\n<h1><span id=\"async-await-注意点\">async await 注意点</span></h1><p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">somethingThatReturnsAPromise</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">somethingThatReturnsAPromise</span>().<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 报错</span></span><br><span class=\"line\">  docs.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码会报错，因为 await 用在普通函数之中了。但是，如果将 forEach 方法的参数改成 async 函数，也有问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可能得到错误结果</span></span><br><span class=\"line\">  docs.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码可能不会正常工作，原因是这时三个 db.post 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> doc <span class=\"keyword\">of</span> docs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果确实希望多个请求并发执行，可以使用 Promise.all 方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promises = docs.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> db.<span class=\"title function_\">post</span>(doc));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用下面的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promises = docs.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> db.<span class=\"title function_\">post</span>(doc));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">    results.<span class=\"title function_\">push</span>(<span class=\"keyword\">await</span> promise);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"es5-实现继承\">ES5 实现继承</span></h1><p><strong>第一种方式是借助call实现继承：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent1</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>复制代码这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p>\n<p><strong>第二种方式借助原型链实现继承：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent2&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child2&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>());</span><br></pre></td></tr></table></figure>\n\n<p>看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>();</span><br><span class=\"line\">s1.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1.<span class=\"property\">play</span>, s2.<span class=\"property\">play</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/1.jpg\"></p>\n<p>明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。</p>\n<p>那么还有更好的方式么？</p>\n<p><strong>第三种方式：将前两种组合：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent3</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent3</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child3</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent3</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>();</span><br><span class=\"line\">s3.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3.<span class=\"property\">play</span>, s4.<span class=\"property\">play</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/2.png\"></p>\n<p>之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype &#x3D; new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？</p>\n<p><strong>第四种方式: 组合继承的优化1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent4</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent4&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent4</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child4&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child4</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Parent4</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child4</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child4</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/3.png\"></p>\n<p>子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。</p>\n<p><strong>第五种方式(最推荐使用)：优化2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent5</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child5</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent5</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child5&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Child5</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是最推荐的一种方式，接近完美的继承。</p>\n<p>因此，小小的继承虽然ES6当中简化了很多，但毋庸置疑的是，js是一门基于原型的语言，所以，用ES5来完成继承非常考验面试者对JS语言本身的理解，尤其是对于原型链是否理解清楚。</p>\n<h1><span id=\"虚拟dom和diff算法\">虚拟DOM和Diff算法</span></h1><p><strong>虚拟DOM</strong></p>\n<p>虚拟Dom(virtual dom)到底是什么，简单来讲，就是将真实的dom节点用JavaScript来模拟出来，而Dom变化的对比，放到 Js 层来做。</p>\n<ul>\n<li>传统DOM节点</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>jelon1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>jelon2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应虚拟DOM</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;ul&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;list&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;li&#x27;</span>,</span><br><span class=\"line\">  \t  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">  \t    <span class=\"attr\">className</span>: <span class=\"string\">&#x27;item&#x27;</span></span><br><span class=\"line\">  \t  &#125;,</span><br><span class=\"line\">  \t  <span class=\"attr\">children</span>: [ <span class=\"string\">&#x27;jelon1&#x27;</span> ]</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;li&#x27;</span>,</span><br><span class=\"line\">  \t  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">  \t    <span class=\"attr\">className</span>: <span class=\"string\">&#x27;item&#x27;</span></span><br><span class=\"line\">  \t  &#125;,</span><br><span class=\"line\">  \t  <span class=\"attr\">children</span>: [ <span class=\"string\">&#x27;jelon2&#x27;</span> ]</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>render方法</li>\n</ul>\n<p><strong>diff算法</strong></p>\n<p>关键词：patch</p>\n<p>可参考<a href=\"https://juejin.im/post/5affd01551882542c83301da#comment\">详解vue的diff算法</a></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/4.png?v=1\"></p>\n<h1><span id=\"工作中项目优化实践\">工作中项目优化实践</span></h1><blockquote>\n<p>前端优化主要基于两个目的：</p>\n<ol>\n<li>提升加载速度；</li>\n<li>用户操作起来流畅。<br>因此，以下优化主要是围绕这两个目的展开。</li>\n</ol>\n</blockquote>\n<ol>\n<li>css sprite（雪碧图），iconfont；</li>\n<li>资源懒加载、异步路由；</li>\n<li>前端缓存 LocalStorage 及混合应用 Storage；</li>\n<li>使用 CDN（JS、CSS等资源使用外部域名）；</li>\n<li>Tree Shaking （Webpack 4.0+）；</li>\n<li>预请求；</li>\n<li>资源按需加载；</li>\n<li>gzip （服务器）；</li>\n<li>减少 DOM 操作；</li>\n<li>防抖节流；</li>\n<li>尽量少用iframe；</li>\n<li>尽量规避 CSS 计算。</li>\n</ol>\n<p><strong>参考思路</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/5.jpeg?v=1\"></p>\n<p><strong>雅虎军规</strong></p>\n<p><a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\">Best Practices for Speeding Up Your Web Site</a></p>\n<h1><span id=\"defineproperty-vs-proxy\">defineProperty vs proxy</span></h1><ul>\n<li>Proxy可以直接监听对象而非属性；</li>\n<li>Proxy直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于Object.defineProperty；</li>\n<li>Proxy可以直接监听数组的变化；</li>\n<li>Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。</li>\n</ul>\n<h1><span id=\"手写-call\">手写 call</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call2</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;context.fn(&#x27;</span> + args +<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"手写-apply\">手写 apply</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"title class_\">Object</span>(context) || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr) &#123;</span><br><span class=\"line\">        result = context.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arr[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;context.fn(&#x27;</span> + args + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"手写bind\">手写bind</span></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind2</span> = <span class=\"keyword\">function</span> (<span class=\"params\">asThis, ...args1</span>) &#123;</span><br><span class=\"line\">\t <span class=\"keyword\">let</span> fn = <span class=\"variable language_\">this</span>;  <span class=\"comment\">// 函数调用时，原this其实就是这个调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) &#123;  <span class=\"comment\">// 同时，返回的新函数也可以接受参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(asThis, ...args1, ...args2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"preload和prefetch\">preload和prefetch</span></h1><p>preload特点</p>\n<p>preload加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞onload事件；<br>preload可以支持加载多种类型的资源，并且可以加载跨域资源；<br>preload加载的js脚本其加载和执行的过程是分离的。即preload会预加载相应的脚本代码，待到需要时自行调用；<br>prefetch</p>\n<p>prefetch是一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制；通常可以用于加载非首页的其他页面所需要的资源，以便加快后续页面的首屏速度；</p>\n<p>prefetch特点</p>\n<p>prefetch加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）；并且，当页面跳转时，未完成的prefetch请求不会被中断。</p>\n<h2><span id=\"对比\">对比</span></h2><p>Chrome有四种缓存：http cache、memory cache、Service Worker cache和Push<br>cache。在preload或prefetch的资源加载时，两者均存储在http<br>cache。当资源加载完成后，如果资源是可以被缓存的，那么其被存储在http<br>cache中等待后续使用；如果资源不可被缓存，那么其在被使用前均存储在memory cache；<br>preload和prefetch都没有同域名的限制；<br>preload主要用于预加载当前页面需要的资源；而prefetch主要用于加载将来页面可能需要的资源；<br>不论资源是否可以缓存，prefecth会存储在net-stack cache中至少5分钟；<br>preload需要使用as属性指定特定的资源类型以便浏览器为其分配一定的优先级，并能够正确加载资源；</p>\n<h1><span id=\"如何比较两个-dom-树的差异\">如何比较两个 DOM 树的差异？</span></h1><p>两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。</p>\n<p>算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。</p>\n<p>在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#async-await-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">async await 实现原理</a></li>\n<li><a href=\"#async-await-%E6%B3%A8%E6%84%8F%E7%82%B9\">async await 注意点</a></li>\n<li><a href=\"#es5-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\">ES5 实现继承</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9Fdom%E5%92%8Cdiff%E7%AE%97%E6%B3%95\">虚拟DOM和Diff算法</a></li>\n<li><a href=\"#%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5\">工作中项目优化实践</a></li>\n<li><a href=\"#defineproperty-vs-proxy\">defineProperty vs proxy</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-call\">手写 call</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99-apply\">手写 apply</a></li>\n<li><a href=\"#%E6%89%8B%E5%86%99bind\">手写bind</a></li>\n<li><a href=\"#preload%E5%92%8Cprefetch\">preload和prefetch</a><ul>\n<li><a href=\"#%E5%AF%B9%E6%AF%94\">对比</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA-dom-%E6%A0%91%E7%9A%84%E5%B7%AE%E5%BC%82\">如何比较两个 DOM 树的差异？</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<blockquote>\n<p>在写这篇前端散记之前有写过另外两篇散记，可点击 <a href=\"https://jelon.xyz/posts/front-end-notes/\">前端散记</a> 和 <a href=\"https://jelon.xyz/posts/front-end-notes-2/\">前端散记 2</a> 访问。所谓散记，东西都比较零散，更谈不上什么深入，但是至少可以让读者知道一些概念理论，如果深入可以自行去查询相关知识。</p>\n</blockquote>\n<h1 id=\"async-await-实现原理\"><a href=\"#async-await-实现原理\" class=\"headerlink\" title=\"async await 实现原理\"></a>async await 实现原理</h1><p><strong>async 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>)&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">spawn</span>(<span class=\"keyword\">function</span>*() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。</p>\n<p>下面给出 spawn 函数的实现，基本就是前文自动执行器的翻版。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">spawn</span>(<span class=\"params\">genF</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = <span class=\"title function_\">genF</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">nextF</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"title function_\">nextF</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(next.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"title function_\">next</span>(v); &#125;);      </span><br><span class=\"line\">      &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"keyword\">throw</span>(e); &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> gen.<span class=\"title function_\">next</span>(<span class=\"literal\">undefined</span>); &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>async 函数是非常新的语法功能，新到都不属于 ES6，而是属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持，转码后就能使用。</p>\n<h1 id=\"async-await-注意点\"><a href=\"#async-await-注意点\" class=\"headerlink\" title=\"async await 注意点\"></a>async await 注意点</h1><p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">somethingThatReturnsAPromise</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一种写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">somethingThatReturnsAPromise</span>().<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 报错</span></span><br><span class=\"line\">  docs.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码会报错，因为 await 用在普通函数之中了。但是，如果将 forEach 方法的参数改成 async 函数，也有问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可能得到错误结果</span></span><br><span class=\"line\">  docs.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\">doc</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码可能不会正常工作，原因是这时三个 db.post 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 for 循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> doc <span class=\"keyword\">of</span> docs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.<span class=\"title function_\">post</span>(doc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果确实希望多个请求并发执行，可以使用 Promise.all 方法。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promises = docs.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> db.<span class=\"title function_\">post</span>(doc));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用下面的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dbFuc</span>(<span class=\"params\">db</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promises = docs.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> db.<span class=\"title function_\">post</span>(doc));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> promise <span class=\"keyword\">of</span> promises) &#123;</span><br><span class=\"line\">    results.<span class=\"title function_\">push</span>(<span class=\"keyword\">await</span> promise);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES5-实现继承\"><a href=\"#ES5-实现继承\" class=\"headerlink\" title=\"ES5 实现继承\"></a>ES5 实现继承</h1><p><strong>第一种方式是借助call实现继承：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent1</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>复制代码这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p>\n<p><strong>第二种方式借助原型链实现继承：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent2&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child2&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>());</span><br></pre></td></tr></table></figure>\n\n<p>看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>();</span><br><span class=\"line\">s1.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1.<span class=\"property\">play</span>, s2.<span class=\"property\">play</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/1.jpg\"></p>\n<p>明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。</p>\n<p>那么还有更好的方式么？</p>\n<p><strong>第三种方式：将前两种组合：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent3</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent3</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child3</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent3</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>();</span><br><span class=\"line\">s3.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3.<span class=\"property\">play</span>, s4.<span class=\"property\">play</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/2.png\"></p>\n<p>之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype &#x3D; new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？</p>\n<p><strong>第四种方式: 组合继承的优化1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent4</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent4&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent4</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child4&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child4</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Parent4</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child4</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child4</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/3.png\"></p>\n<p>子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。</p>\n<p><strong>第五种方式(最推荐使用)：优化2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent5</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child5</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent5</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child5&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Child5</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是最推荐的一种方式，接近完美的继承。</p>\n<p>因此，小小的继承虽然ES6当中简化了很多，但毋庸置疑的是，js是一门基于原型的语言，所以，用ES5来完成继承非常考验面试者对JS语言本身的理解，尤其是对于原型链是否理解清楚。</p>\n<h1 id=\"虚拟DOM和Diff算法\"><a href=\"#虚拟DOM和Diff算法\" class=\"headerlink\" title=\"虚拟DOM和Diff算法\"></a>虚拟DOM和Diff算法</h1><p><strong>虚拟DOM</strong></p>\n<p>虚拟Dom(virtual dom)到底是什么，简单来讲，就是将真实的dom节点用JavaScript来模拟出来，而Dom变化的对比，放到 Js 层来做。</p>\n<ul>\n<li>传统DOM节点</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>jelon1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>jelon2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对应虚拟DOM</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;ul&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;list&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;li&#x27;</span>,</span><br><span class=\"line\">  \t  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">  \t    <span class=\"attr\">className</span>: <span class=\"string\">&#x27;item&#x27;</span></span><br><span class=\"line\">  \t  &#125;,</span><br><span class=\"line\">  \t  <span class=\"attr\">children</span>: [ <span class=\"string\">&#x27;jelon1&#x27;</span> ]</span><br><span class=\"line\">  \t&#125;,</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;li&#x27;</span>,</span><br><span class=\"line\">  \t  <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">  \t    <span class=\"attr\">className</span>: <span class=\"string\">&#x27;item&#x27;</span></span><br><span class=\"line\">  \t  &#125;,</span><br><span class=\"line\">  \t  <span class=\"attr\">children</span>: [ <span class=\"string\">&#x27;jelon2&#x27;</span> ]</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>render方法</li>\n</ul>\n<p><strong>diff算法</strong></p>\n<p>关键词：patch</p>\n<p>可参考<a href=\"https://juejin.im/post/5affd01551882542c83301da#comment\">详解vue的diff算法</a></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/4.png?v=1\"></p>\n<h1 id=\"工作中项目优化实践\"><a href=\"#工作中项目优化实践\" class=\"headerlink\" title=\"工作中项目优化实践\"></a>工作中项目优化实践</h1><blockquote>\n<p>前端优化主要基于两个目的：</p>\n<ol>\n<li>提升加载速度；</li>\n<li>用户操作起来流畅。<br>因此，以下优化主要是围绕这两个目的展开。</li>\n</ol>\n</blockquote>\n<ol>\n<li>css sprite（雪碧图），iconfont；</li>\n<li>资源懒加载、异步路由；</li>\n<li>前端缓存 LocalStorage 及混合应用 Storage；</li>\n<li>使用 CDN（JS、CSS等资源使用外部域名）；</li>\n<li>Tree Shaking （Webpack 4.0+）；</li>\n<li>预请求；</li>\n<li>资源按需加载；</li>\n<li>gzip （服务器）；</li>\n<li>减少 DOM 操作；</li>\n<li>防抖节流；</li>\n<li>尽量少用iframe；</li>\n<li>尽量规避 CSS 计算。</li>\n</ol>\n<p><strong>参考思路</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes-3/5.jpeg?v=1\"></p>\n<p><strong>雅虎军规</strong></p>\n<p><a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\">Best Practices for Speeding Up Your Web Site</a></p>\n<h1 id=\"defineProperty-vs-proxy\"><a href=\"#defineProperty-vs-proxy\" class=\"headerlink\" title=\"defineProperty vs proxy\"></a>defineProperty vs proxy</h1><ul>\n<li>Proxy可以直接监听对象而非属性；</li>\n<li>Proxy直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于Object.defineProperty；</li>\n<li>Proxy可以直接监听数组的变化；</li>\n<li>Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。</li>\n</ul>\n<h1 id=\"手写-call\"><a href=\"#手写-call\" class=\"headerlink\" title=\"手写 call\"></a>手写 call</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call2</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;context.fn(&#x27;</span> + args +<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写-apply\"><a href=\"#手写-apply\" class=\"headerlink\" title=\"手写 apply\"></a>手写 apply</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"title class_\">Object</span>(context) || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr) &#123;</span><br><span class=\"line\">        result = context.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arr[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;context.fn(&#x27;</span> + args + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写bind\"><a href=\"#手写bind\" class=\"headerlink\" title=\"手写bind\"></a>手写bind</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind2</span> = <span class=\"keyword\">function</span> (<span class=\"params\">asThis, ...args1</span>) &#123;</span><br><span class=\"line\">\t <span class=\"keyword\">let</span> fn = <span class=\"variable language_\">this</span>;  <span class=\"comment\">// 函数调用时，原this其实就是这个调用函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) &#123;  <span class=\"comment\">// 同时，返回的新函数也可以接受参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(asThis, ...args1, ...args2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"preload和prefetch\"><a href=\"#preload和prefetch\" class=\"headerlink\" title=\"preload和prefetch\"></a>preload和prefetch</h1><p>preload特点</p>\n<p>preload加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞onload事件；<br>preload可以支持加载多种类型的资源，并且可以加载跨域资源；<br>preload加载的js脚本其加载和执行的过程是分离的。即preload会预加载相应的脚本代码，待到需要时自行调用；<br>prefetch</p>\n<p>prefetch是一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制；通常可以用于加载非首页的其他页面所需要的资源，以便加快后续页面的首屏速度；</p>\n<p>prefetch特点</p>\n<p>prefetch加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）；并且，当页面跳转时，未完成的prefetch请求不会被中断。</p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>Chrome有四种缓存：http cache、memory cache、Service Worker cache和Push<br>cache。在preload或prefetch的资源加载时，两者均存储在http<br>cache。当资源加载完成后，如果资源是可以被缓存的，那么其被存储在http<br>cache中等待后续使用；如果资源不可被缓存，那么其在被使用前均存储在memory cache；<br>preload和prefetch都没有同域名的限制；<br>preload主要用于预加载当前页面需要的资源；而prefetch主要用于加载将来页面可能需要的资源；<br>不论资源是否可以缓存，prefecth会存储在net-stack cache中至少5分钟；<br>preload需要使用as属性指定特定的资源类型以便浏览器为其分配一定的优先级，并能够正确加载资源；</p>\n<h1 id=\"如何比较两个-DOM-树的差异？\"><a href=\"#如何比较两个-DOM-树的差异？\" class=\"headerlink\" title=\"如何比较两个 DOM 树的差异？\"></a>如何比较两个 DOM 树的差异？</h1><p>两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。</p>\n<p>算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。</p>\n<p>在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。</p>\n"},{"title":"前端散记","author":"Jelon","date":"2018-09-02T00:00:00.000Z","thumbnail":null,"blogexcerpt":"事件流程如下：（1）捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且useCapture参数值为true，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。 （2）目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。 （3）冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且useCapture值为false，此事件处理函数就会执行...","_content":"\n<!-- toc -->\n\n### 前端事件流\n\n事件流程如下：\n\n1. 捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且 useCapture 参数值为 true ，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。\n\n2. 目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。\n\n3. 冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且 useCapture 值为 false，此事件处理函数就会执行。\n\n### 什么是闭包？这就是闭包！\n\n有权访问另一个函数作用域内变量的函数都是闭包。\n\n### HTTP缓存机制和原理\n\n1. 强制缓存\n\n\t![https://jangdelong.github.io/blog_img/images/1.png](https://jangdelong.github.io/blog_img/images/front-end-notes/1.png)\n\t\n\t(1) Expires\n\t\n\tExpires 的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。\n\t\n\t不过 Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。\n\t\n\t另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。\n\t\n\t所以HTTP 1.1 的版本，使用Cache-Control替代。\n\t\n\t(2) Cache-Control\n\t\n\tCache-Control 是最重要的规则。常见的取值有 private、public、no-cache、max-age，no-store，默认为 private。\n\t\n\t- private:             客户端可以缓存\n\t- public:              客户端和代理服务器都可缓存（前端的同学，可以认为 public 和 private 是一样的）\n\t- max-age=xxx:   缓存的内容将在 xxx 秒后失效\n\t- no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）\n\t- no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so...基本上和它说886）\n\n2. 对比缓存\n\n\t![https://jangdelong.github.io/blog_img/images/2.png](https://jangdelong.github.io/blog_img/images/front-end-notes/2.png)\n\t\n\t(1) Last-Modified / If-Modified-Since\n\t\n\t- Last-Modified：\n\t\n\t服务器在响应请求时，告诉浏览器资源的最后修改时间。\n\t\n\t![https://jangdelong.github.io/blog_img/images/3.png](https://jangdelong.github.io/blog_img/images/front-end-notes/3.png)\n\t\n\t- If-Modified-Since：\n\t\n\t再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。\n\t服务器收到请求后发现有头 If-Modified-Since 则与被请求资源的最后修改时间进行比对。\n\t若资源的最后修改时间大于 If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码 200；\n\t\n\t若资源的最后修改时间小于或等于 If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。\n\t\n\t![https://jangdelong.github.io/blog_img/images/4.png](https://jangdelong.github.io/blog_img/images/front-end-notes/4.png)\n\t\n\t(2) Etag / If-None-Match （优先级高于Last-Modified  /  If-Modified-Since）\n\t\n\t- Etag：\n\t\n\t服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。\n\t\n\t![https://jangdelong.github.io/blog_img/images/5.png](https://jangdelong.github.io/blog_img/images/front-end-notes/5.png)\n\t\n\t- If-None-Match：\n\t\n\t再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。\n\t\n\t服务器收到请求后发现有头 If-None-Match 则与被请求资源的唯一标识进行比对，\n\t不同，说明资源又被改动过，则响应整片资源内容，返回状态码 200；\n\t\n\t相同，说明资源无新修改，则响应 HTTP 304，告知浏览器继续使用所保存的 cache。\n\t\n\t![https://jangdelong.github.io/blog_img/images/6.png](https://jangdelong.github.io/blog_img/images/front-end-notes/6.png)\n\n### defer 和 async\n\n1、defer\n\n如果 script 标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续 DOM 的渲染；\n\n如果有多个设置了 defer 的 script 标签存在，则会按照顺序执行所有的 script；\n\ndefer 脚本会在文档渲染完毕后，DOMContentLoaded 事件调用前执行。\n\n2、async\n\nasync 的设置，会使得 script 脚本异步的加载并在允许的情况下执行;\nasync 的执行，并不会按着 script 在页面中的顺序来执行，而是谁先加载完谁执行。\n\n### 使用 js 的 FileReader对象实现上传图片时的图片预览功能\n\n废话不多说线上代码\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  <meta  name=\"viewport\"  content=\"width=device-width,initial-scale=1, user-scalable=no\">\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <title>test</title>\n  <script>\n　  // 选择图片时预览功能\n    function imageshow(source) {\n\t  var file = source.files[0];\n\t    var imageid = source.id;\n\t    if (window.FileReader) {\n\t      var fr = new FileReader();\n\t        fr.onloadend = function (e) {\n          document.getElementById(\"portrait\"+imageid).src = e.target.result;\n        };\n        fr.readAsDataURL(file);\n      }\n　　　 document.getElementById(\"image\"+imageid).style.display=\"none\";\n      document.getElementById(\"show\"+imageid).style.display=\"block\";\n　　 }\n  </script>\n</head>\n\n<body>\n<div>\n  <div id=\"image1\" >\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot1\" id=\"1\" onchange=\"imageshow(this)\"/>\n  </div>\n \n　<div id=\"show1\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait1\" width=\"100\" height=\"70\">\n　</div>\n\n　<div id=\"image2\">\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot2\" id=\"2\" onchange=\"imageshow(this)\"/>\n  </div>\n\n　<div id=\"show2\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait2\" width=\"100\" height=\"70\">\n　</div>\n\n  <div id=\"image3\">\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot3\" id=\"3\" onchange=\"imageshow(this)\"/>\n  </div>\n\n  <div id=\"show3\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait3\" width=\"100\" height=\"70\" >\n　</div>\n</div> \n</body>\n</html>\n```\n\n### HTTPS 验证原理\n\nhttps 在真正请求数据前，先会与服务有几次握手验证，以证明相互的身份，以下图为例\n\n![https://jangdelong.github.io/blog_img/images/front-end-notes/7.png](https://jangdelong.github.io/blog_img/images/front-end-notes/7.png)\n\n### 性能优化\n\n- 减少请求数量（sprite、combo）\n- 善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）\n- 减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）\n- CSS的回流与重绘\n\n  > reflow(回流) \n\n\t说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为reflow（回流）。\n\n\treflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。\n\n   > repaint(重绘)\n\n\t如果只是改变某个元素的背景色、文 字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。\n\n\trepaint 的速度明显快于 reflow（在IE下需要换一下说法，reflow 要比 repaint 更缓慢）。\n\n### 对称加密及非对称加密\n\n- 对称加密\n\n发送方和接收方需要持有同一把密钥，发送消息和接收消息均使用该密钥。\n\n相对于非对称加密，对称加密具有更高的加解密速度，但双方都需要事先知道密钥，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。\n\n- 非对称加密算法\n\n接收方在发送消息前需要事先生成公钥和私钥，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。\n在这个过程中，公钥负责加密，私钥负责解密，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。\n\n非对称加密算法的加解密速度低于对称加密算法，但是安全性更高。\n\n---- 以下更新于 2018-12-11 ----\n\n### link 和 @import 区别\n\n- 从属关系区别\n\n@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。\n\n- 加载顺序区别\n\n加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。\n\n- 兼容性区别\n\n@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。\n\n- DOM可控性区别\n\n可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。\n\n### CSS 权重优先级顺序\n\n!important > 行内样式 > ID > 类、伪类、属性 > 标签名 > 继承 > 通配符\n\n\n### 观察者模式\n\n```js\n/* Pubsub */\n function Pubsub () {\n   //存放事件和对应的处理方法\n   this.handles = {};\n }\n Pubsub.prototype = {\n   //传入事件类型type和事件处理handle\n   on: function (type, handle) {\n     if(!this.handles[type]){\n       this.handles[type] = [];\n     }\n     this.handles[type].push(handle);\n   },\n   emit: function () {\n     // 通过传入参数获取事件类型\n     var type = Array.prototype.shift.call(arguments);\n     if (!this.handles[type]) {\n       return false;\n     }\n     for (var i = 0; i < this.handles[type].length; i++) {\n       var handle = this.handles[type][i];\n       // 执行事件\n       handle.apply(this, arguments);\n     }\n   },\n   off: function (type, handle) {\n     handles = this.handles[type];\n     if (handles) {\n       if (!handle) {\n         handles.length = 0; // 清空数组\n       } else {\n         for (var i = 0; i < handles.length; i++) {\n           var _handle = handles[i];\n           // 有点问题\n           if (_handle === handle) {\n             handles.splice(i,1);\n           }\n         }\n       }\n     }\n   }\n }\n```\n\n### 两大数相加\n\n```js\nfunction sumStrings (a, b) {\n    var res = '',\n        c = 0;\n    a = a.split('');\n    b = b.split('');\n    while (a.length || b.length || c) {\n        c += ~~a.pop() + ~~b.pop(); // ~~a字符串转数字 \n        res = c % 10 + res;\n        c = c > 9; // 进1\n    }\n    return res.replace(/^0+/,'');\n}\n```\n\n### 设备像素比\n\n物理像素(physical pixel)\n\n一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。\n\n设备独立像素(density-independent pixel)\n\n设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。 所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。\n\n设备像素比(device pixel ratio )\n\n设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：\n\n```bash\n设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向\n```\n---- 以下更新于 2018-12-13 ----\n\n### 双向绑定原理（简单思路）\n\n1. 实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。\n\n2. 实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图。\n\n3. 实现一个解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。\n\n---- 以下更新于 2019-2-12 ----\n\n### 面向对象的三个基本特征\n\n1. 封装\n2. 继承\n3. 多态\n\n---- 以下更新于 2019-2-24 ----\n\n### JS继承 · 类\n\nES5 和 ES6 子类 `this` 生成顺序不同。ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例，ES6 的继承先生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。\n\n```js\nfunction MyES5Array() {\n  Array.call(this, arguments);\n}\n\n// it's useless\nconst arrayES5 = new MyES5Array(3); // arrayES5: MyES5Array {}\n\nclass MyES6Array extends Array {}\n\n// it's ok\nconst arrayES6 = new MyES6Array(3); // arrayES6: MyES6Array(3) []\n```\n\n### ES5/ES6 的继承除了写法以外还有什么区别？\n\n> [来源：Understanding ECMAScript 6 ](https://leanpub.com/understandinges6/read#leanpub-auto-class-declarations)\n\n 1、`class` 声明会提升，但不会初始化赋值。`Foo` 进入暂时性死区，类似于 `let`、`const` 声明变量。\n\n ```js\n const bar = new Bar(); // it's ok\n function Bar() {\n   this.bar = 42;\n }\n \n const foo = new Foo(); // ReferenceError: Foo is not defined\n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n }\n ```\n\n 2、`class` 声明内部会启用严格模式。\n\n ```js\n // 引用一个未声明的变量\n function Bar() {\n   baz = 42; // it's ok\n }\n const bar = new Bar();\n \n class Foo {\n   constructor() {\n     fol = 42; // ReferenceError: fol is not defined\n   }\n }\n const foo = new Foo();\n ```\n\n 3、`class` 的所有方法（包括静态方法和实例方法）都是不可枚举的。\n\n ```js\n // 引用一个未声明的变量\n function Bar() {\n   this.bar = 42;\n }\n Bar.answer = function() {\n   return 42;\n };\n Bar.prototype.print = function() {\n   console.log(this.bar);\n };\n const barKeys = Object.keys(Bar); // ['answer']\n const barProtoKeys = Object.keys(Bar.prototype); // ['print']\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n   static answer() {\n     return 42;\n   }\n   print() {\n     console.log(this.foo);\n   }\n }\n const fooKeys = Object.keys(Foo); // []\n const fooProtoKeys = Object.keys(Foo.prototype); // []\n ```\n\n 4、`class` 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有`[[construct]]`，不能使用 `new` 来调用。\n\n ```js\n function Bar() {\n   this.bar = 42;\n }\n Bar.prototype.print = function() {\n   console.log(this.bar);\n };\n \n const bar = new Bar();\n const barPrint = new bar.print(); // it's ok\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n   print() {\n     console.log(this.foo);\n   }\n }\n const foo = new Foo();\n const fooPrint = new foo.print(); // TypeError: foo.print is not a constructor\n ```\n\n 5、必须使用 `new` 调用 `class`。\n\n ```js\n function Bar() {\n   this.bar = 42;\n }\n const bar = Bar(); // it's ok\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n }\n const foo = Foo(); // TypeError: Class constructor Foo cannot be invoked without 'new'\n ```\n\n 6、`class` 内部无法重写类名。\n\n ```js\n function Bar() {\n   Bar = 'Baz'; // it's ok\n   this.bar = 42;\n }\n const bar = new Bar();\n // Bar: 'Baz'\n // bar: Bar {bar: 42}  \n \n class Foo {\n   constructor() {\n     this.foo = 42;\n     Foo = 'Fol'; // TypeError: Assignment to constant variable\n   }\n }\n const foo = new Foo();\n Foo = 'Fol'; // it's ok\n ```\n\n### Vue 组件的 data 必须是一个函数\n\n一个组件的 `data` 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。\n\n```js\ndata: function () {\n  return {\n    count: 0\n  }\n}\n```\n\n如果 Vue 没有这条规则，点击某个按钮组件就可能影响到其它实例。\n\n### 防抖及节流\n\n1. 防抖\n\n  ```js\n  /**\n   * 防抖函数\n   * TODO: 防止多次提交按钮，只执行最后提交的一次\n   * 原理: 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\n   * 适用场景: 按钮多次点击等\n   */\n  export const debounce = (fn, delay = 500) => {\n    let timer = null\n    return function (...args) {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        fn.apply(this, args)\n      }, delay)\n    }\n  }\n  ```\n\n2. 节流\n\n  ```js\n  /**\n   * 节流函数\n   * TODO: 固定时间内只执行一次，防止超高频次触发位置变动\n   * 原理: 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。\n   * 适用场景: 滚动事件等\n   */\n  export const throttle = (fn, delay = 500) => {\n    let flag = true\n    return function (...args) {\n      if (!flag) return\n      flag = false\n      setTimeout(() => {\n        fn.apply(this, args)\n        flag = true\n      }, delay)\n    }\n  }\n  ```\n  \n  #### 更多内容，请移步↓\n  \n  [https://github.com/front-end-pigs/blog/issues/4](https://github.com/front-end-pigs/blog/issues/4)\n","source":"_posts/front-end-notes.md","raw":"---\n\ntitle: 前端散记\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2018-09-02\ntags:\n\t- 前端\nthumbnail:\nblogexcerpt: 事件流程如下：（1）捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且useCapture参数值为true，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。 （2）目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。 （3）冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且useCapture值为false，此事件处理函数就会执行...\n\n---\n\n<!-- toc -->\n\n### 前端事件流\n\n事件流程如下：\n\n1. 捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且 useCapture 参数值为 true ，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。\n\n2. 目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。\n\n3. 冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且 useCapture 值为 false，此事件处理函数就会执行。\n\n### 什么是闭包？这就是闭包！\n\n有权访问另一个函数作用域内变量的函数都是闭包。\n\n### HTTP缓存机制和原理\n\n1. 强制缓存\n\n\t![https://jangdelong.github.io/blog_img/images/1.png](https://jangdelong.github.io/blog_img/images/front-end-notes/1.png)\n\t\n\t(1) Expires\n\t\n\tExpires 的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。\n\t\n\t不过 Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。\n\t\n\t另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。\n\t\n\t所以HTTP 1.1 的版本，使用Cache-Control替代。\n\t\n\t(2) Cache-Control\n\t\n\tCache-Control 是最重要的规则。常见的取值有 private、public、no-cache、max-age，no-store，默认为 private。\n\t\n\t- private:             客户端可以缓存\n\t- public:              客户端和代理服务器都可缓存（前端的同学，可以认为 public 和 private 是一样的）\n\t- max-age=xxx:   缓存的内容将在 xxx 秒后失效\n\t- no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）\n\t- no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so...基本上和它说886）\n\n2. 对比缓存\n\n\t![https://jangdelong.github.io/blog_img/images/2.png](https://jangdelong.github.io/blog_img/images/front-end-notes/2.png)\n\t\n\t(1) Last-Modified / If-Modified-Since\n\t\n\t- Last-Modified：\n\t\n\t服务器在响应请求时，告诉浏览器资源的最后修改时间。\n\t\n\t![https://jangdelong.github.io/blog_img/images/3.png](https://jangdelong.github.io/blog_img/images/front-end-notes/3.png)\n\t\n\t- If-Modified-Since：\n\t\n\t再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。\n\t服务器收到请求后发现有头 If-Modified-Since 则与被请求资源的最后修改时间进行比对。\n\t若资源的最后修改时间大于 If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码 200；\n\t\n\t若资源的最后修改时间小于或等于 If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。\n\t\n\t![https://jangdelong.github.io/blog_img/images/4.png](https://jangdelong.github.io/blog_img/images/front-end-notes/4.png)\n\t\n\t(2) Etag / If-None-Match （优先级高于Last-Modified  /  If-Modified-Since）\n\t\n\t- Etag：\n\t\n\t服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。\n\t\n\t![https://jangdelong.github.io/blog_img/images/5.png](https://jangdelong.github.io/blog_img/images/front-end-notes/5.png)\n\t\n\t- If-None-Match：\n\t\n\t再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。\n\t\n\t服务器收到请求后发现有头 If-None-Match 则与被请求资源的唯一标识进行比对，\n\t不同，说明资源又被改动过，则响应整片资源内容，返回状态码 200；\n\t\n\t相同，说明资源无新修改，则响应 HTTP 304，告知浏览器继续使用所保存的 cache。\n\t\n\t![https://jangdelong.github.io/blog_img/images/6.png](https://jangdelong.github.io/blog_img/images/front-end-notes/6.png)\n\n### defer 和 async\n\n1、defer\n\n如果 script 标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续 DOM 的渲染；\n\n如果有多个设置了 defer 的 script 标签存在，则会按照顺序执行所有的 script；\n\ndefer 脚本会在文档渲染完毕后，DOMContentLoaded 事件调用前执行。\n\n2、async\n\nasync 的设置，会使得 script 脚本异步的加载并在允许的情况下执行;\nasync 的执行，并不会按着 script 在页面中的顺序来执行，而是谁先加载完谁执行。\n\n### 使用 js 的 FileReader对象实现上传图片时的图片预览功能\n\n废话不多说线上代码\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  <meta  name=\"viewport\"  content=\"width=device-width,initial-scale=1, user-scalable=no\">\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <title>test</title>\n  <script>\n　  // 选择图片时预览功能\n    function imageshow(source) {\n\t  var file = source.files[0];\n\t    var imageid = source.id;\n\t    if (window.FileReader) {\n\t      var fr = new FileReader();\n\t        fr.onloadend = function (e) {\n          document.getElementById(\"portrait\"+imageid).src = e.target.result;\n        };\n        fr.readAsDataURL(file);\n      }\n　　　 document.getElementById(\"image\"+imageid).style.display=\"none\";\n      document.getElementById(\"show\"+imageid).style.display=\"block\";\n　　 }\n  </script>\n</head>\n\n<body>\n<div>\n  <div id=\"image1\" >\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot1\" id=\"1\" onchange=\"imageshow(this)\"/>\n  </div>\n \n　<div id=\"show1\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait1\" width=\"100\" height=\"70\">\n　</div>\n\n　<div id=\"image2\">\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot2\" id=\"2\" onchange=\"imageshow(this)\"/>\n  </div>\n\n　<div id=\"show2\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait2\" width=\"100\" height=\"70\">\n　</div>\n\n  <div id=\"image3\">\n    <p>上传截图</p>\n    <input type=\"file\" name=\"screenshot3\" id=\"3\" onchange=\"imageshow(this)\"/>\n  </div>\n\n  <div id=\"show3\" style=\"display:none;\">\n　  <img  src=\"\" id=\"portrait3\" width=\"100\" height=\"70\" >\n　</div>\n</div> \n</body>\n</html>\n```\n\n### HTTPS 验证原理\n\nhttps 在真正请求数据前，先会与服务有几次握手验证，以证明相互的身份，以下图为例\n\n![https://jangdelong.github.io/blog_img/images/front-end-notes/7.png](https://jangdelong.github.io/blog_img/images/front-end-notes/7.png)\n\n### 性能优化\n\n- 减少请求数量（sprite、combo）\n- 善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）\n- 减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）\n- CSS的回流与重绘\n\n  > reflow(回流) \n\n\t说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为reflow（回流）。\n\n\treflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。\n\n   > repaint(重绘)\n\n\t如果只是改变某个元素的背景色、文 字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。\n\n\trepaint 的速度明显快于 reflow（在IE下需要换一下说法，reflow 要比 repaint 更缓慢）。\n\n### 对称加密及非对称加密\n\n- 对称加密\n\n发送方和接收方需要持有同一把密钥，发送消息和接收消息均使用该密钥。\n\n相对于非对称加密，对称加密具有更高的加解密速度，但双方都需要事先知道密钥，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。\n\n- 非对称加密算法\n\n接收方在发送消息前需要事先生成公钥和私钥，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。\n在这个过程中，公钥负责加密，私钥负责解密，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。\n\n非对称加密算法的加解密速度低于对称加密算法，但是安全性更高。\n\n---- 以下更新于 2018-12-11 ----\n\n### link 和 @import 区别\n\n- 从属关系区别\n\n@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。\n\n- 加载顺序区别\n\n加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。\n\n- 兼容性区别\n\n@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。\n\n- DOM可控性区别\n\n可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。\n\n### CSS 权重优先级顺序\n\n!important > 行内样式 > ID > 类、伪类、属性 > 标签名 > 继承 > 通配符\n\n\n### 观察者模式\n\n```js\n/* Pubsub */\n function Pubsub () {\n   //存放事件和对应的处理方法\n   this.handles = {};\n }\n Pubsub.prototype = {\n   //传入事件类型type和事件处理handle\n   on: function (type, handle) {\n     if(!this.handles[type]){\n       this.handles[type] = [];\n     }\n     this.handles[type].push(handle);\n   },\n   emit: function () {\n     // 通过传入参数获取事件类型\n     var type = Array.prototype.shift.call(arguments);\n     if (!this.handles[type]) {\n       return false;\n     }\n     for (var i = 0; i < this.handles[type].length; i++) {\n       var handle = this.handles[type][i];\n       // 执行事件\n       handle.apply(this, arguments);\n     }\n   },\n   off: function (type, handle) {\n     handles = this.handles[type];\n     if (handles) {\n       if (!handle) {\n         handles.length = 0; // 清空数组\n       } else {\n         for (var i = 0; i < handles.length; i++) {\n           var _handle = handles[i];\n           // 有点问题\n           if (_handle === handle) {\n             handles.splice(i,1);\n           }\n         }\n       }\n     }\n   }\n }\n```\n\n### 两大数相加\n\n```js\nfunction sumStrings (a, b) {\n    var res = '',\n        c = 0;\n    a = a.split('');\n    b = b.split('');\n    while (a.length || b.length || c) {\n        c += ~~a.pop() + ~~b.pop(); // ~~a字符串转数字 \n        res = c % 10 + res;\n        c = c > 9; // 进1\n    }\n    return res.replace(/^0+/,'');\n}\n```\n\n### 设备像素比\n\n物理像素(physical pixel)\n\n一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。\n\n设备独立像素(density-independent pixel)\n\n设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。 所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。\n\n设备像素比(device pixel ratio )\n\n设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：\n\n```bash\n设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向\n```\n---- 以下更新于 2018-12-13 ----\n\n### 双向绑定原理（简单思路）\n\n1. 实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。\n\n2. 实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图。\n\n3. 实现一个解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。\n\n---- 以下更新于 2019-2-12 ----\n\n### 面向对象的三个基本特征\n\n1. 封装\n2. 继承\n3. 多态\n\n---- 以下更新于 2019-2-24 ----\n\n### JS继承 · 类\n\nES5 和 ES6 子类 `this` 生成顺序不同。ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例，ES6 的继承先生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。\n\n```js\nfunction MyES5Array() {\n  Array.call(this, arguments);\n}\n\n// it's useless\nconst arrayES5 = new MyES5Array(3); // arrayES5: MyES5Array {}\n\nclass MyES6Array extends Array {}\n\n// it's ok\nconst arrayES6 = new MyES6Array(3); // arrayES6: MyES6Array(3) []\n```\n\n### ES5/ES6 的继承除了写法以外还有什么区别？\n\n> [来源：Understanding ECMAScript 6 ](https://leanpub.com/understandinges6/read#leanpub-auto-class-declarations)\n\n 1、`class` 声明会提升，但不会初始化赋值。`Foo` 进入暂时性死区，类似于 `let`、`const` 声明变量。\n\n ```js\n const bar = new Bar(); // it's ok\n function Bar() {\n   this.bar = 42;\n }\n \n const foo = new Foo(); // ReferenceError: Foo is not defined\n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n }\n ```\n\n 2、`class` 声明内部会启用严格模式。\n\n ```js\n // 引用一个未声明的变量\n function Bar() {\n   baz = 42; // it's ok\n }\n const bar = new Bar();\n \n class Foo {\n   constructor() {\n     fol = 42; // ReferenceError: fol is not defined\n   }\n }\n const foo = new Foo();\n ```\n\n 3、`class` 的所有方法（包括静态方法和实例方法）都是不可枚举的。\n\n ```js\n // 引用一个未声明的变量\n function Bar() {\n   this.bar = 42;\n }\n Bar.answer = function() {\n   return 42;\n };\n Bar.prototype.print = function() {\n   console.log(this.bar);\n };\n const barKeys = Object.keys(Bar); // ['answer']\n const barProtoKeys = Object.keys(Bar.prototype); // ['print']\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n   static answer() {\n     return 42;\n   }\n   print() {\n     console.log(this.foo);\n   }\n }\n const fooKeys = Object.keys(Foo); // []\n const fooProtoKeys = Object.keys(Foo.prototype); // []\n ```\n\n 4、`class` 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有`[[construct]]`，不能使用 `new` 来调用。\n\n ```js\n function Bar() {\n   this.bar = 42;\n }\n Bar.prototype.print = function() {\n   console.log(this.bar);\n };\n \n const bar = new Bar();\n const barPrint = new bar.print(); // it's ok\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n   print() {\n     console.log(this.foo);\n   }\n }\n const foo = new Foo();\n const fooPrint = new foo.print(); // TypeError: foo.print is not a constructor\n ```\n\n 5、必须使用 `new` 调用 `class`。\n\n ```js\n function Bar() {\n   this.bar = 42;\n }\n const bar = Bar(); // it's ok\n \n class Foo {\n   constructor() {\n     this.foo = 42;\n   }\n }\n const foo = Foo(); // TypeError: Class constructor Foo cannot be invoked without 'new'\n ```\n\n 6、`class` 内部无法重写类名。\n\n ```js\n function Bar() {\n   Bar = 'Baz'; // it's ok\n   this.bar = 42;\n }\n const bar = new Bar();\n // Bar: 'Baz'\n // bar: Bar {bar: 42}  \n \n class Foo {\n   constructor() {\n     this.foo = 42;\n     Foo = 'Fol'; // TypeError: Assignment to constant variable\n   }\n }\n const foo = new Foo();\n Foo = 'Fol'; // it's ok\n ```\n\n### Vue 组件的 data 必须是一个函数\n\n一个组件的 `data` 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。\n\n```js\ndata: function () {\n  return {\n    count: 0\n  }\n}\n```\n\n如果 Vue 没有这条规则，点击某个按钮组件就可能影响到其它实例。\n\n### 防抖及节流\n\n1. 防抖\n\n  ```js\n  /**\n   * 防抖函数\n   * TODO: 防止多次提交按钮，只执行最后提交的一次\n   * 原理: 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\n   * 适用场景: 按钮多次点击等\n   */\n  export const debounce = (fn, delay = 500) => {\n    let timer = null\n    return function (...args) {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        fn.apply(this, args)\n      }, delay)\n    }\n  }\n  ```\n\n2. 节流\n\n  ```js\n  /**\n   * 节流函数\n   * TODO: 固定时间内只执行一次，防止超高频次触发位置变动\n   * 原理: 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。\n   * 适用场景: 滚动事件等\n   */\n  export const throttle = (fn, delay = 500) => {\n    let flag = true\n    return function (...args) {\n      if (!flag) return\n      flag = false\n      setTimeout(() => {\n        fn.apply(this, args)\n        flag = true\n      }, delay)\n    }\n  }\n  ```\n  \n  #### 更多内容，请移步↓\n  \n  [https://github.com/front-end-pigs/blog/issues/4](https://github.com/front-end-pigs/blog/issues/4)\n","slug":"front-end-notes","published":1,"updated":"2018-09-02T00:00:00.000Z","_id":"cmduj3n2a000mk8sv3j7rcv2o","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E4%BA%8B%E4%BB%B6%E6%B5%81\">前端事件流</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%E8%BF%99%E5%B0%B1%E6%98%AF%E9%97%AD%E5%8C%85\">什么是闭包？这就是闭包！</a></li>\n<li><a href=\"#http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8E%9F%E7%90%86\">HTTP缓存机制和原理</a></li>\n<li><a href=\"#defer-%E5%92%8C-async\">defer 和 async</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-js-%E7%9A%84-filereader%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E7%9A%84%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD\">使用 js 的 FileReader对象实现上传图片时的图片预览功能</a></li>\n<li><a href=\"#https-%E9%AA%8C%E8%AF%81%E5%8E%9F%E7%90%86\">HTTPS 验证原理</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">性能优化</a></li>\n<li><a href=\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%8F%8A%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">对称加密及非对称加密</a></li>\n<li><a href=\"#link-%E5%92%8C-import-%E5%8C%BA%E5%88%AB\">link 和 @import 区别</a></li>\n<li><a href=\"#css-%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7%E9%A1%BA%E5%BA%8F\">CSS 权重优先级顺序</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a></li>\n<li><a href=\"#%E4%B8%A4%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0\">两大数相加</a></li>\n<li><a href=\"#%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E6%AF%94\">设备像素比</a></li>\n<li><a href=\"#%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E6%80%9D%E8%B7%AF\">双向绑定原理（简单思路）</a></li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81\">面向对象的三个基本特征</a></li>\n<li><a href=\"#js%E7%BB%A7%E6%89%BF-%E7%B1%BB\">JS继承 · 类</a></li>\n<li><a href=\"#es5es6-%E7%9A%84%E7%BB%A7%E6%89%BF%E9%99%A4%E4%BA%86%E5%86%99%E6%B3%95%E4%BB%A5%E5%A4%96%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\">ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</a></li>\n<li><a href=\"#vue-%E7%BB%84%E4%BB%B6%E7%9A%84-data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0\">Vue 组件的 data 必须是一个函数</a></li>\n<li><a href=\"#%E9%98%B2%E6%8A%96%E5%8F%8A%E8%8A%82%E6%B5%81\">防抖及节流</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"前端事件流\">前端事件流</span></h3><p>事件流程如下：</p>\n<ol>\n<li><p>捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且 useCapture 参数值为 true ，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。</p>\n</li>\n<li><p>目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。</p>\n</li>\n<li><p>冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且 useCapture 值为 false，此事件处理函数就会执行。</p>\n</li>\n</ol>\n<h3><span id=\"什么是闭包这就是闭包\">什么是闭包？这就是闭包！</span></h3><p>有权访问另一个函数作用域内变量的函数都是闭包。</p>\n<h3><span id=\"http缓存机制和原理\">HTTP缓存机制和原理</span></h3><ol>\n<li><p>强制缓存</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/1.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;1.png\"></p>\n<p> (1) Expires</p>\n<p> Expires 的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。</p>\n<p> 不过 Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。</p>\n<p> 另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。</p>\n<p> 所以HTTP 1.1 的版本，使用Cache-Control替代。</p>\n<p> (2) Cache-Control</p>\n<p> Cache-Control 是最重要的规则。常见的取值有 private、public、no-cache、max-age，no-store，默认为 private。</p>\n<ul>\n<li>private:             客户端可以缓存</li>\n<li>public:              客户端和代理服务器都可缓存（前端的同学，可以认为 public 和 private 是一样的）</li>\n<li>max-age&#x3D;xxx:   缓存的内容将在 xxx 秒后失效</li>\n<li>no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）</li>\n<li>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）</li>\n</ul>\n</li>\n<li><p>对比缓存</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/2.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;2.png\"></p>\n<p> (1) Last-Modified &#x2F; If-Modified-Since</p>\n<ul>\n<li>Last-Modified：</li>\n</ul>\n<p> 服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/3.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;3.png\"></p>\n<ul>\n<li>If-Modified-Since：</li>\n</ul>\n<p> 再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。<br> 服务器收到请求后发现有头 If-Modified-Since 则与被请求资源的最后修改时间进行比对。<br> 若资源的最后修改时间大于 If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码 200；</p>\n<p> 若资源的最后修改时间小于或等于 If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/4.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;4.png\"></p>\n<p> (2) Etag &#x2F; If-None-Match （优先级高于Last-Modified  &#x2F;  If-Modified-Since）</p>\n<ul>\n<li>Etag：</li>\n</ul>\n<p> 服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/5.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;5.png\"></p>\n<ul>\n<li>If-None-Match：</li>\n</ul>\n<p> 再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。</p>\n<p> 服务器收到请求后发现有头 If-None-Match 则与被请求资源的唯一标识进行比对，<br> 不同，说明资源又被改动过，则响应整片资源内容，返回状态码 200；</p>\n<p> 相同，说明资源无新修改，则响应 HTTP 304，告知浏览器继续使用所保存的 cache。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/6.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;6.png\"></p>\n</li>\n</ol>\n<h3><span id=\"defer-和-async\">defer 和 async</span></h3><p>1、defer</p>\n<p>如果 script 标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续 DOM 的渲染；</p>\n<p>如果有多个设置了 defer 的 script 标签存在，则会按照顺序执行所有的 script；</p>\n<p>defer 脚本会在文档渲染完毕后，DOMContentLoaded 事件调用前执行。</p>\n<p>2、async</p>\n<p>async 的设置，会使得 script 脚本异步的加载并在允许的情况下执行;<br>async 的执行，并不会按着 script 在页面中的顺序来执行，而是谁先加载完谁执行。</p>\n<h3><span id=\"使用-js-的-filereader对象实现上传图片时的图片预览功能\">使用 js 的 FileReader对象实现上传图片时的图片预览功能</span></h3><p>废话不多说线上代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>  <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">　  <span class=\"comment\">// 选择图片时预览功能</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">imageshow</span>(<span class=\"params\">source</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"keyword\">var</span> file = source.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    <span class=\"keyword\">var</span> imageid = source.<span class=\"property\">id</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">FileReader</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t      <span class=\"keyword\">var</span> fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t        fr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;portrait&quot;</span>+imageid).<span class=\"property\">src</span> = e.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        fr.<span class=\"title function_\">readAsDataURL</span>(file);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">　　　 <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;image&quot;</span>+imageid).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;show&quot;</span>+imageid).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">　　 &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image1&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show1&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait1&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span>&gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show2&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait2&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span>&gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait3&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span> &gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"https-验证原理\">HTTPS 验证原理</span></h3><p>https 在真正请求数据前，先会与服务有几次握手验证，以证明相互的身份，以下图为例</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/7.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;front-end-notes&#x2F;7.png\"></p>\n<h3><span id=\"性能优化\">性能优化</span></h3><ul>\n<li><p>减少请求数量（sprite、combo）</p>\n</li>\n<li><p>善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）</p>\n</li>\n<li><p>减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）</p>\n</li>\n<li><p>CSS的回流与重绘</p>\n<blockquote>\n<p>reflow(回流) </p>\n</blockquote>\n<p>  说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为reflow（回流）。</p>\n<p>  reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p>\n<blockquote>\n<p>repaint(重绘)</p>\n</blockquote>\n<p>  如果只是改变某个元素的背景色、文 字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。</p>\n<p>  repaint 的速度明显快于 reflow（在IE下需要换一下说法，reflow 要比 repaint 更缓慢）。</p>\n</li>\n</ul>\n<h3><span id=\"对称加密及非对称加密\">对称加密及非对称加密</span></h3><ul>\n<li>对称加密</li>\n</ul>\n<p>发送方和接收方需要持有同一把密钥，发送消息和接收消息均使用该密钥。</p>\n<p>相对于非对称加密，对称加密具有更高的加解密速度，但双方都需要事先知道密钥，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。</p>\n<ul>\n<li>非对称加密算法</li>\n</ul>\n<p>接收方在发送消息前需要事先生成公钥和私钥，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。<br>在这个过程中，公钥负责加密，私钥负责解密，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。</p>\n<p>非对称加密算法的加解密速度低于对称加密算法，但是安全性更高。</p>\n<p>—- 以下更新于 2018-12-11 —-</p>\n<h3><span id=\"link-和-import-区别\">link 和 @import 区别</span></h3><ul>\n<li>从属关系区别</li>\n</ul>\n<p>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p>\n<ul>\n<li>加载顺序区别</li>\n</ul>\n<p>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。</p>\n<ul>\n<li>兼容性区别</li>\n</ul>\n<p>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p>\n<ul>\n<li>DOM可控性区别</li>\n</ul>\n<p>可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。</p>\n<h3><span id=\"css-权重优先级顺序\">CSS 权重优先级顺序</span></h3><p>!important &gt; 行内样式 &gt; ID &gt; 类、伪类、属性 &gt; 标签名 &gt; 继承 &gt; 通配符</p>\n<h3><span id=\"观察者模式\">观察者模式</span></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Pubsub */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">Pubsub</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//存放事件和对应的处理方法</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span> = &#123;&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"title class_\">Pubsub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">   <span class=\"comment\">//传入事件类型type和事件处理handle</span></span><br><span class=\"line\">   <span class=\"attr\">on</span>: <span class=\"keyword\">function</span> (<span class=\"params\">type, handle</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!<span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type])&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type] = [];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type].<span class=\"title function_\">push</span>(handle);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">emit</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 通过传入参数获取事件类型</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> type = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type].<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handle = <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type][i];</span><br><span class=\"line\">       <span class=\"comment\">// 执行事件</span></span><br><span class=\"line\">       handle.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">off</span>: <span class=\"keyword\">function</span> (<span class=\"params\">type, handle</span>) &#123;</span><br><span class=\"line\">     handles = <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (handles) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!handle) &#123;</span><br><span class=\"line\">         handles.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 清空数组</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handles.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> _handle = handles[i];</span><br><span class=\"line\">           <span class=\"comment\">// 有点问题</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (_handle === handle) &#123;</span><br><span class=\"line\">             handles.<span class=\"title function_\">splice</span>(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"两大数相加\">两大数相加</span></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumStrings</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a = a.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    b = b.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a.<span class=\"property\">length</span> || b.<span class=\"property\">length</span> || c) &#123;</span><br><span class=\"line\">        c += ~~a.<span class=\"title function_\">pop</span>() + ~~b.<span class=\"title function_\">pop</span>(); <span class=\"comment\">// ~~a字符串转数字 </span></span><br><span class=\"line\">        res = c % <span class=\"number\">10</span> + res;</span><br><span class=\"line\">        c = c &gt; <span class=\"number\">9</span>; <span class=\"comment\">// 进1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^0+/</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"设备像素比\">设备像素比</span></h3><p>物理像素(physical pixel)</p>\n<p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p>\n<p>设备独立像素(density-independent pixel)</p>\n<p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。 所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。</p>\n<p>设备像素比(device pixel ratio )</p>\n<p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向</span><br></pre></td></tr></table></figure>\n<p>—- 以下更新于 2018-12-13 —-</p>\n<h3><span id=\"双向绑定原理简单思路\">双向绑定原理（简单思路）</span></h3><ol>\n<li><p>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</p>\n</li>\n<li><p>实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图。</p>\n</li>\n<li><p>实现一个解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。</p>\n</li>\n</ol>\n<p>—- 以下更新于 2019-2-12 —-</p>\n<h3><span id=\"面向对象的三个基本特征\">面向对象的三个基本特征</span></h3><ol>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ol>\n<p>—- 以下更新于 2019-2-24 —-</p>\n<h3><span id=\"js继承-类\">JS继承 · 类</span></h3><p>ES5 和 ES6 子类 <code>this</code> 生成顺序不同。ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例，ES6 的继承先生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyES5Array</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// it&#x27;s useless</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayES5 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyES5Array</span>(<span class=\"number\">3</span>); <span class=\"comment\">// arrayES5: MyES5Array &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyES6Array</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Array</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayES6 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyES6Array</span>(<span class=\"number\">3</span>); <span class=\"comment\">// arrayES6: MyES6Array(3) []</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"es5x2fes6-的继承除了写法以外还有什么区别\">ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</span></h3><blockquote>\n<p><a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-class-declarations\">来源：Understanding ECMAScript 6 </a></p>\n</blockquote>\n<p> 1、<code>class</code> 声明会提升，但不会初始化赋值。<code>Foo</code> 进入暂时性死区，类似于 <code>let</code>、<code>const</code> 声明变量。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// ReferenceError: Foo is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 2、<code>class</code> 声明内部会启用严格模式。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用一个未声明的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  baz = <span class=\"number\">42</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    fol = <span class=\"number\">42</span>; <span class=\"comment\">// ReferenceError: fol is not defined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p> 3、<code>class</code> 的所有方法（包括静态方法和实例方法）都是不可枚举的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用一个未声明的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\">answer</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">print</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">bar</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> barKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Bar</span>); <span class=\"comment\">// [&#x27;answer&#x27;]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> barProtoKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// [&#x27;print&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">answer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Foo</span>); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fooProtoKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p> 4、<code>class</code> 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有<code>[[construct]]</code>，不能使用 <code>new</code> 来调用。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">print</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">bar</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> barPrint = <span class=\"keyword\">new</span> bar.<span class=\"title function_\">print</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooPrint = <span class=\"keyword\">new</span> foo.<span class=\"title function_\">print</span>(); <span class=\"comment\">// TypeError: foo.print is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p> 5、必须使用 <code>new</code> 调用 <code>class</code>。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"title class_\">Bar</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// TypeError: Class constructor Foo cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p> 6、<code>class</code> 内部无法重写类名。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Bar</span> = <span class=\"string\">&#x27;Baz&#x27;</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"><span class=\"comment\">// Bar: &#x27;Baz&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// bar: Bar &#123;bar: 42&#125;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Foo</span> = <span class=\"string\">&#x27;Fol&#x27;</span>; <span class=\"comment\">// TypeError: Assignment to constant variable</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span> = <span class=\"string\">&#x27;Fol&#x27;</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"vue-组件的-data-必须是一个函数\">Vue 组件的 data 必须是一个函数</span></h3><p>一个组件的 <code>data</code> 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 Vue 没有这条规则，点击某个按钮组件就可能影响到其它实例。</p>\n<h3><span id=\"防抖及节流\">防抖及节流</span></h3><ol>\n<li>防抖</li>\n</ol>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">TODO:</span> 防止多次提交按钮，只执行最后提交的一次</span></span><br><span class=\"line\"><span class=\"comment\"> * 原理: 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</span></span><br><span class=\"line\"><span class=\"comment\"> * 适用场景: 按钮多次点击等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节流</li>\n</ol>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">TODO:</span> 固定时间内只执行一次，防止超高频次触发位置变动</span></span><br><span class=\"line\"><span class=\"comment\"> * 原理: 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</span></span><br><span class=\"line\"><span class=\"comment\"> * 适用场景: 滚动事件等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">return</span></span><br><span class=\"line\">    flag = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"更多内容请移步\">更多内容，请移步↓</span></h4><p>  <a href=\"https://github.com/front-end-pigs/blog/issues/4\">https://github.com/front-end-pigs/blog/issues/4</a></p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E4%BA%8B%E4%BB%B6%E6%B5%81\">前端事件流</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%E8%BF%99%E5%B0%B1%E6%98%AF%E9%97%AD%E5%8C%85\">什么是闭包？这就是闭包！</a></li>\n<li><a href=\"#http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8E%9F%E7%90%86\">HTTP缓存机制和原理</a></li>\n<li><a href=\"#defer-%E5%92%8C-async\">defer 和 async</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-js-%E7%9A%84-filereader%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E7%9A%84%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD\">使用 js 的 FileReader对象实现上传图片时的图片预览功能</a></li>\n<li><a href=\"#https-%E9%AA%8C%E8%AF%81%E5%8E%9F%E7%90%86\">HTTPS 验证原理</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">性能优化</a></li>\n<li><a href=\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%8F%8A%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">对称加密及非对称加密</a></li>\n<li><a href=\"#link-%E5%92%8C-import-%E5%8C%BA%E5%88%AB\">link 和 @import 区别</a></li>\n<li><a href=\"#css-%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7%E9%A1%BA%E5%BA%8F\">CSS 权重优先级顺序</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a></li>\n<li><a href=\"#%E4%B8%A4%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0\">两大数相加</a></li>\n<li><a href=\"#%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E6%AF%94\">设备像素比</a></li>\n<li><a href=\"#%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E6%80%9D%E8%B7%AF\">双向绑定原理（简单思路）</a></li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81\">面向对象的三个基本特征</a></li>\n<li><a href=\"#js%E7%BB%A7%E6%89%BF-%E7%B1%BB\">JS继承 · 类</a></li>\n<li><a href=\"#es5es6-%E7%9A%84%E7%BB%A7%E6%89%BF%E9%99%A4%E4%BA%86%E5%86%99%E6%B3%95%E4%BB%A5%E5%A4%96%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\">ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</a></li>\n<li><a href=\"#vue-%E7%BB%84%E4%BB%B6%E7%9A%84-data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0\">Vue 组件的 data 必须是一个函数</a></li>\n<li><a href=\"#%E9%98%B2%E6%8A%96%E5%8F%8A%E8%8A%82%E6%B5%81\">防抖及节流</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"前端事件流\"><a href=\"#前端事件流\" class=\"headerlink\" title=\"前端事件流\"></a>前端事件流</h3><p>事件流程如下：</p>\n<ol>\n<li><p>捕获阶段：事件从根元素开始向触发事件的目标元素进行传递，传递过程中，如果中间有元素注册了事件处理函数，并且 useCapture 参数值为 true ，那么此事件处理函数就会执行，IE9+和其他标准浏览器支持。</p>\n</li>\n<li><p>目标阶段：触发目标元素对应事件，并执行注册的事件处理函数。</p>\n</li>\n<li><p>冒泡阶段：从目标元素开始向根元素传递，传递过程中，如果中间有元素注册了事件处理函数，且 useCapture 值为 false，此事件处理函数就会执行。</p>\n</li>\n</ol>\n<h3 id=\"什么是闭包？这就是闭包！\"><a href=\"#什么是闭包？这就是闭包！\" class=\"headerlink\" title=\"什么是闭包？这就是闭包！\"></a>什么是闭包？这就是闭包！</h3><p>有权访问另一个函数作用域内变量的函数都是闭包。</p>\n<h3 id=\"HTTP缓存机制和原理\"><a href=\"#HTTP缓存机制和原理\" class=\"headerlink\" title=\"HTTP缓存机制和原理\"></a>HTTP缓存机制和原理</h3><ol>\n<li><p>强制缓存</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/1.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;1.png\"></p>\n<p> (1) Expires</p>\n<p> Expires 的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。</p>\n<p> 不过 Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。</p>\n<p> 另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。</p>\n<p> 所以HTTP 1.1 的版本，使用Cache-Control替代。</p>\n<p> (2) Cache-Control</p>\n<p> Cache-Control 是最重要的规则。常见的取值有 private、public、no-cache、max-age，no-store，默认为 private。</p>\n<ul>\n<li>private:             客户端可以缓存</li>\n<li>public:              客户端和代理服务器都可缓存（前端的同学，可以认为 public 和 private 是一样的）</li>\n<li>max-age&#x3D;xxx:   缓存的内容将在 xxx 秒后失效</li>\n<li>no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）</li>\n<li>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）</li>\n</ul>\n</li>\n<li><p>对比缓存</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/2.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;2.png\"></p>\n<p> (1) Last-Modified &#x2F; If-Modified-Since</p>\n<ul>\n<li>Last-Modified：</li>\n</ul>\n<p> 服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/3.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;3.png\"></p>\n<ul>\n<li>If-Modified-Since：</li>\n</ul>\n<p> 再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。<br> 服务器收到请求后发现有头 If-Modified-Since 则与被请求资源的最后修改时间进行比对。<br> 若资源的最后修改时间大于 If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码 200；</p>\n<p> 若资源的最后修改时间小于或等于 If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/4.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;4.png\"></p>\n<p> (2) Etag &#x2F; If-None-Match （优先级高于Last-Modified  &#x2F;  If-Modified-Since）</p>\n<ul>\n<li>Etag：</li>\n</ul>\n<p> 服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/5.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;5.png\"></p>\n<ul>\n<li>If-None-Match：</li>\n</ul>\n<p> 再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。</p>\n<p> 服务器收到请求后发现有头 If-None-Match 则与被请求资源的唯一标识进行比对，<br> 不同，说明资源又被改动过，则响应整片资源内容，返回状态码 200；</p>\n<p> 相同，说明资源无新修改，则响应 HTTP 304，告知浏览器继续使用所保存的 cache。</p>\n<p> <img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/6.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;6.png\"></p>\n</li>\n</ol>\n<h3 id=\"defer-和-async\"><a href=\"#defer-和-async\" class=\"headerlink\" title=\"defer 和 async\"></a>defer 和 async</h3><p>1、defer</p>\n<p>如果 script 标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续 DOM 的渲染；</p>\n<p>如果有多个设置了 defer 的 script 标签存在，则会按照顺序执行所有的 script；</p>\n<p>defer 脚本会在文档渲染完毕后，DOMContentLoaded 事件调用前执行。</p>\n<p>2、async</p>\n<p>async 的设置，会使得 script 脚本异步的加载并在允许的情况下执行;<br>async 的执行，并不会按着 script 在页面中的顺序来执行，而是谁先加载完谁执行。</p>\n<h3 id=\"使用-js-的-FileReader对象实现上传图片时的图片预览功能\"><a href=\"#使用-js-的-FileReader对象实现上传图片时的图片预览功能\" class=\"headerlink\" title=\"使用 js 的 FileReader对象实现上传图片时的图片预览功能\"></a>使用 js 的 FileReader对象实现上传图片时的图片预览功能</h3><p>废话不多说线上代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span>  <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;format-detection&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;telephone=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">　  <span class=\"comment\">// 选择图片时预览功能</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">imageshow</span>(<span class=\"params\">source</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t  <span class=\"keyword\">var</span> file = source.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    <span class=\"keyword\">var</span> imageid = source.<span class=\"property\">id</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">FileReader</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t      <span class=\"keyword\">var</span> fr = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t        fr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;portrait&quot;</span>+imageid).<span class=\"property\">src</span> = e.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        fr.<span class=\"title function_\">readAsDataURL</span>(file);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">　　　 <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;image&quot;</span>+imageid).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;show&quot;</span>+imageid).<span class=\"property\">style</span>.<span class=\"property\">display</span>=<span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">　　 &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image1&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show1&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait1&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span>&gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show2&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait2&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span>&gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;image3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>上传截图<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;screenshot3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;imageshow(this)&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:none;&quot;</span>&gt;</span></span><br><span class=\"line\">　  <span class=\"tag\">&lt;<span class=\"name\">img</span>  <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;portrait3&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;70&quot;</span> &gt;</span></span><br><span class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTPS-验证原理\"><a href=\"#HTTPS-验证原理\" class=\"headerlink\" title=\"HTTPS 验证原理\"></a>HTTPS 验证原理</h3><p>https 在真正请求数据前，先会与服务有几次握手验证，以证明相互的身份，以下图为例</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/front-end-notes/7.png\" alt=\"https:&#x2F;&#x2F;jangdelong.github.io&#x2F;blog_img&#x2F;images&#x2F;front-end-notes&#x2F;7.png\"></p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ul>\n<li><p>减少请求数量（sprite、combo）</p>\n</li>\n<li><p>善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）</p>\n</li>\n<li><p>减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）</p>\n</li>\n<li><p>CSS的回流与重绘</p>\n<blockquote>\n<p>reflow(回流) </p>\n</blockquote>\n<p>  说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为reflow（回流）。</p>\n<p>  reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p>\n<blockquote>\n<p>repaint(重绘)</p>\n</blockquote>\n<p>  如果只是改变某个元素的背景色、文 字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。</p>\n<p>  repaint 的速度明显快于 reflow（在IE下需要换一下说法，reflow 要比 repaint 更缓慢）。</p>\n</li>\n</ul>\n<h3 id=\"对称加密及非对称加密\"><a href=\"#对称加密及非对称加密\" class=\"headerlink\" title=\"对称加密及非对称加密\"></a>对称加密及非对称加密</h3><ul>\n<li>对称加密</li>\n</ul>\n<p>发送方和接收方需要持有同一把密钥，发送消息和接收消息均使用该密钥。</p>\n<p>相对于非对称加密，对称加密具有更高的加解密速度，但双方都需要事先知道密钥，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。</p>\n<ul>\n<li>非对称加密算法</li>\n</ul>\n<p>接收方在发送消息前需要事先生成公钥和私钥，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。<br>在这个过程中，公钥负责加密，私钥负责解密，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。</p>\n<p>非对称加密算法的加解密速度低于对称加密算法，但是安全性更高。</p>\n<p>—- 以下更新于 2018-12-11 —-</p>\n<h3 id=\"link-和-import-区别\"><a href=\"#link-和-import-区别\" class=\"headerlink\" title=\"link 和 @import 区别\"></a>link 和 @import 区别</h3><ul>\n<li>从属关系区别</li>\n</ul>\n<p>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p>\n<ul>\n<li>加载顺序区别</li>\n</ul>\n<p>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。</p>\n<ul>\n<li>兼容性区别</li>\n</ul>\n<p>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p>\n<ul>\n<li>DOM可控性区别</li>\n</ul>\n<p>可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。</p>\n<h3 id=\"CSS-权重优先级顺序\"><a href=\"#CSS-权重优先级顺序\" class=\"headerlink\" title=\"CSS 权重优先级顺序\"></a>CSS 权重优先级顺序</h3><p>!important &gt; 行内样式 &gt; ID &gt; 类、伪类、属性 &gt; 标签名 &gt; 继承 &gt; 通配符</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Pubsub */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">Pubsub</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//存放事件和对应的处理方法</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span> = &#123;&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"title class_\">Pubsub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">   <span class=\"comment\">//传入事件类型type和事件处理handle</span></span><br><span class=\"line\">   <span class=\"attr\">on</span>: <span class=\"keyword\">function</span> (<span class=\"params\">type, handle</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!<span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type])&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type] = [];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type].<span class=\"title function_\">push</span>(handle);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">emit</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 通过传入参数获取事件类型</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> type = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type].<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handle = <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type][i];</span><br><span class=\"line\">       <span class=\"comment\">// 执行事件</span></span><br><span class=\"line\">       handle.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">off</span>: <span class=\"keyword\">function</span> (<span class=\"params\">type, handle</span>) &#123;</span><br><span class=\"line\">     handles = <span class=\"variable language_\">this</span>.<span class=\"property\">handles</span>[type];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (handles) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!handle) &#123;</span><br><span class=\"line\">         handles.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 清空数组</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handles.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> _handle = handles[i];</span><br><span class=\"line\">           <span class=\"comment\">// 有点问题</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (_handle === handle) &#123;</span><br><span class=\"line\">             handles.<span class=\"title function_\">splice</span>(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两大数相加\"><a href=\"#两大数相加\" class=\"headerlink\" title=\"两大数相加\"></a>两大数相加</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumStrings</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a = a.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    b = b.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a.<span class=\"property\">length</span> || b.<span class=\"property\">length</span> || c) &#123;</span><br><span class=\"line\">        c += ~~a.<span class=\"title function_\">pop</span>() + ~~b.<span class=\"title function_\">pop</span>(); <span class=\"comment\">// ~~a字符串转数字 </span></span><br><span class=\"line\">        res = c % <span class=\"number\">10</span> + res;</span><br><span class=\"line\">        c = c &gt; <span class=\"number\">9</span>; <span class=\"comment\">// 进1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^0+/</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设备像素比\"><a href=\"#设备像素比\" class=\"headerlink\" title=\"设备像素比\"></a>设备像素比</h3><p>物理像素(physical pixel)</p>\n<p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p>\n<p>设备独立像素(density-independent pixel)</p>\n<p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。 所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。</p>\n<p>设备像素比(device pixel ratio )</p>\n<p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向</span><br></pre></td></tr></table></figure>\n<p>—- 以下更新于 2018-12-13 —-</p>\n<h3 id=\"双向绑定原理（简单思路）\"><a href=\"#双向绑定原理（简单思路）\" class=\"headerlink\" title=\"双向绑定原理（简单思路）\"></a>双向绑定原理（简单思路）</h3><ol>\n<li><p>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</p>\n</li>\n<li><p>实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图。</p>\n</li>\n<li><p>实现一个解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。</p>\n</li>\n</ol>\n<p>—- 以下更新于 2019-2-12 —-</p>\n<h3 id=\"面向对象的三个基本特征\"><a href=\"#面向对象的三个基本特征\" class=\"headerlink\" title=\"面向对象的三个基本特征\"></a>面向对象的三个基本特征</h3><ol>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ol>\n<p>—- 以下更新于 2019-2-24 —-</p>\n<h3 id=\"JS继承-·-类\"><a href=\"#JS继承-·-类\" class=\"headerlink\" title=\"JS继承 · 类\"></a>JS继承 · 类</h3><p>ES5 和 ES6 子类 <code>this</code> 生成顺序不同。ES5 的继承先生成了子类实例，再调用父类的构造函数修饰子类实例，ES6 的继承先生成父类实例，再调用子类的构造函数修饰父类实例。这个差别使得 ES6 可以继承内置对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyES5Array</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// it&#x27;s useless</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayES5 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyES5Array</span>(<span class=\"number\">3</span>); <span class=\"comment\">// arrayES5: MyES5Array &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyES6Array</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Array</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayES6 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyES6Array</span>(<span class=\"number\">3</span>); <span class=\"comment\">// arrayES6: MyES6Array(3) []</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES5-ES6-的继承除了写法以外还有什么区别？\"><a href=\"#ES5-ES6-的继承除了写法以外还有什么区别？\" class=\"headerlink\" title=\"ES5&#x2F;ES6 的继承除了写法以外还有什么区别？\"></a>ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</h3><blockquote>\n<p><a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-class-declarations\">来源：Understanding ECMAScript 6 </a></p>\n</blockquote>\n<p> 1、<code>class</code> 声明会提升，但不会初始化赋值。<code>Foo</code> 进入暂时性死区，类似于 <code>let</code>、<code>const</code> 声明变量。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// ReferenceError: Foo is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 2、<code>class</code> 声明内部会启用严格模式。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用一个未声明的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  baz = <span class=\"number\">42</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    fol = <span class=\"number\">42</span>; <span class=\"comment\">// ReferenceError: fol is not defined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p> 3、<code>class</code> 的所有方法（包括静态方法和实例方法）都是不可枚举的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用一个未声明的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\">answer</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">print</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">bar</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> barKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Bar</span>); <span class=\"comment\">// [&#x27;answer&#x27;]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> barProtoKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// [&#x27;print&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">answer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Foo</span>); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fooProtoKeys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p> 4、<code>class</code> 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有<code>[[construct]]</code>，不能使用 <code>new</code> 来调用。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">print</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">bar</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> barPrint = <span class=\"keyword\">new</span> bar.<span class=\"title function_\">print</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooPrint = <span class=\"keyword\">new</span> foo.<span class=\"title function_\">print</span>(); <span class=\"comment\">// TypeError: foo.print is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p> 5、必须使用 <code>new</code> 调用 <code>class</code>。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"title class_\">Bar</span>(); <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// TypeError: Class constructor Foo cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p> 6、<code>class</code> 内部无法重写类名。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Bar</span> = <span class=\"string\">&#x27;Baz&#x27;</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\"><span class=\"comment\">// Bar: &#x27;Baz&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// bar: Bar &#123;bar: 42&#125;  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Foo</span> = <span class=\"string\">&#x27;Fol&#x27;</span>; <span class=\"comment\">// TypeError: Assignment to constant variable</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span> = <span class=\"string\">&#x27;Fol&#x27;</span>; <span class=\"comment\">// it&#x27;s ok</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vue-组件的-data-必须是一个函数\"><a href=\"#Vue-组件的-data-必须是一个函数\" class=\"headerlink\" title=\"Vue 组件的 data 必须是一个函数\"></a>Vue 组件的 data 必须是一个函数</h3><p>一个组件的 <code>data</code> 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 Vue 没有这条规则，点击某个按钮组件就可能影响到其它实例。</p>\n<h3 id=\"防抖及节流\"><a href=\"#防抖及节流\" class=\"headerlink\" title=\"防抖及节流\"></a>防抖及节流</h3><ol>\n<li>防抖</li>\n</ol>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">TODO:</span> 防止多次提交按钮，只执行最后提交的一次</span></span><br><span class=\"line\"><span class=\"comment\"> * 原理: 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</span></span><br><span class=\"line\"><span class=\"comment\"> * 适用场景: 按钮多次点击等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节流</li>\n</ol>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 节流函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">TODO:</span> 固定时间内只执行一次，防止超高频次触发位置变动</span></span><br><span class=\"line\"><span class=\"comment\"> * 原理: 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</span></span><br><span class=\"line\"><span class=\"comment\"> * 适用场景: 滚动事件等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">return</span></span><br><span class=\"line\">    flag = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">      flag = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更多内容，请移步↓\"><a href=\"#更多内容，请移步↓\" class=\"headerlink\" title=\"更多内容，请移步↓\"></a>更多内容，请移步↓</h4><p>  <a href=\"https://github.com/front-end-pigs/blog/issues/4\">https://github.com/front-end-pigs/blog/issues/4</a></p>\n"},{"title":"如何获取元素相对窗口位置","author":"Jelon","date":"2018-02-23T00:00:00.000Z","thumbnail":null,"blogexcerpt":"一、js 递归实现 JS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。二、利用 getBoundingClientRect 实现。很明显前面提到的那种方法效率代价还是比较高的...","_content":"\n<!-- toc -->\n\n### 一、js 递归实现\n\nJS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。\n\n```javascript\n// 获取元素的纵坐标（相对于窗口）\nfunction getTop(e) {\n\tvar offset = e.offsetTop;\n\tif (e.offsetParent !== null) offset += getTop(e.offsetParent);\n\treturn offset;\n}\n// 获取元素的横坐标（相对于窗口）\nfunction getLeft(e) {\n\tvar offset = e.offsetLeft;\n\tif (e.offsetParent !== null) offset += getLeft(e.offsetParent);\n\treturn offset;\n}\n```\n\n### 二、利用 getBoundingClientRect 实现\n\n很明显前面提到的那种方法效率代价还是比较高的，幸好，现较新的浏览器基本都提供了相应的 API —— `getBoundingClientRect`。\n\n```javascript\nvar box = document.getElementById('box');\nvar pos = box.getBoundingClientRect();\nbox.innerHTML = 'top:' + pos.top +\n  'left:' + pos.left +\n  'bottom:' + pos.bottom +\n  'right:' + pos.right +\n  'width:' + pos.width +\n  'height:' + pos.height;\n```\n\n注：`getBoundingClientRect` 兼容性表\n\n![`getBoundingClientRect` 兼容性表](https://jangdelong.github.io/blog_img/images/get-element-position/1.jpg)\n\n[https://caniuse.com/#search=getBoundingClientRect](https://caniuse.com/#search=getBoundingClientRect)\n\n\n\n\n\n\n\n\n","source":"_posts/get-element-position.md","raw":"---\ntitle: 如何获取元素相对窗口位置\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2018-02-23\ntags:\n\t- js\nthumbnail:\nblogexcerpt: 一、js 递归实现 JS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。二、利用 getBoundingClientRect 实现。很明显前面提到的那种方法效率代价还是比较高的...\n\n---\n\n<!-- toc -->\n\n### 一、js 递归实现\n\nJS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。\n\n```javascript\n// 获取元素的纵坐标（相对于窗口）\nfunction getTop(e) {\n\tvar offset = e.offsetTop;\n\tif (e.offsetParent !== null) offset += getTop(e.offsetParent);\n\treturn offset;\n}\n// 获取元素的横坐标（相对于窗口）\nfunction getLeft(e) {\n\tvar offset = e.offsetLeft;\n\tif (e.offsetParent !== null) offset += getLeft(e.offsetParent);\n\treturn offset;\n}\n```\n\n### 二、利用 getBoundingClientRect 实现\n\n很明显前面提到的那种方法效率代价还是比较高的，幸好，现较新的浏览器基本都提供了相应的 API —— `getBoundingClientRect`。\n\n```javascript\nvar box = document.getElementById('box');\nvar pos = box.getBoundingClientRect();\nbox.innerHTML = 'top:' + pos.top +\n  'left:' + pos.left +\n  'bottom:' + pos.bottom +\n  'right:' + pos.right +\n  'width:' + pos.width +\n  'height:' + pos.height;\n```\n\n注：`getBoundingClientRect` 兼容性表\n\n![`getBoundingClientRect` 兼容性表](https://jangdelong.github.io/blog_img/images/get-element-position/1.jpg)\n\n[https://caniuse.com/#search=getBoundingClientRect](https://caniuse.com/#search=getBoundingClientRect)\n\n\n\n\n\n\n\n\n","slug":"get-element-position","published":1,"updated":"2018-02-23T00:00:00.000Z","_id":"cmduj3n2b000pk8svh2zi9r2u","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-js-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0\">一、js 递归实现</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%88%A9%E7%94%A8-getboundingclientrect-%E5%AE%9E%E7%8E%B0\">二、利用 getBoundingClientRect 实现</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"一-js-递归实现\">一、js 递归实现</span></h3><p>JS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取元素的纵坐标（相对于窗口）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getTop</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> offset = e.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">offsetParent</span> !== <span class=\"literal\">null</span>) offset += <span class=\"title function_\">getTop</span>(e.<span class=\"property\">offsetParent</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取元素的横坐标（相对于窗口）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLeft</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> offset = e.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">offsetParent</span> !== <span class=\"literal\">null</span>) offset += <span class=\"title function_\">getLeft</span>(e.<span class=\"property\">offsetParent</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"二-利用-getboundingclientrect-实现\">二、利用 getBoundingClientRect 实现</span></h3><p>很明显前面提到的那种方法效率代价还是比较高的，幸好，现较新的浏览器基本都提供了相应的 API —— <code>getBoundingClientRect</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;box&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = box.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">box.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;top:&#x27;</span> + pos.<span class=\"property\">top</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;left:&#x27;</span> + pos.<span class=\"property\">left</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;bottom:&#x27;</span> + pos.<span class=\"property\">bottom</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;right:&#x27;</span> + pos.<span class=\"property\">right</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;width:&#x27;</span> + pos.<span class=\"property\">width</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;height:&#x27;</span> + pos.<span class=\"property\">height</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：<code>getBoundingClientRect</code> 兼容性表</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/get-element-position/1.jpg\" alt=\"&#96;getBoundingClientRect&#96; 兼容性表\"></p>\n<p><a href=\"https://caniuse.com/#search=getBoundingClientRect\">https://caniuse.com/#search=getBoundingClientRect</a></p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-js-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0\">一、js 递归实现</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%88%A9%E7%94%A8-getboundingclientrect-%E5%AE%9E%E7%8E%B0\">二、利用 getBoundingClientRect 实现</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"一、js-递归实现\"><a href=\"#一、js-递归实现\" class=\"headerlink\" title=\"一、js 递归实现\"></a>一、js 递归实现</h3><p>JS 获取元素的 offsetTop, offsetLeft 等属性，可以通过 offsetTop 和 offsetLeft 属性获取元素相对窗口的位置，但 offsetTop 和 offsetLeft 属性都是相对于父元素定位的，而通常需要获取位置的元素都不是在最外层，所以需要遍历上级元素的 offset，递归实现如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取元素的纵坐标（相对于窗口）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getTop</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> offset = e.<span class=\"property\">offsetTop</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">offsetParent</span> !== <span class=\"literal\">null</span>) offset += <span class=\"title function_\">getTop</span>(e.<span class=\"property\">offsetParent</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取元素的横坐标（相对于窗口）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLeft</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> offset = e.<span class=\"property\">offsetLeft</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">offsetParent</span> !== <span class=\"literal\">null</span>) offset += <span class=\"title function_\">getLeft</span>(e.<span class=\"property\">offsetParent</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、利用-getBoundingClientRect-实现\"><a href=\"#二、利用-getBoundingClientRect-实现\" class=\"headerlink\" title=\"二、利用 getBoundingClientRect 实现\"></a>二、利用 getBoundingClientRect 实现</h3><p>很明显前面提到的那种方法效率代价还是比较高的，幸好，现较新的浏览器基本都提供了相应的 API —— <code>getBoundingClientRect</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;box&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = box.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">box.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;top:&#x27;</span> + pos.<span class=\"property\">top</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;left:&#x27;</span> + pos.<span class=\"property\">left</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;bottom:&#x27;</span> + pos.<span class=\"property\">bottom</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;right:&#x27;</span> + pos.<span class=\"property\">right</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;width:&#x27;</span> + pos.<span class=\"property\">width</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;height:&#x27;</span> + pos.<span class=\"property\">height</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：<code>getBoundingClientRect</code> 兼容性表</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/get-element-position/1.jpg\" alt=\"&#96;getBoundingClientRect&#96; 兼容性表\"></p>\n<p><a href=\"https://caniuse.com/#search=getBoundingClientRect\">https://caniuse.com/#search=getBoundingClientRect</a></p>\n"},{"title":"Github 使用指南","author":"Jelon","date":"2016-11-14T00:00:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/github-tutorial/5.png","blogexcerpt":"很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利以下...","_content":"\n<!-- toc -->\n\n很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利一下。\n\n### 一、创建本地 git 仓库\n\n使用 `cd` 切换到你本地项目的目录（可以手动去创建一个目录，例如 /gitbub_test），然后执行以下 git 命令\n\n```bash\ngit init\n```\n\n![创建本地 git 仓库](https://jangdelong.github.io/blog_img/images/github-tutorial/1.png)\n\n### 二、将项目文件添加至你的 git 仓库\n\n将你的项目文件拷贝到刚才创建的目录下，然后执行以下 git 命令\n\n```bash\ngit add . # 添加所以修改过的文件或者新文件\n```\n\n### 三、将 add 的文件 commit 到仓库\n\n将刚才已经添加的文件 commit 到仓库，执行命令如下\n\n```bash\ngit commit -m '这是注释语句'\n```\n![commit 到仓库](https://jangdelong.github.io/blog_img/images/github-tutorial/3.png)\n\n### 四、去 github 上创建 Repository，截图如下\n\n创建页面如下：\n\n![创建页面截图](https://jangdelong.github.io/blog_img/images/github-tutorial/2.png)\n\n创建完成之后结果如下：\n\n![创建成功](https://jangdelong.github.io/blog_img/images/github-tutorial/6.png)\n\n### 五、将本地仓库关联至 github\n\ngithub Repository 创建好之后，接下来就是如何将本地 git 仓库关联至 github ，执行以下 git 命令即可\n\n```bash\ngit remote add origin https://github.com/jangdelong/github_test.git\n```\n\n![关联仓库至 github](https://jangdelong.github.io/blog_img/images/github-tutorial/4.png)\n\n### 六、将 github 上的代码拉取到本地\n\n执行以下 git 命令可将 github 上原有的代码拉去到本地。这一步前提是你的 github 上原来已经存在代码或文件，否则这一步可以省去。\n\n```bash\ngit pull origin master\n```\n\n### 七、提交代码\n\n最后一步就是提交代码了，执行 git 命令如下\n\n```bash\ngit push -u origin master\n```\n\n这样，我们在 github 上就可以看到我们的项目代码了。\n\n![完成](https://jangdelong.github.io/blog_img/images/github-tutorial/5.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/github-tutorial.md","raw":"---\ntitle: Github 使用指南\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-11-14\ntags:\n\t- Github\n\t- Git\nthumbnail: https://jangdelong.github.io/blog_img/images/github-tutorial/5.png\nblogexcerpt: 很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利以下...\n\n---\n\n<!-- toc -->\n\n很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利一下。\n\n### 一、创建本地 git 仓库\n\n使用 `cd` 切换到你本地项目的目录（可以手动去创建一个目录，例如 /gitbub_test），然后执行以下 git 命令\n\n```bash\ngit init\n```\n\n![创建本地 git 仓库](https://jangdelong.github.io/blog_img/images/github-tutorial/1.png)\n\n### 二、将项目文件添加至你的 git 仓库\n\n将你的项目文件拷贝到刚才创建的目录下，然后执行以下 git 命令\n\n```bash\ngit add . # 添加所以修改过的文件或者新文件\n```\n\n### 三、将 add 的文件 commit 到仓库\n\n将刚才已经添加的文件 commit 到仓库，执行命令如下\n\n```bash\ngit commit -m '这是注释语句'\n```\n![commit 到仓库](https://jangdelong.github.io/blog_img/images/github-tutorial/3.png)\n\n### 四、去 github 上创建 Repository，截图如下\n\n创建页面如下：\n\n![创建页面截图](https://jangdelong.github.io/blog_img/images/github-tutorial/2.png)\n\n创建完成之后结果如下：\n\n![创建成功](https://jangdelong.github.io/blog_img/images/github-tutorial/6.png)\n\n### 五、将本地仓库关联至 github\n\ngithub Repository 创建好之后，接下来就是如何将本地 git 仓库关联至 github ，执行以下 git 命令即可\n\n```bash\ngit remote add origin https://github.com/jangdelong/github_test.git\n```\n\n![关联仓库至 github](https://jangdelong.github.io/blog_img/images/github-tutorial/4.png)\n\n### 六、将 github 上的代码拉取到本地\n\n执行以下 git 命令可将 github 上原有的代码拉去到本地。这一步前提是你的 github 上原来已经存在代码或文件，否则这一步可以省去。\n\n```bash\ngit pull origin master\n```\n\n### 七、提交代码\n\n最后一步就是提交代码了，执行 git 命令如下\n\n```bash\ngit push -u origin master\n```\n\n这样，我们在 github 上就可以看到我们的项目代码了。\n\n![完成](https://jangdelong.github.io/blog_img/images/github-tutorial/5.png)\n\n\n\n\n\n\n\n\n\n","slug":"github-tutorial","published":1,"updated":"2016-11-14T00:00:00.000Z","_id":"cmduj3n2e000tk8sv29wff89o","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0-git-%E4%BB%93%E5%BA%93\">一、创建本地 git 仓库</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%87%B3%E4%BD%A0%E7%9A%84-git-%E4%BB%93%E5%BA%93\">二、将项目文件添加至你的 git 仓库</a></li>\n<li><a href=\"#%E4%B8%89-%E5%B0%86-add-%E7%9A%84%E6%96%87%E4%BB%B6-commit-%E5%88%B0%E4%BB%93%E5%BA%93\">三、将 add 的文件 commit 到仓库</a></li>\n<li><a href=\"#%E5%9B%9B-%E5%8E%BB-github-%E4%B8%8A%E5%88%9B%E5%BB%BA-repository%E6%88%AA%E5%9B%BE%E5%A6%82%E4%B8%8B\">四、去 github 上创建 Repository，截图如下</a></li>\n<li><a href=\"#%E4%BA%94-%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%87%B3-github\">五、将本地仓库关联至 github</a></li>\n<li><a href=\"#%E5%85%AD-%E5%B0%86-github-%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E5%88%B0%E6%9C%AC%E5%9C%B0\">六、将 github 上的代码拉取到本地</a></li>\n<li><a href=\"#%E4%B8%83-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81\">七、提交代码</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利一下。</p>\n<h3><span id=\"一-创建本地-git-仓库\">一、创建本地 git 仓库</span></h3><p>使用 <code>cd</code> 切换到你本地项目的目录（可以手动去创建一个目录，例如 &#x2F;gitbub_test），然后执行以下 git 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/1.png\" alt=\"创建本地 git 仓库\"></p>\n<h3><span id=\"二-将项目文件添加至你的-git-仓库\">二、将项目文件添加至你的 git 仓库</span></h3><p>将你的项目文件拷贝到刚才创建的目录下，然后执行以下 git 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所以修改过的文件或者新文件</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"三-将-add-的文件-commit-到仓库\">三、将 add 的文件 commit 到仓库</span></h3><p>将刚才已经添加的文件 commit 到仓库，执行命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;这是注释语句&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/3.png\" alt=\"commit 到仓库\"></p>\n<h3><span id=\"四-去-github-上创建-repository截图如下\">四、去 github 上创建 Repository，截图如下</span></h3><p>创建页面如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/2.png\" alt=\"创建页面截图\"></p>\n<p>创建完成之后结果如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/6.png\" alt=\"创建成功\"></p>\n<h3><span id=\"五-将本地仓库关联至-github\">五、将本地仓库关联至 github</span></h3><p>github Repository 创建好之后，接下来就是如何将本地 git 仓库关联至 github ，执行以下 git 命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/jangdelong/github_test.git</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/4.png\" alt=\"关联仓库至 github\"></p>\n<h3><span id=\"六-将-github-上的代码拉取到本地\">六、将 github 上的代码拉取到本地</span></h3><p>执行以下 git 命令可将 github 上原有的代码拉去到本地。这一步前提是你的 github 上原来已经存在代码或文件，否则这一步可以省去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"七-提交代码\">七、提交代码</span></h3><p>最后一步就是提交代码了，执行 git 命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在 github 上就可以看到我们的项目代码了。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/5.png\" alt=\"完成\"></p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0-git-%E4%BB%93%E5%BA%93\">一、创建本地 git 仓库</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%87%B3%E4%BD%A0%E7%9A%84-git-%E4%BB%93%E5%BA%93\">二、将项目文件添加至你的 git 仓库</a></li>\n<li><a href=\"#%E4%B8%89-%E5%B0%86-add-%E7%9A%84%E6%96%87%E4%BB%B6-commit-%E5%88%B0%E4%BB%93%E5%BA%93\">三、将 add 的文件 commit 到仓库</a></li>\n<li><a href=\"#%E5%9B%9B-%E5%8E%BB-github-%E4%B8%8A%E5%88%9B%E5%BB%BA-repository%E6%88%AA%E5%9B%BE%E5%A6%82%E4%B8%8B\">四、去 github 上创建 Repository，截图如下</a></li>\n<li><a href=\"#%E4%BA%94-%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%87%B3-github\">五、将本地仓库关联至 github</a></li>\n<li><a href=\"#%E5%85%AD-%E5%B0%86-github-%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E5%88%B0%E6%9C%AC%E5%9C%B0\">六、将 github 上的代码拉取到本地</a></li>\n<li><a href=\"#%E4%B8%83-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81\">七、提交代码</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利一下。</p>\n<h3 id=\"一、创建本地-git-仓库\"><a href=\"#一、创建本地-git-仓库\" class=\"headerlink\" title=\"一、创建本地 git 仓库\"></a>一、创建本地 git 仓库</h3><p>使用 <code>cd</code> 切换到你本地项目的目录（可以手动去创建一个目录，例如 &#x2F;gitbub_test），然后执行以下 git 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/1.png\" alt=\"创建本地 git 仓库\"></p>\n<h3 id=\"二、将项目文件添加至你的-git-仓库\"><a href=\"#二、将项目文件添加至你的-git-仓库\" class=\"headerlink\" title=\"二、将项目文件添加至你的 git 仓库\"></a>二、将项目文件添加至你的 git 仓库</h3><p>将你的项目文件拷贝到刚才创建的目录下，然后执行以下 git 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所以修改过的文件或者新文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、将-add-的文件-commit-到仓库\"><a href=\"#三、将-add-的文件-commit-到仓库\" class=\"headerlink\" title=\"三、将 add 的文件 commit 到仓库\"></a>三、将 add 的文件 commit 到仓库</h3><p>将刚才已经添加的文件 commit 到仓库，执行命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;这是注释语句&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/3.png\" alt=\"commit 到仓库\"></p>\n<h3 id=\"四、去-github-上创建-Repository，截图如下\"><a href=\"#四、去-github-上创建-Repository，截图如下\" class=\"headerlink\" title=\"四、去 github 上创建 Repository，截图如下\"></a>四、去 github 上创建 Repository，截图如下</h3><p>创建页面如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/2.png\" alt=\"创建页面截图\"></p>\n<p>创建完成之后结果如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/6.png\" alt=\"创建成功\"></p>\n<h3 id=\"五、将本地仓库关联至-github\"><a href=\"#五、将本地仓库关联至-github\" class=\"headerlink\" title=\"五、将本地仓库关联至 github\"></a>五、将本地仓库关联至 github</h3><p>github Repository 创建好之后，接下来就是如何将本地 git 仓库关联至 github ，执行以下 git 命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/jangdelong/github_test.git</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/4.png\" alt=\"关联仓库至 github\"></p>\n<h3 id=\"六、将-github-上的代码拉取到本地\"><a href=\"#六、将-github-上的代码拉取到本地\" class=\"headerlink\" title=\"六、将 github 上的代码拉取到本地\"></a>六、将 github 上的代码拉取到本地</h3><p>执行以下 git 命令可将 github 上原有的代码拉去到本地。这一步前提是你的 github 上原来已经存在代码或文件，否则这一步可以省去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、提交代码\"><a href=\"#七、提交代码\" class=\"headerlink\" title=\"七、提交代码\"></a>七、提交代码</h3><p>最后一步就是提交代码了，执行 git 命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在 github 上就可以看到我们的项目代码了。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/github-tutorial/5.png\" alt=\"完成\"></p>\n"},{"title":"HTTP状态码详解","date":"2016-04-23T11:05:42.000Z","author":"Jelon","thumbnail":null,"_content":"\n<!-- toc -->\n\n### 前言\n\n作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。\n\n<!-- more -->\n\n接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。\n\n### HTTP状态码表\n\n|  状态代码  | 状态信息 | 含义 |\n| :-------: |:--------:| :------ |\n|   &nbsp;&nbsp;&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp; | Continue            | 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）|\n|   101  | Switching Protocols |服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）|\n| 200    |  OK                 | 一切正常，对GET和POST请求的应答文档跟在后面。|\n|201\t  |Created |\t服务器已经创建了文档，Location头给出了它的URL。|\n|202 |\tAccepted\t| 已经接受请求，但处理尚未完成。|\n|203\t| Non-Authoritative Information\t| 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。|\n|204 |\tNo Content\t|没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。|\n|205 |\tReset Content\t | 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。\n|206\t|Partial Content |\t客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。|\n|300\t| Multiple Choices |\t客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。|\n|301 |\tMoved Permanently\t| 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。|\n|302\t| Found\t| 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http://host/~user（缺少了后面的斜杠），有的服务器 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。|\n|303 |\tSee Other\t| 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。|\n|304 |\tNot Modified\t | 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。|\n|305 |\tUse Proxy |\t客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。|\n|307 |\tTemporary Redirect\t| 和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）|\n|400 |\tBad Request |\t请求出现语法错误。|\n|401 |\tUnauthorized |\t客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。|\n|403 |\tForbidden |\t资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。|\n|404 |\tNot Found\t | 无法找到指定位置的资源。这也是一个常用的应答。|\n|405 |\tMethod Not Allowed\t | 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）|\n|406\t| Not Acceptable\t | 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。|\n|407 |\tProxy Authentication Required\t | 类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）|\n|408 |\tRequest Timeout |\t在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）|\n|409 |\tConflict |\t通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）|\n|410 |\tGone |\t所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）|\n|411 |\tLength Required |\t服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）|\n|412 |\tPrecondition Failed |\t请求头中指定的一些前提条件失败（HTTP 1.1新）。|\n|413 |\tRequest Entity Too Large |\t目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。|\n|414\t| Request URI Too Long |\tURI太长（HTTP 1.1新）。|\n|416 |\tRequested Range Not Satisfiable\t| 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）|\n|500 |\tInternal Server Error |\t服务器遇到了意料不到的情况，不能完成客户的请求。|\n|501 |\tNot Implemented |\t服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。|\n|502 |\tBad Gateway |\t服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。|\n|503 |\tService Unavailable |\t服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。|\n|504 |\tGateway Timeout |\t由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）|\n|505 |\tHTTP Version Not Supported |\t服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）|\n","source":"_posts/http-status-code.md","raw":"title: HTTP状态码详解\ndate: 2016-04-23 11:05:42\nauthor: Jelon\ntags: \n\t- HTTP\n\t- 网络状态码\ncategories: \n\t- Web技术\nthumbnail:\n---\n\n<!-- toc -->\n\n### 前言\n\n作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。\n\n<!-- more -->\n\n接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。\n\n### HTTP状态码表\n\n|  状态代码  | 状态信息 | 含义 |\n| :-------: |:--------:| :------ |\n|   &nbsp;&nbsp;&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp; | Continue            | 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）|\n|   101  | Switching Protocols |服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）|\n| 200    |  OK                 | 一切正常，对GET和POST请求的应答文档跟在后面。|\n|201\t  |Created |\t服务器已经创建了文档，Location头给出了它的URL。|\n|202 |\tAccepted\t| 已经接受请求，但处理尚未完成。|\n|203\t| Non-Authoritative Information\t| 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。|\n|204 |\tNo Content\t|没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。|\n|205 |\tReset Content\t | 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。\n|206\t|Partial Content |\t客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。|\n|300\t| Multiple Choices |\t客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。|\n|301 |\tMoved Permanently\t| 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。|\n|302\t| Found\t| 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http://host/~user（缺少了后面的斜杠），有的服务器 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。|\n|303 |\tSee Other\t| 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。|\n|304 |\tNot Modified\t | 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。|\n|305 |\tUse Proxy |\t客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。|\n|307 |\tTemporary Redirect\t| 和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）|\n|400 |\tBad Request |\t请求出现语法错误。|\n|401 |\tUnauthorized |\t客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。|\n|403 |\tForbidden |\t资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。|\n|404 |\tNot Found\t | 无法找到指定位置的资源。这也是一个常用的应答。|\n|405 |\tMethod Not Allowed\t | 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）|\n|406\t| Not Acceptable\t | 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。|\n|407 |\tProxy Authentication Required\t | 类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）|\n|408 |\tRequest Timeout |\t在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）|\n|409 |\tConflict |\t通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）|\n|410 |\tGone |\t所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）|\n|411 |\tLength Required |\t服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）|\n|412 |\tPrecondition Failed |\t请求头中指定的一些前提条件失败（HTTP 1.1新）。|\n|413 |\tRequest Entity Too Large |\t目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。|\n|414\t| Request URI Too Long |\tURI太长（HTTP 1.1新）。|\n|416 |\tRequested Range Not Satisfiable\t| 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）|\n|500 |\tInternal Server Error |\t服务器遇到了意料不到的情况，不能完成客户的请求。|\n|501 |\tNot Implemented |\t服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。|\n|502 |\tBad Gateway |\t服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。|\n|503 |\tService Unavailable |\t服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。|\n|504 |\tGateway Timeout |\t由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）|\n|505 |\tHTTP Version Not Supported |\t服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）|\n","slug":"http-status-code","published":1,"updated":"2016-04-23T11:05:42.000Z","_id":"cmduj3n2g000wk8sv5s6f5731","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#http%E7%8A%B6%E6%80%81%E7%A0%81%E8%A1%A8\">HTTP状态码表</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"前言\">前言</span></h3><p>作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。</p>\n<span id=\"more\"></span>\n\n<p>接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。</p>\n<h3><span id=\"http状态码表\">HTTP状态码表</span></h3><table>\n<thead>\n<tr>\n<th align=\"center\">状态代码</th>\n<th align=\"center\">状态信息</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&nbsp;&nbsp;&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp;</td>\n<td align=\"center\">Continue</td>\n<td align=\"left\">初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\">Switching Protocols</td>\n<td align=\"left\">服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">200</td>\n<td align=\"center\">OK</td>\n<td align=\"left\">一切正常，对GET和POST请求的应答文档跟在后面。</td>\n</tr>\n<tr>\n<td align=\"center\">201</td>\n<td align=\"center\">Created</td>\n<td align=\"left\">服务器已经创建了文档，Location头给出了它的URL。</td>\n</tr>\n<tr>\n<td align=\"center\">202</td>\n<td align=\"center\">Accepted</td>\n<td align=\"left\">已经接受请求，但处理尚未完成。</td>\n</tr>\n<tr>\n<td align=\"center\">203</td>\n<td align=\"center\">Non-Authoritative Information</td>\n<td align=\"left\">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">204</td>\n<td align=\"center\">No Content</td>\n<td align=\"left\">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>\n</tr>\n<tr>\n<td align=\"center\">205</td>\n<td align=\"center\">Reset Content</td>\n<td align=\"left\">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"center\">Partial Content</td>\n<td align=\"left\">客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">300</td>\n<td align=\"center\">Multiple Choices</td>\n<td align=\"left\">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td>\n</tr>\n<tr>\n<td align=\"center\">301</td>\n<td align=\"center\">Moved Permanently</td>\n<td align=\"left\">客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</td>\n</tr>\n<tr>\n<td align=\"center\">302</td>\n<td align=\"center\">Found</td>\n<td align=\"left\">类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href=\"http://host/~user%EF%BC%88%E7%BC%BA%E5%B0%91%E4%BA%86%E5%90%8E%E9%9D%A2%E7%9A%84%E6%96%9C%E6%9D%A0%EF%BC%89%EF%BC%8C%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8\">http://host/~user（缺少了后面的斜杠），有的服务器</a> 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</td>\n</tr>\n<tr>\n<td align=\"center\">303</td>\n<td align=\"center\">See Other</td>\n<td align=\"left\">类似于301&#x2F;302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">304</td>\n<td align=\"center\">Not Modified</td>\n<td align=\"left\">客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</td>\n</tr>\n<tr>\n<td align=\"center\">305</td>\n<td align=\"center\">Use Proxy</td>\n<td align=\"left\">客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">307</td>\n<td align=\"center\">Temporary Redirect</td>\n<td align=\"left\">和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">400</td>\n<td align=\"center\">Bad Request</td>\n<td align=\"left\">请求出现语法错误。</td>\n</tr>\n<tr>\n<td align=\"center\">401</td>\n<td align=\"center\">Unauthorized</td>\n<td align=\"left\">客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字&#x2F;密码对话框，然后在填 写合适的Authorization头后再次发出请求。</td>\n</tr>\n<tr>\n<td align=\"center\">403</td>\n<td align=\"center\">Forbidden</td>\n<td align=\"left\">资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td>\n</tr>\n<tr>\n<td align=\"center\">404</td>\n<td align=\"center\">Not Found</td>\n<td align=\"left\">无法找到指定位置的资源。这也是一个常用的应答。</td>\n</tr>\n<tr>\n<td align=\"center\">405</td>\n<td align=\"center\">Method Not Allowed</td>\n<td align=\"left\">请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">406</td>\n<td align=\"center\">Not Acceptable</td>\n<td align=\"left\">指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">407</td>\n<td align=\"center\">Proxy Authentication Required</td>\n<td align=\"left\">类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">408</td>\n<td align=\"center\">Request Timeout</td>\n<td align=\"left\">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">409</td>\n<td align=\"center\">Conflict</td>\n<td align=\"left\">通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">410</td>\n<td align=\"center\">Gone</td>\n<td align=\"left\">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">411</td>\n<td align=\"center\">Length Required</td>\n<td align=\"left\">服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">412</td>\n<td align=\"center\">Precondition Failed</td>\n<td align=\"left\">请求头中指定的一些前提条件失败（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">413</td>\n<td align=\"center\">Request Entity Too Large</td>\n<td align=\"left\">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">414</td>\n<td align=\"center\">Request URI Too Long</td>\n<td align=\"left\">URI太长（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">416</td>\n<td align=\"center\">Requested Range Not Satisfiable</td>\n<td align=\"left\">服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">500</td>\n<td align=\"center\">Internal Server Error</td>\n<td align=\"left\">服务器遇到了意料不到的情况，不能完成客户的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td align=\"center\">Not Implemented</td>\n<td align=\"left\">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</td>\n</tr>\n<tr>\n<td align=\"center\">502</td>\n<td align=\"center\">Bad Gateway</td>\n<td align=\"left\">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td>\n</tr>\n<tr>\n<td align=\"center\">503</td>\n<td align=\"center\">Service Unavailable</td>\n<td align=\"left\">服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。</td>\n</tr>\n<tr>\n<td align=\"center\">504</td>\n<td align=\"center\">Gateway Timeout</td>\n<td align=\"left\">由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">505</td>\n<td align=\"center\">HTTP Version Not Supported</td>\n<td align=\"left\">服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</td>\n</tr>\n</tbody></table>\n","excerpt":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#http%E7%8A%B6%E6%80%81%E7%A0%81%E8%A1%A8\">HTTP状态码表</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。</p>","more":"<p>接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。</p>\n<h3 id=\"HTTP状态码表\"><a href=\"#HTTP状态码表\" class=\"headerlink\" title=\"HTTP状态码表\"></a>HTTP状态码表</h3><table>\n<thead>\n<tr>\n<th align=\"center\">状态代码</th>\n<th align=\"center\">状态信息</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&nbsp;&nbsp;&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp;</td>\n<td align=\"center\">Continue</td>\n<td align=\"left\">初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\">Switching Protocols</td>\n<td align=\"left\">服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">200</td>\n<td align=\"center\">OK</td>\n<td align=\"left\">一切正常，对GET和POST请求的应答文档跟在后面。</td>\n</tr>\n<tr>\n<td align=\"center\">201</td>\n<td align=\"center\">Created</td>\n<td align=\"left\">服务器已经创建了文档，Location头给出了它的URL。</td>\n</tr>\n<tr>\n<td align=\"center\">202</td>\n<td align=\"center\">Accepted</td>\n<td align=\"left\">已经接受请求，但处理尚未完成。</td>\n</tr>\n<tr>\n<td align=\"center\">203</td>\n<td align=\"center\">Non-Authoritative Information</td>\n<td align=\"left\">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">204</td>\n<td align=\"center\">No Content</td>\n<td align=\"left\">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>\n</tr>\n<tr>\n<td align=\"center\">205</td>\n<td align=\"center\">Reset Content</td>\n<td align=\"left\">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"center\">Partial Content</td>\n<td align=\"left\">客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">300</td>\n<td align=\"center\">Multiple Choices</td>\n<td align=\"left\">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td>\n</tr>\n<tr>\n<td align=\"center\">301</td>\n<td align=\"center\">Moved Permanently</td>\n<td align=\"left\">客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</td>\n</tr>\n<tr>\n<td align=\"center\">302</td>\n<td align=\"center\">Found</td>\n<td align=\"left\">类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href=\"http://host/~user%EF%BC%88%E7%BC%BA%E5%B0%91%E4%BA%86%E5%90%8E%E9%9D%A2%E7%9A%84%E6%96%9C%E6%9D%A0%EF%BC%89%EF%BC%8C%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8\">http://host/~user（缺少了后面的斜杠），有的服务器</a> 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</td>\n</tr>\n<tr>\n<td align=\"center\">303</td>\n<td align=\"center\">See Other</td>\n<td align=\"left\">类似于301&#x2F;302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">304</td>\n<td align=\"center\">Not Modified</td>\n<td align=\"left\">客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</td>\n</tr>\n<tr>\n<td align=\"center\">305</td>\n<td align=\"center\">Use Proxy</td>\n<td align=\"left\">客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">307</td>\n<td align=\"center\">Temporary Redirect</td>\n<td align=\"left\">和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">400</td>\n<td align=\"center\">Bad Request</td>\n<td align=\"left\">请求出现语法错误。</td>\n</tr>\n<tr>\n<td align=\"center\">401</td>\n<td align=\"center\">Unauthorized</td>\n<td align=\"left\">客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字&#x2F;密码对话框，然后在填 写合适的Authorization头后再次发出请求。</td>\n</tr>\n<tr>\n<td align=\"center\">403</td>\n<td align=\"center\">Forbidden</td>\n<td align=\"left\">资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td>\n</tr>\n<tr>\n<td align=\"center\">404</td>\n<td align=\"center\">Not Found</td>\n<td align=\"left\">无法找到指定位置的资源。这也是一个常用的应答。</td>\n</tr>\n<tr>\n<td align=\"center\">405</td>\n<td align=\"center\">Method Not Allowed</td>\n<td align=\"left\">请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">406</td>\n<td align=\"center\">Not Acceptable</td>\n<td align=\"left\">指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">407</td>\n<td align=\"center\">Proxy Authentication Required</td>\n<td align=\"left\">类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">408</td>\n<td align=\"center\">Request Timeout</td>\n<td align=\"left\">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">409</td>\n<td align=\"center\">Conflict</td>\n<td align=\"left\">通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">410</td>\n<td align=\"center\">Gone</td>\n<td align=\"left\">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">411</td>\n<td align=\"center\">Length Required</td>\n<td align=\"left\">服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">412</td>\n<td align=\"center\">Precondition Failed</td>\n<td align=\"left\">请求头中指定的一些前提条件失败（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">413</td>\n<td align=\"center\">Request Entity Too Large</td>\n<td align=\"left\">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">414</td>\n<td align=\"center\">Request URI Too Long</td>\n<td align=\"left\">URI太长（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td align=\"center\">416</td>\n<td align=\"center\">Requested Range Not Satisfiable</td>\n<td align=\"left\">服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">500</td>\n<td align=\"center\">Internal Server Error</td>\n<td align=\"left\">服务器遇到了意料不到的情况，不能完成客户的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td align=\"center\">Not Implemented</td>\n<td align=\"left\">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</td>\n</tr>\n<tr>\n<td align=\"center\">502</td>\n<td align=\"center\">Bad Gateway</td>\n<td align=\"left\">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td>\n</tr>\n<tr>\n<td align=\"center\">503</td>\n<td align=\"center\">Service Unavailable</td>\n<td align=\"left\">服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。</td>\n</tr>\n<tr>\n<td align=\"center\">504</td>\n<td align=\"center\">Gateway Timeout</td>\n<td align=\"left\">由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td align=\"center\">505</td>\n<td align=\"center\">HTTP Version Not Supported</td>\n<td align=\"left\">服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</td>\n</tr>\n</tbody></table>"},{"title":"关于新博客","date":"2016-03-12T16:10:21.000Z","_content":"\n<!-- toc -->\n\n### 写独立博客\n\n自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。\n<!-- more -->\n\n### 此次改版\n\n其实，Hexo静态博客程序我已经早有听说，直接将写成博客页面免费挂到github上非常方便。正因为此，这次我又将博客从typecho迁移到了hexo，然后在重新申请了域名jelon.top（华夏名网上申请的，4块多一年，还是很便宜的）。\n\n### 博客用途\n\n做这个博客呢，其实也没有多大的用途，主要用途其实也无非以下两点：\n\n- 技术积累分享\n- 生活琐事记录 \n\n因此，我把博客简单分成了两个板块，Web技术和生活琐事。无论工作上的事情、生活上的事情，甚至感情上的事情都可以写在上面。不想用其他第三方博客平台的我，用Hexo搭建自己的博客，时不时也可以折腾一下，改改主题、写写文章什么的。\n\n\n\n","source":"_posts/hello-new-blog.md","raw":"title: 关于新博客\ndate: 2016-03-12 16:10:21\ntags: \n\t- 新博客\n\t- Hexo\ncategories:\n\t- 生活琐事\n\t\n---\n\n<!-- toc -->\n\n### 写独立博客\n\n自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。\n<!-- more -->\n\n### 此次改版\n\n其实，Hexo静态博客程序我已经早有听说，直接将写成博客页面免费挂到github上非常方便。正因为此，这次我又将博客从typecho迁移到了hexo，然后在重新申请了域名jelon.top（华夏名网上申请的，4块多一年，还是很便宜的）。\n\n### 博客用途\n\n做这个博客呢，其实也没有多大的用途，主要用途其实也无非以下两点：\n\n- 技术积累分享\n- 生活琐事记录 \n\n因此，我把博客简单分成了两个板块，Web技术和生活琐事。无论工作上的事情、生活上的事情，甚至感情上的事情都可以写在上面。不想用其他第三方博客平台的我，用Hexo搭建自己的博客，时不时也可以折腾一下，改改主题、写写文章什么的。\n\n\n\n","slug":"hello-new-blog","published":1,"updated":"2016-03-12T16:10:21.000Z","_id":"cmduj3n2h000yk8sv29ete0ga","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%86%99%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2\">写独立博客</a></li>\n<li><a href=\"#%E6%AD%A4%E6%AC%A1%E6%94%B9%E7%89%88\">此次改版</a></li>\n<li><a href=\"#%E5%8D%9A%E5%AE%A2%E7%94%A8%E9%80%94\">博客用途</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"写独立博客\">写独立博客</span></h3><p>自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。</p>\n<span id=\"more\"></span>\n\n<h3><span id=\"此次改版\">此次改版</span></h3><p>其实，Hexo静态博客程序我已经早有听说，直接将写成博客页面免费挂到github上非常方便。正因为此，这次我又将博客从typecho迁移到了hexo，然后在重新申请了域名jelon.top（华夏名网上申请的，4块多一年，还是很便宜的）。</p>\n<h3><span id=\"博客用途\">博客用途</span></h3><p>做这个博客呢，其实也没有多大的用途，主要用途其实也无非以下两点：</p>\n<ul>\n<li>技术积累分享</li>\n<li>生活琐事记录</li>\n</ul>\n<p>因此，我把博客简单分成了两个板块，Web技术和生活琐事。无论工作上的事情、生活上的事情，甚至感情上的事情都可以写在上面。不想用其他第三方博客平台的我，用Hexo搭建自己的博客，时不时也可以折腾一下，改改主题、写写文章什么的。</p>\n","excerpt":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%86%99%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2\">写独立博客</a></li>\n<li><a href=\"#%E6%AD%A4%E6%AC%A1%E6%94%B9%E7%89%88\">此次改版</a></li>\n<li><a href=\"#%E5%8D%9A%E5%AE%A2%E7%94%A8%E9%80%94\">博客用途</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"写独立博客\"><a href=\"#写独立博客\" class=\"headerlink\" title=\"写独立博客\"></a>写独立博客</h3><p>自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。</p>","more":"<h3 id=\"此次改版\"><a href=\"#此次改版\" class=\"headerlink\" title=\"此次改版\"></a>此次改版</h3><p>其实，Hexo静态博客程序我已经早有听说，直接将写成博客页面免费挂到github上非常方便。正因为此，这次我又将博客从typecho迁移到了hexo，然后在重新申请了域名jelon.top（华夏名网上申请的，4块多一年，还是很便宜的）。</p>\n<h3 id=\"博客用途\"><a href=\"#博客用途\" class=\"headerlink\" title=\"博客用途\"></a>博客用途</h3><p>做这个博客呢，其实也没有多大的用途，主要用途其实也无非以下两点：</p>\n<ul>\n<li>技术积累分享</li>\n<li>生活琐事记录</li>\n</ul>\n<p>因此，我把博客简单分成了两个板块，Web技术和生活琐事。无论工作上的事情、生活上的事情，甚至感情上的事情都可以写在上面。不想用其他第三方博客平台的我，用Hexo搭建自己的博客，时不时也可以折腾一下，改改主题、写写文章什么的。</p>"},{"title":"通过 jQuery 获取浏览器窗口高度问题","author":"Jelon","date":"2016-08-06T00:00:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg","blogexcerpt":"我曾经在使用 jQuery 一些东西的时候碰到了这样一些奇怪的问题。那就是我尝试着用jQuery的 `$(window).height()` 来获取浏览器窗口高度。理论上，`$(window).height()` 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化...","_content":"\n本文由 Jelon 翻译自 VIRAL PATEL 的[jQuery window height is not correct](http://viralpatel.net/blogs/jquery-window-height-incorrect/)。\n\n![jQuery-window-height](https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg)\n\n我曾经在使用jQuery一些东西的时候碰到了这样一些奇怪的问题。例如，我尝试着用 jQuery 的 `$(window).height()` 来获取浏览器窗口高度，就遇到了问题。\n\n理论上，`$(window).height()` 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化。\n\n同理，你可以用 `$(document).height()` ，这个方法可以返回已渲染\n之后页面的高度。当网页的高度小于窗口可视区域的高度时，这个方法会返回的是可视区域的高度值。也就是说，当页面的内容很少、窗口大于内容所需要的空间的时候，网页高度会比 jQuery 浏览器高度要小。\n\n### 问题\n\n但是最近在使用这两个值得时候，好像 `$(window).height()` 和 `$(document).height()` 得到的是一样的值。明显，`$(window).height()` 返回了一个不正确的值。\n\n源代码如下：\n\n```html\n<html>\n<head>\n  <script type='text/javascript' src='http://code.jquery.com/jquery-1.10.1.js'></script>\n\n\n<script type='text/javascript'>\n\n$(document).ready(function(){\n    $('#winheight').text($(window).height());\n    $('#docheight').text($(document).height());\n});\n\n</script>\n</head>\n<body>\n  <div id=\"console\">\n    $(window).height() = <span id=\"winheight\"></span> <br/>\n    $(document).height() = <span id=\"docheight\"></span>\n</div>\n\n<p>Lorem ipsum dolor sit amet, ...\n</body>\n</html>\n```\n\n结果如下：\n\n```\n$(window).height() = 672 \n$(document).height() = 672\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus orci sit amet iaculis. Etiam at libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt orci pellentesque. Aenean dictum lobortis aliquet. Nullam blandit rhoncus orci, posuere facilisis nibh placerat et. Etiam sed justo vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales dictum ipsum nec vehicula. In hac habitasse platea dictumst. Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet scelerisque enim iaculis a. Cras sed pharetra enim, sed bibendum massa. Aliquam laoreet elit ac placerat pellentesque.\n\nPellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla diam augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur scelerisque lorem id sagittis imperdiet.\n\nUt convallis justo id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam bibendum tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec ornare fermentum, velit leo pulvinar neque, eu fermentum eros orci a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.\n\nMorbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor bibendum elit eu consequat. Mauris blandit est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in justo condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec justo faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere orci tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus justo eget augue malesuada, at laoreet nibh dapibus.\n\nDonec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in diam et pretium. Etiam bibendum elit at iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.\n```\n\n神马？！结果 `$(window).height()` 和 `$(document).height()` 竟然都返回750。窗口高度不应该是这个值，而应该是200px。很明显，页面document会更大一些，因为它有滚动条。\n\n那么问题来了，为神马 jQuery 对于 window 和 document 都得到一样的高度？事实上，少了某个简单的东西。\n\n### 解决\n\n因为我们的 HTML 页面里面没有做 DOCTYPE 声明，所以可以这么说它不是一个有效的 HTML 。如果 doctype 没有指定文档类型，jQuery 也不会正确的计算 window height 和 document height 。`<!DOCTYPE html>` 声明不是一个HTML标签；它是什么版本的HTML页面是用Web浏览器的指令。\n\n所以，我们就试一下，把这个指令加到html页面里面，然后看看结果怎么样。\n\n代码如下：\n\n```html\n<!DOCTYPE HTML>\n<html>\n\n//.. \n</html>\n```\n\n结果如下：\n\n```\n$(window).height() = 200 \n$(document).height() = 672\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus orci sit amet iaculis. Etiam at libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt orci pellentesque. Aenean dictum lobortis aliquet. Nullam blandit rhoncus orci, posuere facilisis nibh placerat et. Etiam sed justo vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales dictum ipsum nec vehicula. In hac habitasse platea dictumst. Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet scelerisque enim iaculis a. Cras sed pharetra enim, sed bibendum massa. Aliquam laoreet elit ac placerat pellentesque.\n\nPellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla diam augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur scelerisque lorem id sagittis imperdiet.\n\nUt convallis justo id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam bibendum tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec ornare fermentum, velit leo pulvinar neque, eu fermentum eros orci a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.\n\nMorbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor bibendum elit eu consequat. Mauris blandit est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in justo condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec justo faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere orci tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus justo eget augue malesuada, at laoreet nibh dapibus.\n\nDonec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in diam et pretium. Etiam bibendum elit at iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.\n```\n\n哇擦，居然真行。所以呀，不要忘记在你的 html 页面加上 DOCTYPE 声明。最好使用一些 IDE 编辑器什么的帮你去创建 html 文件，因为这些编辑器会自动帮你检查这个。\n\n\n\n\n\n\n\n\n","source":"_posts/jquery-window-height-incorrect.md","raw":"---\ntitle: 通过 jQuery 获取浏览器窗口高度问题\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-08-06\ntags: \n\t- jQuery\n\t- 浏览器高度\nthumbnail: https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg\nblogexcerpt: 我曾经在使用 jQuery 一些东西的时候碰到了这样一些奇怪的问题。那就是我尝试着用jQuery的 `$(window).height()` 来获取浏览器窗口高度。理论上，`$(window).height()` 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化...\n\n---\n\n本文由 Jelon 翻译自 VIRAL PATEL 的[jQuery window height is not correct](http://viralpatel.net/blogs/jquery-window-height-incorrect/)。\n\n![jQuery-window-height](https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg)\n\n我曾经在使用jQuery一些东西的时候碰到了这样一些奇怪的问题。例如，我尝试着用 jQuery 的 `$(window).height()` 来获取浏览器窗口高度，就遇到了问题。\n\n理论上，`$(window).height()` 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化。\n\n同理，你可以用 `$(document).height()` ，这个方法可以返回已渲染\n之后页面的高度。当网页的高度小于窗口可视区域的高度时，这个方法会返回的是可视区域的高度值。也就是说，当页面的内容很少、窗口大于内容所需要的空间的时候，网页高度会比 jQuery 浏览器高度要小。\n\n### 问题\n\n但是最近在使用这两个值得时候，好像 `$(window).height()` 和 `$(document).height()` 得到的是一样的值。明显，`$(window).height()` 返回了一个不正确的值。\n\n源代码如下：\n\n```html\n<html>\n<head>\n  <script type='text/javascript' src='http://code.jquery.com/jquery-1.10.1.js'></script>\n\n\n<script type='text/javascript'>\n\n$(document).ready(function(){\n    $('#winheight').text($(window).height());\n    $('#docheight').text($(document).height());\n});\n\n</script>\n</head>\n<body>\n  <div id=\"console\">\n    $(window).height() = <span id=\"winheight\"></span> <br/>\n    $(document).height() = <span id=\"docheight\"></span>\n</div>\n\n<p>Lorem ipsum dolor sit amet, ...\n</body>\n</html>\n```\n\n结果如下：\n\n```\n$(window).height() = 672 \n$(document).height() = 672\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus orci sit amet iaculis. Etiam at libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt orci pellentesque. Aenean dictum lobortis aliquet. Nullam blandit rhoncus orci, posuere facilisis nibh placerat et. Etiam sed justo vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales dictum ipsum nec vehicula. In hac habitasse platea dictumst. Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet scelerisque enim iaculis a. Cras sed pharetra enim, sed bibendum massa. Aliquam laoreet elit ac placerat pellentesque.\n\nPellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla diam augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur scelerisque lorem id sagittis imperdiet.\n\nUt convallis justo id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam bibendum tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec ornare fermentum, velit leo pulvinar neque, eu fermentum eros orci a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.\n\nMorbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor bibendum elit eu consequat. Mauris blandit est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in justo condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec justo faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere orci tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus justo eget augue malesuada, at laoreet nibh dapibus.\n\nDonec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in diam et pretium. Etiam bibendum elit at iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.\n```\n\n神马？！结果 `$(window).height()` 和 `$(document).height()` 竟然都返回750。窗口高度不应该是这个值，而应该是200px。很明显，页面document会更大一些，因为它有滚动条。\n\n那么问题来了，为神马 jQuery 对于 window 和 document 都得到一样的高度？事实上，少了某个简单的东西。\n\n### 解决\n\n因为我们的 HTML 页面里面没有做 DOCTYPE 声明，所以可以这么说它不是一个有效的 HTML 。如果 doctype 没有指定文档类型，jQuery 也不会正确的计算 window height 和 document height 。`<!DOCTYPE html>` 声明不是一个HTML标签；它是什么版本的HTML页面是用Web浏览器的指令。\n\n所以，我们就试一下，把这个指令加到html页面里面，然后看看结果怎么样。\n\n代码如下：\n\n```html\n<!DOCTYPE HTML>\n<html>\n\n//.. \n</html>\n```\n\n结果如下：\n\n```\n$(window).height() = 200 \n$(document).height() = 672\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus orci sit amet iaculis. Etiam at libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt orci pellentesque. Aenean dictum lobortis aliquet. Nullam blandit rhoncus orci, posuere facilisis nibh placerat et. Etiam sed justo vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales dictum ipsum nec vehicula. In hac habitasse platea dictumst. Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet scelerisque enim iaculis a. Cras sed pharetra enim, sed bibendum massa. Aliquam laoreet elit ac placerat pellentesque.\n\nPellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla diam augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur scelerisque lorem id sagittis imperdiet.\n\nUt convallis justo id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam bibendum tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec ornare fermentum, velit leo pulvinar neque, eu fermentum eros orci a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.\n\nMorbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor bibendum elit eu consequat. Mauris blandit est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in justo condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec justo faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere orci tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus justo eget augue malesuada, at laoreet nibh dapibus.\n\nDonec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in diam et pretium. Etiam bibendum elit at iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.\n```\n\n哇擦，居然真行。所以呀，不要忘记在你的 html 页面加上 DOCTYPE 声明。最好使用一些 IDE 编辑器什么的帮你去创建 html 文件，因为这些编辑器会自动帮你检查这个。\n\n\n\n\n\n\n\n\n","slug":"jquery-window-height-incorrect","published":1,"updated":"2016-08-06T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2j0012k8sv2p700sw4","content":"<p>本文由 Jelon 翻译自 VIRAL PATEL 的<a href=\"http://viralpatel.net/blogs/jquery-window-height-incorrect/\">jQuery window height is not correct</a>。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg\" alt=\"jQuery-window-height\"></p>\n<p>我曾经在使用jQuery一些东西的时候碰到了这样一些奇怪的问题。例如，我尝试着用 jQuery 的 <code>$(window).height()</code> 来获取浏览器窗口高度，就遇到了问题。</p>\n<p>理论上，<code>$(window).height()</code> 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化。</p>\n<p>同理，你可以用 <code>$(document).height()</code> ，这个方法可以返回已渲染<br>之后页面的高度。当网页的高度小于窗口可视区域的高度时，这个方法会返回的是可视区域的高度值。也就是说，当页面的内容很少、窗口大于内容所需要的空间的时候，网页高度会比 jQuery 浏览器高度要小。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>但是最近在使用这两个值得时候，好像 <code>$(window).height()</code> 和 <code>$(document).height()</code> 得到的是一样的值。明显，<code>$(window).height()</code> 返回了一个不正确的值。</p>\n<p>源代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;http://code.jquery.com/jquery-1.10.1.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">&#x27;#winheight&#x27;</span>).text($(<span class=\"built_in\">window</span>).height());</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">&#x27;#docheight&#x27;</span>).text($(<span class=\"built_in\">document</span>).height());</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;console&quot;</span>&gt;</span></span><br><span class=\"line\">    $(window).height() = <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;winheight&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    $(document).height() = <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;docheight&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).height() = <span class=\"number\">672</span> </span><br><span class=\"line\">$(document).height() = <span class=\"number\">672</span></span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class=\"keyword\">orci </span>sit amet iaculis. Etiam <span class=\"built_in\">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class=\"keyword\">orci </span>pellentesque. Aenean <span class=\"keyword\">dictum </span>lobortis aliquet. Nullam <span class=\"keyword\">blandit </span>rhoncus <span class=\"keyword\">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class=\"keyword\">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class=\"keyword\">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class=\"keyword\">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class=\"keyword\">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class=\"keyword\">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</span><br><span class=\"line\"></span><br><span class=\"line\">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class=\"keyword\">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class=\"keyword\">scelerisque </span>lorem id sagittis imperdiet.</span><br><span class=\"line\"></span><br><span class=\"line\">Ut convallis <span class=\"keyword\">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class=\"keyword\">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class=\"keyword\">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class=\"keyword\">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</span><br><span class=\"line\"></span><br><span class=\"line\">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class=\"keyword\">bibendum </span>elit eu consequat. Mauris <span class=\"keyword\">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class=\"keyword\">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class=\"keyword\">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class=\"keyword\">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class=\"keyword\">justo </span>eget augue malesuada, <span class=\"built_in\">at</span> laoreet nibh dapibus.</span><br><span class=\"line\"></span><br><span class=\"line\">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class=\"keyword\">diam </span>et pretium. Etiam <span class=\"keyword\">bibendum </span>elit <span class=\"built_in\">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</span><br></pre></td></tr></table></figure>\n\n<p>神马？！结果 <code>$(window).height()</code> 和 <code>$(document).height()</code> 竟然都返回750。窗口高度不应该是这个值，而应该是200px。很明显，页面document会更大一些，因为它有滚动条。</p>\n<p>那么问题来了，为神马 jQuery 对于 window 和 document 都得到一样的高度？事实上，少了某个简单的东西。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>因为我们的 HTML 页面里面没有做 DOCTYPE 声明，所以可以这么说它不是一个有效的 HTML 。如果 doctype 没有指定文档类型，jQuery 也不会正确的计算 window height 和 document height 。<code>&lt;!DOCTYPE html&gt;</code> 声明不是一个HTML标签；它是什么版本的HTML页面是用Web浏览器的指令。</p>\n<p>所以，我们就试一下，把这个指令加到html页面里面，然后看看结果怎么样。</p>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//.. </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).height() = <span class=\"number\">200</span> </span><br><span class=\"line\">$(document).height() = <span class=\"number\">672</span></span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class=\"keyword\">orci </span>sit amet iaculis. Etiam <span class=\"built_in\">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class=\"keyword\">orci </span>pellentesque. Aenean <span class=\"keyword\">dictum </span>lobortis aliquet. Nullam <span class=\"keyword\">blandit </span>rhoncus <span class=\"keyword\">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class=\"keyword\">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class=\"keyword\">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class=\"keyword\">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class=\"keyword\">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class=\"keyword\">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</span><br><span class=\"line\"></span><br><span class=\"line\">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class=\"keyword\">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class=\"keyword\">scelerisque </span>lorem id sagittis imperdiet.</span><br><span class=\"line\"></span><br><span class=\"line\">Ut convallis <span class=\"keyword\">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class=\"keyword\">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class=\"keyword\">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class=\"keyword\">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</span><br><span class=\"line\"></span><br><span class=\"line\">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class=\"keyword\">bibendum </span>elit eu consequat. Mauris <span class=\"keyword\">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class=\"keyword\">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class=\"keyword\">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class=\"keyword\">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class=\"keyword\">justo </span>eget augue malesuada, <span class=\"built_in\">at</span> laoreet nibh dapibus.</span><br><span class=\"line\"></span><br><span class=\"line\">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class=\"keyword\">diam </span>et pretium. Etiam <span class=\"keyword\">bibendum </span>elit <span class=\"built_in\">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</span><br></pre></td></tr></table></figure>\n\n<p>哇擦，居然真行。所以呀，不要忘记在你的 html 页面加上 DOCTYPE 声明。最好使用一些 IDE 编辑器什么的帮你去创建 html 文件，因为这些编辑器会自动帮你检查这个。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文由 Jelon 翻译自 VIRAL PATEL 的<a href=\"http://viralpatel.net/blogs/jquery-window-height-incorrect/\">jQuery window height is not correct</a>。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/jquery-window-height-incorrect/1.jpg\" alt=\"jQuery-window-height\"></p>\n<p>我曾经在使用jQuery一些东西的时候碰到了这样一些奇怪的问题。例如，我尝试着用 jQuery 的 <code>$(window).height()</code> 来获取浏览器窗口高度，就遇到了问题。</p>\n<p>理论上，<code>$(window).height()</code> 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化。</p>\n<p>同理，你可以用 <code>$(document).height()</code> ，这个方法可以返回已渲染<br>之后页面的高度。当网页的高度小于窗口可视区域的高度时，这个方法会返回的是可视区域的高度值。也就是说，当页面的内容很少、窗口大于内容所需要的空间的时候，网页高度会比 jQuery 浏览器高度要小。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>但是最近在使用这两个值得时候，好像 <code>$(window).height()</code> 和 <code>$(document).height()</code> 得到的是一样的值。明显，<code>$(window).height()</code> 返回了一个不正确的值。</p>\n<p>源代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;http://code.jquery.com/jquery-1.10.1.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">&#x27;#winheight&#x27;</span>).text($(<span class=\"built_in\">window</span>).height());</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">&#x27;#docheight&#x27;</span>).text($(<span class=\"built_in\">document</span>).height());</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;console&quot;</span>&gt;</span></span><br><span class=\"line\">    $(window).height() = <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;winheight&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    $(document).height() = <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;docheight&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).height() = <span class=\"number\">672</span> </span><br><span class=\"line\">$(document).height() = <span class=\"number\">672</span></span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class=\"keyword\">orci </span>sit amet iaculis. Etiam <span class=\"built_in\">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class=\"keyword\">orci </span>pellentesque. Aenean <span class=\"keyword\">dictum </span>lobortis aliquet. Nullam <span class=\"keyword\">blandit </span>rhoncus <span class=\"keyword\">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class=\"keyword\">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class=\"keyword\">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class=\"keyword\">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class=\"keyword\">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class=\"keyword\">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</span><br><span class=\"line\"></span><br><span class=\"line\">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class=\"keyword\">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class=\"keyword\">scelerisque </span>lorem id sagittis imperdiet.</span><br><span class=\"line\"></span><br><span class=\"line\">Ut convallis <span class=\"keyword\">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class=\"keyword\">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class=\"keyword\">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class=\"keyword\">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</span><br><span class=\"line\"></span><br><span class=\"line\">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class=\"keyword\">bibendum </span>elit eu consequat. Mauris <span class=\"keyword\">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class=\"keyword\">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class=\"keyword\">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class=\"keyword\">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class=\"keyword\">justo </span>eget augue malesuada, <span class=\"built_in\">at</span> laoreet nibh dapibus.</span><br><span class=\"line\"></span><br><span class=\"line\">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class=\"keyword\">diam </span>et pretium. Etiam <span class=\"keyword\">bibendum </span>elit <span class=\"built_in\">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</span><br></pre></td></tr></table></figure>\n\n<p>神马？！结果 <code>$(window).height()</code> 和 <code>$(document).height()</code> 竟然都返回750。窗口高度不应该是这个值，而应该是200px。很明显，页面document会更大一些，因为它有滚动条。</p>\n<p>那么问题来了，为神马 jQuery 对于 window 和 document 都得到一样的高度？事实上，少了某个简单的东西。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>因为我们的 HTML 页面里面没有做 DOCTYPE 声明，所以可以这么说它不是一个有效的 HTML 。如果 doctype 没有指定文档类型，jQuery 也不会正确的计算 window height 和 document height 。<code>&lt;!DOCTYPE html&gt;</code> 声明不是一个HTML标签；它是什么版本的HTML页面是用Web浏览器的指令。</p>\n<p>所以，我们就试一下，把这个指令加到html页面里面，然后看看结果怎么样。</p>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//.. </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(window).height() = <span class=\"number\">200</span> </span><br><span class=\"line\">$(document).height() = <span class=\"number\">672</span></span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class=\"keyword\">orci </span>sit amet iaculis. Etiam <span class=\"built_in\">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class=\"keyword\">orci </span>pellentesque. Aenean <span class=\"keyword\">dictum </span>lobortis aliquet. Nullam <span class=\"keyword\">blandit </span>rhoncus <span class=\"keyword\">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class=\"keyword\">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class=\"keyword\">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class=\"keyword\">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class=\"keyword\">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class=\"keyword\">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</span><br><span class=\"line\"></span><br><span class=\"line\">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class=\"keyword\">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class=\"keyword\">scelerisque </span>lorem id sagittis imperdiet.</span><br><span class=\"line\"></span><br><span class=\"line\">Ut convallis <span class=\"keyword\">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class=\"keyword\">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class=\"keyword\">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class=\"keyword\">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</span><br><span class=\"line\"></span><br><span class=\"line\">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class=\"keyword\">bibendum </span>elit eu consequat. Mauris <span class=\"keyword\">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class=\"keyword\">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class=\"keyword\">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class=\"keyword\">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class=\"keyword\">justo </span>eget augue malesuada, <span class=\"built_in\">at</span> laoreet nibh dapibus.</span><br><span class=\"line\"></span><br><span class=\"line\">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class=\"keyword\">diam </span>et pretium. Etiam <span class=\"keyword\">bibendum </span>elit <span class=\"built_in\">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</span><br></pre></td></tr></table></figure>\n\n<p>哇擦，居然真行。所以呀，不要忘记在你的 html 页面加上 DOCTYPE 声明。最好使用一些 IDE 编辑器什么的帮你去创建 html 文件，因为这些编辑器会自动帮你检查这个。</p>\n"},{"title":"JavaScript 最全编码规范","date":"2016-03-13T12:22:12.000Z","_content":"\n<!-- toc -->\n\n### 类型\n\n基本类型：访问基本类型时，应该直接操作类型值\n\n- string\n- number\n- boolean\n- null\n- undefined\n\n\n<!-- more -->\n\n\n```javascript\nvar foo = [1, 2];\nvar bar = foo;\nbar[0] = 9;\nconsole.log(foo[0], bar[0]); // => 9, 9\n```\n\n复合类型：访问复合类型时，应该操作其引用\n\n- object\n- array\n- function\n\n### 对象\n\n使用字面量语法创建\n\n```javascript\n// bad\nvar item = new Object();\n// good\nvar item = {};\n```\n\n不要使用保留字，在 IE8 中不起作用\n\n```javascript\n// bad\nvar superman = {\n  default: { clark: 'kent' },\n  private: true\n};\n\n// good\nvar superman = {\n  defaults: { clark: 'kent' },\n  hidden: true\n};\n```\n\n使用易读的同义词代替保留字\n\n```javascript\n// bad\nvar superman = {\n  c1ass: 'alien'\n};\n\n// bad\nvar superman = {\n  klass: 'alien'\n};\n\n// good\nvar superman = {\n  type: 'alien'\n};\n\n```\n\n### 数组\n\n使用字面量语法创建数组\n\n```javascript\n// bad\nvar items = new Array();\n\n// good\nvar items = [];\n```\n\n添加数组元素时，使用 push 而不是直接添加\n\n```javascript\nvar someStack = [];\n\n\n// bad\nsomeStack[someStack.length] = 'abracadabra';\n\n// good\nsomeStack.push('abracadabra');\n```\n\n需要复制数组时，可以使用 slice\n\n```javascript\nvar len = items.length;\nvar itemsCopy = [];\nvar i;\n\n// bad\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nitemsCopy = items.slice();\n```\n\n使用 slice 将类数组对象转为数组\n\n```javascript\nfunction trigger() {\n  var args = Array.prototype.slice.call(arguments);\n  ...\n}\n```\n\n### 字符串\n\n对字符串使用单引号\n\n```javascript\n// bad\nvar name = \"Bob Parr\";\n\n// good\nvar name = 'Bob Parr';\n\n// bad\nvar fullName = \"Bob \" + this.lastName;\n\n// good\nvar fullName = 'Bob ' + this.lastName;\n```\n\n超过80个字符的字符串应该使用字符串连接符进行跨行\n\n注意：对长字符串过度使用连接符将会影响性能。相关的文章和主题讨论： jsPerf & Discussion.\n\n```javascript\n// bad\nvar errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n\n// bad\nvar errorMessage = 'This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// good\nvar errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n```\n\n以编程方式创建字符串的时应该使用 Array 的 join 方法而不是通过连接符，尤其是在 IE 中\n\n```javascript\nvar items;\nvar messages;\nvar length;\nvar i;\n\nmessages = [{\n  state: 'success',\n  message: 'This one worked.'\n}, {\n  state: 'success',\n  message: 'This one worked as well.'\n}, {\n  state: 'error',\n  message: 'This one did not work.'\n}];\n\nlength = messages.length;\n\n// bad\nfunction inbox(messages) {\n  items = '<ul>';\n\n  for (i = 0; i < length; i++) {\n    items += '<li>' + messages[i].message + '</li>';\n  }\n\n  return items + '</ul>';\n}\n\n// good\nfunction inbox(messages) {\n  items = [];\n\n  for (i = 0; i < length; i++) {\n    items[i] = '<li>' + messages[i].message + '</li>';\n  }\n\n  return '<ul>' + items.join('') + '</ul>';\n}\n// very good\nfunction inbox(messages) {\n  items = [];\n  for (i = 0, len = messages.length; i < len; i++) {\n    items.push('<li>' + messages[i].message + '</li>';);\n  }\n  return '<ul>' + items.join('') + '</ul>';\n}\n```\n\n### 函数\n\n函数表达式\n\n```javascript\n// anonymous function expression\nvar anonymous = function() {\n  return true;\n};\n\n// named function expression\nvar named = function named() {\n  return true;\n};\n\n// immediately-invoked function expression (IIFE)\n(function() {\n  console.log('Welcome to the Internet. Please follow me.');\n})();\n```\n\n不要在非函数块中 (if, while, etc) 声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它\n\n注意：ECMA-262 把块定义为一组语句，但函数声明不是一个语句： Read ECMA-262’s note on this issue.\n\n```javascript\n// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good\nvar test;\nif (currentUser) {\n  test = function test() {\n    console.log('Yup.');\n  };\n}\n```\n\n不要命名一个参数为 arguments ，否则它将优先于传递给每个函数作用域中的 arguments 对象\n\n```javascript\n// bad\nfunction nope(name, options, arguments) {\n  // ...stuff...\n}\n\n// good\nfunction yup(name, options, args) {\n  // ...stuff...\n}\n```\n\n### 属性\n\n使用点表示法访问属性\n\n```javascript\nvar luke = {\n  jedi: true,\n  age: 28\n};\n\n// bad\nvar isJedi = luke['jedi'];\n\n// good\nvar isJedi = luke.jedi;\n```\n\n用变量访问属性时要使用下标表示法([])\n\n```javascript\nvar luke = {\n  jedi: true,\n  age: 28\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nvar isJedi = getProp('jedi');\n```\n\n### 变量\n\n总是使用 var 声明变量，不然其将变为全局变量。我们要想办法避免全局空间污染\n\n```javascript\n// bad\nsuperPower = new SuperPower();\n\n// good\nvar superPower = new SuperPower();\n```\n\n使用 var 声明每个变量，这样很容易添加新的变量声明，而不用去担心用 a; 替换 a \n\n```javascript\n// bad\nvar items = getItems(),\n    goSportsTeam = true,\n    dragonball = 'z';\n\n// bad\n// (compare to above, and try to spot the mistake)\nvar items = getItems(),\n    goSportsTeam = true;\n    dragonball = 'z';\n\n// good\nvar items = getItems();\nvar goSportsTeam = true;\nvar dragonball = 'z';\n```\n\n最后声明未赋值的变量，这对于你需要根据之前已经赋值的变量对一个变量进行赋值时是很有帮助的\n\n```javascript\n// bad\nvar i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\n// bad\nvar i;\nvar items = getItems();\nvar dragonball;\nvar goSportsTeam = true;\nvar len;\n\n// good\nvar items = getItems();\nvar goSportsTeam = true;\nvar dragonball;\nvar length;\nvar i;\n```\n\n在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题\n\n```javascript\n// bad\nfunction() {\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  var name = getName();\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// good\nfunction() {\n  var name = getName();\n\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// bad\nfunction() {\n  var name = getName();\n\n  if (!arguments.length) {\n    return false;\n  }\n\n  return true;\n}\n\n// good\nfunction() {\n  if (!arguments.length) {\n    return false;\n  }\n\n  var name = getName();\n\n  return true;\n}\n```\n\n### 声明提升\n\n变量声明是在作用域的顶端，但是赋值没有\n\n```javascript\n// we know this wouldn't work (assuming there\n// is no notDefined global variable)\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of `true` is not hoisted.\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// The interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunction example() {\n  var declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n```\n\n匿名表达式能提升他们的变量名，但不能提升函数赋值\n\n```javascript\nfunction example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function() {\n    console.log('anonymous function expression');\n  };\n}\n```\n\n命名函数表达式会提升变量名，而不是函数名或者函数体\n\n```javascript\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  }\n}\n```\n\n函数声明会提升变量名和函数体\n\n```javascript\nfunction example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n```\n\n### 比较运算符&相等\n\n使用 === 和 !== 代替 == 和 !=\n\n比较运算符进行计算时会利用 ToBoolean 方法进行强制转换数据类型，并遵从以下规则\n\n- Objects 的计算值是 true\n- Undefined 的计算值是 false\n- Boolean 的计算值是 boolean 的值\n- Numbers 如果是 -0 ，+0 或者 NaN ，则计算值是 false，反之是 true\n- Strings 如果是空，则计算值是 false，反之是 true\n\n\n```javascript\nif ([0]) {\n  // true\n  // An array is an object, objects evaluate to true\n}\n```\n\n### 使用快捷方式\n\n```javascript\n// bad\nif (name !== '') {\n  // ...stuff...\n}\n\n// good\nif (name) {\n  // ...stuff...\n}\n\n// bad\nif (collection.length > 0) {\n  // ...stuff...\n}\n\n// good\nif (collection.length) {\n  // ...stuff...\n}\n```\n\n### 语句块\n\n对多行的语句块使用大括号\n\n```javascript\n// bad\nif (test)\n  return false;\n\n// good\nif (test) return false;\n\n// good\nif (test) {\n  return false;\n}\n\n// bad\nfunction() { return false; }\n\n// good\nfunction() {\n  return false;\n}\n```\n\n对于使用 if 和 else 的多行语句块，把 else 和 if 语句块的右大括号放在同一行\n\n```javascript\n// bad\nif (test) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// good\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n```\n\n### 注释\n\n多行注释使用 /** … */，需包含一个描述、所有参数的具体类型和值以及返回值\n\n```javascript\n// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param {String} tag\n * @return {Element} element\n */\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n```\n\n单行注释使用 // ，把单行注释放在语句的上一行，并且在注释之前空一行\n\n```javascript\n// bad\nvar active = true;  // is current tab\n\n// good\n// is current tab\nvar active = true;\n\n// bad\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n\n// good\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n```\n\n如果你指出的问题需要重新定位或者提出一个待解决的问题需要实现，给注释添加 FIXME or TODO 前缀有利于其他开发者快速理解。这些注释不同于通常的注释，因为它们是可实施的。这些实施措施就是FIXME -- need to figure this out or TODO -- need to implement.使用 // FIXME: 给一个问题作注释\n\n```javascript\nfunction Calculator() {\n\n  // FIXME: shouldn't use a global here\n  total = 0;\n\n  return this;\n}\n```\n\n使用 //TODO: 给问题解决方案作注释\n\n```javascript\nfunction Calculator() {\n\n  // TODO: total should be configurable by an options param\n  this.total = 0;\n\n  return this;\n}\n```\n\n<!-- more -->\n\n#### 空白\n\n使用软制表符设置两个空格\n\n```javascript\n// bad\nfunction() {\n∙∙∙∙var name;\n}\n\n// bad\nfunction() {\n∙var name;\n}\n\n// good\nfunction() {\n∙∙var name;\n}\n```\n\n在左大括号之前留一个空格\n\n```javascript\n// bad\nfunction test(){\n  console.log('test');\n}\n\n// good\nfunction test() {\n  console.log('test');\n}\n\n// bad\ndog.set('attr',{\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n\n// good\ndog.set('attr', {\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n```\n\n在控制语句中（if, while etc），左括号之前留一个空格。函数的参数列表之前不要有空格\n\n```javascript\n// bad\nif(isJedi) {\n  fight ();\n}\n\n// good\nif (isJedi) {\n  fight();\n}\n\n// bad\nfunction fight () {\n  console.log ('Swooosh!');\n}\n\n// good\nfunction fight() {\n  console.log('Swooosh!');\n}\n```\n\n用空白分隔运算符\n\n```javascript\n// bad\nvar x=y+5;\n\n// good\nvar x = y + 5;\n```\n\n用一个换行符结束文件\n\n```javascript\n// bad\n(function(global) {\n  // ...stuff...\n})(this);\n// bad\n(function(global) {\n  // ...stuff...\n})(this);↵\n↵\n// good\n(function(global) {\n  // ...stuff...\n})(this);↵\n```\n\n当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句\n\n```javascript\n// bad\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad\nvar leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width',  (radius + margin) * 2).append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n\n// good\nvar leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width',  (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n```\n\n在语句块和下一个语句之前留一个空行\n\n```javascript\n// bad\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad\nvar obj = {\n  foo: function() {\n  },\n  bar: function() {\n  }\n};\nreturn obj;\n\n// good\nvar obj = {\n  foo: function() {\n  },\n\n  bar: function() {\n  }\n};\n\nreturn obj;\n```\n\n### 逗号\n\n不要在语句前留逗号\n\n```javascript\n// bad\nvar story = [\n    once\n  , upon\n  , aTime\n];\n\n// good\nvar story = [\n  once,\n  upon,\n  aTime\n];\n\n// bad\nvar hero = {\n    firstName: 'Bob'\n  , lastName: 'Parr'\n  , heroName: 'Mr. Incredible'\n  , superPower: 'strength'\n};\n\n// good\nvar hero = {\n  firstName: 'Bob',\n  lastName: 'Parr',\n  heroName: 'Mr. Incredible',\n  superPower: 'strength'\n};\n```\n\n不要有多余逗号：这会在IE6、IE7和IE9的怪异模式中导致一些问题；同时，在ES3的一些实现中，多余的逗号会增加数组的长度。在ES5中已经澄清（source）\n\n```javascript\n  // bad\n  var hero = {\n    firstName: 'Kevin',\n    lastName: 'Flynn',\n  };\n\n  var heroes = [\n    'Batman',\n    'Superman',\n  ];\n\n  // good\n  var hero = {\n    firstName: 'Kevin',\n    lastName: 'Flynn'\n  };\n\n  var heroes = [\n    'Batman',\n    'Superman'\n  ];\n```\n\n### 分号\n\n恩，这也是规范一部分\n\n```javascript\n// bad\n(function() {\n  var name = 'Skywalker'\n  return name\n})()\n\n// good\n(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n\n// good (guards against the function becoming an argument when two files with IIFEs are concatenated)\n;(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n```\n\n### 类型分配&强制转换\n\n执行强制类型转换的语句\n\n```javascript\nStrings:\n//  => this.reviewScore = 9;\n\n// bad\nvar totalScore = this.reviewScore + '';\n\n// good\nvar totalScore = '' + this.reviewScore;\n\n// bad\nvar totalScore = '' + this.reviewScore + ' total score';\n\n// good\nvar totalScore = this.reviewScore + ' total score';\n```\n\n使用 parseInt 对 Numbers 进行转换，并带一个进制作为参数\n\n```javascript\nvar inputValue = '4';\n\n// bad\nvar val = new Number(inputValue);\n\n// bad\nvar val = +inputValue;\n\n// bad\nvar val = inputValue >> 0;\n\n// bad\nvar val = parseInt(inputValue);\n\n// good\nvar val = Number(inputValue);\n\n// good\nvar val = parseInt(inputValue, 10);\n```\n\n无论出于什么原因，或许你做了一些”粗野”的事；或许 parseInt 成了你的瓶颈；或许考虑到性能，需要使用位运算，都要用注释说明你为什么这么做\n\n```javascript\n// good\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nvar val = inputValue >> 0;\n```\n\n注意：当使用位运算时，Numbers 被视为64位值，但是位运算总是返回32位整型 (source) 。对于整型值大于32位的进行位运算将导致不可预见的行为。Discussion. 最大的有符号32位整数是2,147,483,647\n\n```javascript\n2147483647 >> 0 //=> 2147483647\n2147483648 >> 0 //=> -2147483648\n2147483649 >> 0 //=> -2147483647\nBooleans:\nvar age = 0;\n\n// bad\nvar hasAge = new Boolean(age);\n\n// good\nvar hasAge = Boolean(age);\n\n// good\nvar hasAge = !!age;\n```\n\n### 命名规范\n\n避免单字母名称，让名称具有描述性\n\n```javascript\n// bad\nfunction q() {\n  // ...stuff...\n}\n\n// good\nfunction query() {\n  // ..stuff..\n}\n```\n\n当命名对象、函数和实例时使用骆驼拼写法\n\n```javascript\n// bad\nvar OBJEcttsssss = {};\nvar this_is_my_object = {};\nfunction c() {}\nvar u = new user({\n  name: 'Bob Parr'\n});\n\n// good\nvar thisIsMyObject = {};\nfunction thisIsMyFunction() {}\nvar user = new User({\n  name: 'Bob Parr'\n});\n```\n\n当命名构造函数或类名时，使用驼峰式写法\n\n```javascript\n// bad\nfunction user(options) {\n  this.name = options.name;\n}\n\nvar bad = new user({\n  name: 'nope'\n});\n\n// good\nfunction User(options) {\n  this.name = options.name;\n}\n\nvar good = new User({\n  name: 'yup'\n});\n```\n\n命名私有属性时使用前置下划线\n\n```javascript\n// bad\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\n\n// good\nthis._firstName = 'Panda';\n```\n\n保存 this 引用时使用 _this\n\n```javascript\n// bad\nfunction() {\n  var self = this;\n  return function() {\n    console.log(self);\n  };\n}\n\n// bad\nfunction() {\n  var that = this;\n  return function() {\n    console.log(that);\n  };\n}\n```\n\n```javascript\n// good\nfunction() {\n  var _this = this;\n  return function() {\n    console.log(_this);\n  };\n}\n```\n\n命名函数时，下面的方式有利于堆栈跟踪\n\n```javascript\n// bad\nvar log = function(msg) {\n  console.log(msg);\n};\n\n// good\nvar log = function log(msg) {\n  console.log(msg);\n};\n```\n\n注意：IE8 和怪异模式下命名函数表示，戳此：http://kangax.github.io/nfe/ 如果文件作为一个类被导出，文件名应该和类名保持一致\n\n```javascript\n// file contents\nclass CheckBox {\n  // ...\n}\nmodule.exports = CheckBox;\n\n// in some other file\n// bad\nvar CheckBox = require('./checkBox');\n\n// bad\nvar CheckBox = require('./check_box');\n\n// good\nvar CheckBox = require('./CheckBox');\n```\n\n### 存取器\n\n对于属性，访问器函数不是必须的\n\n如果定义了存取器函数，应参照 getVal() 和 setVal(‘hello’) 格式.\n\n```javascript\n// bad\ndragon.age();\n\n// good\ndragon.getAge();\n\n// bad\ndragon.age(25);\n\n// good\ndragon.setAge(25);\n```\n\n如果属性时 boolean ，格式应为 isVal() or hasVal()\n\n```javascript\n// bad\nif (!dragon.age()) {\n  return false;\n}\n\n// good\nif (!dragon.hasAge()) {\n  return false;\n}\n```\n\n创建 get() and set() 函数时不错的想法，但是要保持一致\n\n```javascript\nfunction Jedi(options) {\n  options || (options = {});\n  var lightsaber = options.lightsaber || 'blue';\n  this.set('lightsaber', lightsaber);\n}\n\nJedi.prototype.set = function(key, val) {\n  this[key] = val;\n};\n\nJedi.prototype.get = function(key) {\n  return this[key];\n};\n```\n\n### 构造函数\n\n在原型对象上定义方法，而不是用新对象重写它。重写使继承变为不可能：重置原型将重写整个基类\n\n```javascript\nfunction Jedi() {\n  console.log('new jedi');\n}\n\n// bad\nJedi.prototype = {\n  fight: function fight() {\n    console.log('fighting');\n  },\n\n  block: function block() {\n    console.log('blocking');\n  }\n};\n\n// good\nJedi.prototype.fight = function fight() {\n  console.log('fighting');\n};\n\nJedi.prototype.block = function block() {\n  console.log('blocking');\n};\n```\n\n方法应该返回 this，有利于构成方法链\n\n```javascript\n// bad\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n};\n\nvar luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return this;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n  return this;\n};\n\nvar luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n```\n\n写一个自定义的 toString() 方法是可以的，只要确保它能正常运行并且不会产生副作用\n\n```javascript\nfunction Jedi(options) {\n  options || (options = {});\n  this.name = options.name || 'no name';\n}\n\nJedi.prototype.getName = function getName() {\n  return this.name;\n};\n\nJedi.prototype.toString = function toString() {\n  return 'Jedi - ' + this.getName();\n};\n```\n\n### 事件\n\n\n当在事件对象上附加数据时（无论是 DOM 事件还是如 Backbone 一样拥有的私有事件），应传递散列对象而不是原始值，这可以让随后的贡献者给事件对象添加更多的数据，而不必去查找或者更新每一个事件处理程序。举个粟子，不要用下面的方式：\n\n```javascript\n// bad\n$(this).trigger('listingUpdated', listing.id);\n\n...\n\n$(this).on('listingUpdated', function(e, listingId) {\n  // do something with listingId\n});\n```\n\n应该按如下方式：\n\n```javascript\n// good\n$(this).trigger('listingUpdated', { listingId : listing.id });\n\n...\n\n$(this).on('listingUpdated', function(e, data) {\n  // do something with data.listingId\n});\n```\n\n### 模块\n\n遵循原则：\n\n模块应该以 ! 开始，这能确保当脚本连接时，如果畸形模块忘记导入，包括最后一个分号，不会产生错误；\n文件应该以驼峰式命名，放在同名的文件夹中，和单出口的名称相匹配；\n定义一个 noConflict() 方法来设置导出模块之前的版本,并返回当前版本；\n在模块的顶部申明 ’use strict'。\n\n```javascript\n// fancyInput/fancyInput.js\n\n!function(global) {\n  'use strict';\n\n  var previousFancyInput = global.FancyInput;\n\n  function FancyInput(options) {\n    this.options = options || {};\n  }\n\n  FancyInput.noConflict = function noConflict() {\n    global.FancyInput = previousFancyInput;\n    return FancyInput;\n  };\n\n  global.FancyInput = FancyInput;\n}(this);\n```\n\n### jquery\n\njQuery对象变量使用前缀$\n\n\n```javascript\n// bad\nvar sidebar = $('.sidebar');\n\n// good\nvar $sidebar = $('.sidebar');\n// 缓存jQuery查询\n// bad\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...stuff...\n\n  $('.sidebar').css({\n    'background-color': 'pink'\n  });\n}\n\n// good\nfunction setSidebar() {\n  var $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...stuff...\n\n  $sidebar.css({\n    'background-color': 'pink'\n  });\n}\n```\n\n使用级联$(‘.sidebar ul’)或父子$(‘.sidebar > ul’)选择器进行DOM查询；\n\n在范围内使用find进行jQuery对象查询。\n\n\n```javascript\n// bad\n$('ul', '.sidebar').hide();\n\n// bad\n$('.sidebar').find('ul').hide();\n\n// good\n$('.sidebar ul').hide();\n\n// good\n$('.sidebar > ul').hide();\n\n// good\n$sidebar.find('ul').hide();\n```\n","source":"_posts/js-docs.md","raw":"title: JavaScript 最全编码规范\ndate: 2016-03-13 12:22:12\ntags:\n    - js\n    - 编码规范\ncategories:\n    - Web技术\n---\n\n<!-- toc -->\n\n### 类型\n\n基本类型：访问基本类型时，应该直接操作类型值\n\n- string\n- number\n- boolean\n- null\n- undefined\n\n\n<!-- more -->\n\n\n```javascript\nvar foo = [1, 2];\nvar bar = foo;\nbar[0] = 9;\nconsole.log(foo[0], bar[0]); // => 9, 9\n```\n\n复合类型：访问复合类型时，应该操作其引用\n\n- object\n- array\n- function\n\n### 对象\n\n使用字面量语法创建\n\n```javascript\n// bad\nvar item = new Object();\n// good\nvar item = {};\n```\n\n不要使用保留字，在 IE8 中不起作用\n\n```javascript\n// bad\nvar superman = {\n  default: { clark: 'kent' },\n  private: true\n};\n\n// good\nvar superman = {\n  defaults: { clark: 'kent' },\n  hidden: true\n};\n```\n\n使用易读的同义词代替保留字\n\n```javascript\n// bad\nvar superman = {\n  c1ass: 'alien'\n};\n\n// bad\nvar superman = {\n  klass: 'alien'\n};\n\n// good\nvar superman = {\n  type: 'alien'\n};\n\n```\n\n### 数组\n\n使用字面量语法创建数组\n\n```javascript\n// bad\nvar items = new Array();\n\n// good\nvar items = [];\n```\n\n添加数组元素时，使用 push 而不是直接添加\n\n```javascript\nvar someStack = [];\n\n\n// bad\nsomeStack[someStack.length] = 'abracadabra';\n\n// good\nsomeStack.push('abracadabra');\n```\n\n需要复制数组时，可以使用 slice\n\n```javascript\nvar len = items.length;\nvar itemsCopy = [];\nvar i;\n\n// bad\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nitemsCopy = items.slice();\n```\n\n使用 slice 将类数组对象转为数组\n\n```javascript\nfunction trigger() {\n  var args = Array.prototype.slice.call(arguments);\n  ...\n}\n```\n\n### 字符串\n\n对字符串使用单引号\n\n```javascript\n// bad\nvar name = \"Bob Parr\";\n\n// good\nvar name = 'Bob Parr';\n\n// bad\nvar fullName = \"Bob \" + this.lastName;\n\n// good\nvar fullName = 'Bob ' + this.lastName;\n```\n\n超过80个字符的字符串应该使用字符串连接符进行跨行\n\n注意：对长字符串过度使用连接符将会影响性能。相关的文章和主题讨论： jsPerf & Discussion.\n\n```javascript\n// bad\nvar errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n\n// bad\nvar errorMessage = 'This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// good\nvar errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n```\n\n以编程方式创建字符串的时应该使用 Array 的 join 方法而不是通过连接符，尤其是在 IE 中\n\n```javascript\nvar items;\nvar messages;\nvar length;\nvar i;\n\nmessages = [{\n  state: 'success',\n  message: 'This one worked.'\n}, {\n  state: 'success',\n  message: 'This one worked as well.'\n}, {\n  state: 'error',\n  message: 'This one did not work.'\n}];\n\nlength = messages.length;\n\n// bad\nfunction inbox(messages) {\n  items = '<ul>';\n\n  for (i = 0; i < length; i++) {\n    items += '<li>' + messages[i].message + '</li>';\n  }\n\n  return items + '</ul>';\n}\n\n// good\nfunction inbox(messages) {\n  items = [];\n\n  for (i = 0; i < length; i++) {\n    items[i] = '<li>' + messages[i].message + '</li>';\n  }\n\n  return '<ul>' + items.join('') + '</ul>';\n}\n// very good\nfunction inbox(messages) {\n  items = [];\n  for (i = 0, len = messages.length; i < len; i++) {\n    items.push('<li>' + messages[i].message + '</li>';);\n  }\n  return '<ul>' + items.join('') + '</ul>';\n}\n```\n\n### 函数\n\n函数表达式\n\n```javascript\n// anonymous function expression\nvar anonymous = function() {\n  return true;\n};\n\n// named function expression\nvar named = function named() {\n  return true;\n};\n\n// immediately-invoked function expression (IIFE)\n(function() {\n  console.log('Welcome to the Internet. Please follow me.');\n})();\n```\n\n不要在非函数块中 (if, while, etc) 声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它\n\n注意：ECMA-262 把块定义为一组语句，但函数声明不是一个语句： Read ECMA-262’s note on this issue.\n\n```javascript\n// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good\nvar test;\nif (currentUser) {\n  test = function test() {\n    console.log('Yup.');\n  };\n}\n```\n\n不要命名一个参数为 arguments ，否则它将优先于传递给每个函数作用域中的 arguments 对象\n\n```javascript\n// bad\nfunction nope(name, options, arguments) {\n  // ...stuff...\n}\n\n// good\nfunction yup(name, options, args) {\n  // ...stuff...\n}\n```\n\n### 属性\n\n使用点表示法访问属性\n\n```javascript\nvar luke = {\n  jedi: true,\n  age: 28\n};\n\n// bad\nvar isJedi = luke['jedi'];\n\n// good\nvar isJedi = luke.jedi;\n```\n\n用变量访问属性时要使用下标表示法([])\n\n```javascript\nvar luke = {\n  jedi: true,\n  age: 28\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nvar isJedi = getProp('jedi');\n```\n\n### 变量\n\n总是使用 var 声明变量，不然其将变为全局变量。我们要想办法避免全局空间污染\n\n```javascript\n// bad\nsuperPower = new SuperPower();\n\n// good\nvar superPower = new SuperPower();\n```\n\n使用 var 声明每个变量，这样很容易添加新的变量声明，而不用去担心用 a; 替换 a \n\n```javascript\n// bad\nvar items = getItems(),\n    goSportsTeam = true,\n    dragonball = 'z';\n\n// bad\n// (compare to above, and try to spot the mistake)\nvar items = getItems(),\n    goSportsTeam = true;\n    dragonball = 'z';\n\n// good\nvar items = getItems();\nvar goSportsTeam = true;\nvar dragonball = 'z';\n```\n\n最后声明未赋值的变量，这对于你需要根据之前已经赋值的变量对一个变量进行赋值时是很有帮助的\n\n```javascript\n// bad\nvar i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\n// bad\nvar i;\nvar items = getItems();\nvar dragonball;\nvar goSportsTeam = true;\nvar len;\n\n// good\nvar items = getItems();\nvar goSportsTeam = true;\nvar dragonball;\nvar length;\nvar i;\n```\n\n在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题\n\n```javascript\n// bad\nfunction() {\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  var name = getName();\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// good\nfunction() {\n  var name = getName();\n\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// bad\nfunction() {\n  var name = getName();\n\n  if (!arguments.length) {\n    return false;\n  }\n\n  return true;\n}\n\n// good\nfunction() {\n  if (!arguments.length) {\n    return false;\n  }\n\n  var name = getName();\n\n  return true;\n}\n```\n\n### 声明提升\n\n变量声明是在作用域的顶端，但是赋值没有\n\n```javascript\n// we know this wouldn't work (assuming there\n// is no notDefined global variable)\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of `true` is not hoisted.\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// The interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunction example() {\n  var declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n```\n\n匿名表达式能提升他们的变量名，但不能提升函数赋值\n\n```javascript\nfunction example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function() {\n    console.log('anonymous function expression');\n  };\n}\n```\n\n命名函数表达式会提升变量名，而不是函数名或者函数体\n\n```javascript\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  }\n}\n```\n\n函数声明会提升变量名和函数体\n\n```javascript\nfunction example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n```\n\n### 比较运算符&相等\n\n使用 === 和 !== 代替 == 和 !=\n\n比较运算符进行计算时会利用 ToBoolean 方法进行强制转换数据类型，并遵从以下规则\n\n- Objects 的计算值是 true\n- Undefined 的计算值是 false\n- Boolean 的计算值是 boolean 的值\n- Numbers 如果是 -0 ，+0 或者 NaN ，则计算值是 false，反之是 true\n- Strings 如果是空，则计算值是 false，反之是 true\n\n\n```javascript\nif ([0]) {\n  // true\n  // An array is an object, objects evaluate to true\n}\n```\n\n### 使用快捷方式\n\n```javascript\n// bad\nif (name !== '') {\n  // ...stuff...\n}\n\n// good\nif (name) {\n  // ...stuff...\n}\n\n// bad\nif (collection.length > 0) {\n  // ...stuff...\n}\n\n// good\nif (collection.length) {\n  // ...stuff...\n}\n```\n\n### 语句块\n\n对多行的语句块使用大括号\n\n```javascript\n// bad\nif (test)\n  return false;\n\n// good\nif (test) return false;\n\n// good\nif (test) {\n  return false;\n}\n\n// bad\nfunction() { return false; }\n\n// good\nfunction() {\n  return false;\n}\n```\n\n对于使用 if 和 else 的多行语句块，把 else 和 if 语句块的右大括号放在同一行\n\n```javascript\n// bad\nif (test) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// good\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n```\n\n### 注释\n\n多行注释使用 /** … */，需包含一个描述、所有参数的具体类型和值以及返回值\n\n```javascript\n// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param {String} tag\n * @return {Element} element\n */\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n```\n\n单行注释使用 // ，把单行注释放在语句的上一行，并且在注释之前空一行\n\n```javascript\n// bad\nvar active = true;  // is current tab\n\n// good\n// is current tab\nvar active = true;\n\n// bad\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n\n// good\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n```\n\n如果你指出的问题需要重新定位或者提出一个待解决的问题需要实现，给注释添加 FIXME or TODO 前缀有利于其他开发者快速理解。这些注释不同于通常的注释，因为它们是可实施的。这些实施措施就是FIXME -- need to figure this out or TODO -- need to implement.使用 // FIXME: 给一个问题作注释\n\n```javascript\nfunction Calculator() {\n\n  // FIXME: shouldn't use a global here\n  total = 0;\n\n  return this;\n}\n```\n\n使用 //TODO: 给问题解决方案作注释\n\n```javascript\nfunction Calculator() {\n\n  // TODO: total should be configurable by an options param\n  this.total = 0;\n\n  return this;\n}\n```\n\n<!-- more -->\n\n#### 空白\n\n使用软制表符设置两个空格\n\n```javascript\n// bad\nfunction() {\n∙∙∙∙var name;\n}\n\n// bad\nfunction() {\n∙var name;\n}\n\n// good\nfunction() {\n∙∙var name;\n}\n```\n\n在左大括号之前留一个空格\n\n```javascript\n// bad\nfunction test(){\n  console.log('test');\n}\n\n// good\nfunction test() {\n  console.log('test');\n}\n\n// bad\ndog.set('attr',{\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n\n// good\ndog.set('attr', {\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n```\n\n在控制语句中（if, while etc），左括号之前留一个空格。函数的参数列表之前不要有空格\n\n```javascript\n// bad\nif(isJedi) {\n  fight ();\n}\n\n// good\nif (isJedi) {\n  fight();\n}\n\n// bad\nfunction fight () {\n  console.log ('Swooosh!');\n}\n\n// good\nfunction fight() {\n  console.log('Swooosh!');\n}\n```\n\n用空白分隔运算符\n\n```javascript\n// bad\nvar x=y+5;\n\n// good\nvar x = y + 5;\n```\n\n用一个换行符结束文件\n\n```javascript\n// bad\n(function(global) {\n  // ...stuff...\n})(this);\n// bad\n(function(global) {\n  // ...stuff...\n})(this);↵\n↵\n// good\n(function(global) {\n  // ...stuff...\n})(this);↵\n```\n\n当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句\n\n```javascript\n// bad\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad\nvar leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width',  (radius + margin) * 2).append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n\n// good\nvar leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width',  (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n```\n\n在语句块和下一个语句之前留一个空行\n\n```javascript\n// bad\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad\nvar obj = {\n  foo: function() {\n  },\n  bar: function() {\n  }\n};\nreturn obj;\n\n// good\nvar obj = {\n  foo: function() {\n  },\n\n  bar: function() {\n  }\n};\n\nreturn obj;\n```\n\n### 逗号\n\n不要在语句前留逗号\n\n```javascript\n// bad\nvar story = [\n    once\n  , upon\n  , aTime\n];\n\n// good\nvar story = [\n  once,\n  upon,\n  aTime\n];\n\n// bad\nvar hero = {\n    firstName: 'Bob'\n  , lastName: 'Parr'\n  , heroName: 'Mr. Incredible'\n  , superPower: 'strength'\n};\n\n// good\nvar hero = {\n  firstName: 'Bob',\n  lastName: 'Parr',\n  heroName: 'Mr. Incredible',\n  superPower: 'strength'\n};\n```\n\n不要有多余逗号：这会在IE6、IE7和IE9的怪异模式中导致一些问题；同时，在ES3的一些实现中，多余的逗号会增加数组的长度。在ES5中已经澄清（source）\n\n```javascript\n  // bad\n  var hero = {\n    firstName: 'Kevin',\n    lastName: 'Flynn',\n  };\n\n  var heroes = [\n    'Batman',\n    'Superman',\n  ];\n\n  // good\n  var hero = {\n    firstName: 'Kevin',\n    lastName: 'Flynn'\n  };\n\n  var heroes = [\n    'Batman',\n    'Superman'\n  ];\n```\n\n### 分号\n\n恩，这也是规范一部分\n\n```javascript\n// bad\n(function() {\n  var name = 'Skywalker'\n  return name\n})()\n\n// good\n(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n\n// good (guards against the function becoming an argument when two files with IIFEs are concatenated)\n;(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n```\n\n### 类型分配&强制转换\n\n执行强制类型转换的语句\n\n```javascript\nStrings:\n//  => this.reviewScore = 9;\n\n// bad\nvar totalScore = this.reviewScore + '';\n\n// good\nvar totalScore = '' + this.reviewScore;\n\n// bad\nvar totalScore = '' + this.reviewScore + ' total score';\n\n// good\nvar totalScore = this.reviewScore + ' total score';\n```\n\n使用 parseInt 对 Numbers 进行转换，并带一个进制作为参数\n\n```javascript\nvar inputValue = '4';\n\n// bad\nvar val = new Number(inputValue);\n\n// bad\nvar val = +inputValue;\n\n// bad\nvar val = inputValue >> 0;\n\n// bad\nvar val = parseInt(inputValue);\n\n// good\nvar val = Number(inputValue);\n\n// good\nvar val = parseInt(inputValue, 10);\n```\n\n无论出于什么原因，或许你做了一些”粗野”的事；或许 parseInt 成了你的瓶颈；或许考虑到性能，需要使用位运算，都要用注释说明你为什么这么做\n\n```javascript\n// good\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nvar val = inputValue >> 0;\n```\n\n注意：当使用位运算时，Numbers 被视为64位值，但是位运算总是返回32位整型 (source) 。对于整型值大于32位的进行位运算将导致不可预见的行为。Discussion. 最大的有符号32位整数是2,147,483,647\n\n```javascript\n2147483647 >> 0 //=> 2147483647\n2147483648 >> 0 //=> -2147483648\n2147483649 >> 0 //=> -2147483647\nBooleans:\nvar age = 0;\n\n// bad\nvar hasAge = new Boolean(age);\n\n// good\nvar hasAge = Boolean(age);\n\n// good\nvar hasAge = !!age;\n```\n\n### 命名规范\n\n避免单字母名称，让名称具有描述性\n\n```javascript\n// bad\nfunction q() {\n  // ...stuff...\n}\n\n// good\nfunction query() {\n  // ..stuff..\n}\n```\n\n当命名对象、函数和实例时使用骆驼拼写法\n\n```javascript\n// bad\nvar OBJEcttsssss = {};\nvar this_is_my_object = {};\nfunction c() {}\nvar u = new user({\n  name: 'Bob Parr'\n});\n\n// good\nvar thisIsMyObject = {};\nfunction thisIsMyFunction() {}\nvar user = new User({\n  name: 'Bob Parr'\n});\n```\n\n当命名构造函数或类名时，使用驼峰式写法\n\n```javascript\n// bad\nfunction user(options) {\n  this.name = options.name;\n}\n\nvar bad = new user({\n  name: 'nope'\n});\n\n// good\nfunction User(options) {\n  this.name = options.name;\n}\n\nvar good = new User({\n  name: 'yup'\n});\n```\n\n命名私有属性时使用前置下划线\n\n```javascript\n// bad\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\n\n// good\nthis._firstName = 'Panda';\n```\n\n保存 this 引用时使用 _this\n\n```javascript\n// bad\nfunction() {\n  var self = this;\n  return function() {\n    console.log(self);\n  };\n}\n\n// bad\nfunction() {\n  var that = this;\n  return function() {\n    console.log(that);\n  };\n}\n```\n\n```javascript\n// good\nfunction() {\n  var _this = this;\n  return function() {\n    console.log(_this);\n  };\n}\n```\n\n命名函数时，下面的方式有利于堆栈跟踪\n\n```javascript\n// bad\nvar log = function(msg) {\n  console.log(msg);\n};\n\n// good\nvar log = function log(msg) {\n  console.log(msg);\n};\n```\n\n注意：IE8 和怪异模式下命名函数表示，戳此：http://kangax.github.io/nfe/ 如果文件作为一个类被导出，文件名应该和类名保持一致\n\n```javascript\n// file contents\nclass CheckBox {\n  // ...\n}\nmodule.exports = CheckBox;\n\n// in some other file\n// bad\nvar CheckBox = require('./checkBox');\n\n// bad\nvar CheckBox = require('./check_box');\n\n// good\nvar CheckBox = require('./CheckBox');\n```\n\n### 存取器\n\n对于属性，访问器函数不是必须的\n\n如果定义了存取器函数，应参照 getVal() 和 setVal(‘hello’) 格式.\n\n```javascript\n// bad\ndragon.age();\n\n// good\ndragon.getAge();\n\n// bad\ndragon.age(25);\n\n// good\ndragon.setAge(25);\n```\n\n如果属性时 boolean ，格式应为 isVal() or hasVal()\n\n```javascript\n// bad\nif (!dragon.age()) {\n  return false;\n}\n\n// good\nif (!dragon.hasAge()) {\n  return false;\n}\n```\n\n创建 get() and set() 函数时不错的想法，但是要保持一致\n\n```javascript\nfunction Jedi(options) {\n  options || (options = {});\n  var lightsaber = options.lightsaber || 'blue';\n  this.set('lightsaber', lightsaber);\n}\n\nJedi.prototype.set = function(key, val) {\n  this[key] = val;\n};\n\nJedi.prototype.get = function(key) {\n  return this[key];\n};\n```\n\n### 构造函数\n\n在原型对象上定义方法，而不是用新对象重写它。重写使继承变为不可能：重置原型将重写整个基类\n\n```javascript\nfunction Jedi() {\n  console.log('new jedi');\n}\n\n// bad\nJedi.prototype = {\n  fight: function fight() {\n    console.log('fighting');\n  },\n\n  block: function block() {\n    console.log('blocking');\n  }\n};\n\n// good\nJedi.prototype.fight = function fight() {\n  console.log('fighting');\n};\n\nJedi.prototype.block = function block() {\n  console.log('blocking');\n};\n```\n\n方法应该返回 this，有利于构成方法链\n\n```javascript\n// bad\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n};\n\nvar luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return this;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n  return this;\n};\n\nvar luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n```\n\n写一个自定义的 toString() 方法是可以的，只要确保它能正常运行并且不会产生副作用\n\n```javascript\nfunction Jedi(options) {\n  options || (options = {});\n  this.name = options.name || 'no name';\n}\n\nJedi.prototype.getName = function getName() {\n  return this.name;\n};\n\nJedi.prototype.toString = function toString() {\n  return 'Jedi - ' + this.getName();\n};\n```\n\n### 事件\n\n\n当在事件对象上附加数据时（无论是 DOM 事件还是如 Backbone 一样拥有的私有事件），应传递散列对象而不是原始值，这可以让随后的贡献者给事件对象添加更多的数据，而不必去查找或者更新每一个事件处理程序。举个粟子，不要用下面的方式：\n\n```javascript\n// bad\n$(this).trigger('listingUpdated', listing.id);\n\n...\n\n$(this).on('listingUpdated', function(e, listingId) {\n  // do something with listingId\n});\n```\n\n应该按如下方式：\n\n```javascript\n// good\n$(this).trigger('listingUpdated', { listingId : listing.id });\n\n...\n\n$(this).on('listingUpdated', function(e, data) {\n  // do something with data.listingId\n});\n```\n\n### 模块\n\n遵循原则：\n\n模块应该以 ! 开始，这能确保当脚本连接时，如果畸形模块忘记导入，包括最后一个分号，不会产生错误；\n文件应该以驼峰式命名，放在同名的文件夹中，和单出口的名称相匹配；\n定义一个 noConflict() 方法来设置导出模块之前的版本,并返回当前版本；\n在模块的顶部申明 ’use strict'。\n\n```javascript\n// fancyInput/fancyInput.js\n\n!function(global) {\n  'use strict';\n\n  var previousFancyInput = global.FancyInput;\n\n  function FancyInput(options) {\n    this.options = options || {};\n  }\n\n  FancyInput.noConflict = function noConflict() {\n    global.FancyInput = previousFancyInput;\n    return FancyInput;\n  };\n\n  global.FancyInput = FancyInput;\n}(this);\n```\n\n### jquery\n\njQuery对象变量使用前缀$\n\n\n```javascript\n// bad\nvar sidebar = $('.sidebar');\n\n// good\nvar $sidebar = $('.sidebar');\n// 缓存jQuery查询\n// bad\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...stuff...\n\n  $('.sidebar').css({\n    'background-color': 'pink'\n  });\n}\n\n// good\nfunction setSidebar() {\n  var $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...stuff...\n\n  $sidebar.css({\n    'background-color': 'pink'\n  });\n}\n```\n\n使用级联$(‘.sidebar ul’)或父子$(‘.sidebar > ul’)选择器进行DOM查询；\n\n在范围内使用find进行jQuery对象查询。\n\n\n```javascript\n// bad\n$('ul', '.sidebar').hide();\n\n// bad\n$('.sidebar').find('ul').hide();\n\n// good\n$('.sidebar ul').hide();\n\n// good\n$('.sidebar > ul').hide();\n\n// good\n$sidebar.find('ul').hide();\n```\n","slug":"js-docs","published":1,"updated":"2016-03-13T12:22:12.000Z","_id":"cmduj3n2l0016k8svbmmlfww0","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B\">类型</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1\">对象</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84\">数组</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7\">属性</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87\">声明提升</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E7%AD%89\">比较运算符&amp;相等</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F\">使用快捷方式</a></li>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5%E5%9D%97\">语句块</a></li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n<li><a href=\"#%E9%80%97%E5%8F%B7\">逗号</a></li>\n<li><a href=\"#%E5%88%86%E5%8F%B7\">分号</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%86%E9%85%8D%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2\">类型分配&amp;强制转换</a></li>\n<li><a href=\"#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\">命名规范</a></li>\n<li><a href=\"#%E5%AD%98%E5%8F%96%E5%99%A8\">存取器</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">构造函数</a></li>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6\">事件</a></li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97\">模块</a></li>\n<li><a href=\"#jquery\">jquery</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"类型\">类型</span></h3><p>基本类型：访问基本类型时，应该直接操作类型值</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n</ul>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo;</span><br><span class=\"line\">bar[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo[<span class=\"number\">0</span>], bar[<span class=\"number\">0</span>]); <span class=\"comment\">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>\n\n<p>复合类型：访问复合类型时，应该操作其引用</p>\n<ul>\n<li>object</li>\n<li>array</li>\n<li>function</li>\n</ul>\n<h3><span id=\"对象\">对象</span></h3><p>使用字面量语法创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不要使用保留字，在 IE8 中不起作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">default</span>: &#123; <span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">private</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaults</span>: &#123; <span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用易读的同义词代替保留字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c1ass</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">klass</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"数组\">数组</span></h3><p>使用字面量语法创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = [];</span><br></pre></td></tr></table></figure>\n\n<p>添加数组元素时，使用 push 而不是直接添加</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someStack = [];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">someStack[someStack.<span class=\"property\">length</span>] = <span class=\"string\">&#x27;abracadabra&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">someStack.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>需要复制数组时，可以使用 slice</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> len = items.<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> itemsCopy = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">  itemsCopy[i] = items[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">itemsCopy = items.<span class=\"title function_\">slice</span>();</span><br></pre></td></tr></table></figure>\n\n<p>使用 slice 将类数组对象转为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">trigger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"字符串\">字符串</span></h3><p>对字符串使用单引号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Bob Parr&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Bob Parr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">&quot;Bob &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">&#x27;Bob &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br></pre></td></tr></table></figure>\n\n<p>超过80个字符的字符串应该使用字符串连接符进行跨行</p>\n<p>注意：对长字符串过度使用连接符将会影响性能。相关的文章和主题讨论： jsPerf &amp; Discussion.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because \\</span></span><br><span class=\"line\"><span class=\"string\">of Batman. When you stop to think about how Batman had anything to do \\</span></span><br><span class=\"line\"><span class=\"string\">with this, you would get nowhere \\</span></span><br><span class=\"line\"><span class=\"string\">fast.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because &#x27;</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;of Batman. When you stop to think about how Batman had anything to do &#x27;</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;with this, you would get nowhere fast.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以编程方式创建字符串的时应该使用 Array 的 join 方法而不是通过连接符，尤其是在 IE 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items;</span><br><span class=\"line\"><span class=\"keyword\">var</span> messages;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">messages = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;success&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one worked.&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;success&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one worked as well.&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one did not work.&#x27;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">length = messages.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    items += <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    items[i] = <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span> + items.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// very good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = messages.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    items.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span> + items.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"函数\">函数</span></h3><p>函数表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// anonymous function expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anonymous = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// named function expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">named</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immediately-invoked function expression (IIFE)</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Welcome to the Internet. Please follow me.&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>不要在非函数块中 (if, while, etc) 声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它</p>\n<p>注意：ECMA-262 把块定义为一组语句，但函数声明不是一个语句： Read ECMA-262’s note on this issue.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentUser) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Nope.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentUser) &#123;</span><br><span class=\"line\">  test = <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Yup.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不要命名一个参数为 arguments ，否则它将优先于传递给每个函数作用域中的 arguments 对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nope</span>(<span class=\"params\">name, options, <span class=\"variable language_\">arguments</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yup</span>(<span class=\"params\">name, options, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"属性\">属性</span></h3><p>使用点表示法访问属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luke = &#123;</span><br><span class=\"line\">  <span class=\"attr\">jedi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = luke[<span class=\"string\">&#x27;jedi&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = luke.<span class=\"property\">jedi</span>;</span><br></pre></td></tr></table></figure>\n\n<p>用变量访问属性时要使用下标表示法([])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luke = &#123;</span><br><span class=\"line\">  <span class=\"attr\">jedi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getProp</span>(<span class=\"params\">prop</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> luke[prop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = <span class=\"title function_\">getProp</span>(<span class=\"string\">&#x27;jedi&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"变量\">变量</span></h3><p>总是使用 var 声明变量，不然其将变为全局变量。我们要想办法避免全局空间污染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">superPower = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperPower</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superPower = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperPower</span>();</span><br></pre></td></tr></table></figure>\n\n<p>使用 var 声明每个变量，这样很容易添加新的变量声明，而不用去担心用 a; 替换 a </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">// (compare to above, and try to spot the mistake)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>最后声明未赋值的变量，这对于你需要根据之前已经赋值的变量对一个变量进行赋值时是很有帮助的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i, len, dragonball,</span><br><span class=\"line\">    items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br></pre></td></tr></table></figure>\n\n<p>在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doing stuff..&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//..other stuff..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;test&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">test</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doing stuff..&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//..other stuff..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;test&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"声明提升\">声明提升</span></h3><p>变量声明是在作用域的顶端，但是赋值没有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// we know this wouldn&#x27;t work (assuming there</span></span><br><span class=\"line\"><span class=\"comment\">// is no notDefined global variable)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(notDefined); <span class=\"comment\">// =&gt; throws a ReferenceError</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// creating a variable declaration after you</span></span><br><span class=\"line\"><span class=\"comment\">// reference the variable will work due to</span></span><br><span class=\"line\"><span class=\"comment\">// variable hoisting. Note: the assignment</span></span><br><span class=\"line\"><span class=\"comment\">// value of `true` is not hoisted.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(declaredButNotAssigned); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> declaredButNotAssigned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The interpreter is hoisting the variable</span></span><br><span class=\"line\"><span class=\"comment\">// declaration to the top of the scope,</span></span><br><span class=\"line\"><span class=\"comment\">// which means our example could be rewritten as:</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> declaredButNotAssigned;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(declaredButNotAssigned); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  declaredButNotAssigned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名表达式能提升他们的变量名，但不能提升函数赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anonymous); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">anonymous</span>(); <span class=\"comment\">// =&gt; TypeError anonymous is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> anonymous = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;anonymous function expression&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名函数表达式会提升变量名，而不是函数名或者函数体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(named); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">named</span>(); <span class=\"comment\">// =&gt; TypeError named is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">superPower</span>(); <span class=\"comment\">// =&gt; ReferenceError superPower is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">superPower</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Flying&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the same is true when the function name</span></span><br><span class=\"line\"><span class=\"comment\">// is the same as the variable name.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(named); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">named</span>(); <span class=\"comment\">// =&gt; TypeError named is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">named</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;named&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数声明会提升变量名和函数体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">superPower</span>(); <span class=\"comment\">// =&gt; Flying</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">superPower</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Flying&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"比较运算符amp相等\">比较运算符&amp;相等</span></h3><p>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; 代替 &#x3D;&#x3D; 和 !&#x3D;</p>\n<p>比较运算符进行计算时会利用 ToBoolean 方法进行强制转换数据类型，并遵从以下规则</p>\n<ul>\n<li>Objects 的计算值是 true</li>\n<li>Undefined 的计算值是 false</li>\n<li>Boolean 的计算值是 boolean 的值</li>\n<li>Numbers 如果是 -0 ，+0 或者 NaN ，则计算值是 false，反之是 true</li>\n<li>Strings 如果是空，则计算值是 false，反之是 true</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"comment\">// An array is an object, objects evaluate to true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"使用快捷方式\">使用快捷方式</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (collection.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (collection.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"语句块\">语句块</span></h3><p>对多行的语句块使用大括号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于使用 if 和 else 的多行语句块，把 else 和 if 语句块的右大括号放在同一行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing1</span>();</span><br><span class=\"line\">  <span class=\"title function_\">thing2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing3</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing1</span>();</span><br><span class=\"line\">  <span class=\"title function_\">thing2</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing3</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"注释\">注释</span></h3><p>多行注释使用 &#x2F;** … *&#x2F;，需包含一个描述、所有参数的具体类型和值以及返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">// make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\">// based on the passed in tag name</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// @param &#123;String&#125; tag</span></span><br><span class=\"line\"><span class=\"comment\">// @return &#123;Element&#125; element</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\"> * based on the passed in tag name</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; <span class=\"variable\">tag</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Element</span>&#125; <span class=\"variable\">element</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单行注释使用 &#x2F;&#x2F; ，把单行注释放在语句的上一行，并且在注释之前空一行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> active = <span class=\"literal\">true</span>;  <span class=\"comment\">// is current tab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">// is current tab</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">_type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">_type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你指出的问题需要重新定位或者提出一个待解决的问题需要实现，给注释添加 FIXME or TODO 前缀有利于其他开发者快速理解。这些注释不同于通常的注释，因为它们是可实施的。这些实施措施就是FIXME – need to figure this out or TODO – need to implement.使用 &#x2F;&#x2F; FIXME: 给一个问题作注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Calculator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> shouldn&#x27;t use a global here</span></span><br><span class=\"line\">  total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 &#x2F;&#x2F;TODO: 给问题解决方案作注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Calculator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> total should be configurable by an options param</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<h4><span id=\"空白\">空白</span></h4><p>使用软制表符设置两个空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙∙∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在左大括号之前留一个空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在控制语句中（if, while etc），左括号之前留一个空格。函数的参数列表之前不要有空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isJedi) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fight</span> ();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isJedi) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fight</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> (<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用空白分隔运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=y+<span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = y + <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>用一个换行符结束文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);↵</span><br><span class=\"line\">↵</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);↵</span><br></pre></td></tr></table></figure>\n\n<p>当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).<span class=\"title function_\">highlight</span>().<span class=\"title function_\">end</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">highlight</span>().</span><br><span class=\"line\">    <span class=\"title function_\">end</span>().</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">highlight</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">end</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>).<span class=\"title function_\">data</span>(data).<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>).<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>,  (radius + margin) * <span class=\"number\">2</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">&#x27;translate(&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;,&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">data</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>,  (radius + margin) * <span class=\"number\">2</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">&#x27;translate(&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;,&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在语句块和下一个语句之前留一个空行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"逗号\">逗号</span></h3><p>不要在语句前留逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> story = [</span><br><span class=\"line\">    once</span><br><span class=\"line\">  , upon</span><br><span class=\"line\">  , aTime</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> story = [</span><br><span class=\"line\">  once,</span><br><span class=\"line\">  upon,</span><br><span class=\"line\">  aTime</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Parr&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">heroName</span>: <span class=\"string\">&#x27;Mr. Incredible&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">superPower</span>: <span class=\"string\">&#x27;strength&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Parr&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">heroName</span>: <span class=\"string\">&#x27;Mr. Incredible&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">superPower</span>: <span class=\"string\">&#x27;strength&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不要有多余逗号：这会在IE6、IE7和IE9的怪异模式中导致一些问题；同时，在ES3的一些实现中，多余的逗号会增加数组的长度。在ES5中已经澄清（source）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Kevin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flynn&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> heroes = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;Batman&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Superman&#x27;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Kevin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flynn&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> heroes = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;Batman&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Superman&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"分号\">分号</span></h3><p>恩，这也是规范一部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></span><br><span class=\"line\">;(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"类型分配amp强制转换\">类型分配&amp;强制转换</span></h3><p>执行强制类型转换的语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Strings</span>:</span><br><span class=\"line\"><span class=\"comment\">//  =&gt; this.reviewScore = 9;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"string\">&#x27;&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"string\">&#x27;&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27; total score&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27; total score&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用 parseInt 对 Numbers 进行转换，并带一个进制作为参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inputValue = <span class=\"string\">&#x27;4&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = +inputValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = inputValue &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"built_in\">parseInt</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"title class_\">Number</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"built_in\">parseInt</span>(inputValue, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p>无论出于什么原因，或许你做了一些”粗野”的事；或许 parseInt 成了你的瓶颈；或许考虑到性能，需要使用位运算，都要用注释说明你为什么这么做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * parseInt was the reason my code was slow.</span></span><br><span class=\"line\"><span class=\"comment\"> * Bitshifting the String to coerce it to a</span></span><br><span class=\"line\"><span class=\"comment\"> * Number made it a lot faster.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = inputValue &gt;&gt; <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注意：当使用位运算时，Numbers 被视为64位值，但是位运算总是返回32位整型 (source) 。对于整型值大于32位的进行位运算将导致不可预见的行为。Discussion. 最大的有符号32位整数是2,147,483,647</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2147483647</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; 2147483647</span></span><br><span class=\"line\"><span class=\"number\">2147483648</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; -2147483648</span></span><br><span class=\"line\"><span class=\"number\">2147483649</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; -2147483647</span></span><br><span class=\"line\"><span class=\"title class_\">Booleans</span>:</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = <span class=\"title class_\">Boolean</span>(age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"命名规范\">命名规范</span></h3><p>避免单字母名称，让名称具有描述性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">q</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..stuff..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当命名对象、函数和实例时使用骆驼拼写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">OBJEcttsssss</span> = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> this_is_my_object = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> <span class=\"title function_\">user</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob Parr&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisIsMyObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thisIsMyFunction</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob Parr&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当命名构造函数或类名时，使用驼峰式写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bad = <span class=\"keyword\">new</span> <span class=\"title function_\">user</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;nope&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> good = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;yup&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>命名私有属性时使用前置下划线</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">__firstName__</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">firstName_</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_firstName</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>保存 this 引用时使用 _this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(self);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(that);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_this);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名函数时，下面的方式有利于堆栈跟踪</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意：IE8 和怪异模式下命名函数表示，戳此：<a href=\"http://kangax.github.io/nfe/\">http://kangax.github.io/nfe/</a> 如果文件作为一个类被导出，文件名应该和类名保持一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file contents</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckBox</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">CheckBox</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in some other file</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./checkBox&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./check_box&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./CheckBox&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"存取器\">存取器</span></h3><p>对于属性，访问器函数不是必须的</p>\n<p>如果定义了存取器函数，应参照 getVal() 和 setVal(‘hello’) 格式.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">age</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">getAge</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">age</span>(<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">setAge</span>(<span class=\"number\">25</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果属性时 boolean ，格式应为 isVal() or hasVal()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dragon.<span class=\"title function_\">age</span>()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dragon.<span class=\"title function_\">hasAge</span>()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建 get() and set() 函数时不错的想法，但是要保持一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options || (options = &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lightsaber = options.<span class=\"property\">lightsaber</span> || <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;lightsaber&#x27;</span>, lightsaber);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">set</span> = <span class=\"keyword\">function</span>(<span class=\"params\">key, val</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>[key] = val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">get</span> = <span class=\"keyword\">function</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[key];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"构造函数\">构造函数</span></h3><p>在原型对象上定义方法，而不是用新对象重写它。重写使继承变为不可能：重置原型将重写整个基类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;new jedi&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fight</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fighting&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">block</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">block</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;blocking&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">fight</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fighting&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">block</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">block</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;blocking&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>方法应该返回 this，有利于构成方法链</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">jump</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">jumping</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setHeight</span> = <span class=\"keyword\">function</span>(<span class=\"params\">height</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> luke = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedi</span>();</span><br><span class=\"line\">luke.<span class=\"title function_\">jump</span>(); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">luke.<span class=\"title function_\">setHeight</span>(<span class=\"number\">20</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">jump</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">jumping</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setHeight</span> = <span class=\"keyword\">function</span>(<span class=\"params\">height</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> luke = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">luke.<span class=\"title function_\">jump</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">setHeight</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<p>写一个自定义的 toString() 方法是可以的，只要确保它能正常运行并且不会产生副作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options || (options = &#123;&#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span> || <span class=\"string\">&#x27;no name&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jedi - &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">getName</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"事件\">事件</span></h3><p>当在事件对象上附加数据时（无论是 DOM 事件还是如 Backbone 一样拥有的私有事件），应传递散列对象而不是原始值，这可以让随后的贡献者给事件对象添加更多的数据，而不必去查找或者更新每一个事件处理程序。举个粟子，不要用下面的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, listing.<span class=\"property\">id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e, listingId</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with listingId</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>应该按如下方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, &#123; listingId : listing.<span class=\"property\">id</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with data.listingId</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"模块\">模块</span></h3><p>遵循原则：</p>\n<p>模块应该以 ! 开始，这能确保当脚本连接时，如果畸形模块忘记导入，包括最后一个分号，不会产生错误；<br>文件应该以驼峰式命名，放在同名的文件夹中，和单出口的名称相匹配；<br>定义一个 noConflict() 方法来设置导出模块之前的版本,并返回当前版本；<br>在模块的顶部申明 ’use strict’。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fancyInput/fancyInput.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> previousFancyInput = <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">FancyInput</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options || &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FancyInput</span>.<span class=\"property\">noConflict</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">noConflict</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span> = previousFancyInput;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">FancyInput</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span> = <span class=\"title class_\">FancyInput</span>;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"jquery\">jquery</span></h3><p>jQuery对象变量使用前缀$</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 缓存jQuery查询</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setSidebar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"string\">&#x27;pink&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setSidebar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">css</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"string\">&#x27;pink&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用级联$(‘.sidebar ul’)或父子$(‘.sidebar &gt; ul’)选择器进行DOM查询；</p>\n<p>在范围内使用find进行jQuery对象查询。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;ul&#x27;</span>, <span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar &gt; ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$sidebar.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br></pre></td></tr></table></figure>\n","excerpt":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B\">类型</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1\">对象</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84\">数组</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7\">属性</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87\">声明提升</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E7%AD%89\">比较运算符&amp;相等</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F\">使用快捷方式</a></li>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5%E5%9D%97\">语句块</a></li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n<li><a href=\"#%E9%80%97%E5%8F%B7\">逗号</a></li>\n<li><a href=\"#%E5%88%86%E5%8F%B7\">分号</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%86%E9%85%8D%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2\">类型分配&amp;强制转换</a></li>\n<li><a href=\"#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\">命名规范</a></li>\n<li><a href=\"#%E5%AD%98%E5%8F%96%E5%99%A8\">存取器</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">构造函数</a></li>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6\">事件</a></li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97\">模块</a></li>\n<li><a href=\"#jquery\">jquery</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><p>基本类型：访问基本类型时，应该直接操作类型值</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n</ul>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo;</span><br><span class=\"line\">bar[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo[<span class=\"number\">0</span>], bar[<span class=\"number\">0</span>]); <span class=\"comment\">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>\n\n<p>复合类型：访问复合类型时，应该操作其引用</p>\n<ul>\n<li>object</li>\n<li>array</li>\n<li>function</li>\n</ul>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>使用字面量语法创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不要使用保留字，在 IE8 中不起作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">default</span>: &#123; <span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">private</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">defaults</span>: &#123; <span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用易读的同义词代替保留字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c1ass</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">klass</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superman = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;alien&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>使用字面量语法创建数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = [];</span><br></pre></td></tr></table></figure>\n\n<p>添加数组元素时，使用 push 而不是直接添加</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someStack = [];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">someStack[someStack.<span class=\"property\">length</span>] = <span class=\"string\">&#x27;abracadabra&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">someStack.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>需要复制数组时，可以使用 slice</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> len = items.<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> itemsCopy = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">  itemsCopy[i] = items[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">itemsCopy = items.<span class=\"title function_\">slice</span>();</span><br></pre></td></tr></table></figure>\n\n<p>使用 slice 将类数组对象转为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">trigger</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>对字符串使用单引号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Bob Parr&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Bob Parr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">&quot;Bob &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">&#x27;Bob &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br></pre></td></tr></table></figure>\n\n<p>超过80个字符的字符串应该使用字符串连接符进行跨行</p>\n<p>注意：对长字符串过度使用连接符将会影响性能。相关的文章和主题讨论： jsPerf &amp; Discussion.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because \\</span></span><br><span class=\"line\"><span class=\"string\">of Batman. When you stop to think about how Batman had anything to do \\</span></span><br><span class=\"line\"><span class=\"string\">with this, you would get nowhere \\</span></span><br><span class=\"line\"><span class=\"string\">fast.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> errorMessage = <span class=\"string\">&#x27;This is a super long error that was thrown because &#x27;</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;of Batman. When you stop to think about how Batman had anything to do &#x27;</span> +</span><br><span class=\"line\">  <span class=\"string\">&#x27;with this, you would get nowhere fast.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以编程方式创建字符串的时应该使用 Array 的 join 方法而不是通过连接符，尤其是在 IE 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items;</span><br><span class=\"line\"><span class=\"keyword\">var</span> messages;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">messages = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;success&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one worked.&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;success&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one worked as well.&#x27;</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&#x27;This one did not work.&#x27;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">length = messages.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    items += <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    items[i] = <span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span> + items.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// very good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inbox</span>(<span class=\"params\">messages</span>) &#123;</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = messages.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    items.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;&lt;li&gt;&#x27;</span> + messages[i].<span class=\"property\">message</span> + <span class=\"string\">&#x27;&lt;/li&gt;&#x27;</span>;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;ul&gt;&#x27;</span> + items.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>) + <span class=\"string\">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// anonymous function expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anonymous = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// named function expression</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">named</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immediately-invoked function expression (IIFE)</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Welcome to the Internet. Please follow me.&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>不要在非函数块中 (if, while, etc) 声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它</p>\n<p>注意：ECMA-262 把块定义为一组语句，但函数声明不是一个语句： Read ECMA-262’s note on this issue.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentUser) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Nope.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentUser) &#123;</span><br><span class=\"line\">  test = <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Yup.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不要命名一个参数为 arguments ，否则它将优先于传递给每个函数作用域中的 arguments 对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nope</span>(<span class=\"params\">name, options, <span class=\"variable language_\">arguments</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yup</span>(<span class=\"params\">name, options, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>使用点表示法访问属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luke = &#123;</span><br><span class=\"line\">  <span class=\"attr\">jedi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = luke[<span class=\"string\">&#x27;jedi&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = luke.<span class=\"property\">jedi</span>;</span><br></pre></td></tr></table></figure>\n\n<p>用变量访问属性时要使用下标表示法([])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luke = &#123;</span><br><span class=\"line\">  <span class=\"attr\">jedi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getProp</span>(<span class=\"params\">prop</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> luke[prop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isJedi = <span class=\"title function_\">getProp</span>(<span class=\"string\">&#x27;jedi&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>总是使用 var 声明变量，不然其将变为全局变量。我们要想办法避免全局空间污染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">superPower = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperPower</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superPower = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperPower</span>();</span><br></pre></td></tr></table></figure>\n\n<p>使用 var 声明每个变量，这样很容易添加新的变量声明，而不用去担心用 a; 替换 a </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">// (compare to above, and try to spot the mistake)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball = <span class=\"string\">&#x27;z&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>最后声明未赋值的变量，这对于你需要根据之前已经赋值的变量对一个变量进行赋值时是很有帮助的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i, len, dragonball,</span><br><span class=\"line\">    items = <span class=\"title function_\">getItems</span>(),</span><br><span class=\"line\">    goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> items = <span class=\"title function_\">getItems</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> goSportsTeam = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dragonball;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br></pre></td></tr></table></figure>\n\n<p>在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doing stuff..&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//..other stuff..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;test&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">test</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doing stuff..&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//..other stuff..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"string\">&#x27;test&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"title function_\">getName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明提升\"><a href=\"#声明提升\" class=\"headerlink\" title=\"声明提升\"></a>声明提升</h3><p>变量声明是在作用域的顶端，但是赋值没有</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// we know this wouldn&#x27;t work (assuming there</span></span><br><span class=\"line\"><span class=\"comment\">// is no notDefined global variable)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(notDefined); <span class=\"comment\">// =&gt; throws a ReferenceError</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// creating a variable declaration after you</span></span><br><span class=\"line\"><span class=\"comment\">// reference the variable will work due to</span></span><br><span class=\"line\"><span class=\"comment\">// variable hoisting. Note: the assignment</span></span><br><span class=\"line\"><span class=\"comment\">// value of `true` is not hoisted.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(declaredButNotAssigned); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> declaredButNotAssigned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The interpreter is hoisting the variable</span></span><br><span class=\"line\"><span class=\"comment\">// declaration to the top of the scope,</span></span><br><span class=\"line\"><span class=\"comment\">// which means our example could be rewritten as:</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> declaredButNotAssigned;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(declaredButNotAssigned); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  declaredButNotAssigned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名表达式能提升他们的变量名，但不能提升函数赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anonymous); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">anonymous</span>(); <span class=\"comment\">// =&gt; TypeError anonymous is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> anonymous = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;anonymous function expression&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名函数表达式会提升变量名，而不是函数名或者函数体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(named); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">named</span>(); <span class=\"comment\">// =&gt; TypeError named is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">superPower</span>(); <span class=\"comment\">// =&gt; ReferenceError superPower is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">superPower</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Flying&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the same is true when the function name</span></span><br><span class=\"line\"><span class=\"comment\">// is the same as the variable name.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(named); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">named</span>(); <span class=\"comment\">// =&gt; TypeError named is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> named = <span class=\"keyword\">function</span> <span class=\"title function_\">named</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;named&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数声明会提升变量名和函数体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">superPower</span>(); <span class=\"comment\">// =&gt; Flying</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">superPower</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Flying&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"比较运算符-相等\"><a href=\"#比较运算符-相等\" class=\"headerlink\" title=\"比较运算符&amp;相等\"></a>比较运算符&amp;相等</h3><p>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; 代替 &#x3D;&#x3D; 和 !&#x3D;</p>\n<p>比较运算符进行计算时会利用 ToBoolean 方法进行强制转换数据类型，并遵从以下规则</p>\n<ul>\n<li>Objects 的计算值是 true</li>\n<li>Undefined 的计算值是 false</li>\n<li>Boolean 的计算值是 boolean 的值</li>\n<li>Numbers 如果是 -0 ，+0 或者 NaN ，则计算值是 false，反之是 true</li>\n<li>Strings 如果是空，则计算值是 false，反之是 true</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"comment\">// An array is an object, objects evaluate to true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用快捷方式\"><a href=\"#使用快捷方式\" class=\"headerlink\" title=\"使用快捷方式\"></a>使用快捷方式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (collection.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (collection.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句块\"><a href=\"#语句块\" class=\"headerlink\" title=\"语句块\"></a>语句块</h3><p>对多行的语句块使用大括号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于使用 if 和 else 的多行语句块，把 else 和 if 语句块的右大括号放在同一行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing1</span>();</span><br><span class=\"line\">  <span class=\"title function_\">thing2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing3</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (test) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing1</span>();</span><br><span class=\"line\">  <span class=\"title function_\">thing2</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">thing3</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>多行注释使用 &#x2F;** … *&#x2F;，需包含一个描述、所有参数的具体类型和值以及返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">// make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\">// based on the passed in tag name</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// @param &#123;String&#125; tag</span></span><br><span class=\"line\"><span class=\"comment\">// @return &#123;Element&#125; element</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\"> * based on the passed in tag name</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; <span class=\"variable\">tag</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Element</span>&#125; <span class=\"variable\">element</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单行注释使用 &#x2F;&#x2F; ，把单行注释放在语句的上一行，并且在注释之前空一行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> active = <span class=\"literal\">true</span>;  <span class=\"comment\">// is current tab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">// is current tab</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">_type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">_type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你指出的问题需要重新定位或者提出一个待解决的问题需要实现，给注释添加 FIXME or TODO 前缀有利于其他开发者快速理解。这些注释不同于通常的注释，因为它们是可实施的。这些实施措施就是FIXME – need to figure this out or TODO – need to implement.使用 &#x2F;&#x2F; FIXME: 给一个问题作注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Calculator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> shouldn&#x27;t use a global here</span></span><br><span class=\"line\">  total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 &#x2F;&#x2F;TODO: 给问题解决方案作注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Calculator</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> total should be configurable by an options param</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!-- more -->\n\n<h4 id=\"空白\"><a href=\"#空白\" class=\"headerlink\" title=\"空白\"></a>空白</h4><p>使用软制表符设置两个空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙∙∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在左大括号之前留一个空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在控制语句中（if, while etc），左括号之前留一个空格。函数的参数列表之前不要有空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isJedi) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fight</span> ();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isJedi) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fight</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> (<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用空白分隔运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=y+<span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = y + <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>用一个换行符结束文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);↵</span><br><span class=\"line\">↵</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>);↵</span><br></pre></td></tr></table></figure>\n\n<p>当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).<span class=\"title function_\">highlight</span>().<span class=\"title function_\">end</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">highlight</span>().</span><br><span class=\"line\">    <span class=\"title function_\">end</span>().</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">highlight</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">end</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>).<span class=\"title function_\">data</span>(data).<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>).<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>,  (radius + margin) * <span class=\"number\">2</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">&#x27;translate(&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;,&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">data</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>,  (radius + margin) * <span class=\"number\">2</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">&#x27;translate(&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;,&#x27;</span> + (radius + margin) + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在语句块和下一个语句之前留一个空行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h3><p>不要在语句前留逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> story = [</span><br><span class=\"line\">    once</span><br><span class=\"line\">  , upon</span><br><span class=\"line\">  , aTime</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> story = [</span><br><span class=\"line\">  once,</span><br><span class=\"line\">  upon,</span><br><span class=\"line\">  aTime</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Bob&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Parr&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">heroName</span>: <span class=\"string\">&#x27;Mr. Incredible&#x27;</span></span><br><span class=\"line\">  , <span class=\"attr\">superPower</span>: <span class=\"string\">&#x27;strength&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Parr&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">heroName</span>: <span class=\"string\">&#x27;Mr. Incredible&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">superPower</span>: <span class=\"string\">&#x27;strength&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不要有多余逗号：这会在IE6、IE7和IE9的怪异模式中导致一些问题；同时，在ES3的一些实现中，多余的逗号会增加数组的长度。在ES5中已经澄清（source）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Kevin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flynn&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> heroes = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;Batman&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Superman&#x27;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Kevin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Flynn&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> heroes = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;Batman&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Superman&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>恩，这也是规范一部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> name</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></span><br><span class=\"line\">;(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Skywalker&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型分配-强制转换\"><a href=\"#类型分配-强制转换\" class=\"headerlink\" title=\"类型分配&amp;强制转换\"></a>类型分配&amp;强制转换</h3><p>执行强制类型转换的语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Strings</span>:</span><br><span class=\"line\"><span class=\"comment\">//  =&gt; this.reviewScore = 9;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"string\">&#x27;&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"string\">&#x27;&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27; total score&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> totalScore = <span class=\"variable language_\">this</span>.<span class=\"property\">reviewScore</span> + <span class=\"string\">&#x27; total score&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用 parseInt 对 Numbers 进行转换，并带一个进制作为参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inputValue = <span class=\"string\">&#x27;4&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = +inputValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = inputValue &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"built_in\">parseInt</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"title class_\">Number</span>(inputValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"built_in\">parseInt</span>(inputValue, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p>无论出于什么原因，或许你做了一些”粗野”的事；或许 parseInt 成了你的瓶颈；或许考虑到性能，需要使用位运算，都要用注释说明你为什么这么做</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * parseInt was the reason my code was slow.</span></span><br><span class=\"line\"><span class=\"comment\"> * Bitshifting the String to coerce it to a</span></span><br><span class=\"line\"><span class=\"comment\"> * Number made it a lot faster.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = inputValue &gt;&gt; <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注意：当使用位运算时，Numbers 被视为64位值，但是位运算总是返回32位整型 (source) 。对于整型值大于32位的进行位运算将导致不可预见的行为。Discussion. 最大的有符号32位整数是2,147,483,647</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2147483647</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; 2147483647</span></span><br><span class=\"line\"><span class=\"number\">2147483648</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; -2147483648</span></span><br><span class=\"line\"><span class=\"number\">2147483649</span> &gt;&gt; <span class=\"number\">0</span> <span class=\"comment\">//=&gt; -2147483647</span></span><br><span class=\"line\"><span class=\"title class_\">Booleans</span>:</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = <span class=\"title class_\">Boolean</span>(age);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><p>避免单字母名称，让名称具有描述性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">q</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..stuff..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当命名对象、函数和实例时使用骆驼拼写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">OBJEcttsssss</span> = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> this_is_my_object = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> <span class=\"title function_\">user</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob Parr&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> thisIsMyObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thisIsMyFunction</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob Parr&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当命名构造函数或类名时，使用驼峰式写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bad = <span class=\"keyword\">new</span> <span class=\"title function_\">user</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;nope&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> good = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;yup&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>命名私有属性时使用前置下划线</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">__firstName__</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">firstName_</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_firstName</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>保存 this 引用时使用 _this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(self);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(that);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_this);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名函数时，下面的方式有利于堆栈跟踪</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意：IE8 和怪异模式下命名函数表示，戳此：<a href=\"http://kangax.github.io/nfe/\">http://kangax.github.io/nfe/</a> 如果文件作为一个类被导出，文件名应该和类名保持一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file contents</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckBox</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">CheckBox</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in some other file</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./checkBox&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./check_box&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CheckBox</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./CheckBox&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h3><p>对于属性，访问器函数不是必须的</p>\n<p>如果定义了存取器函数，应参照 getVal() 和 setVal(‘hello’) 格式.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">age</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">getAge</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">age</span>(<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dragon.<span class=\"title function_\">setAge</span>(<span class=\"number\">25</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果属性时 boolean ，格式应为 isVal() or hasVal()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dragon.<span class=\"title function_\">age</span>()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!dragon.<span class=\"title function_\">hasAge</span>()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建 get() and set() 函数时不错的想法，但是要保持一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options || (options = &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lightsaber = options.<span class=\"property\">lightsaber</span> || <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;lightsaber&#x27;</span>, lightsaber);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">set</span> = <span class=\"keyword\">function</span>(<span class=\"params\">key, val</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>[key] = val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">get</span> = <span class=\"keyword\">function</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[key];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>在原型对象上定义方法，而不是用新对象重写它。重写使继承变为不可能：重置原型将重写整个基类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;new jedi&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fight</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fighting&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">block</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">block</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;blocking&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">fight</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fighting&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">block</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">block</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;blocking&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>方法应该返回 this，有利于构成方法链</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">jump</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">jumping</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setHeight</span> = <span class=\"keyword\">function</span>(<span class=\"params\">height</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> luke = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedi</span>();</span><br><span class=\"line\">luke.<span class=\"title function_\">jump</span>(); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">luke.<span class=\"title function_\">setHeight</span>(<span class=\"number\">20</span>); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">jump</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">jumping</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setHeight</span> = <span class=\"keyword\">function</span>(<span class=\"params\">height</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> luke = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">luke.<span class=\"title function_\">jump</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">setHeight</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n\n<p>写一个自定义的 toString() 方法是可以的，只要确保它能正常运行并且不会产生副作用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Jedi</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  options || (options = &#123;&#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span> || <span class=\"string\">&#x27;no name&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Jedi</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jedi - &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">getName</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>当在事件对象上附加数据时（无论是 DOM 事件还是如 Backbone 一样拥有的私有事件），应传递散列对象而不是原始值，这可以让随后的贡献者给事件对象添加更多的数据，而不必去查找或者更新每一个事件处理程序。举个粟子，不要用下面的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, listing.<span class=\"property\">id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e, listingId</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with listingId</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>应该按如下方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, &#123; listingId : listing.<span class=\"property\">id</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listingUpdated&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with data.listingId</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>遵循原则：</p>\n<p>模块应该以 ! 开始，这能确保当脚本连接时，如果畸形模块忘记导入，包括最后一个分号，不会产生错误；<br>文件应该以驼峰式命名，放在同名的文件夹中，和单出口的名称相匹配；<br>定义一个 noConflict() 方法来设置导出模块之前的版本,并返回当前版本；<br>在模块的顶部申明 ’use strict’。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fancyInput/fancyInput.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> previousFancyInput = <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">FancyInput</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options || &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FancyInput</span>.<span class=\"property\">noConflict</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">noConflict</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span> = previousFancyInput;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">FancyInput</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">global</span>.<span class=\"property\">FancyInput</span> = <span class=\"title class_\">FancyInput</span>;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h3><p>jQuery对象变量使用前缀$</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 缓存jQuery查询</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setSidebar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"string\">&#x27;pink&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setSidebar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $sidebar = $(<span class=\"string\">&#x27;.sidebar&#x27;</span>);</span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...stuff...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $sidebar.<span class=\"title function_\">css</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;background-color&#x27;</span>: <span class=\"string\">&#x27;pink&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用级联$(‘.sidebar ul’)或父子$(‘.sidebar &gt; ul’)选择器进行DOM查询；</p>\n<p>在范围内使用find进行jQuery对象查询。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;ul&#x27;</span>, <span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar&#x27;</span>).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;.sidebar &gt; ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$sidebar.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;ul&#x27;</span>).<span class=\"title function_\">hide</span>();</span><br></pre></td></tr></table></figure>"},{"title":"js类型隐式转换坑点","author":"Jelon","date":"2019-06-23T00:00:00.000Z","thumbnail":null,"blogexcerpt":"一. 字符连接符；即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算数运算符的“+”号混淆，算数运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。1. 字符串类型+数字类型->（String(字符串) + String(数字)）2. 字符串类型+布尔类型->（String(字符串) + String(布尔值)）...","_content":"\n一、字符连接符【转字符串】\n\n>即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算术运算符的“+”号混淆，算术运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。\n\n1. 字符串类型+数字类型->（String(字符串) + String(数字)）\n\n\t```js\n\tconsole.log('abc' + 1);  // 输出：'abc1'\n\tconsole.log('abc' + 234); // 输出：'abc234' \n\t```\n\n2. 字符串类型+布尔类型->（String(字符串) + String(布尔值)）\n\n\t```js\n\tconsole.log('abc' + true); // 输出：'abctrue'\n\tconsole.log('abc' + false); // 输出：'abcfalse'\n\t```\n\n3. 字符串类型+Undefined类型->（String(字符串) + String(undefined)）\n\n\t```js\n\tconsole.log('abc' + undefined); // 输出：'abcundefined'\n\t```\n\n4. 字符串类型+Null类型-> (String(字符串) + String(null))\n\n\t```js\n\tconsole.log('abc' + null); 输出： 'abcnull'\n\t```\n\n小结：1-4你会发现一个规律，只要一边为字符串类型，结果都会转成字符串类型，如果说这个比较好理解，那么接下来的可能会稍微有点难理解，就是两边都不是字符串类型的数据，但结果会转成字符串类型。\n\n5. 数组类型 + 数组类型->（String(数组) + String(数组)）\n\n\t```js\n\tconsole.log([] + []); // 输出：'' ,即空字符串\n\tconsole.log([ 1, 2, 3, 4 ] + [ 5, 6, 777 ]); // 输出：'1,2,3,45,6,777'\n\t```\n\n6. 对象 + 对象->（String(对象) + String(对象)）\n\n\t```js\n\tconsole.log({} + {}); // 输出：'[object Object][object Object]'\n\tconsole.log({ name: 'Jelon' } + { name: 'Huozhi' }); // 输出：'[object Object][object Object]'\n\tconsole.log({} + { name: 'Jelon' }); // 输出：'[object Object][object Object]'\n\t```\n\n7. 数组 + 对象-> (String(数组) + String(对象))\n\n\t```js\n\tconsole.log([] + { name:  'Jelon' }); // 输出：'[object Object]'\n\tconsole.log([ 1, 2, 3 ] + { name: 'Jelon' }); // 输出：'1,2,3[object Object]'\n\t```\n\n8. 数组 + Null类型（也会转成字符串连接）\n\n\t```js\n\tconsole.log([] + null); // 输出：'null'\n\tconsole.log([ 1, 2, 3 ] + null); // 输出：1,2,3null\n\t```\n\n9. Null类型 + 对象（注意，顺序不能变，必须null在第一位，因为反过来就变成算术运算了，算术运算章节再详讲）\n\n\t```js\n\tconsole.log(null + {}); // 输出：'null[object Object]'\n\tconsole.log(null + { name: 'Jelon' }); // 输出：'null[object Object]'\n\t```\n\n10. Undefined类型 + 对象（注意，顺序不能变，必须undefined在第一位，因为反过来也是变成算术运算了，算术运算章节在详讲）\n\n\t```js\n\tconsole.log(undefined + {}); // 输出：'undefined[object Object]'\n\tconsole.log(undefined + { name: 'Jelon' }); // 输出：'undefined[object Object]'\n\t```\n\n11. Undefined类型 + 数组（顺序可改变）\n\n\t```js\n\tconsole.log(undefined + [1, 2, 3]); // 输出：'undefined1,2,3'\n\tconsole.log([1, 2, 3] + undefined); // 输出：'1,2,3undefined'\n\t```\n\n12. 数字类型/布尔类型 + 数组->（String(数字/布尔) + String(数组)）\n\n\t```js\n\tconsole.log(1 + [ 2, 3 ]); // 输出：'12,3'\n\tconsole.log([] + 123); // 输出：'123'\n\tconsole.log(true + []); // 输出：'true'\n\t```\n\n13. 数字类型/布尔类型 + 对象（注意，顺序不可逆，数字类型/布尔类型必须在第一位，否则会转换为算术运算）\n\n\t```js\n\tconsole.log(1 + { name: 'Jelon'  }); // 输出：'1[object Object]'\n\tconsole.log(123 + {}); // 输出：'123[object Object]'\n\tconsole.log(true + {}); // 输出：'true[object Object]'\n\t```\n\n小结：5-13你会发现一个规律，那就是任意一个数据类型 + 数组/对象，结果都会隐式转换为字符串类型；对于任意数据类型 + 对象，顺序是不可逆。\n\n二、算术运算符“+”【转数字类型】\n\n1. 数字类型 + 布尔类型/Null类型->（Number(数字) + Number(布尔值/null)），顺序可逆\n\n\t```js\n\tconsole.log(1 + true); // 输出：2\n\tconsole.log(false + 1); // 输出：2\n\tconsole.log(1 + null); // 输出：1\n\t```\n\n2. 对象 + 数字类型/Null类型（注意，顺序不可逆）\n\n\t```js\n\tconsole.log({} + 4); // 输出：4\n\tconsole.log({ name: 'Jelon' } + 4); // 输出：4\n\tconsole.log({} + null); // 输出：0\n\t```\n\n3. 布尔类型 + 布尔类型->（Number(布尔值) + Number(布尔值)）\n\n\t```js\n\tconsole.log(true + true); // 输出：2\n\tconsole.log(false + false); // 输出：0\n\t```\n\n4. 布尔类型 + Null类型->（Number(布尔值) + Number(null)）\n\n\t```js\n\tconsole.log(true + null); // 输出：1\n\tconsole.log(null + false); // 输出：0\n\t```\n\n三、其他运算符\n\n1. 按非运算（~）-> 数字类型\n\n\t```js\n\tconsole.log(~undefined); // 输出： -1\n\tconsole.log(~~undefined); // 输出： 0\n\t\n\tconsole.log(~false); // 输出： -1\n\tconsole.log(~~false); // 输出： 0\n\t\n\tconsole.log(~true); // 输出：-2\n\tconsole.log(~~true); // 输出：1\n\t\n\tconsole.log(~'10'); // 输出：-11\n\tconsole.log(~~'10'); // 输出：10\n\t```\n","source":"_posts/js-type-implicit.md","raw":"---\n\ntitle: js类型隐式转换坑点\ncategories:\n  - 生活琐事\nauthor: Jelon\ndate: 2019-06-23\ntags:\n\t- js类型\n\t- 隐式转换\nthumbnail:\nblogexcerpt: 一. 字符连接符；即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算数运算符的“+”号混淆，算数运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。1. 字符串类型+数字类型->（String(字符串) + String(数字)）2. 字符串类型+布尔类型->（String(字符串) + String(布尔值)）...\n\n---\n\n一、字符连接符【转字符串】\n\n>即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算术运算符的“+”号混淆，算术运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。\n\n1. 字符串类型+数字类型->（String(字符串) + String(数字)）\n\n\t```js\n\tconsole.log('abc' + 1);  // 输出：'abc1'\n\tconsole.log('abc' + 234); // 输出：'abc234' \n\t```\n\n2. 字符串类型+布尔类型->（String(字符串) + String(布尔值)）\n\n\t```js\n\tconsole.log('abc' + true); // 输出：'abctrue'\n\tconsole.log('abc' + false); // 输出：'abcfalse'\n\t```\n\n3. 字符串类型+Undefined类型->（String(字符串) + String(undefined)）\n\n\t```js\n\tconsole.log('abc' + undefined); // 输出：'abcundefined'\n\t```\n\n4. 字符串类型+Null类型-> (String(字符串) + String(null))\n\n\t```js\n\tconsole.log('abc' + null); 输出： 'abcnull'\n\t```\n\n小结：1-4你会发现一个规律，只要一边为字符串类型，结果都会转成字符串类型，如果说这个比较好理解，那么接下来的可能会稍微有点难理解，就是两边都不是字符串类型的数据，但结果会转成字符串类型。\n\n5. 数组类型 + 数组类型->（String(数组) + String(数组)）\n\n\t```js\n\tconsole.log([] + []); // 输出：'' ,即空字符串\n\tconsole.log([ 1, 2, 3, 4 ] + [ 5, 6, 777 ]); // 输出：'1,2,3,45,6,777'\n\t```\n\n6. 对象 + 对象->（String(对象) + String(对象)）\n\n\t```js\n\tconsole.log({} + {}); // 输出：'[object Object][object Object]'\n\tconsole.log({ name: 'Jelon' } + { name: 'Huozhi' }); // 输出：'[object Object][object Object]'\n\tconsole.log({} + { name: 'Jelon' }); // 输出：'[object Object][object Object]'\n\t```\n\n7. 数组 + 对象-> (String(数组) + String(对象))\n\n\t```js\n\tconsole.log([] + { name:  'Jelon' }); // 输出：'[object Object]'\n\tconsole.log([ 1, 2, 3 ] + { name: 'Jelon' }); // 输出：'1,2,3[object Object]'\n\t```\n\n8. 数组 + Null类型（也会转成字符串连接）\n\n\t```js\n\tconsole.log([] + null); // 输出：'null'\n\tconsole.log([ 1, 2, 3 ] + null); // 输出：1,2,3null\n\t```\n\n9. Null类型 + 对象（注意，顺序不能变，必须null在第一位，因为反过来就变成算术运算了，算术运算章节再详讲）\n\n\t```js\n\tconsole.log(null + {}); // 输出：'null[object Object]'\n\tconsole.log(null + { name: 'Jelon' }); // 输出：'null[object Object]'\n\t```\n\n10. Undefined类型 + 对象（注意，顺序不能变，必须undefined在第一位，因为反过来也是变成算术运算了，算术运算章节在详讲）\n\n\t```js\n\tconsole.log(undefined + {}); // 输出：'undefined[object Object]'\n\tconsole.log(undefined + { name: 'Jelon' }); // 输出：'undefined[object Object]'\n\t```\n\n11. Undefined类型 + 数组（顺序可改变）\n\n\t```js\n\tconsole.log(undefined + [1, 2, 3]); // 输出：'undefined1,2,3'\n\tconsole.log([1, 2, 3] + undefined); // 输出：'1,2,3undefined'\n\t```\n\n12. 数字类型/布尔类型 + 数组->（String(数字/布尔) + String(数组)）\n\n\t```js\n\tconsole.log(1 + [ 2, 3 ]); // 输出：'12,3'\n\tconsole.log([] + 123); // 输出：'123'\n\tconsole.log(true + []); // 输出：'true'\n\t```\n\n13. 数字类型/布尔类型 + 对象（注意，顺序不可逆，数字类型/布尔类型必须在第一位，否则会转换为算术运算）\n\n\t```js\n\tconsole.log(1 + { name: 'Jelon'  }); // 输出：'1[object Object]'\n\tconsole.log(123 + {}); // 输出：'123[object Object]'\n\tconsole.log(true + {}); // 输出：'true[object Object]'\n\t```\n\n小结：5-13你会发现一个规律，那就是任意一个数据类型 + 数组/对象，结果都会隐式转换为字符串类型；对于任意数据类型 + 对象，顺序是不可逆。\n\n二、算术运算符“+”【转数字类型】\n\n1. 数字类型 + 布尔类型/Null类型->（Number(数字) + Number(布尔值/null)），顺序可逆\n\n\t```js\n\tconsole.log(1 + true); // 输出：2\n\tconsole.log(false + 1); // 输出：2\n\tconsole.log(1 + null); // 输出：1\n\t```\n\n2. 对象 + 数字类型/Null类型（注意，顺序不可逆）\n\n\t```js\n\tconsole.log({} + 4); // 输出：4\n\tconsole.log({ name: 'Jelon' } + 4); // 输出：4\n\tconsole.log({} + null); // 输出：0\n\t```\n\n3. 布尔类型 + 布尔类型->（Number(布尔值) + Number(布尔值)）\n\n\t```js\n\tconsole.log(true + true); // 输出：2\n\tconsole.log(false + false); // 输出：0\n\t```\n\n4. 布尔类型 + Null类型->（Number(布尔值) + Number(null)）\n\n\t```js\n\tconsole.log(true + null); // 输出：1\n\tconsole.log(null + false); // 输出：0\n\t```\n\n三、其他运算符\n\n1. 按非运算（~）-> 数字类型\n\n\t```js\n\tconsole.log(~undefined); // 输出： -1\n\tconsole.log(~~undefined); // 输出： 0\n\t\n\tconsole.log(~false); // 输出： -1\n\tconsole.log(~~false); // 输出： 0\n\t\n\tconsole.log(~true); // 输出：-2\n\tconsole.log(~~true); // 输出：1\n\t\n\tconsole.log(~'10'); // 输出：-11\n\tconsole.log(~~'10'); // 输出：10\n\t```\n","slug":"js-type-implicit","published":1,"updated":"2019-06-23T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2m0019k8svfnhldfh1","content":"<p>一、字符连接符【转字符串】</p>\n<blockquote>\n<p>即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算术运算符的“+”号混淆，算术运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。</p>\n</blockquote>\n<ol>\n<li><p>字符串类型+数字类型-&gt;（String(字符串) + String(数字)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"number\">1</span>);  <span class=\"comment\">// 输出：&#x27;abc1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"number\">234</span>); <span class=\"comment\">// 输出：&#x27;abc234&#x27; </span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+布尔类型-&gt;（String(字符串) + String(布尔值)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：&#x27;abctrue&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：&#x27;abcfalse&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+Undefined类型-&gt;（String(字符串) + String(undefined)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出：&#x27;abcundefined&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+Null类型-&gt; (String(字符串) + String(null))</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">null</span>); 输出： <span class=\"string\">&#x27;abcnull&#x27;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>小结：1-4你会发现一个规律，只要一边为字符串类型，结果都会转成字符串类型，如果说这个比较好理解，那么接下来的可能会稍微有点难理解，就是两边都不是字符串类型的数据，但结果会转成字符串类型。</p>\n<ol start=\"5\">\n<li><p>数组类型 + 数组类型-&gt;（String(数组) + String(数组)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + []); <span class=\"comment\">// 输出：&#x27;&#x27; ,即空字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ] + [ <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">777</span> ]); <span class=\"comment\">// 输出：&#x27;1,2,3,45,6,777&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象 + 对象-&gt;（String(对象) + String(对象)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125; + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Huozhi&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组 + 对象-&gt; (String(数组) + String(对象))</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + &#123; <span class=\"attr\">name</span>:  <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;1,2,3[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组 + Null类型（也会转成字符串连接）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：&#x27;null&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1,2,3null</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Null类型 + 对象（注意，顺序不能变，必须null在第一位，因为反过来就变成算术运算了，算术运算章节再详讲）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;null[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;null[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Undefined类型 + 对象（注意，顺序不能变，必须undefined在第一位，因为反过来也是变成算术运算了，算术运算章节在详讲）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;undefined[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;undefined[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Undefined类型 + 数组（顺序可改变）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 输出：&#x27;undefined1,2,3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] + <span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出：&#x27;1,2,3undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字类型/布尔类型 + 数组-&gt;（String(数字/布尔) + String(数组)）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + [ <span class=\"number\">2</span>, <span class=\"number\">3</span> ]); <span class=\"comment\">// 输出：&#x27;12,3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + <span class=\"number\">123</span>); <span class=\"comment\">// 输出：&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + []); <span class=\"comment\">// 输出：&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字类型/布尔类型 + 对象（注意，顺序不可逆，数字类型/布尔类型必须在第一位，否则会转换为算术运算）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span>  &#125;); <span class=\"comment\">// 输出：&#x27;1[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;123[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;true[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>小结：5-13你会发现一个规律，那就是任意一个数据类型 + 数组/对象，结果都会隐式转换为字符串类型；对于任意数据类型 + 对象，顺序是不可逆。</p>\n<p>二、算术运算符“+”【转数字类型】</p>\n<ol>\n<li><p>数字类型 + 布尔类型/Null类型-&gt;（Number(数字) + Number(布尔值/null)），顺序可逆</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象 + 数字类型/Null类型（注意，顺序不可逆）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + <span class=\"number\">4</span>); <span class=\"comment\">// 输出：4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125; + <span class=\"number\">4</span>); <span class=\"comment\">// 输出：4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔类型 + 布尔类型-&gt;（Number(布尔值) + Number(布尔值)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔类型 + Null类型-&gt;（Number(布尔值) + Number(null)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>三、其他运算符</p>\n<ol>\n<li><p>按非运算（~）-&gt; 数字类型</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出： -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出： 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">false</span>); <span class=\"comment\">// 输出： -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">false</span>); <span class=\"comment\">// 输出： 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">true</span>); <span class=\"comment\">// 输出：-2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">true</span>); <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"string\">&#x27;10&#x27;</span>); <span class=\"comment\">// 输出：-11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"string\">&#x27;10&#x27;</span>); <span class=\"comment\">// 输出：10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一、字符连接符【转字符串】</p>\n<blockquote>\n<p>即字符串连接操作，一般以“+”号来进行连接，在隐式转换时容易跟算术运算符的“+”号混淆，算术运算符“+”在后面的节点中会具体再介绍，本节点主要是列举一些常见的不同类型数据隐式转换成字符串连接的例子。</p>\n</blockquote>\n<ol>\n<li><p>字符串类型+数字类型-&gt;（String(字符串) + String(数字)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"number\">1</span>);  <span class=\"comment\">// 输出：&#x27;abc1&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"number\">234</span>); <span class=\"comment\">// 输出：&#x27;abc234&#x27; </span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+布尔类型-&gt;（String(字符串) + String(布尔值)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：&#x27;abctrue&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：&#x27;abcfalse&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+Undefined类型-&gt;（String(字符串) + String(undefined)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出：&#x27;abcundefined&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串类型+Null类型-&gt; (String(字符串) + String(null))</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;abc&#x27;</span> + <span class=\"literal\">null</span>); 输出： <span class=\"string\">&#x27;abcnull&#x27;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>小结：1-4你会发现一个规律，只要一边为字符串类型，结果都会转成字符串类型，如果说这个比较好理解，那么接下来的可能会稍微有点难理解，就是两边都不是字符串类型的数据，但结果会转成字符串类型。</p>\n<ol start=\"5\">\n<li><p>数组类型 + 数组类型-&gt;（String(数组) + String(数组)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + []); <span class=\"comment\">// 输出：&#x27;&#x27; ,即空字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ] + [ <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">777</span> ]); <span class=\"comment\">// 输出：&#x27;1,2,3,45,6,777&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象 + 对象-&gt;（String(对象) + String(对象)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125; + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Huozhi&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object][object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组 + 对象-&gt; (String(数组) + String(对象))</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + &#123; <span class=\"attr\">name</span>:  <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;1,2,3[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组 + Null类型（也会转成字符串连接）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([] + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：&#x27;null&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1,2,3null</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Null类型 + 对象（注意，顺序不能变，必须null在第一位，因为反过来就变成算术运算了，算术运算章节再详讲）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;null[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;null[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Undefined类型 + 对象（注意，顺序不能变，必须undefined在第一位，因为反过来也是变成算术运算了，算术运算章节在详讲）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;undefined[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125;); <span class=\"comment\">// 输出：&#x27;undefined[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Undefined类型 + 数组（顺序可改变）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> + [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 输出：&#x27;undefined1,2,3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] + <span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出：&#x27;1,2,3undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字类型/布尔类型 + 数组-&gt;（String(数字/布尔) + String(数组)）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + [ <span class=\"number\">2</span>, <span class=\"number\">3</span> ]); <span class=\"comment\">// 输出：&#x27;12,3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + <span class=\"number\">123</span>); <span class=\"comment\">// 输出：&#x27;123&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + []); <span class=\"comment\">// 输出：&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数字类型/布尔类型 + 对象（注意，顺序不可逆，数字类型/布尔类型必须在第一位，否则会转换为算术运算）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span>  &#125;); <span class=\"comment\">// 输出：&#x27;1[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;123[object Object]&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + &#123;&#125;); <span class=\"comment\">// 输出：&#x27;true[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>小结：5-13你会发现一个规律，那就是任意一个数据类型 + 数组/对象，结果都会隐式转换为字符串类型；对于任意数据类型 + 对象，顺序是不可逆。</p>\n<p>二、算术运算符“+”【转数字类型】</p>\n<ol>\n<li><p>数字类型 + 布尔类型/Null类型-&gt;（Number(数字) + Number(布尔值/null)），顺序可逆</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象 + 数字类型/Null类型（注意，顺序不可逆）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + <span class=\"number\">4</span>); <span class=\"comment\">// 输出：4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jelon&#x27;</span> &#125; + <span class=\"number\">4</span>); <span class=\"comment\">// 输出：4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔类型 + 布尔类型-&gt;（Number(布尔值) + Number(布尔值)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 输出：2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔类型 + Null类型-&gt;（Number(布尔值) + Number(null)）</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> + <span class=\"literal\">null</span>); <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + <span class=\"literal\">false</span>); <span class=\"comment\">// 输出：0</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>三、其他运算符</p>\n<ol>\n<li><p>按非运算（~）-&gt; 数字类型</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出： -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">undefined</span>); <span class=\"comment\">// 输出： 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">false</span>); <span class=\"comment\">// 输出： -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">false</span>); <span class=\"comment\">// 输出： 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"literal\">true</span>); <span class=\"comment\">// 输出：-2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"literal\">true</span>); <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~<span class=\"string\">&#x27;10&#x27;</span>); <span class=\"comment\">// 输出：-11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(~~<span class=\"string\">&#x27;10&#x27;</span>); <span class=\"comment\">// 输出：10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"【每日一题】01.06. 字符串压缩","author":"Jelon","date":"2020-03-16T00:00:00.000Z","thumbnail":null,"blogexcerpt":"字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）...","_content":"\n字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 `aabcccccaaa` 会变为 `a2b1c5a3`。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。\n\n**示例1:**\n\n```\n输入：\"aabcccccaaa\"\n输出：\"a2b1c5a3\"\n```\n\n**示例2:**\n\n```\n输入：\"abbccd\"\n输出：\"abbccd\"\n解释：\"abbccd\"压缩后为\"a1b2c2d1\"，比原字符串长度更长。\n```\n\n**提示：**\n\n1. 字符串长度在[0, 50000]范围内。\n\n##### 个人解答\n\n```js\n/**\n * @param {string} S\n * @return {string}\n */\nvar compressString = function(S) {\n    var res = String(S[0]);\n    var count = 1;\n    for (var i = 1; i < S.length; i++) {\n        if (S[i] === S[i-1]) {\n            ++count;\n            if (i === S.length - 1) {\n                res += count;\n            }\n        } else {\n            if (i !== S.length - 1) {\n                res += count + S[i];\n                count = 1;\n            } else {\n                res += count + S[i] + '1';\n            }\n        }\n    }\n    if (res.length >= S.length) {\n        res = S;\n    }\n    return res;\n};\n```\n\n##### 执行结果\n\n执行用时：64 ms, 在所有 JavaScript 提交中击败了 97.50的用户；\n内存消耗：38.9 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户。\n","source":"_posts/leetcode-01-06.md","raw":"---\ntitle: 【每日一题】01.06. 字符串压缩\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-16\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）...\n\n---\n\n字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 `aabcccccaaa` 会变为 `a2b1c5a3`。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。\n\n**示例1:**\n\n```\n输入：\"aabcccccaaa\"\n输出：\"a2b1c5a3\"\n```\n\n**示例2:**\n\n```\n输入：\"abbccd\"\n输出：\"abbccd\"\n解释：\"abbccd\"压缩后为\"a1b2c2d1\"，比原字符串长度更长。\n```\n\n**提示：**\n\n1. 字符串长度在[0, 50000]范围内。\n\n##### 个人解答\n\n```js\n/**\n * @param {string} S\n * @return {string}\n */\nvar compressString = function(S) {\n    var res = String(S[0]);\n    var count = 1;\n    for (var i = 1; i < S.length; i++) {\n        if (S[i] === S[i-1]) {\n            ++count;\n            if (i === S.length - 1) {\n                res += count;\n            }\n        } else {\n            if (i !== S.length - 1) {\n                res += count + S[i];\n                count = 1;\n            } else {\n                res += count + S[i] + '1';\n            }\n        }\n    }\n    if (res.length >= S.length) {\n        res = S;\n    }\n    return res;\n};\n```\n\n##### 执行结果\n\n执行用时：64 ms, 在所有 JavaScript 提交中击败了 97.50的用户；\n内存消耗：38.9 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户。\n","slug":"leetcode-01-06","published":1,"updated":"2020-03-16T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2n001ck8sv3c0od7l0","content":"<p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 <code>aabcccccaaa</code> 会变为 <code>a2b1c5a3</code>。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p>\n<p><strong>示例1:</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">&quot;aabcccccaaa&quot;</span></span><br><span class=\"line\">输出：<span class=\"string\">&quot;a2b1c5a3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2:</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">&quot;abbccd&quot;</span></span><br><span class=\"line\">输出：<span class=\"string\">&quot;abbccd&quot;</span></span><br><span class=\"line\">解释：<span class=\"string\">&quot;abbccd&quot;</span>压缩后为<span class=\"string\">&quot;a1b2c2d1&quot;</span>，比原字符串长度更长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>字符串长度在[0, 50000]范围内。</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">S</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compressString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">S</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">String</span>(S[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (S[i] === S[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === S.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res += count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== S.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res += count + S[i];</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res += count + S[i] + <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length &gt;= S.length) &#123;</span><br><span class=\"line\">        res = S;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：64 ms, 在所有 JavaScript 提交中击败了 97.50的用户；<br>内存消耗：38.9 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 <code>aabcccccaaa</code> 会变为 <code>a2b1c5a3</code>。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p>\n<p><strong>示例1:</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">&quot;aabcccccaaa&quot;</span></span><br><span class=\"line\">输出：<span class=\"string\">&quot;a2b1c5a3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2:</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">&quot;abbccd&quot;</span></span><br><span class=\"line\">输出：<span class=\"string\">&quot;abbccd&quot;</span></span><br><span class=\"line\">解释：<span class=\"string\">&quot;abbccd&quot;</span>压缩后为<span class=\"string\">&quot;a1b2c2d1&quot;</span>，比原字符串长度更长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>字符串长度在[0, 50000]范围内。</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">S</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compressString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">S</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">String</span>(S[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (S[i] === S[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === S.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res += count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== S.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                res += count + S[i];</span><br><span class=\"line\">                count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res += count + S[i] + <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.length &gt;= S.length) &#123;</span><br><span class=\"line\">        res = S;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：64 ms, 在所有 JavaScript 提交中击败了 97.50的用户；<br>内存消耗：38.9 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户。</p>\n"},{"title":"【每日一题】面试题 02.05. 链表求和","author":"Jelon","date":"2020-05-21T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定两个用链表表示的整数，每个节点包含一个数位。这些数位是反向存放的，也就是个位排在链表首部。编写函数对这两个整数求和，并用链表形式返回结果。...","_content":"\n给定两个用链表表示的整数，每个节点包含一个数位。\n\n这些数位是反向存放的，也就是个位排在链表首部。\n\n编写函数对这两个整数求和，并用链表形式返回结果。\n\n \n\n**示例：**\n\n```\n输入：(7 -> 1 -> 6) + (5 -> 9 -> 2)，即617 + 295\n输出：2 -> 1 -> 9，即912\n进阶：假设这些数位是正向存放的，请再做一遍。\n```\n\n**示例：**\n\n```\n输入：(6 -> 1 -> 7) + (2 -> 9 -> 5)，即617 + 295\n输出：9 -> 1 -> 2，即912\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  var count = 0 // 进数位\n  var head = {} // 头节点\n  var cur = head // 指针节点\n  while (l1 || l2 || count) {\n    count += (l1 && l1.val) + (l2 && l2.val)\n    cur = cur.next = new ListNode(count % 10)\n    l1 = l1 && l1.next\n    l2 = l2 && l2.next\n    count = Math.floor(count / 10)  /* 进1 */\n  }\n\n  return head.next\n};\n```\n\n##### 参考思路\n\n双指针。\n\n时间复杂度：o(n)\n空间复杂度：o(n)","source":"_posts/leetcode-02-05.md","raw":"---\ntitle: 【每日一题】面试题 02.05. 链表求和\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-21\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定两个用链表表示的整数，每个节点包含一个数位。这些数位是反向存放的，也就是个位排在链表首部。编写函数对这两个整数求和，并用链表形式返回结果。...\n\n---\n\n给定两个用链表表示的整数，每个节点包含一个数位。\n\n这些数位是反向存放的，也就是个位排在链表首部。\n\n编写函数对这两个整数求和，并用链表形式返回结果。\n\n \n\n**示例：**\n\n```\n输入：(7 -> 1 -> 6) + (5 -> 9 -> 2)，即617 + 295\n输出：2 -> 1 -> 9，即912\n进阶：假设这些数位是正向存放的，请再做一遍。\n```\n\n**示例：**\n\n```\n输入：(6 -> 1 -> 7) + (2 -> 9 -> 5)，即617 + 295\n输出：9 -> 1 -> 2，即912\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  var count = 0 // 进数位\n  var head = {} // 头节点\n  var cur = head // 指针节点\n  while (l1 || l2 || count) {\n    count += (l1 && l1.val) + (l2 && l2.val)\n    cur = cur.next = new ListNode(count % 10)\n    l1 = l1 && l1.next\n    l2 = l2 && l2.next\n    count = Math.floor(count / 10)  /* 进1 */\n  }\n\n  return head.next\n};\n```\n\n##### 参考思路\n\n双指针。\n\n时间复杂度：o(n)\n空间复杂度：o(n)","slug":"leetcode-02-05","published":1,"updated":"2020-05-21T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2o001fk8sv28nja3lo","content":"<p>给定两个用链表表示的整数，每个节点包含一个数位。</p>\n<p>这些数位是反向存放的，也就是个位排在链表首部。</p>\n<p>编写函数对这两个整数求和，并用链表形式返回结果。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">7</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">6</span>) + (<span class=\"number\">5</span> -&gt; <span class=\"number\">9</span> -&gt; <span class=\"number\">2</span>)，即<span class=\"number\">617</span> + <span class=\"number\">295</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">9</span>，即<span class=\"number\">912</span></span><br><span class=\"line\">进阶：假设这些数位是正向存放的，请再做一遍。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">6</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">7</span>) + (<span class=\"number\">2</span> -&gt; <span class=\"number\">9</span> -&gt; <span class=\"number\">5</span>)，即<span class=\"number\">617</span> + <span class=\"number\">295</span></span><br><span class=\"line\">输出：<span class=\"number\">9</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">2</span>，即<span class=\"number\">912</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span> <span class=\"comment\">// 进数位</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = &#123;&#125; <span class=\"comment\">// 头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = head <span class=\"comment\">// 指针节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l1 || l2 || count) &#123;</span><br><span class=\"line\">    count += (l1 &amp;&amp; l1.val) + (l2 &amp;&amp; l2.val)</span><br><span class=\"line\">    cur = cur.next = <span class=\"keyword\">new</span> ListNode(count % <span class=\"number\">10</span>)</span><br><span class=\"line\">    l1 = l1 &amp;&amp; l1.next</span><br><span class=\"line\">    l2 = l2 &amp;&amp; l2.next</span><br><span class=\"line\">    count = <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">10</span>)  <span class=\"comment\">/* 进1 */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>双指针。</p>\n<p>时间复杂度：o(n)<br>空间复杂度：o(n)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定两个用链表表示的整数，每个节点包含一个数位。</p>\n<p>这些数位是反向存放的，也就是个位排在链表首部。</p>\n<p>编写函数对这两个整数求和，并用链表形式返回结果。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">7</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">6</span>) + (<span class=\"number\">5</span> -&gt; <span class=\"number\">9</span> -&gt; <span class=\"number\">2</span>)，即<span class=\"number\">617</span> + <span class=\"number\">295</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">9</span>，即<span class=\"number\">912</span></span><br><span class=\"line\">进阶：假设这些数位是正向存放的，请再做一遍。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：(<span class=\"number\">6</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">7</span>) + (<span class=\"number\">2</span> -&gt; <span class=\"number\">9</span> -&gt; <span class=\"number\">5</span>)，即<span class=\"number\">617</span> + <span class=\"number\">295</span></span><br><span class=\"line\">输出：<span class=\"number\">9</span> -&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">2</span>，即<span class=\"number\">912</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span> <span class=\"comment\">// 进数位</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> head = &#123;&#125; <span class=\"comment\">// 头节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = head <span class=\"comment\">// 指针节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l1 || l2 || count) &#123;</span><br><span class=\"line\">    count += (l1 &amp;&amp; l1.val) + (l2 &amp;&amp; l2.val)</span><br><span class=\"line\">    cur = cur.next = <span class=\"keyword\">new</span> ListNode(count % <span class=\"number\">10</span>)</span><br><span class=\"line\">    l1 = l1 &amp;&amp; l1.next</span><br><span class=\"line\">    l2 = l2 &amp;&amp; l2.next</span><br><span class=\"line\">    count = <span class=\"built_in\">Math</span>.floor(count / <span class=\"number\">10</span>)  <span class=\"comment\">/* 进1 */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>双指针。</p>\n<p>时间复杂度：o(n)<br>空间复杂度：o(n)</p>\n"},{"title":"【每日一题】1013. 将数组分成和相等的三个部分","author":"Jelon","date":"2020-03-11T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给你一个整数数组 A，只有可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。形式上，如果可以找出索引 i+1 < j 且满足 (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1]) 就可以将数组三等分...","_content":"\n给你一个整数数组 `A`，只有可以将其划分为三个和相等的非空部分时才返回 `true`，否则返回 `false`。\n\n形式上，如果可以找出索引 `i+1 < j` 且满足 `(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])` 就可以将数组三等分。\n\n**示例 1：**\n\n```\n输入：[0,2,1,-6,6,-7,9,1,2,0,1]\n输出：true\n解释：0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n```\n\n**示例 2：**\n\n```\n输入：[0,2,1,-6,6,7,9,-1,2,0,1]\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：[3,3,6,5,-2,2,5,1,-9,4]\n输出：true\n解释：3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar canThreePartsEqualSum = function(A) {\n    var total = A.reduce((result, next) => {\n        result += next;\n        return result;\n    }, 0);\n    var average = total / 3;\n    var i = -1;\n    var j = -1;\n    var tempTotal = 0;\n\n    for (var k = 0; k < A.length; k++) {\n        tempTotal += A[k];\n        if (tempTotal === average && i === -1) {\n            i = k;\n            tempTotal = 0;\n        } else if (tempTotal === average && i !== -1 && k !== A.length - 1) {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n##### 执行结果\n\n执行结果：通过\n\n执行用时：72 ms, 在所有 JavaScript 提交中击败了 89.34% 的用户；\n内存消耗：39.6 MB, 在所有 JavaScript 提交中击败了 83.33% 的用户。\n\n","source":"_posts/leetcode-1013.md","raw":"---\ntitle: 【每日一题】1013. 将数组分成和相等的三个部分\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-11\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 给你一个整数数组 A，只有可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。形式上，如果可以找出索引 i+1 < j 且满足 (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1]) 就可以将数组三等分...\n\n---\n\n给你一个整数数组 `A`，只有可以将其划分为三个和相等的非空部分时才返回 `true`，否则返回 `false`。\n\n形式上，如果可以找出索引 `i+1 < j` 且满足 `(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])` 就可以将数组三等分。\n\n**示例 1：**\n\n```\n输入：[0,2,1,-6,6,-7,9,1,2,0,1]\n输出：true\n解释：0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n```\n\n**示例 2：**\n\n```\n输入：[0,2,1,-6,6,7,9,-1,2,0,1]\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：[3,3,6,5,-2,2,5,1,-9,4]\n输出：true\n解释：3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar canThreePartsEqualSum = function(A) {\n    var total = A.reduce((result, next) => {\n        result += next;\n        return result;\n    }, 0);\n    var average = total / 3;\n    var i = -1;\n    var j = -1;\n    var tempTotal = 0;\n\n    for (var k = 0; k < A.length; k++) {\n        tempTotal += A[k];\n        if (tempTotal === average && i === -1) {\n            i = k;\n            tempTotal = 0;\n        } else if (tempTotal === average && i !== -1 && k !== A.length - 1) {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n##### 执行结果\n\n执行结果：通过\n\n执行用时：72 ms, 在所有 JavaScript 提交中击败了 89.34% 的用户；\n内存消耗：39.6 MB, 在所有 JavaScript 提交中击败了 83.33% 的用户。\n\n","slug":"leetcode-1013","published":1,"updated":"2020-03-11T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2p001ik8sv3lo6dvfm","content":"<p>给你一个整数数组 <code>A</code>，只有可以将其划分为三个和相等的非空部分时才返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<p>形式上，如果可以找出索引 <code>i+1 &lt; j</code> 且满足 <code>(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</code> 就可以将数组三等分。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[0,2,1,-6,6,-7,9,1,2,0,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：0 +<span class=\"number\"> 2 </span>+<span class=\"number\"> 1 </span>= -6 +<span class=\"number\"> 6 </span>-<span class=\"number\"> 7 </span>+<span class=\"number\"> 9 </span>+<span class=\"number\"> 1 </span>=<span class=\"number\"> 2 </span>+<span class=\"number\"> 0 </span>+ 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,-<span class=\"number\">6,6,7,9</span>,-<span class=\"number\">1,2,0,1</span>]</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[3,3,6,5,-2,2,5,1,-9,4]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：3 +<span class=\"number\"> 3 </span>=<span class=\"number\"> 6 </span>=<span class=\"number\"> 5 </span>-<span class=\"number\"> 2 </span>+<span class=\"number\"> 2 </span>+<span class=\"number\"> 5 </span>+<span class=\"number\"> 1 </span>-<span class=\"number\"> 9 </span>+ 4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canThreePartsEqualSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = A.reduce(<span class=\"function\">(<span class=\"params\">result, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result += next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> average = total / <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; A.length; k++) &#123;</span><br><span class=\"line\">        tempTotal += A[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempTotal === average &amp;&amp; i === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            i = k;</span><br><span class=\"line\">            tempTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempTotal === average &amp;&amp; i !== -<span class=\"number\">1</span> &amp;&amp; k !== A.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行结果：通过</p>\n<p>执行用时：72 ms, 在所有 JavaScript 提交中击败了 89.34% 的用户；<br>内存消耗：39.6 MB, 在所有 JavaScript 提交中击败了 83.33% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个整数数组 <code>A</code>，只有可以将其划分为三个和相等的非空部分时才返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<p>形式上，如果可以找出索引 <code>i+1 &lt; j</code> 且满足 <code>(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</code> 就可以将数组三等分。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[0,2,1,-6,6,-7,9,1,2,0,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：0 +<span class=\"number\"> 2 </span>+<span class=\"number\"> 1 </span>= -6 +<span class=\"number\"> 6 </span>-<span class=\"number\"> 7 </span>+<span class=\"number\"> 9 </span>+<span class=\"number\"> 1 </span>=<span class=\"number\"> 2 </span>+<span class=\"number\"> 0 </span>+ 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,-<span class=\"number\">6,6,7,9</span>,-<span class=\"number\">1,2,0,1</span>]</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[3,3,6,5,-2,2,5,1,-9,4]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：3 +<span class=\"number\"> 3 </span>=<span class=\"number\"> 6 </span>=<span class=\"number\"> 5 </span>-<span class=\"number\"> 2 </span>+<span class=\"number\"> 2 </span>+<span class=\"number\"> 5 </span>+<span class=\"number\"> 1 </span>-<span class=\"number\"> 9 </span>+ 4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canThreePartsEqualSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = A.reduce(<span class=\"function\">(<span class=\"params\">result, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result += next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> average = total / <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; A.length; k++) &#123;</span><br><span class=\"line\">        tempTotal += A[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempTotal === average &amp;&amp; i === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            i = k;</span><br><span class=\"line\">            tempTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempTotal === average &amp;&amp; i !== -<span class=\"number\">1</span> &amp;&amp; k !== A.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行结果：通过</p>\n<p>执行用时：72 ms, 在所有 JavaScript 提交中击败了 89.34% 的用户；<br>内存消耗：39.6 MB, 在所有 JavaScript 提交中击败了 83.33% 的用户。</p>\n"},{"title":"【每日一题】102. 二叉树的层序遍历","author":"Jelon","date":"2020-07-24T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。示例：二叉树：[3,9,20,null,null,15,7]...","_content":"给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n\n\n**示例：**\n二叉树：[3,9,20,null,null,15,7],\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n##### 个人解答\n\n广度遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  if (!root) return []\n  var res = []\n  var queue = [ root ]\n\n  while (queue.length) { // 纵向遍历\n    var curr = [] // 当前行\n    var next = [] // 下一行\n\n    while (queue.length) { // 横向遍历\n      var node = queue.shift()\n      curr.push(node.val)\n      if (node.left) {\n        next.push(node.left)\n      }\n      if (node.right) {\n        next.push(node.right)\n      }\n    }\n    res.push(curr)\n    queue = next\n  }\n\n  return res\n};\n```\n\n深度遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  var res = []\n\n  var levelTransal = function (node, order) {\n    res[order] = res[order] || []\n    res[order].push(node.val)\n\n    if (node.left) {\n      levelTransal(node.left, order + 1)\n    }\n    if (node.right) {\n      levelTransal(node.right, order + 1)\n    }\n  }\n  if (!root) return [] \n  levelTransal(root, 0)\n\n  return res\n};\n```\n\n##### 解题思路\n\n1. 广度遍历（双重循环）；\n2. 深度遍历（递归）。","source":"_posts/leetcode-102.md","raw":"title: 【每日一题】102. 二叉树的层序遍历\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-07-24\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。示例：二叉树：[3,9,20,null,null,15,7]...\n\n---\n给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n\n\n**示例：**\n二叉树：[3,9,20,null,null,15,7],\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n##### 个人解答\n\n广度遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  if (!root) return []\n  var res = []\n  var queue = [ root ]\n\n  while (queue.length) { // 纵向遍历\n    var curr = [] // 当前行\n    var next = [] // 下一行\n\n    while (queue.length) { // 横向遍历\n      var node = queue.shift()\n      curr.push(node.val)\n      if (node.left) {\n        next.push(node.left)\n      }\n      if (node.right) {\n        next.push(node.right)\n      }\n    }\n    res.push(curr)\n    queue = next\n  }\n\n  return res\n};\n```\n\n深度遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  var res = []\n\n  var levelTransal = function (node, order) {\n    res[order] = res[order] || []\n    res[order].push(node.val)\n\n    if (node.left) {\n      levelTransal(node.left, order + 1)\n    }\n    if (node.right) {\n      levelTransal(node.right, order + 1)\n    }\n  }\n  if (!root) return [] \n  levelTransal(root, 0)\n\n  return res\n};\n```\n\n##### 解题思路\n\n1. 广度遍历（双重循环）；\n2. 深度遍历（递归）。","slug":"leetcode-102","published":1,"updated":"2020-07-24T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2q001lk8svanc94z4j","content":"<p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例：</strong><br>二叉树：[3,9,20,null,null,15,7],</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\"> / <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">  /  <span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>返回其层次遍历结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">9</span>,<span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p>广度遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = [ root ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length) &#123; <span class=\"comment\">// 纵向遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curr = [] <span class=\"comment\">// 当前行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> next = [] <span class=\"comment\">// 下一行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123; <span class=\"comment\">// 横向遍历</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = queue.shift()</span><br><span class=\"line\">      curr.push(node.val)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">        next.push(node.left)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">        next.push(node.right)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(curr)</span><br><span class=\"line\">    queue = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>深度遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> levelTransal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, order</span>) </span>&#123;</span><br><span class=\"line\">    res[order] = res[order] || []</span><br><span class=\"line\">    res[order].push(node.val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">      levelTransal(node.left, order + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">      levelTransal(node.right, order + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [] </span><br><span class=\"line\">  levelTransal(root, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>广度遍历（双重循环）；</li>\n<li>深度遍历（递归）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例：</strong><br>二叉树：[3,9,20,null,null,15,7],</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\"> / <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">  /  <span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>返回其层次遍历结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">9</span>,<span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p>广度遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = [ root ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length) &#123; <span class=\"comment\">// 纵向遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> curr = [] <span class=\"comment\">// 当前行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> next = [] <span class=\"comment\">// 下一行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (queue.length) &#123; <span class=\"comment\">// 横向遍历</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = queue.shift()</span><br><span class=\"line\">      curr.push(node.val)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">        next.push(node.left)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">        next.push(node.right)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(curr)</span><br><span class=\"line\">    queue = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>深度遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> levelTransal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node, order</span>) </span>&#123;</span><br><span class=\"line\">    res[order] = res[order] || []</span><br><span class=\"line\">    res[order].push(node.val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">      levelTransal(node.left, order + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">      levelTransal(node.right, order + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [] </span><br><span class=\"line\">  levelTransal(root, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>广度遍历（双重循环）；</li>\n<li>深度遍历（递归）。</li>\n</ol>\n"},{"title":"【每日一题】11. 盛最多水的容器","author":"Jelon","date":"2020-07-21T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水...","_content":"\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n**说明：**你不能倾斜容器，且 n 的值至少为 2。\n\n![https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.png](https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.jpg)\n\n<sup>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</sup>\n\n**示例：**\n\n```js\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n  /**\n   * 双指针\n   */\n  var res = 0;\n  var i = 0;\n  var j = height.length - 1;\n  var cur = 0;\n  while (i < j) {\n    var h = Math.min(height[i], height[j]);\n    cur = (j - i) * h;\n    res = Math.max(res, cur);\n    if (height[i] < height[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n\n  return res;\n};\n```\n\n##### 解题思路\n\n双指针。\n\n","source":"_posts/leetcode-11.md","raw":"title: 【每日一题】11. 盛最多水的容器\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-07-21\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水...\n\n---\n\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n**说明：**你不能倾斜容器，且 n 的值至少为 2。\n\n![https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.png](https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.jpg)\n\n<sup>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</sup>\n\n**示例：**\n\n```js\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n  /**\n   * 双指针\n   */\n  var res = 0;\n  var i = 0;\n  var j = height.length - 1;\n  var cur = 0;\n  while (i < j) {\n    var h = Math.min(height[i], height[j]);\n    cur = (j - i) * h;\n    res = Math.max(res, cur);\n    if (height[i] < height[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n\n  return res;\n};\n```\n\n##### 解题思路\n\n双指针。\n\n","slug":"leetcode-11","published":1,"updated":"2020-07-21T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2r001ok8svf6k4bk0a","content":"<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p><strong>说明：</strong>你不能倾斜容器，且 n 的值至少为 2。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.jpg\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.png\"></p>\n<p><sup>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</sup></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">输出：<span class=\"number\">49</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">height</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 双指针</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = <span class=\"built_in\">Math</span>.min(height[i], height[j]);</span><br><span class=\"line\">    cur = (j - i) * h;</span><br><span class=\"line\">    res = <span class=\"built_in\">Math</span>.max(res, cur);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height[i] &lt; height[j]) &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>双指针。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p><strong>说明：</strong>你不能倾斜容器，且 n 的值至少为 2。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.jpg\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-11/question_11.png\"></p>\n<p><sup>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</sup></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">输出：<span class=\"number\">49</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">height</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 双指针</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> h = <span class=\"built_in\">Math</span>.min(height[i], height[j]);</span><br><span class=\"line\">    cur = (j - i) * h;</span><br><span class=\"line\">    res = <span class=\"built_in\">Math</span>.max(res, cur);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height[i] &lt; height[j]) &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>双指针。</p>\n"},{"title":"【每日一题】1160. 拼写单词","author":"Jelon","date":"2020-03-17T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。注意：每次拼写时，chars 中的每个字母都只能用一次。返回词汇表 words 中你掌握的所有单词的长度之和...","_content":"\n给你一份『词汇表』（字符串数组） `words` 和一张『字母表』（字符串） `chars`。\n\n假如你可以用 `chars` 中的『字母』（字符）拼写出 `words` 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。\n\n注意：每次拼写时，`chars` 中的每个字母都只能用一次。\n\n返回词汇表 `words` 中你掌握的所有单词的 长度之和。\n\n\n\n**示例 1：**\n\n```\n输入：words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\n输出：6\n解释： \n可以形成字符串 \"cat\" 和 \"hat\"，所以答案是 3 + 3 = 6。\n```\n\n**示例 2：**\n\n```\n输入：words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\n输出：10\n解释：\n可以形成字符串 \"hello\" 和 \"world\"，所以答案是 5 + 5 = 10。\n```\n \n\n**提示：**\n\n1. `1 <= words.length <= 1000`\n2. `1 <= words[i].length, chars.length <= 100`\n3. 所有字符串中都仅包含小写英文字母\n\n\n##### 个人解答\n\n```js\n/**\n * @param {string[]} words\n * @param {string} chars\n * @return {number}\n */\nvar countCharacters = function(words, chars) {\n    var lens = words.map(item => item.length);\n    var totalLen = 0;\n    for (var i = 0; i < chars.length; i++) {\n        for (var j = 0; j < words.length; j++) {\n            words[j] = words[j].replace(chars[i], '');\n            if (words[j] === '') {\n                totalLen += lens[j];\n                lens[j] = 0;\n            }\n        }\n    }\n    return totalLen;\n};\n```\n\n##### 执行结果\n\n执行用时：272 ms, 在所有 JavaScript 提交中击败了 41.18% 的用户；\n内存消耗：44.2 MB, 在所有 JavaScript 提交中击败了 55.74% 的用户。\n","source":"_posts/leetcode-1160.md","raw":"---\ntitle: 【每日一题】1160. 拼写单词\ncategories:\n  \t- 算法练习 \nauthor: Jelon\ndate: 2020-03-17\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。注意：每次拼写时，chars 中的每个字母都只能用一次。返回词汇表 words 中你掌握的所有单词的长度之和...\n\n---\n\n给你一份『词汇表』（字符串数组） `words` 和一张『字母表』（字符串） `chars`。\n\n假如你可以用 `chars` 中的『字母』（字符）拼写出 `words` 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。\n\n注意：每次拼写时，`chars` 中的每个字母都只能用一次。\n\n返回词汇表 `words` 中你掌握的所有单词的 长度之和。\n\n\n\n**示例 1：**\n\n```\n输入：words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\n输出：6\n解释： \n可以形成字符串 \"cat\" 和 \"hat\"，所以答案是 3 + 3 = 6。\n```\n\n**示例 2：**\n\n```\n输入：words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\n输出：10\n解释：\n可以形成字符串 \"hello\" 和 \"world\"，所以答案是 5 + 5 = 10。\n```\n \n\n**提示：**\n\n1. `1 <= words.length <= 1000`\n2. `1 <= words[i].length, chars.length <= 100`\n3. 所有字符串中都仅包含小写英文字母\n\n\n##### 个人解答\n\n```js\n/**\n * @param {string[]} words\n * @param {string} chars\n * @return {number}\n */\nvar countCharacters = function(words, chars) {\n    var lens = words.map(item => item.length);\n    var totalLen = 0;\n    for (var i = 0; i < chars.length; i++) {\n        for (var j = 0; j < words.length; j++) {\n            words[j] = words[j].replace(chars[i], '');\n            if (words[j] === '') {\n                totalLen += lens[j];\n                lens[j] = 0;\n            }\n        }\n    }\n    return totalLen;\n};\n```\n\n##### 执行结果\n\n执行用时：272 ms, 在所有 JavaScript 提交中击败了 41.18% 的用户；\n内存消耗：44.2 MB, 在所有 JavaScript 提交中击败了 55.74% 的用户。\n","slug":"leetcode-1160","published":1,"updated":"2020-03-17T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2s001sk8sv07jy5env","content":"<p>给你一份『词汇表』（字符串数组） <code>words</code> 和一张『字母表』（字符串） <code>chars</code>。</p>\n<p>假如你可以用 <code>chars</code> 中的『字母』（字符）拼写出 <code>words</code> 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。</p>\n<p>注意：每次拼写时，<code>chars</code> 中的每个字母都只能用一次。</p>\n<p>返回词汇表 <code>words</code> 中你掌握的所有单词的 长度之和。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"keyword\">words</span> = [<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;bt&quot;</span>,<span class=\"string\">&quot;hat&quot;</span>,<span class=\"string\">&quot;tree&quot;</span>], <span class=\"keyword\">chars</span> = <span class=\"string\">&quot;atach&quot;</span></span><br><span class=\"line\">输出：<span class=\"number\">6</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">可以形成字符串 <span class=\"string\">&quot;cat&quot;</span> 和 <span class=\"string\">&quot;hat&quot;</span>，所以答案是 <span class=\"number\">3</span> + <span class=\"number\">3</span> = <span class=\"number\">6</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"keyword\">words</span> = [<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>,<span class=\"string\">&quot;leetcode&quot;</span>], <span class=\"keyword\">chars</span> = <span class=\"string\">&quot;welldonehoneyr&quot;</span></span><br><span class=\"line\">输出：<span class=\"number\">10</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">可以形成字符串 <span class=\"string\">&quot;hello&quot;</span> 和 <span class=\"string\">&quot;world&quot;</span>，所以答案是 <span class=\"number\">5</span> + <span class=\"number\">5</span> = <span class=\"number\">10</span>。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n<li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li>\n<li>所有字符串中都仅包含小写英文字母</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">chars</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countCharacters = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">words, chars</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lens = words.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.length);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            words[j] = words[j].replace(chars[i], <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (words[j] === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">                totalLen += lens[j];</span><br><span class=\"line\">                lens[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> totalLen;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：272 ms, 在所有 JavaScript 提交中击败了 41.18% 的用户；<br>内存消耗：44.2 MB, 在所有 JavaScript 提交中击败了 55.74% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一份『词汇表』（字符串数组） <code>words</code> 和一张『字母表』（字符串） <code>chars</code>。</p>\n<p>假如你可以用 <code>chars</code> 中的『字母』（字符）拼写出 <code>words</code> 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。</p>\n<p>注意：每次拼写时，<code>chars</code> 中的每个字母都只能用一次。</p>\n<p>返回词汇表 <code>words</code> 中你掌握的所有单词的 长度之和。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"keyword\">words</span> = [<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;bt&quot;</span>,<span class=\"string\">&quot;hat&quot;</span>,<span class=\"string\">&quot;tree&quot;</span>], <span class=\"keyword\">chars</span> = <span class=\"string\">&quot;atach&quot;</span></span><br><span class=\"line\">输出：<span class=\"number\">6</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">可以形成字符串 <span class=\"string\">&quot;cat&quot;</span> 和 <span class=\"string\">&quot;hat&quot;</span>，所以答案是 <span class=\"number\">3</span> + <span class=\"number\">3</span> = <span class=\"number\">6</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"keyword\">words</span> = [<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>,<span class=\"string\">&quot;leetcode&quot;</span>], <span class=\"keyword\">chars</span> = <span class=\"string\">&quot;welldonehoneyr&quot;</span></span><br><span class=\"line\">输出：<span class=\"number\">10</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">可以形成字符串 <span class=\"string\">&quot;hello&quot;</span> 和 <span class=\"string\">&quot;world&quot;</span>，所以答案是 <span class=\"number\">5</span> + <span class=\"number\">5</span> = <span class=\"number\">10</span>。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n<li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li>\n<li>所有字符串中都仅包含小写英文字母</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">chars</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countCharacters = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">words, chars</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lens = words.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.length);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">            words[j] = words[j].replace(chars[i], <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (words[j] === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">                totalLen += lens[j];</span><br><span class=\"line\">                lens[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> totalLen;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：272 ms, 在所有 JavaScript 提交中击败了 41.18% 的用户；<br>内存消耗：44.2 MB, 在所有 JavaScript 提交中击败了 55.74% 的用户。</p>\n"},{"title":"【每日一题】1162. 地图分析","author":"Jelon","date":"2020-03-29T00:00:00.000Z","thumbnail":null,"blogexcerpt":"你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。如果我们的地图上只有陆地或者海洋，请返回 -1...","_content":"\n你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。\n\n我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。\n\n如果我们的地图上只有陆地或者海洋，请返回 -1。\n\n \n\n**示例 1：**\n\n| 1 | 0 | 1 |\n|---|---|---|\n| 0 | 0 | 0 |\n| 1 | 0 | 1 |\n\n\n```\n输入：[[1,0,1],[0,0,0],[1,0,1]]\n输出：2\n解释： \n海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。\n```\n\n**示例 2：**\n\n| 1 | 0 | 0 |\n|---|---|---|\n| 0 | 0 | 0 |\n| 0 | 0 | 0 |\n\n\n```\n输入：[[1,0,0],[0,0,0],[0,0,0]]\n输出：4\n解释： \n海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。\n```\n \n**提示：**\n\n1. `1 <= grid.length == grid[0].length <= 100`\n2. `grid[i][j]` 不是 `0` 就是 `1`\n\n##### 参考解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxDistance = function(grid) {\n  var lands = [];\n  var rows = grid.length;\n  var cols = grid[0].length;\n  var res = -1;\n\n  // 找出所有的陆地的坐标\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        lands.push([i, j]);\n      }\n    }\n  }\n\n  // 全是陆地或海洋\n  if (!lands.length || lands.length === rows * cols) return -1; \n  // 遍历所有陆地\n  while (lands.length > 0) {\n    var len = lands.length;\n    while (len > 0) {\n      len--;\n      var land = lands.shift(); // 删掉第一元素\n      // 向4个方向搜索\n      // 上、右、下、左\n      var ways = [ [-1, 0], [0, 1], [1, 0], [0, -1] ];\n      for (var i = 0; i < 4; i++) {\n        var row = land[0] + ways[i][0]; // row 方向\n        var col = land[1] + ways[i][1]; // col 方向\n        // 判断是否越界\n        if (\n          row < 0 ||\n          row >= rows ||\n          col < 0 ||\n          col >= cols ||\n          (grid[row] && grid[row][col] === 1)\n        ) {\n          continue;\n        }\n\n        // 找到海洋\n        if (grid[row] && grid[row][col] === 0) {\n          lands.push([ row, col ]);\n          grid[row][col] = 1;\n        }\n      }\n    }\n    res++;\n  }\n\n  return res;\n};\n\n```\n\n##### 解题思路\n\n广度优先搜索。\n\n\n\n","source":"_posts/leetcode-1162.md","raw":"---\ntitle: 【每日一题】1162. 地图分析\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-03-29\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。如果我们的地图上只有陆地或者海洋，请返回 -1...\n\n---\n\n你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。\n\n我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。\n\n如果我们的地图上只有陆地或者海洋，请返回 -1。\n\n \n\n**示例 1：**\n\n| 1 | 0 | 1 |\n|---|---|---|\n| 0 | 0 | 0 |\n| 1 | 0 | 1 |\n\n\n```\n输入：[[1,0,1],[0,0,0],[1,0,1]]\n输出：2\n解释： \n海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。\n```\n\n**示例 2：**\n\n| 1 | 0 | 0 |\n|---|---|---|\n| 0 | 0 | 0 |\n| 0 | 0 | 0 |\n\n\n```\n输入：[[1,0,0],[0,0,0],[0,0,0]]\n输出：4\n解释： \n海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。\n```\n \n**提示：**\n\n1. `1 <= grid.length == grid[0].length <= 100`\n2. `grid[i][j]` 不是 `0` 就是 `1`\n\n##### 参考解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxDistance = function(grid) {\n  var lands = [];\n  var rows = grid.length;\n  var cols = grid[0].length;\n  var res = -1;\n\n  // 找出所有的陆地的坐标\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        lands.push([i, j]);\n      }\n    }\n  }\n\n  // 全是陆地或海洋\n  if (!lands.length || lands.length === rows * cols) return -1; \n  // 遍历所有陆地\n  while (lands.length > 0) {\n    var len = lands.length;\n    while (len > 0) {\n      len--;\n      var land = lands.shift(); // 删掉第一元素\n      // 向4个方向搜索\n      // 上、右、下、左\n      var ways = [ [-1, 0], [0, 1], [1, 0], [0, -1] ];\n      for (var i = 0; i < 4; i++) {\n        var row = land[0] + ways[i][0]; // row 方向\n        var col = land[1] + ways[i][1]; // col 方向\n        // 判断是否越界\n        if (\n          row < 0 ||\n          row >= rows ||\n          col < 0 ||\n          col >= cols ||\n          (grid[row] && grid[row][col] === 1)\n        ) {\n          continue;\n        }\n\n        // 找到海洋\n        if (grid[row] && grid[row][col] === 0) {\n          lands.push([ row, col ]);\n          grid[row][col] = 1;\n        }\n      }\n    }\n    res++;\n  }\n\n  return res;\n};\n\n```\n\n##### 解题思路\n\n广度优先搜索。\n\n\n\n","slug":"leetcode-1162","published":1,"updated":"2020-03-29T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2v001vk8svd2vma0bx","content":"<p>你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。</p>\n<p>我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。</p>\n<p>如果我们的地图上只有陆地或者海洋，请返回 -1。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0,1],[0,0,0],[1,0,1]]</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">海洋区域 (<span class=\"number\">1</span>, <span class=\"number\">1</span>) 和所有陆地区域之间的距离都达到最大，最大距离为 <span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0,0],[0,0,0],[0,0,0]]</span></span><br><span class=\"line\">输出：<span class=\"number\">4</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">海洋区域 (<span class=\"number\">2</span>, <span class=\"number\">2</span>) 和所有陆地区域之间的距离都达到最大，最大距离为 <span class=\"number\">4</span>。</span><br></pre></td></tr></table></figure>\n<p> <br><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= grid.length == grid[0].length &lt;= 100</code></li>\n<li><code>grid[i][j]</code> 不是 <code>0</code> 就是 <code>1</code></li>\n</ol>\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lands = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rows = grid.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找出所有的陆地的坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; cols; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        lands.push([i, j]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 全是陆地或海洋</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!lands.length || lands.length === rows * cols) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; </span><br><span class=\"line\">  <span class=\"comment\">// 遍历所有陆地</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lands.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = lands.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      len--;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> land = lands.shift(); <span class=\"comment\">// 删掉第一元素</span></span><br><span class=\"line\">      <span class=\"comment\">// 向4个方向搜索</span></span><br><span class=\"line\">      <span class=\"comment\">// 上、右、下、左</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> ways = [ [-<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, -<span class=\"number\">1</span>] ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> row = land[<span class=\"number\">0</span>] + ways[i][<span class=\"number\">0</span>]; <span class=\"comment\">// row 方向</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> col = land[<span class=\"number\">1</span>] + ways[i][<span class=\"number\">1</span>]; <span class=\"comment\">// col 方向</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          row &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">          row &gt;= rows ||</span><br><span class=\"line\">          col &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">          col &gt;= cols ||</span><br><span class=\"line\">          (grid[row] &amp;&amp; grid[row][col] === <span class=\"number\">1</span>)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到海洋</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[row] &amp;&amp; grid[row][col] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          lands.push([ row, col ]);</span><br><span class=\"line\">          grid[row][col] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>广度优先搜索。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。</p>\n<p>我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。</p>\n<p>如果我们的地图上只有陆地或者海洋，请返回 -1。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0,1],[0,0,0],[1,0,1]]</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">海洋区域 (<span class=\"number\">1</span>, <span class=\"number\">1</span>) 和所有陆地区域之间的距离都达到最大，最大距离为 <span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0,0],[0,0,0],[0,0,0]]</span></span><br><span class=\"line\">输出：<span class=\"number\">4</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">海洋区域 (<span class=\"number\">2</span>, <span class=\"number\">2</span>) 和所有陆地区域之间的距离都达到最大，最大距离为 <span class=\"number\">4</span>。</span><br></pre></td></tr></table></figure>\n<p> <br><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= grid.length == grid[0].length &lt;= 100</code></li>\n<li><code>grid[i][j]</code> 不是 <code>0</code> 就是 <code>1</code></li>\n</ol>\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lands = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rows = grid.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找出所有的陆地的坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; cols; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        lands.push([i, j]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 全是陆地或海洋</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!lands.length || lands.length === rows * cols) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; </span><br><span class=\"line\">  <span class=\"comment\">// 遍历所有陆地</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (lands.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = lands.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      len--;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> land = lands.shift(); <span class=\"comment\">// 删掉第一元素</span></span><br><span class=\"line\">      <span class=\"comment\">// 向4个方向搜索</span></span><br><span class=\"line\">      <span class=\"comment\">// 上、右、下、左</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> ways = [ [-<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, -<span class=\"number\">1</span>] ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> row = land[<span class=\"number\">0</span>] + ways[i][<span class=\"number\">0</span>]; <span class=\"comment\">// row 方向</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> col = land[<span class=\"number\">1</span>] + ways[i][<span class=\"number\">1</span>]; <span class=\"comment\">// col 方向</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          row &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">          row &gt;= rows ||</span><br><span class=\"line\">          col &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">          col &gt;= cols ||</span><br><span class=\"line\">          (grid[row] &amp;&amp; grid[row][col] === <span class=\"number\">1</span>)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到海洋</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[row] &amp;&amp; grid[row][col] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          lands.push([ row, col ]);</span><br><span class=\"line\">          grid[row][col] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>广度优先搜索。</p>\n"},{"title":"【每日一题】13. 罗马数字转整数","author":"Jelon","date":"2020-03-15T00:00:00.000Z","thumbnail":null,"blogexcerpt":"罗马数字包含以下七种字符：I，V，X，L，C，D 和 M。例如，罗马数字2写做 II，即为两个并列的 1。12 写做 XII，即为 X + II 。27 写做 XXVII，即为 XX + V + II。通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况...","_content":"\n罗马数字包含以下七种字符: `I`， `V`， `X`，`L`，`C`，`D` 和 `M`。\n\n```\n字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n\n例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 `27` 写做  `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n`I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n`X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n`C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n\n**示例 1:**\n\n```\n输入: \"III\"\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: \"IV\"\n输出: 4\n```\n\n**示例 3:**\n\n```\n输入: \"IX\"\n输出: 9\n```\n\n**示例 4:**\n\n```\n输入: \"LVIII\"\n输出: 58\n解释: L = 50, V= 5, III = 3.\n```\n\n**示例 5:**\n\n```\n输入: \"MCMXCIV\"\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n```\n\n##### 个人解答\n\n**未优化版本**\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var hashTable = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    var specialList = [ 'IV', 'IX', 'XL', 'XC', 'CD', 'CM' ];\n    var res = 0;\n    for (var i = 0; i < s.length; i++) {\n        var left = s[i];\n        var right = s[i+1] || '';\n        if (specialList.indexOf(left + right) > -1) {\n            res -= hashTable[left];\n        } else {\n            res += hashTable[left];\n        }\n    }\n\n    return res;\n};\n```\n\n**优化版本**\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var hashTable = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    // var specialList = [ 'IV', 'IX', 'XL', 'XC', 'CD', 'CM' ];\n    var res = 0;\n    for (var i = 0; i < s.length; i++) {\n        var left = s[i];\n        var right = s[i+1];\n        // if (specialList.indexOf(left + right) > -1) {\n        if (\n            hashTable[right] && hashTable[right] > hashTable[left]\n        ) {\n            res -= hashTable[left];\n        } else {\n            res += hashTable[left];\n        }\n    }\n\n    return res;\n};\n```\n\n##### 执行结果\n\n执行用时: 148 ms, 在所有 JavaScript 提交中击败了 96.11% 的用户；\n内存消耗: 39.8 MB, 在所有 JavaScript 提交中击败了 83.24% 的用户。\n","source":"_posts/leetcode-13.md","raw":"---\ntitle: 【每日一题】13. 罗马数字转整数\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-15\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 罗马数字包含以下七种字符：I，V，X，L，C，D 和 M。例如，罗马数字2写做 II，即为两个并列的 1。12 写做 XII，即为 X + II 。27 写做 XXVII，即为 XX + V + II。通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况...\n\n---\n\n罗马数字包含以下七种字符: `I`， `V`， `X`，`L`，`C`，`D` 和 `M`。\n\n```\n字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n\n例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `II` 。 `27` 写做  `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n`I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n`X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n`C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n\n**示例 1:**\n\n```\n输入: \"III\"\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: \"IV\"\n输出: 4\n```\n\n**示例 3:**\n\n```\n输入: \"IX\"\n输出: 9\n```\n\n**示例 4:**\n\n```\n输入: \"LVIII\"\n输出: 58\n解释: L = 50, V= 5, III = 3.\n```\n\n**示例 5:**\n\n```\n输入: \"MCMXCIV\"\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n```\n\n##### 个人解答\n\n**未优化版本**\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var hashTable = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    var specialList = [ 'IV', 'IX', 'XL', 'XC', 'CD', 'CM' ];\n    var res = 0;\n    for (var i = 0; i < s.length; i++) {\n        var left = s[i];\n        var right = s[i+1] || '';\n        if (specialList.indexOf(left + right) > -1) {\n            res -= hashTable[left];\n        } else {\n            res += hashTable[left];\n        }\n    }\n\n    return res;\n};\n```\n\n**优化版本**\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var hashTable = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    // var specialList = [ 'IV', 'IX', 'XL', 'XC', 'CD', 'CM' ];\n    var res = 0;\n    for (var i = 0; i < s.length; i++) {\n        var left = s[i];\n        var right = s[i+1];\n        // if (specialList.indexOf(left + right) > -1) {\n        if (\n            hashTable[right] && hashTable[right] > hashTable[left]\n        ) {\n            res -= hashTable[left];\n        } else {\n            res += hashTable[left];\n        }\n    }\n\n    return res;\n};\n```\n\n##### 执行结果\n\n执行用时: 148 ms, 在所有 JavaScript 提交中击败了 96.11% 的用户；\n内存消耗: 39.8 MB, 在所有 JavaScript 提交中击败了 83.24% 的用户。\n","slug":"leetcode-13","published":1,"updated":"2020-03-15T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2x001yk8svbqvr97hn","content":"<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符          数值</span><br><span class=\"line\"><span class=\"built_in\">I</span>             <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">V</span>             <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable\">X</span>             <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"variable\">L</span>             <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"built_in\">C</span>             <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">D</span>             <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"variable\">M</span>             <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<p><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。<br><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 <br><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;III&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;IV&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;IX&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4:</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;LVIII&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">58</span></span><br><span class=\"line\">解释: <span class=\"attr\">L</span> = <span class=\"number\">50</span>, <span class=\"attr\">V=</span> <span class=\"number\">5</span>, <span class=\"attr\">III</span> = <span class=\"number\">3</span>.</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5:</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;MCMXCIV&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">1994</span></span><br><span class=\"line\">解释: <span class=\"attr\">M</span> = <span class=\"number\">1000</span>, <span class=\"attr\">CM</span> = <span class=\"number\">900</span>, <span class=\"attr\">XC</span> = <span class=\"number\">90</span>, <span class=\"attr\">IV</span> = <span class=\"number\">4</span>.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>未优化版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashTable = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;I&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;V&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;X&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;L&#x27;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;D&#x27;</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;M&#x27;</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> specialList = [ <span class=\"string\">&#x27;IV&#x27;</span>, <span class=\"string\">&#x27;IX&#x27;</span>, <span class=\"string\">&#x27;XL&#x27;</span>, <span class=\"string\">&#x27;XC&#x27;</span>, <span class=\"string\">&#x27;CD&#x27;</span>, <span class=\"string\">&#x27;CM&#x27;</span> ];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> right = s[i+<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specialList.indexOf(left + right) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res -= hashTable[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += hashTable[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优化版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashTable = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;I&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;V&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;X&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;L&#x27;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;D&#x27;</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;M&#x27;</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// var specialList = [ &#x27;IV&#x27;, &#x27;IX&#x27;, &#x27;XL&#x27;, &#x27;XC&#x27;, &#x27;CD&#x27;, &#x27;CM&#x27; ];</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> right = s[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// if (specialList.indexOf(left + right) &gt; -1) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            hashTable[right] &amp;&amp; hashTable[right] &gt; hashTable[left]</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            res -= hashTable[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += hashTable[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 148 ms, 在所有 JavaScript 提交中击败了 96.11% 的用户；<br>内存消耗: 39.8 MB, 在所有 JavaScript 提交中击败了 83.24% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>，<code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符          数值</span><br><span class=\"line\"><span class=\"built_in\">I</span>             <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">V</span>             <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"variable\">X</span>             <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"variable\">L</span>             <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"built_in\">C</span>             <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">D</span>             <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"variable\">M</span>             <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<p><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。<br><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 <br><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;III&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;IV&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;IX&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4:</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;LVIII&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">58</span></span><br><span class=\"line\">解释: <span class=\"attr\">L</span> = <span class=\"number\">50</span>, <span class=\"attr\">V=</span> <span class=\"number\">5</span>, <span class=\"attr\">III</span> = <span class=\"number\">3</span>.</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5:</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;MCMXCIV&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">1994</span></span><br><span class=\"line\">解释: <span class=\"attr\">M</span> = <span class=\"number\">1000</span>, <span class=\"attr\">CM</span> = <span class=\"number\">900</span>, <span class=\"attr\">XC</span> = <span class=\"number\">90</span>, <span class=\"attr\">IV</span> = <span class=\"number\">4</span>.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>未优化版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashTable = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;I&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;V&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;X&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;L&#x27;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;D&#x27;</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;M&#x27;</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> specialList = [ <span class=\"string\">&#x27;IV&#x27;</span>, <span class=\"string\">&#x27;IX&#x27;</span>, <span class=\"string\">&#x27;XL&#x27;</span>, <span class=\"string\">&#x27;XC&#x27;</span>, <span class=\"string\">&#x27;CD&#x27;</span>, <span class=\"string\">&#x27;CM&#x27;</span> ];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> right = s[i+<span class=\"number\">1</span>] || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specialList.indexOf(left + right) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res -= hashTable[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += hashTable[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优化版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> romanToInt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hashTable = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;I&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;V&#x27;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;X&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;L&#x27;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;D&#x27;</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;M&#x27;</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// var specialList = [ &#x27;IV&#x27;, &#x27;IX&#x27;, &#x27;XL&#x27;, &#x27;XC&#x27;, &#x27;CD&#x27;, &#x27;CM&#x27; ];</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> right = s[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// if (specialList.indexOf(left + right) &gt; -1) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            hashTable[right] &amp;&amp; hashTable[right] &gt; hashTable[left]</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            res -= hashTable[left];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res += hashTable[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 148 ms, 在所有 JavaScript 提交中击败了 96.11% 的用户；<br>内存消耗: 39.8 MB, 在所有 JavaScript 提交中击败了 83.24% 的用户。</p>\n"},{"title":"【每日一题】169. 多数元素","author":"Jelon","date":"2020-03-13T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 `⌊ n/2 ⌋` 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素...","_content":"\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 `⌊ n/2 ⌋` 的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n**示例 1:**\n\n```\n输入: [3,2,3]\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: [2,2,1,1,1,2,2]\n输出: 2\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    var hash = {};\n    var majority = 0;\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] in hash) {\n            hash[nums[i]] += 1;\n        } else {\n            hash[nums[i]] = 1;\n        }\n        if (hash[nums[i]] > nums.length / 2) {\n            majority = nums[i];\n            break;\n        }\n    }\n\n    return majority;\n};\n```\n\n##### 执行结果\n\n执行用时： 76 ms, 在所有 JavaScript 提交中击败了 68.30%的用户；\n内存消耗： 37.6 MB, 在所有 JavaScript 提交中击败了 67.22%的用户。\n\n\n\n","source":"_posts/leetcode-169.md","raw":"---\ntitle: 【每日一题】169. 多数元素\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-13\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 `⌊ n/2 ⌋` 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素...\n\n---\n\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 `⌊ n/2 ⌋` 的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n**示例 1:**\n\n```\n输入: [3,2,3]\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: [2,2,1,1,1,2,2]\n输出: 2\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    var hash = {};\n    var majority = 0;\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] in hash) {\n            hash[nums[i]] += 1;\n        } else {\n            hash[nums[i]] = 1;\n        }\n        if (hash[nums[i]] > nums.length / 2) {\n            majority = nums[i];\n            break;\n        }\n    }\n\n    return majority;\n};\n```\n\n##### 执行结果\n\n执行用时： 76 ms, 在所有 JavaScript 提交中击败了 68.30%的用户；\n内存消耗： 37.6 MB, 在所有 JavaScript 提交中击败了 67.22%的用户。\n\n\n\n","slug":"leetcode-169","published":1,"updated":"2020-03-13T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n2y0021k8svbhg08d3w","content":"<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 <code>⌊ n/2 ⌋</code> 的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: [3,2,3]</span></span><br><span class=\"line\"><span class=\"section\">输出: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: [2,2,1,1,1,2,2]</span></span><br><span class=\"line\"><span class=\"section\">输出: 2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> majority = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] <span class=\"keyword\">in</span> hash) &#123;</span><br><span class=\"line\">            hash[nums[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[nums[i]] &gt; nums.length / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            majority = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> majority;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时： 76 ms, 在所有 JavaScript 提交中击败了 68.30%的用户；<br>内存消耗： 37.6 MB, 在所有 JavaScript 提交中击败了 67.22%的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 <code>⌊ n/2 ⌋</code> 的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: [3,2,3]</span></span><br><span class=\"line\"><span class=\"section\">输出: 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: [2,2,1,1,1,2,2]</span></span><br><span class=\"line\"><span class=\"section\">输出: 2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hash = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> majority = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] <span class=\"keyword\">in</span> hash) &#123;</span><br><span class=\"line\">            hash[nums[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[nums[i]] &gt; nums.length / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            majority = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> majority;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时： 76 ms, 在所有 JavaScript 提交中击败了 68.30%的用户；<br>内存消耗： 37.6 MB, 在所有 JavaScript 提交中击败了 67.22%的用户。</p>\n"},{"title":"【每日一题】22. 括号生成","author":"Jelon","date":"2020-04-09T00:00:00.000Z","thumbnail":null,"blogexcerpt":"数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。示例：输入：n = 3输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]...","_content":"\n数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。\n\n \n\n**示例：**\n\n```\n输入：n = 3\n输出：[\n       \"((()))\",\n       \"(()())\",\n       \"(())()\",\n       \"()(())\",\n       \"()()()\"\n     ]\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n  const res = []\n  dfs('', n, n, res)\n  return res\n};\n/**\n * 深度遍历（回溯）\n */\nfunction dfs (curStr, left, right, res) {\n  // 当左括号、右括号剩余数均为0时终止递归\n  if (left === 0 && right === 0) {\n    res.push(curStr)\n    return\n  }\n  // 当左括号剩余数大于右括号剩余数\n  // 即，已使用的左括号数少于已使用的右括号数\n  // 终止递归\n  if (left > right) {\n    return\n  }\n  if (left > 0) {\n    dfs(curStr + '(', left - 1, right, res)\n  }\n  if (right > 0) {\n    dfs(curStr + ')', left, right - 1, res)\n  }\n}\n\n```\n\n##### 解题思路\n\n深度优先（回溯）：\n\n1. 当前左右括号都有大于 0 个可以使用的时候，才产生分支；\n\n2. 产生左分支的时候，只看当前是否还有左括号可以使用；\n\n3. 产生右分支的时候，还受到左分支的限制，右边剩余可以使用的括号数量一定得在严格大于左边剩余的数量的时候，才可以产生分支；\n\n4. 在左边和右边剩余的括号数都等于 0 的时候结算。\n\n","source":"_posts/leetcode-22.md","raw":"---\n\ntitle: 【每日一题】22. 括号生成\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-04-09\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。示例：输入：n = 3输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]...\n\n---\n\n数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。\n\n \n\n**示例：**\n\n```\n输入：n = 3\n输出：[\n       \"((()))\",\n       \"(()())\",\n       \"(())()\",\n       \"()(())\",\n       \"()()()\"\n     ]\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n  const res = []\n  dfs('', n, n, res)\n  return res\n};\n/**\n * 深度遍历（回溯）\n */\nfunction dfs (curStr, left, right, res) {\n  // 当左括号、右括号剩余数均为0时终止递归\n  if (left === 0 && right === 0) {\n    res.push(curStr)\n    return\n  }\n  // 当左括号剩余数大于右括号剩余数\n  // 即，已使用的左括号数少于已使用的右括号数\n  // 终止递归\n  if (left > right) {\n    return\n  }\n  if (left > 0) {\n    dfs(curStr + '(', left - 1, right, res)\n  }\n  if (right > 0) {\n    dfs(curStr + ')', left, right - 1, res)\n  }\n}\n\n```\n\n##### 解题思路\n\n深度优先（回溯）：\n\n1. 当前左右括号都有大于 0 个可以使用的时候，才产生分支；\n\n2. 产生左分支的时候，只看当前是否还有左括号可以使用；\n\n3. 产生右分支的时候，还受到左分支的限制，右边剩余可以使用的括号数量一定得在严格大于左边剩余的数量的时候，才可以产生分支；\n\n4. 在左边和右边剩余的括号数都等于 0 的时候结算。\n\n","slug":"leetcode-22","published":1,"updated":"2020-04-09T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n300024k8sv5pov6b7h","content":"<p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"built_in\">n</span> = <span class=\"number\">3</span></span><br><span class=\"line\">输出：[</span><br><span class=\"line\">       <span class=\"string\">&quot;((()))&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;(()())&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;(())()&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;()(())&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;()()()&quot;</span></span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generateParenthesis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  dfs(<span class=\"string\">&#x27;&#x27;</span>, n, n, res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度遍历（回溯）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span> (<span class=\"params\">curStr, left, right, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当左括号、右括号剩余数均为0时终止递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === <span class=\"number\">0</span> &amp;&amp; right === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    res.push(curStr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 当左括号剩余数大于右括号剩余数</span></span><br><span class=\"line\">  <span class=\"comment\">// 即，已使用的左括号数少于已使用的右括号数</span></span><br><span class=\"line\">  <span class=\"comment\">// 终止递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    dfs(curStr + <span class=\"string\">&#x27;(&#x27;</span>, left - <span class=\"number\">1</span>, right, res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    dfs(curStr + <span class=\"string\">&#x27;)&#x27;</span>, left, right - <span class=\"number\">1</span>, res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>深度优先（回溯）：</p>\n<ol>\n<li><p>当前左右括号都有大于 0 个可以使用的时候，才产生分支；</p>\n</li>\n<li><p>产生左分支的时候，只看当前是否还有左括号可以使用；</p>\n</li>\n<li><p>产生右分支的时候，还受到左分支的限制，右边剩余可以使用的括号数量一定得在严格大于左边剩余的数量的时候，才可以产生分支；</p>\n</li>\n<li><p>在左边和右边剩余的括号数都等于 0 的时候结算。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"built_in\">n</span> = <span class=\"number\">3</span></span><br><span class=\"line\">输出：[</span><br><span class=\"line\">       <span class=\"string\">&quot;((()))&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;(()())&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;(())()&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;()(())&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;()()()&quot;</span></span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generateParenthesis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  dfs(<span class=\"string\">&#x27;&#x27;</span>, n, n, res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度遍历（回溯）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dfs</span> (<span class=\"params\">curStr, left, right, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当左括号、右括号剩余数均为0时终止递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === <span class=\"number\">0</span> &amp;&amp; right === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    res.push(curStr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 当左括号剩余数大于右括号剩余数</span></span><br><span class=\"line\">  <span class=\"comment\">// 即，已使用的左括号数少于已使用的右括号数</span></span><br><span class=\"line\">  <span class=\"comment\">// 终止递归</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    dfs(curStr + <span class=\"string\">&#x27;(&#x27;</span>, left - <span class=\"number\">1</span>, right, res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    dfs(curStr + <span class=\"string\">&#x27;)&#x27;</span>, left, right - <span class=\"number\">1</span>, res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>深度优先（回溯）：</p>\n<ol>\n<li><p>当前左右括号都有大于 0 个可以使用的时候，才产生分支；</p>\n</li>\n<li><p>产生左分支的时候，只看当前是否还有左括号可以使用；</p>\n</li>\n<li><p>产生右分支的时候，还受到左分支的限制，右边剩余可以使用的括号数量一定得在严格大于左边剩余的数量的时候，才可以产生分支；</p>\n</li>\n<li><p>在左边和右边剩余的括号数都等于 0 的时候结算。</p>\n</li>\n</ol>\n"},{"title":"【每日一题】209. 长度最小的子数组","author":"Jelon","date":"2020-08-10T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0...","_content":"\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n \n\n**示例：**\n\n```\n输入：s = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n \n\n**进阶：**\n\n- 如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。\n\n##### 参考解答\n\n```js\n/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n  // 双指针\n  let minLen = nums.length + 1\n  let i = 0\n  let j = 0\n  let sum = 0\n\n  while (j < nums.length) { // 放大\n    sum += nums[j]\n    while (sum >= s) { // 缩小\n      sum -= nums[i]\n      minLen = Math.min(minLen, j - i + 1)\n      i++\n    }\n    j++\n  }\n\n  return minLen === nums.length + 1 ? 0 : minLen\n}\n```\n\n##### 参考思路\n\n- 扩张窗口：为了找到一个可行解，找到了就不再扩张\n- 收缩窗口：在长度上优化该可行解，直到条件被破坏\n- 寻找下一个可行解，然后再优化。","source":"_posts/leetcode-209.md","raw":"title: 【每日一题】209. 长度最小的子数组\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-08-10\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0...\n\n---\n\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n \n\n**示例：**\n\n```\n输入：s = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n \n\n**进阶：**\n\n- 如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。\n\n##### 参考解答\n\n```js\n/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n  // 双指针\n  let minLen = nums.length + 1\n  let i = 0\n  let j = 0\n  let sum = 0\n\n  while (j < nums.length) { // 放大\n    sum += nums[j]\n    while (sum >= s) { // 缩小\n      sum -= nums[i]\n      minLen = Math.min(minLen, j - i + 1)\n      i++\n    }\n    j++\n  }\n\n  return minLen === nums.length + 1 ? 0 : minLen\n}\n```\n\n##### 参考思路\n\n- 扩张窗口：为了找到一个可行解，找到了就不再扩张\n- 收缩窗口：在长度上优化该可行解，直到条件被破坏\n- 寻找下一个可行解，然后再优化。","slug":"leetcode-209","published":1,"updated":"2020-08-10T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n310028k8svcjjf6s2x","content":"<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = 7, nums = <span class=\"comment\">[2,3,1,2,4,3]</span></span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 <span class=\"comment\">[4,3]</span> 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>进阶：</strong></p>\n<ul>\n<li>如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。</li>\n</ul>\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 双指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> minLen = nums.length + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; nums.length) &#123; <span class=\"comment\">// 放大</span></span><br><span class=\"line\">    sum += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum &gt;= s) &#123; <span class=\"comment\">// 缩小</span></span><br><span class=\"line\">      sum -= nums[i]</span><br><span class=\"line\">      minLen = <span class=\"built_in\">Math</span>.min(minLen, j - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    j++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> minLen === nums.length + <span class=\"number\">1</span> ? <span class=\"number\">0</span> : minLen</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><ul>\n<li>扩张窗口：为了找到一个可行解，找到了就不再扩张</li>\n<li>收缩窗口：在长度上优化该可行解，直到条件被破坏</li>\n<li>寻找下一个可行解，然后再优化。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = 7, nums = <span class=\"comment\">[2,3,1,2,4,3]</span></span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 <span class=\"comment\">[4,3]</span> 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>进阶：</strong></p>\n<ul>\n<li>如果你已经完成了 O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。</li>\n</ul>\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 双指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> minLen = nums.length + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; nums.length) &#123; <span class=\"comment\">// 放大</span></span><br><span class=\"line\">    sum += nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum &gt;= s) &#123; <span class=\"comment\">// 缩小</span></span><br><span class=\"line\">      sum -= nums[i]</span><br><span class=\"line\">      minLen = <span class=\"built_in\">Math</span>.min(minLen, j - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    j++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> minLen === nums.length + <span class=\"number\">1</span> ? <span class=\"number\">0</span> : minLen</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><ul>\n<li>扩张窗口：为了找到一个可行解，找到了就不再扩张</li>\n<li>收缩窗口：在长度上优化该可行解，直到条件被破坏</li>\n<li>寻找下一个可行解，然后再优化。</li>\n</ul>\n"},{"title":"【每日一题】409. 最长回文串","author":"Jelon","date":"2020-03-19T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如 \"Aa\" 不能当做一个回文字符串。注意：假设字符串的长度不会超过 1010...","_content":"\n给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。\n\n在构造过程中，请注意区分大小写。比如 \"Aa\" 不能当做一个回文字符串。\n\n**注意:**\n\n假设字符串的长度不会超过 1010。\n\n**示例 1:**\n\n```\n输入:\n\"abccccdd\"\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n    var obj = {};\n    var res = 0;\n    var hasOdd = false;\n    for (var i = 0; i < s.length; i++) {\n        if (!obj[s[i]]) {\n            obj[s[i]] = 1;\n        } else {\n            obj[s[i]]++;\n        }\n    }\n    res = Object.values(obj).reduce((result, next) => {\n        if ((next & 1) === 0) { // 偶数\n            result += next;\n        } else { // 奇数\n            result += next - 1;\n            hasOdd = true;\n        }\n        return result;\n    }, 0);\n\n    return hasOdd ? res + 1 : res;\n};\n```\n\n##### 执行结果\n\n执行用时: 76 ms, 在所有 JavaScript 提交中击败了 48.26% 的用户；\n内存消耗: 36.2 MB, 在所有 JavaScript 提交中击败了 53.33% 的用户。","source":"_posts/leetcode-409.md","raw":"---\ntitle: 【每日一题】409. 最长回文串\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-19\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如 \"Aa\" 不能当做一个回文字符串。注意：假设字符串的长度不会超过 1010...\n\n---\n\n给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。\n\n在构造过程中，请注意区分大小写。比如 \"Aa\" 不能当做一个回文字符串。\n\n**注意:**\n\n假设字符串的长度不会超过 1010。\n\n**示例 1:**\n\n```\n输入:\n\"abccccdd\"\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n    var obj = {};\n    var res = 0;\n    var hasOdd = false;\n    for (var i = 0; i < s.length; i++) {\n        if (!obj[s[i]]) {\n            obj[s[i]] = 1;\n        } else {\n            obj[s[i]]++;\n        }\n    }\n    res = Object.values(obj).reduce((result, next) => {\n        if ((next & 1) === 0) { // 偶数\n            result += next;\n        } else { // 奇数\n            result += next - 1;\n            hasOdd = true;\n        }\n        return result;\n    }, 0);\n\n    return hasOdd ? res + 1 : res;\n};\n```\n\n##### 执行结果\n\n执行用时: 76 ms, 在所有 JavaScript 提交中击败了 48.26% 的用户；\n内存消耗: 36.2 MB, 在所有 JavaScript 提交中击败了 53.33% 的用户。","slug":"leetcode-409","published":1,"updated":"2020-03-19T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n32002ak8sv3z2rgxa6","content":"<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>\n<p>在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</p>\n<p><strong>注意:</strong></p>\n<p>假设字符串的长度不会超过 1010。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入:</span></span><br><span class=\"line\"><span class=\"string\">&quot;abccccdd&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">输出:</span></span><br><span class=\"line\">7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">解释:</span></span><br><span class=\"line\">我们可以构造的最长的回文串是<span class=\"string\">&quot;dccaccd&quot;</span>, 它的长度是 7。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOdd = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obj[s[i]]) &#123;</span><br><span class=\"line\">            obj[s[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj[s[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res = <span class=\"built_in\">Object</span>.values(obj).reduce(<span class=\"function\">(<span class=\"params\">result, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((next &amp; <span class=\"number\">1</span>) === <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            result += next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            result += next - <span class=\"number\">1</span>;</span><br><span class=\"line\">            hasOdd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasOdd ? res + <span class=\"number\">1</span> : res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 76 ms, 在所有 JavaScript 提交中击败了 48.26% 的用户；<br>内存消耗: 36.2 MB, 在所有 JavaScript 提交中击败了 53.33% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>\n<p>在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</p>\n<p><strong>注意:</strong></p>\n<p>假设字符串的长度不会超过 1010。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入:</span></span><br><span class=\"line\"><span class=\"string\">&quot;abccccdd&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">输出:</span></span><br><span class=\"line\">7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">解释:</span></span><br><span class=\"line\">我们可以构造的最长的回文串是<span class=\"string\">&quot;dccaccd&quot;</span>, 它的长度是 7。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOdd = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obj[s[i]]) &#123;</span><br><span class=\"line\">            obj[s[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj[s[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res = <span class=\"built_in\">Object</span>.values(obj).reduce(<span class=\"function\">(<span class=\"params\">result, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((next &amp; <span class=\"number\">1</span>) === <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            result += next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            result += next - <span class=\"number\">1</span>;</span><br><span class=\"line\">            hasOdd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasOdd ? res + <span class=\"number\">1</span> : res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 76 ms, 在所有 JavaScript 提交中击败了 48.26% 的用户；<br>内存消耗: 36.2 MB, 在所有 JavaScript 提交中击败了 53.33% 的用户。</p>\n"},{"title":"【每日一题】42. 接雨水","author":"Jelon","date":"2020-04-06T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）...","_content":"\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png](https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png)\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。\n\n**示例:**\n\n```\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {number[]} heights\n * @return {number}\n */\nvar trap = function(heights) {\n  var len = heights.length;\n  var res = 0;\n  var max = 0;\n  var leftMaxs = [];\n  var rightMaxs = [];\n\n  for (var i = 0; i < len; i++) {\n    leftMaxs[i] = max = Math.max(max, heights[i]);\n  }\n  max = 0;\n  for (var j = len -1; j >= 0; j--) {\n    rightMaxs[j] = max = Math.max(max, heights[j]);\n  }\n\n  for (var k = 0; k < len; k++) {\n    res += Math.min(leftMaxs[k], rightMaxs[k]) - heights[k];\n  }\n\n  return res;\n};\n```\n\n##### 参考思路\n\n暴力，双数组。\n\n","source":"_posts/leetcode-42.md","raw":"---\ntitle: 【每日一题】42. 接雨水\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-04-06\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）...\n\n---\n\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png](https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png)\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。\n\n**示例:**\n\n```\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {number[]} heights\n * @return {number}\n */\nvar trap = function(heights) {\n  var len = heights.length;\n  var res = 0;\n  var max = 0;\n  var leftMaxs = [];\n  var rightMaxs = [];\n\n  for (var i = 0; i < len; i++) {\n    leftMaxs[i] = max = Math.max(max, heights[i]);\n  }\n  max = 0;\n  for (var j = len -1; j >= 0; j--) {\n    rightMaxs[j] = max = Math.max(max, heights[j]);\n  }\n\n  for (var k = 0; k < len; k++) {\n    res += Math.min(leftMaxs[k], rightMaxs[k]) - heights[k];\n  }\n\n  return res;\n};\n```\n\n##### 参考思路\n\n暴力，双数组。\n\n","slug":"leetcode-42","published":1,"updated":"2020-04-06T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n32002dk8sv6eyvfly7","content":"<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png\"></p>\n<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">0,1,0,2</span>,<span class=\"number\">1,0,1,3</span>,<span class=\"number\">2,1,2,1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">heights</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">heights</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = heights.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> leftMaxs = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rightMaxs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    leftMaxs[i] = max = <span class=\"built_in\">Math</span>.max(max, heights[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = len -<span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    rightMaxs[j] = max = <span class=\"built_in\">Math</span>.max(max, heights[j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; len; k++) &#123;</span><br><span class=\"line\">    res += <span class=\"built_in\">Math</span>.min(leftMaxs[k], rightMaxs[k]) - heights[k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>暴力，双数组。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-42/rainwatertrap.png\"></p>\n<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">0,1,0,2</span>,<span class=\"number\">1,0,1,3</span>,<span class=\"number\">2,1,2,1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">heights</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">heights</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = heights.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> leftMaxs = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rightMaxs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    leftMaxs[i] = max = <span class=\"built_in\">Math</span>.max(max, heights[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = len -<span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    rightMaxs[j] = max = <span class=\"built_in\">Math</span>.max(max, heights[j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; len; k++) &#123;</span><br><span class=\"line\">    res += <span class=\"built_in\">Math</span>.min(leftMaxs[k], rightMaxs[k]) - heights[k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>暴力，双数组。</p>\n"},{"title":"【每日一题】56. 合并区间","author":"Jelon","date":"2020-08-09T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给出一个区间的集合，请合并所有重叠的区间。解题思路1. 先按左顶点进行升序排序；2. 循环判断 intervals[i][1] >= intervals[i+1][0] 即当前元素右顶点与下个元素左顶点比较；3. 当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]...","_content":"\n给出一个区间的集合，请合并所有重叠的区间。\n\n**示例 1:**\n\n```\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n\n**示例 2:**\n\n```\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n  // 先根据左顶点进行升序排序\n  intervals = intervals.sort((a, b) => a[0] - b[0])\n  for (let i = 0; i < intervals.length - 1; i++) {\n    const a2 = intervals[i][1] // 当前元素的右顶点\n    const b1 = intervals[i+1][0] // 下个元素的左顶点\n    const b2 = intervals[i+1][1] // 下个元素的右顶点\n    if (a2 >= b1) { // 当前元素的右顶点与下个元素左顶点比较\n      intervals[i][1] = Math.max(a2, b2)\n      intervals.splice(i + 1, 1) // 删掉下标 i + 1\n      i--\n    }\n  }\n\n  return intervals\n}\n```\n\n##### 解题思路\n\n1. 先按左顶点进行升序排序；\n2. 循环判断 intervals[i][1] >= intervals[i+1][0]，即当前元素右顶点与下个元素左顶点比较；\n3. 当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]。\n\n> 注：\n> \n> 边界i<intervals.length-1\n> \n> 因为删除元素，数组变短了。此时： i--\n> \n","source":"_posts/leetcode-56.md","raw":"title: 【每日一题】56. 合并区间\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-08-09\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给出一个区间的集合，请合并所有重叠的区间。解题思路1. 先按左顶点进行升序排序；2. 循环判断 intervals[i][1] >= intervals[i+1][0] 即当前元素右顶点与下个元素左顶点比较；3. 当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]...\n\n---\n\n给出一个区间的集合，请合并所有重叠的区间。\n\n**示例 1:**\n\n```\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n\n**示例 2:**\n\n```\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n  // 先根据左顶点进行升序排序\n  intervals = intervals.sort((a, b) => a[0] - b[0])\n  for (let i = 0; i < intervals.length - 1; i++) {\n    const a2 = intervals[i][1] // 当前元素的右顶点\n    const b1 = intervals[i+1][0] // 下个元素的左顶点\n    const b2 = intervals[i+1][1] // 下个元素的右顶点\n    if (a2 >= b1) { // 当前元素的右顶点与下个元素左顶点比较\n      intervals[i][1] = Math.max(a2, b2)\n      intervals.splice(i + 1, 1) // 删掉下标 i + 1\n      i--\n    }\n  }\n\n  return intervals\n}\n```\n\n##### 解题思路\n\n1. 先按左顶点进行升序排序；\n2. 循环判断 intervals[i][1] >= intervals[i+1][0]，即当前元素右顶点与下个元素左顶点比较；\n3. 当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]。\n\n> 注：\n> \n> 边界i<intervals.length-1\n> \n> 因为删除元素，数组变短了。此时： i--\n> \n","slug":"leetcode-56","published":1,"updated":"2020-08-09T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n33002gk8sv3oicb1lk","content":"<p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">输出: [[<span class=\"number\">1</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">解释: 区间 [<span class=\"number\">1</span>,<span class=\"number\">3</span>] 和 [<span class=\"number\">2</span>,<span class=\"number\">6</span>] 重叠, 将它们合并为 [<span class=\"number\">1</span>,<span class=\"number\">6</span>].</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">[[1,4],[4,5]]</span></span><br><span class=\"line\">输出: <span class=\"string\">[[1,5]]</span></span><br><span class=\"line\">解释: 区间 [<span class=\"number\">1</span>,<span class=\"number\">4</span>] 和 [<span class=\"number\">4</span>,<span class=\"number\">5</span>] 可被视为重叠区间。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">intervals</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">intervals</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先根据左顶点进行升序排序</span></span><br><span class=\"line\">  intervals = intervals.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a[<span class=\"number\">0</span>] - b[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; intervals.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a2 = intervals[i][<span class=\"number\">1</span>] <span class=\"comment\">// 当前元素的右顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> b1 = intervals[i+<span class=\"number\">1</span>][<span class=\"number\">0</span>] <span class=\"comment\">// 下个元素的左顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> b2 = intervals[i+<span class=\"number\">1</span>][<span class=\"number\">1</span>] <span class=\"comment\">// 下个元素的右顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a2 &gt;= b1) &#123; <span class=\"comment\">// 当前元素的右顶点与下个元素左顶点比较</span></span><br><span class=\"line\">      intervals[i][<span class=\"number\">1</span>] = <span class=\"built_in\">Math</span>.max(a2, b2)</span><br><span class=\"line\">      intervals.splice(i + <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 删掉下标 i + 1</span></span><br><span class=\"line\">      i--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> intervals</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>先按左顶点进行升序排序；</li>\n<li>循环判断 intervals[i][1] &gt;= intervals[i+1][0]，即当前元素右顶点与下个元素左顶点比较；</li>\n<li>当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]。</li>\n</ol>\n<blockquote>\n<p>注：</p>\n<p>边界i&lt;intervals.length-1</p>\n<p>因为删除元素，数组变短了。此时： i–</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">输出: [[<span class=\"number\">1</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">解释: 区间 [<span class=\"number\">1</span>,<span class=\"number\">3</span>] 和 [<span class=\"number\">2</span>,<span class=\"number\">6</span>] 重叠, 将它们合并为 [<span class=\"number\">1</span>,<span class=\"number\">6</span>].</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">[[1,4],[4,5]]</span></span><br><span class=\"line\">输出: <span class=\"string\">[[1,5]]</span></span><br><span class=\"line\">解释: 区间 [<span class=\"number\">1</span>,<span class=\"number\">4</span>] 和 [<span class=\"number\">4</span>,<span class=\"number\">5</span>] 可被视为重叠区间。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">intervals</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">intervals</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先根据左顶点进行升序排序</span></span><br><span class=\"line\">  intervals = intervals.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a[<span class=\"number\">0</span>] - b[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; intervals.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a2 = intervals[i][<span class=\"number\">1</span>] <span class=\"comment\">// 当前元素的右顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> b1 = intervals[i+<span class=\"number\">1</span>][<span class=\"number\">0</span>] <span class=\"comment\">// 下个元素的左顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> b2 = intervals[i+<span class=\"number\">1</span>][<span class=\"number\">1</span>] <span class=\"comment\">// 下个元素的右顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a2 &gt;= b1) &#123; <span class=\"comment\">// 当前元素的右顶点与下个元素左顶点比较</span></span><br><span class=\"line\">      intervals[i][<span class=\"number\">1</span>] = <span class=\"built_in\">Math</span>.max(a2, b2)</span><br><span class=\"line\">      intervals.splice(i + <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 删掉下标 i + 1</span></span><br><span class=\"line\">      i--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> intervals</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>先按左顶点进行升序排序；</li>\n<li>循环判断 intervals[i][1] &gt;= intervals[i+1][0]，即当前元素右顶点与下个元素左顶点比较；</li>\n<li>当前元素右顶点取值，符合条件删除下一个元素 intervals[i+1]。</li>\n</ol>\n<blockquote>\n<p>注：</p>\n<p>边界i&lt;intervals.length-1</p>\n<p>因为删除元素，数组变短了。此时： i–</p>\n</blockquote>\n"},{"title":"【每日一题】61. 旋转链表","author":"Jelon","date":"2020-07-23T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。示例 1：输入： 1->2->3->4->5->NULL, k = 2 输出： 4->5->1->2->3->NULL解释：向右旋转 1 步： 5->1->2->3->4->NULL向右旋转 2 步： 4->5->1->2->3->NULL...","_content":"\n给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。\n\n**示例 1:**\n\n```\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n```\n\n**示例 2:**\n\n```\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n  if (!head || !head.next) return head\n\n  // 先闭合环\n  var old_tail = head\n  var n = 1\n  while (old_tail.next) {\n    old_tail = old_tail.next\n    n++\n  }\n  old_tail.next = head\n\n  // 断开\n  var new_tail = head\n  var new_head = head\n  for (var i = 0; i < n - k % n - 1; i++) {\n    new_tail = new_tail.next\n  }\n  new_head = new_tail.next // 重新计算新的头结点\n  new_tail.next = null // 断开\n\n  return new_head\n};\n```\n\n##### 解题思路\n\n1. 先将链表进行闭环\n2. 从 n - k % n （因为考虑到k > n情况）处断开。\n\n","source":"_posts/leetcode-61.md","raw":"title: 【每日一题】61. 旋转链表\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-07-23\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。示例 1：输入： 1->2->3->4->5->NULL, k = 2 输出： 4->5->1->2->3->NULL解释：向右旋转 1 步： 5->1->2->3->4->NULL向右旋转 2 步： 4->5->1->2->3->NULL...\n\n---\n\n给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。\n\n**示例 1:**\n\n```\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n```\n\n**示例 2:**\n\n```\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n  if (!head || !head.next) return head\n\n  // 先闭合环\n  var old_tail = head\n  var n = 1\n  while (old_tail.next) {\n    old_tail = old_tail.next\n    n++\n  }\n  old_tail.next = head\n\n  // 断开\n  var new_tail = head\n  var new_head = head\n  for (var i = 0; i < n - k % n - 1; i++) {\n    new_tail = new_tail.next\n  }\n  new_head = new_tail.next // 重新计算新的头结点\n  new_tail.next = null // 断开\n\n  return new_head\n};\n```\n\n##### 解题思路\n\n1. 先将链表进行闭环\n2. 从 n - k % n （因为考虑到k > n情况）处断开。\n\n","slug":"leetcode-61","published":1,"updated":"2020-07-23T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n34002jk8svct9h78zi","content":"<p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL, k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;NULL</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: <span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: <span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;NULL, k = <span class=\"number\">4</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">3</span> 步: <span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">4</span> 步: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !head.next) <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先闭合环</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> old_tail = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (old_tail.next) &#123;</span><br><span class=\"line\">    old_tail = old_tail.next</span><br><span class=\"line\">    n++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  old_tail.next = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 断开</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> new_tail = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> new_head = head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - k % n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    new_tail = new_tail.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  new_head = new_tail.next <span class=\"comment\">// 重新计算新的头结点</span></span><br><span class=\"line\">  new_tail.next = <span class=\"literal\">null</span> <span class=\"comment\">// 断开</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>先将链表进行闭环</li>\n<li>从 n - k % n （因为考虑到k &gt; n情况）处断开。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL, k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;NULL</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: <span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: <span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;NULL, k = <span class=\"number\">4</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">3</span> 步: <span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;NULL</span><br><span class=\"line\">向右旋转 <span class=\"number\">4</span> 步: <span class=\"number\">2</span>-&gt;<span class=\"number\">0</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotateRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !head.next) <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先闭合环</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> old_tail = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (old_tail.next) &#123;</span><br><span class=\"line\">    old_tail = old_tail.next</span><br><span class=\"line\">    n++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  old_tail.next = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 断开</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> new_tail = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> new_head = head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - k % n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    new_tail = new_tail.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  new_head = new_tail.next <span class=\"comment\">// 重新计算新的头结点</span></span><br><span class=\"line\">  new_tail.next = <span class=\"literal\">null</span> <span class=\"comment\">// 断开</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>先将链表进行闭环</li>\n<li>从 n - k % n （因为考虑到k &gt; n情况）处断开。</li>\n</ol>\n"},{"title":"【每日一题】695. 岛屿的最大面积","author":"Jelon","date":"2020-03-15T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)...","_content":"\n给定一个包含了一些 0 和 1的非空二维数组 `grid` , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。\n\n找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)\n\n**示例 1:**\n\n```\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n```\n\n对于上面这个给定矩阵应返回 `6`。注意答案不应该是 `11`，因为岛屿只能包含水平或垂直的四个方向的‘1’。\n\n**示例 2:**\n\n```\n[[0,0,0,0,0,0,0,0]]\n```\n\n对于上面这个给定的矩阵, 返回 `0`。\n\n注意: 给定的矩阵grid 的长度和宽度都不超过 50。\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    var rows = grid.length; // 行数\n    var cols = grid[0].length; // 列数\n    var max = 0;\n\n    for (var row = 0; row < rows; row++) {\n        for (var col = 0; col < cols; col++) {\n            if (grid[row][col] === 1) {\n                max = Math.max(max, getArea(grid, row, col));\n            }\n        }\n    }\n    return max;\n};\n\n// 递归\nfunction getArea (grid, row, col) {\n    if (grid[row][col] === 0) return 0;\n    grid[row][col] = 0; // 已计算的要归零\n    var area = 1;\n\n    if (row - 1 >= 0) { // 往上\n        area += getArea(grid, row - 1, col);\n    }\n    if (row + 1 < grid.length) { // 往下\n        area += getArea(grid, row + 1, col);\n    }\n    if (col - 1 >= 0) { // 往左\n        area += getArea(grid, row, col - 1);\n    }\n    if (col + 1 < grid[0].length) { // 往右\n        area += getArea(grid, row, col + 1);\n    }\n\n    return area;\n}\n```\n\n##### 执行结果\n\n执行用时: 100 ms, 在所有 JavaScript 提交中击败了 48.33% 的用户；\n内存消耗: 36.3 MB, 在所有 JavaScript 提交中击败了 80.49% 的用户。","source":"_posts/leetcode-695.md","raw":"---\n\ntitle: 【每日一题】695. 岛屿的最大面积\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-15\ntags:\n\t- LeetCode\n\t- 算法 \nthumbnail:\nblogexcerpt: 给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)...\n\n---\n\n给定一个包含了一些 0 和 1的非空二维数组 `grid` , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。\n\n找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)\n\n**示例 1:**\n\n```\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n```\n\n对于上面这个给定矩阵应返回 `6`。注意答案不应该是 `11`，因为岛屿只能包含水平或垂直的四个方向的‘1’。\n\n**示例 2:**\n\n```\n[[0,0,0,0,0,0,0,0]]\n```\n\n对于上面这个给定的矩阵, 返回 `0`。\n\n注意: 给定的矩阵grid 的长度和宽度都不超过 50。\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    var rows = grid.length; // 行数\n    var cols = grid[0].length; // 列数\n    var max = 0;\n\n    for (var row = 0; row < rows; row++) {\n        for (var col = 0; col < cols; col++) {\n            if (grid[row][col] === 1) {\n                max = Math.max(max, getArea(grid, row, col));\n            }\n        }\n    }\n    return max;\n};\n\n// 递归\nfunction getArea (grid, row, col) {\n    if (grid[row][col] === 0) return 0;\n    grid[row][col] = 0; // 已计算的要归零\n    var area = 1;\n\n    if (row - 1 >= 0) { // 往上\n        area += getArea(grid, row - 1, col);\n    }\n    if (row + 1 < grid.length) { // 往下\n        area += getArea(grid, row + 1, col);\n    }\n    if (col - 1 >= 0) { // 往左\n        area += getArea(grid, row, col - 1);\n    }\n    if (col + 1 < grid[0].length) { // 往右\n        area += getArea(grid, row, col + 1);\n    }\n\n    return area;\n}\n```\n\n##### 执行结果\n\n执行用时: 100 ms, 在所有 JavaScript 提交中击败了 48.33% 的用户；\n内存消耗: 36.3 MB, 在所有 JavaScript 提交中击败了 80.49% 的用户。","slug":"leetcode-695","published":1,"updated":"2020-03-15T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n36002mk8sv7s2gfmuq","content":"<p>给定一个包含了一些 0 和 1的非空二维数组 <code>grid</code> , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p>\n<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是 <code>11</code>，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p>\n<p>注意: 给定的矩阵grid 的长度和宽度都不超过 50。</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxAreaOfIsland = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rows = grid.length; <span class=\"comment\">// 行数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length; <span class=\"comment\">// 列数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; rows; row++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; cols; col++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[row][col] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                max = <span class=\"built_in\">Math</span>.max(max, getArea(grid, row, col));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArea</span> (<span class=\"params\">grid, row, col</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[row][col] === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    grid[row][col] = <span class=\"number\">0</span>; <span class=\"comment\">// 已计算的要归零</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> area = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 往上</span></span><br><span class=\"line\">        area += getArea(grid, row - <span class=\"number\">1</span>, col);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row + <span class=\"number\">1</span> &lt; grid.length) &#123; <span class=\"comment\">// 往下</span></span><br><span class=\"line\">        area += getArea(grid, row + <span class=\"number\">1</span>, col);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 往左</span></span><br><span class=\"line\">        area += getArea(grid, row, col - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].length) &#123; <span class=\"comment\">// 往右</span></span><br><span class=\"line\">        area += getArea(grid, row, col + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> area;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 100 ms, 在所有 JavaScript 提交中击败了 48.33% 的用户；<br>内存消耗: 36.3 MB, 在所有 JavaScript 提交中击败了 80.49% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个包含了一些 0 和 1的非空二维数组 <code>grid</code> , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p>\n<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"> [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是 <code>11</code>，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p>\n<p>注意: 给定的矩阵grid 的长度和宽度都不超过 50。</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxAreaOfIsland = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rows = grid.length; <span class=\"comment\">// 行数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length; <span class=\"comment\">// 列数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; rows; row++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> col = <span class=\"number\">0</span>; col &lt; cols; col++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[row][col] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                max = <span class=\"built_in\">Math</span>.max(max, getArea(grid, row, col));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArea</span> (<span class=\"params\">grid, row, col</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[row][col] === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    grid[row][col] = <span class=\"number\">0</span>; <span class=\"comment\">// 已计算的要归零</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> area = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 往上</span></span><br><span class=\"line\">        area += getArea(grid, row - <span class=\"number\">1</span>, col);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row + <span class=\"number\">1</span> &lt; grid.length) &#123; <span class=\"comment\">// 往下</span></span><br><span class=\"line\">        area += getArea(grid, row + <span class=\"number\">1</span>, col);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 往左</span></span><br><span class=\"line\">        area += getArea(grid, row, col - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].length) &#123; <span class=\"comment\">// 往右</span></span><br><span class=\"line\">        area += getArea(grid, row, col + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> area;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 100 ms, 在所有 JavaScript 提交中击败了 48.33% 的用户；<br>内存消耗: 36.3 MB, 在所有 JavaScript 提交中击败了 80.49% 的用户。</p>\n"},{"title":"【每日一题】8. 字符串转换整数 (atoi)","author":"Jelon","date":"2020-04-04T00:00:00.000Z","thumbnail":null,"blogexcerpt":"请你来实现一个 atoi 函数，使其能将字符串转换成整数。首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。注意：假如该字符串中的第一...","_content":"\n请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：\n\n- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。\n- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。\n- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0 。\n\n**提示：**\n\n- 本题中的空白字符只包括空格字符 ' ' 。\n- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n  var newStr = '';\n  var res = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '-' || str[i] === '+') {\n      if (i === 0 || !newStr.length) {\n        newStr += str[i];\n      } else {\n        break;\n      } \n    } else if (str[i] === ' ') {\n      if (i === 0 || !newStr.length) {\n        continue;\n      } else {\n        break;\n      }\n    } else if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      break;\n    }\n  }\n  res = newStr.length && newStr !== '-' && newStr !== '+' ? parseInt(newStr) : 0;\n  return Math.min(Math.max(res, -Math.pow(2, 31)), Math.pow(2, 31) - 1)\n};\n```\n\n##### 解题思路\n\n1. 自动机。\n2. 排除使用正则。\n\n","source":"_posts/leetcode-8.md","raw":"---\ntitle: 【每日一题】8. 字符串转换整数 (atoi)\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-04-04\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 请你来实现一个 atoi 函数，使其能将字符串转换成整数。首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。注意：假如该字符串中的第一...\n\n---\n\n请你来实现一个 `atoi` 函数，使其能将字符串转换成整数。\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：\n\n- 如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。\n- 假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。\n- 该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0 。\n\n**提示：**\n\n- 本题中的空白字符只包括空格字符 ' ' 。\n- 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n**示例 1:**\n\n```\n输入: \"42\"\n输出: 42\n```\n\n**示例 2:**\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n**示例 3:**\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n```\n\n**示例 4:**\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n**示例 5:**\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar myAtoi = function(str) {\n  var newStr = '';\n  var res = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '-' || str[i] === '+') {\n      if (i === 0 || !newStr.length) {\n        newStr += str[i];\n      } else {\n        break;\n      } \n    } else if (str[i] === ' ') {\n      if (i === 0 || !newStr.length) {\n        continue;\n      } else {\n        break;\n      }\n    } else if (str[i] >= '0' && str[i] <= '9') {\n      newStr += str[i];\n    } else {\n      break;\n    }\n  }\n  res = newStr.length && newStr !== '-' && newStr !== '+' ? parseInt(newStr) : 0;\n  return Math.min(Math.max(res, -Math.pow(2, 31)), Math.pow(2, 31) - 1)\n};\n```\n\n##### 解题思路\n\n1. 自动机。\n2. 排除使用正则。\n\n","slug":"leetcode-8","published":1,"updated":"2020-04-04T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n37002ok8sv9fbq1qg7","content":"<p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>\n<ul>\n<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>\n<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>\n<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>\n</ul>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li>\n<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>\n</ul>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;42&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 42</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;   -42&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: -42</span></span><br><span class=\"line\"><span class=\"section\">解释: 第一个非空白字符为 &#x27;-&#x27;, 它是一个负号。</span></span><br><span class=\"line\">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;4193 with words&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 4193</span></span><br><span class=\"line\"><span class=\"section\">解释: 转换截止于数字 &#x27;3&#x27; ，因为它的下一个字符不为数字。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;words and 987&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 0</span></span><br><span class=\"line\"><span class=\"section\">解释: 第一个非空字符是 &#x27;w&#x27;, 但它不是数字或正、负号。</span></span><br><span class=\"line\">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5:</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;-<span class=\"number\">91283472332</span>&quot;</span><br><span class=\"line\">输出: -<span class=\"number\">2147483648</span></span><br><span class=\"line\">解释: 数字 &quot;-<span class=\"number\">91283472332</span>&quot; 超过 <span class=\"number\">32</span> 位有符号整数范围。 </span><br><span class=\"line\">     因此返回 INT_MIN (−<span class=\"number\">231</span>) 。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">str</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myAtoi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27;-&#x27;</span> || str[i] === <span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || !newStr.length) &#123;</span><br><span class=\"line\">        newStr += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || !newStr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">      newStr += str[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = newStr.length &amp;&amp; newStr !== <span class=\"string\">&#x27;-&#x27;</span> &amp;&amp; newStr !== <span class=\"string\">&#x27;+&#x27;</span> ? <span class=\"built_in\">parseInt</span>(newStr) : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.max(res, -<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>)), <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>自动机。</li>\n<li>排除使用正则。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>\n<ul>\n<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>\n<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>\n<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>\n</ul>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li>\n<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>\n</ul>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;42&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 42</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;   -42&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: -42</span></span><br><span class=\"line\"><span class=\"section\">解释: 第一个非空白字符为 &#x27;-&#x27;, 它是一个负号。</span></span><br><span class=\"line\">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;4193 with words&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 4193</span></span><br><span class=\"line\"><span class=\"section\">解释: 转换截止于数字 &#x27;3&#x27; ，因为它的下一个字符不为数字。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: &quot;words and 987&quot;</span></span><br><span class=\"line\"><span class=\"section\">输出: 0</span></span><br><span class=\"line\"><span class=\"section\">解释: 第一个非空字符是 &#x27;w&#x27;, 但它不是数字或正、负号。</span></span><br><span class=\"line\">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5:</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;-<span class=\"number\">91283472332</span>&quot;</span><br><span class=\"line\">输出: -<span class=\"number\">2147483648</span></span><br><span class=\"line\">解释: 数字 &quot;-<span class=\"number\">91283472332</span>&quot; 超过 <span class=\"number\">32</span> 位有符号整数范围。 </span><br><span class=\"line\">     因此返回 INT_MIN (−<span class=\"number\">231</span>) 。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">str</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myAtoi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27;-&#x27;</span> || str[i] === <span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || !newStr.length) &#123;</span><br><span class=\"line\">        newStr += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || !newStr.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">      newStr += str[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = newStr.length &amp;&amp; newStr !== <span class=\"string\">&#x27;-&#x27;</span> &amp;&amp; newStr !== <span class=\"string\">&#x27;+&#x27;</span> ? <span class=\"built_in\">parseInt</span>(newStr) : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"built_in\">Math</span>.max(res, -<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>)), <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><ol>\n<li>自动机。</li>\n<li>排除使用正则。</li>\n</ol>\n"},{"title":"【每日一题】836. 矩形重叠","author":"Jelon","date":"2020-03-18T00:00:00.000Z","thumbnail":null,"blogexcerpt":"矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。给出两个矩形，判断它们是否重叠并返回结果...","_content":"\n矩形以列表 `[x1, y1, x2, y2]` 的形式表示，其中 `(x1, y1)` 为左下角的坐标，`(x2, y2)` 是右上角的坐标。\n\n如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。\n\n给出两个矩形，判断它们是否重叠并返回结果。\n\n**示例 1：**\n\n```\n输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n输出：false\n```\n\n**提示：**\n\n1. 两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。\n2. 矩形中的所有坐标都处于 -10^9 和 10^9 之间。\n3. x 轴默认指向右，y 轴默认指向上。\n4. 你可以仅考虑矩形是正放的情况。\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    /**\n     * 反求不重叠情况\n     */\n    return !(\n        rec1[2] <= rec2[0] || rec1[3] <= rec2[1]\n        ||\n        rec1[0] >= rec2[2] || rec1[1] >= rec2[3]\n    )\n};\n```\n\n##### 执行结果\n\n执行用时：56 ms, 在所有 JavaScript 提交中击败了 89.71% 的用户；\n内存消耗：33.7 MB, 在所有 JavaScript 提交中击败了 96.15% 的用户。\n","source":"_posts/leetcode-836.md","raw":"---\ntitle: 【每日一题】836. 矩形重叠\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-18\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。给出两个矩形，判断它们是否重叠并返回结果...\n\n---\n\n矩形以列表 `[x1, y1, x2, y2]` 的形式表示，其中 `(x1, y1)` 为左下角的坐标，`(x2, y2)` 是右上角的坐标。\n\n如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。\n\n给出两个矩形，判断它们是否重叠并返回结果。\n\n**示例 1：**\n\n```\n输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n输出：false\n```\n\n**提示：**\n\n1. 两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。\n2. 矩形中的所有坐标都处于 -10^9 和 10^9 之间。\n3. x 轴默认指向右，y 轴默认指向上。\n4. 你可以仅考虑矩形是正放的情况。\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    /**\n     * 反求不重叠情况\n     */\n    return !(\n        rec1[2] <= rec2[0] || rec1[3] <= rec2[1]\n        ||\n        rec1[0] >= rec2[2] || rec1[1] >= rec2[3]\n    )\n};\n```\n\n##### 执行结果\n\n执行用时：56 ms, 在所有 JavaScript 提交中击败了 89.71% 的用户；\n内存消耗：33.7 MB, 在所有 JavaScript 提交中击败了 96.15% 的用户。\n","slug":"leetcode-836","published":1,"updated":"2020-03-18T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n38002rk8sv0z177e0y","content":"<p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p>\n<p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>\n<p>给出两个矩形，判断它们是否重叠并返回结果。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">rec1</span> = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>], <span class=\"attr\">rec2</span> = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">rec1</span> = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], <span class=\"attr\">rec2</span> = [<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。</li>\n<li>矩形中的所有坐标都处于 -10^9 和 10^9 之间。</li>\n<li>x 轴默认指向右，y 轴默认指向上。</li>\n<li>你可以仅考虑矩形是正放的情况。</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">rec1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">rec2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleOverlap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rec1, rec2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 反求不重叠情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(</span><br><span class=\"line\">        rec1[<span class=\"number\">2</span>] &lt;= rec2[<span class=\"number\">0</span>] || rec1[<span class=\"number\">3</span>] &lt;= rec2[<span class=\"number\">1</span>]</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        rec1[<span class=\"number\">0</span>] &gt;= rec2[<span class=\"number\">2</span>] || rec1[<span class=\"number\">1</span>] &gt;= rec2[<span class=\"number\">3</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：56 ms, 在所有 JavaScript 提交中击败了 89.71% 的用户；<br>内存消耗：33.7 MB, 在所有 JavaScript 提交中击败了 96.15% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p>\n<p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>\n<p>给出两个矩形，判断它们是否重叠并返回结果。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">rec1</span> = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>], <span class=\"attr\">rec2</span> = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">rec1</span> = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], <span class=\"attr\">rec2</span> = [<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。</li>\n<li>矩形中的所有坐标都处于 -10^9 和 10^9 之间。</li>\n<li>x 轴默认指向右，y 轴默认指向上。</li>\n<li>你可以仅考虑矩形是正放的情况。</li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">rec1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">rec2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRectangleOverlap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rec1, rec2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 反求不重叠情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(</span><br><span class=\"line\">        rec1[<span class=\"number\">2</span>] &lt;= rec2[<span class=\"number\">0</span>] || rec1[<span class=\"number\">3</span>] &lt;= rec2[<span class=\"number\">1</span>]</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        rec1[<span class=\"number\">0</span>] &gt;= rec2[<span class=\"number\">2</span>] || rec1[<span class=\"number\">1</span>] &gt;= rec2[<span class=\"number\">3</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时：56 ms, 在所有 JavaScript 提交中击败了 89.71% 的用户；<br>内存消耗：33.7 MB, 在所有 JavaScript 提交中击败了 96.15% 的用户。</p>\n"},{"title":"【每日一题】876. 链表的中间结点","author":"Jelon","date":"2020-03-23T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。示例 1：输入：[1,2,3,4,5]输出：此列表中的结点 3 (序列化形式：[3,4,5])返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。注意，我们返回了一个 ListNode 类型的对象 ans，这样：ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL...","_content":"\n给定一个带有头结点 head 的非空单链表，返回链表的中间结点。\n\n如果有两个中间结点，则返回第二个中间结点。\n\n \n\n**示例 1：**\n\n```\n输入：[1,2,3,4,5]\n输出：此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n```\n\n**示例 2：**\n\n```\n输入：[1,2,3,4,5,6]\n输出：此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n```\n \n\n**提示：**\n\n给定链表的结点数介于 1 和 100 之间。\n\n\n##### 解题思路\n\n看了大家评论，毫无疑问此题是一道非常非常简单的题目，然而我却抓破脑袋也没想出个所以然，只好无耻地去看了一下题解。快慢指针方法令我很佩服：用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，slow 必然位于中间。\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n  var fast = head;\n  var slow = head;\n  \n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  return slow;\n};\n```\n\n##### 执行结果\n\n因为是抄别人的思路，这里就不展示执行结果了吧。虽然有点迷茫，但还是坚持吧！\n\n\n\n","source":"_posts/leetcode-876.md","raw":"---\n\ntitle: 【每日一题】876. 链表的中间结点\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-23\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。示例 1：输入：[1,2,3,4,5]输出：此列表中的结点 3 (序列化形式：[3,4,5])返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。注意，我们返回了一个 ListNode 类型的对象 ans，这样：ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL...\n\n---\n\n给定一个带有头结点 head 的非空单链表，返回链表的中间结点。\n\n如果有两个中间结点，则返回第二个中间结点。\n\n \n\n**示例 1：**\n\n```\n输入：[1,2,3,4,5]\n输出：此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n```\n\n**示例 2：**\n\n```\n输入：[1,2,3,4,5,6]\n输出：此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n```\n \n\n**提示：**\n\n给定链表的结点数介于 1 和 100 之间。\n\n\n##### 解题思路\n\n看了大家评论，毫无疑问此题是一道非常非常简单的题目，然而我却抓破脑袋也没想出个所以然，只好无耻地去看了一下题解。快慢指针方法令我很佩服：用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，slow 必然位于中间。\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n  var fast = head;\n  var slow = head;\n  \n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  return slow;\n};\n```\n\n##### 执行结果\n\n因为是抄别人的思路，这里就不展示执行结果了吧。虽然有点迷茫，但还是坚持吧！\n\n\n\n","slug":"leetcode-876","published":1,"updated":"2020-03-23T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3a002uk8sv0tbn8njl","content":"<p>给定一个带有头结点 head 的非空单链表，返回链表的中间结点。</p>\n<p>如果有两个中间结点，则返回第二个中间结点。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"selector-attr\">[1,2,3,4,5]</span></span><br><span class=\"line\">输出：此列表中的结点 <span class=\"number\">3</span> (序列化形式：<span class=\"selector-attr\">[3,4,5]</span>)</span><br><span class=\"line\">返回的结点值为 <span class=\"number\">3</span> 。 (测评系统对该结点序列化表述是 <span class=\"selector-attr\">[3,4,5]</span>)。</span><br><span class=\"line\">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class=\"line\">ans<span class=\"selector-class\">.val</span> = <span class=\"number\">3</span>, ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.val</span> = <span class=\"number\">4</span>, ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span><span class=\"selector-class\">.val</span> = <span class=\"number\">5</span>, 以及 ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span> = NULL.</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"selector-attr\">[1,2,3,4,5,6]</span></span><br><span class=\"line\">输出：此列表中的结点 <span class=\"number\">4</span> (序列化形式：<span class=\"selector-attr\">[4,5,6]</span>)</span><br><span class=\"line\">由于该列表有两个中间结点，值分别为 <span class=\"number\">3</span> 和 <span class=\"number\">4</span>，我们返回第二个结点。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<p>给定链表的结点数介于 1 和 100 之间。</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>看了大家评论，毫无疑问此题是一道非常非常简单的题目，然而我却抓破脑袋也没想出个所以然，只好无耻地去看了一下题解。快慢指针方法令我很佩服：用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，slow 必然位于中间。</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slow = head;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>因为是抄别人的思路，这里就不展示执行结果了吧。虽然有点迷茫，但还是坚持吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个带有头结点 head 的非空单链表，返回链表的中间结点。</p>\n<p>如果有两个中间结点，则返回第二个中间结点。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"selector-attr\">[1,2,3,4,5]</span></span><br><span class=\"line\">输出：此列表中的结点 <span class=\"number\">3</span> (序列化形式：<span class=\"selector-attr\">[3,4,5]</span>)</span><br><span class=\"line\">返回的结点值为 <span class=\"number\">3</span> 。 (测评系统对该结点序列化表述是 <span class=\"selector-attr\">[3,4,5]</span>)。</span><br><span class=\"line\">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class=\"line\">ans<span class=\"selector-class\">.val</span> = <span class=\"number\">3</span>, ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.val</span> = <span class=\"number\">4</span>, ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span><span class=\"selector-class\">.val</span> = <span class=\"number\">5</span>, 以及 ans<span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span><span class=\"selector-class\">.next</span> = NULL.</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"selector-attr\">[1,2,3,4,5,6]</span></span><br><span class=\"line\">输出：此列表中的结点 <span class=\"number\">4</span> (序列化形式：<span class=\"selector-attr\">[4,5,6]</span>)</span><br><span class=\"line\">由于该列表有两个中间结点，值分别为 <span class=\"number\">3</span> 和 <span class=\"number\">4</span>，我们返回第二个结点。</span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<p>给定链表的结点数介于 1 和 100 之间。</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>看了大家评论，毫无疑问此题是一道非常非常简单的题目，然而我却抓破脑袋也没想出个所以然，只好无耻地去看了一下题解。快慢指针方法令我很佩服：用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，slow 必然位于中间。</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slow = head;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>因为是抄别人的思路，这里就不展示执行结果了吧。虽然有点迷茫，但还是坚持吧！</p>\n"},{"title":"【每日一题】892. 三维形体的表面积","author":"Jelon","date":"2020-03-25T00:00:00.000Z","thumbnail":null,"blogexcerpt":"在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。请你返回最终形体的表面积。示例 1：输入：[[2]]输出：10示例 2：输入：[[1,2],[3,4]]输出：34...","_content":"\n在 `N * N` 的网格上，我们放置一些 `1 * 1 * 1`  的立方体。\n\n每个值 `v = grid[i][j]` 表示 `v` 个正方体叠放在对应单元格 `(i, j)` 上。\n\n请你返回最终形体的表面积。\n\n \n\n**示例 1：**\n\n```\n输入：[[2]]\n输出：10\n```\n\n**示例 2：**\n\n```\n输入：[[1,2],[3,4]]\n输出：34\n```\n\n**示例 3：**\n\n```\n输入：[[1,0],[0,2]]\n输出：16\n```\n\n**示例 4：**\n\n```\n输入：[[1,1,1],[1,0,1],[1,1,1]]\n输出：32\n```\n\n**示例 5：**\n\n```\n输入：[[2,2,2],[2,1,2],[2,2,2]]\n输出：46\n```\n \n\n**提示：**\n\n- `1 <= N <= 50`\n- `0 <= grid[i][j] <= 50`\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar surfaceArea = function(grid) {\n  var res = 0;\n  var rows = grid.length;\n  var cols = grid[0].length;\n  \n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      var n = grid[i][j];\n      if (n > 0) {\n        // 数学公式 6n - 2(n - 1)\n        // 累加，并排除叠加部分面积\n        res += 6 * n - 2 * (n - 1);\n        /**\n         * 减去与邻居重叠部分面积\n         */\n        res -= Math.min((i - 1 >= 0 ? ~~grid[i-1][j] : 0), n); // 上\n        res -= Math.min((i + 1 < rows ? ~~grid[i+1][j] : 0), n); // 下\n        res -= Math.min((j - 1 >= 0 ? ~~grid[i][j-1] : 0), n); // 左\n        res -= Math.min((j + 1 < cols ? ~~grid[i][j+1] : 0), n); // 右\n      }\n    }\n  }\n\n  return res;\n};\n```\n\n##### 执行结果\n\n执行用时: 60 ms, 在所有 JavaScript 提交中击败了 94.87% 的用户；\n内存消耗: 35.3 MB, 在所有 JavaScript 提交中击败了 56.67% 的用户。\n\n\n\n","source":"_posts/leetcode-892.md","raw":"---\ntitle: 【每日一题】892. 三维形体的表面积\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-03-25\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。请你返回最终形体的表面积。示例 1：输入：[[2]]输出：10示例 2：输入：[[1,2],[3,4]]输出：34...\n\n---\n\n在 `N * N` 的网格上，我们放置一些 `1 * 1 * 1`  的立方体。\n\n每个值 `v = grid[i][j]` 表示 `v` 个正方体叠放在对应单元格 `(i, j)` 上。\n\n请你返回最终形体的表面积。\n\n \n\n**示例 1：**\n\n```\n输入：[[2]]\n输出：10\n```\n\n**示例 2：**\n\n```\n输入：[[1,2],[3,4]]\n输出：34\n```\n\n**示例 3：**\n\n```\n输入：[[1,0],[0,2]]\n输出：16\n```\n\n**示例 4：**\n\n```\n输入：[[1,1,1],[1,0,1],[1,1,1]]\n输出：32\n```\n\n**示例 5：**\n\n```\n输入：[[2,2,2],[2,1,2],[2,2,2]]\n输出：46\n```\n \n\n**提示：**\n\n- `1 <= N <= 50`\n- `0 <= grid[i][j] <= 50`\n\n##### 个人解答\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar surfaceArea = function(grid) {\n  var res = 0;\n  var rows = grid.length;\n  var cols = grid[0].length;\n  \n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      var n = grid[i][j];\n      if (n > 0) {\n        // 数学公式 6n - 2(n - 1)\n        // 累加，并排除叠加部分面积\n        res += 6 * n - 2 * (n - 1);\n        /**\n         * 减去与邻居重叠部分面积\n         */\n        res -= Math.min((i - 1 >= 0 ? ~~grid[i-1][j] : 0), n); // 上\n        res -= Math.min((i + 1 < rows ? ~~grid[i+1][j] : 0), n); // 下\n        res -= Math.min((j - 1 >= 0 ? ~~grid[i][j-1] : 0), n); // 左\n        res -= Math.min((j + 1 < cols ? ~~grid[i][j+1] : 0), n); // 右\n      }\n    }\n  }\n\n  return res;\n};\n```\n\n##### 执行结果\n\n执行用时: 60 ms, 在所有 JavaScript 提交中击败了 94.87% 的用户；\n内存消耗: 35.3 MB, 在所有 JavaScript 提交中击败了 56.67% 的用户。\n\n\n\n","slug":"leetcode-892","published":1,"updated":"2020-03-25T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3h002yk8sv6n29hdj9","content":"<p>在 <code>N * N</code> 的网格上，我们放置一些 <code>1 * 1 * 1</code>  的立方体。</p>\n<p>每个值 <code>v = grid[i][j]</code> 表示 <code>v</code> 个正方体叠放在对应单元格 <code>(i, j)</code> 上。</p>\n<p>请你返回最终形体的表面积。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,2],[3,4]]</span></span><br><span class=\"line\">输出：<span class=\"number\">34</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0],[0,2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,1,1],[1,0,1],[1,1,1]]</span></span><br><span class=\"line\">输出：<span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[2,2,2],[2,1,2],[2,2,2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">46</span></span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= N &lt;= 50</code></li>\n<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> surfaceArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rows = grid.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; cols; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = grid[i][j];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数学公式 6n - 2(n - 1)</span></span><br><span class=\"line\">        <span class=\"comment\">// 累加，并排除叠加部分面积</span></span><br><span class=\"line\">        res += <span class=\"number\">6</span> * n - <span class=\"number\">2</span> * (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 减去与邻居重叠部分面积</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> ? ~~grid[i-<span class=\"number\">1</span>][j] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 上</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((i + <span class=\"number\">1</span> &lt; rows ? ~~grid[i+<span class=\"number\">1</span>][j] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 下</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> ? ~~grid[i][j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 左</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((j + <span class=\"number\">1</span> &lt; cols ? ~~grid[i][j+<span class=\"number\">1</span>] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 右</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 60 ms, 在所有 JavaScript 提交中击败了 94.87% 的用户；<br>内存消耗: 35.3 MB, 在所有 JavaScript 提交中击败了 56.67% 的用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>N * N</code> 的网格上，我们放置一些 <code>1 * 1 * 1</code>  的立方体。</p>\n<p>每个值 <code>v = grid[i][j]</code> 表示 <code>v</code> 个正方体叠放在对应单元格 <code>(i, j)</code> 上。</p>\n<p>请你返回最终形体的表面积。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,2],[3,4]]</span></span><br><span class=\"line\">输出：<span class=\"number\">34</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,0],[0,2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[1,1,1],[1,0,1],[1,1,1]]</span></span><br><span class=\"line\">输出：<span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 5：</strong></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"string\">[[2,2,2],[2,1,2],[2,2,2]]</span></span><br><span class=\"line\">输出：<span class=\"number\">46</span></span><br></pre></td></tr></table></figure>\n<p> </p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= N &lt;= 50</code></li>\n<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">grid</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> surfaceArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rows = grid.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cols = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; cols; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = grid[i][j];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数学公式 6n - 2(n - 1)</span></span><br><span class=\"line\">        <span class=\"comment\">// 累加，并排除叠加部分面积</span></span><br><span class=\"line\">        res += <span class=\"number\">6</span> * n - <span class=\"number\">2</span> * (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 减去与邻居重叠部分面积</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> ? ~~grid[i-<span class=\"number\">1</span>][j] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 上</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((i + <span class=\"number\">1</span> &lt; rows ? ~~grid[i+<span class=\"number\">1</span>][j] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 下</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> ? ~~grid[i][j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 左</span></span><br><span class=\"line\">        res -= <span class=\"built_in\">Math</span>.min((j + <span class=\"number\">1</span> &lt; cols ? ~~grid[i][j+<span class=\"number\">1</span>] : <span class=\"number\">0</span>), n); <span class=\"comment\">// 右</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p>执行用时: 60 ms, 在所有 JavaScript 提交中击败了 94.87% 的用户；<br>内存消耗: 35.3 MB, 在所有 JavaScript 提交中击败了 56.67% 的用户。</p>\n"},{"title":"【每日一题】9. 回文数","author":"Jelon","date":"2020-03-14T00:00:00.000Z","thumbnail":null,"blogexcerpt":"判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数...","_content":"\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n**示例 1:**\n\n```\n输入: 121\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n```\n\n**示例 3:**\n\n```\n输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n```\n\n##### 个人解答\n\n**未优化版**\n\n```js\n/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    if (x < 0) return false;\n    var y = x;\n    var res = 0;\n    while (y > 0) {\n        res = res * 10 + y % 10; // 反转整数\n        y = Math.floor(y / 10);\n    }\n\n    return res === x;\n};\n```\n\n**优化版**\n\n```js\n/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    if (x < 0) return false;\n    var y = x;\n    var res = 0;\n    while (y > 0) {\n        res = res * 10 + y % 10; // 反转整数\n        y = Math.floor(y / 10);\n\n        if (x % 10 !== 0 && res === y) return true;\n    }\n\n    return res === x;\n};\n```\n\n##### 执行结果\n\n**优化版执行结果**\n\n执行用时: 200 ms, 在所有 JavaScript 提交中击败了 94.49% 的用户\n内存消耗: 45 MB, 在所有 JavaScript 提交中击败了 87.79% 的用户\n\n","source":"_posts/leetcode-9.md","raw":"---\ntitle: 【每日一题】9. 回文数\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-14\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数...\n\n---\n\n判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n**示例 1:**\n\n```\n输入: 121\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n```\n\n**示例 3:**\n\n```\n输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n```\n\n##### 个人解答\n\n**未优化版**\n\n```js\n/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    if (x < 0) return false;\n    var y = x;\n    var res = 0;\n    while (y > 0) {\n        res = res * 10 + y % 10; // 反转整数\n        y = Math.floor(y / 10);\n    }\n\n    return res === x;\n};\n```\n\n**优化版**\n\n```js\n/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    if (x < 0) return false;\n    var y = x;\n    var res = 0;\n    while (y > 0) {\n        res = res * 10 + y % 10; // 反转整数\n        y = Math.floor(y / 10);\n\n        if (x % 10 !== 0 && res === y) return true;\n    }\n\n    return res === x;\n};\n```\n\n##### 执行结果\n\n**优化版执行结果**\n\n执行用时: 200 ms, 在所有 JavaScript 提交中击败了 94.49% 的用户\n内存消耗: 45 MB, 在所有 JavaScript 提交中击败了 87.79% 的用户\n\n","slug":"leetcode-9","published":1,"updated":"2020-03-14T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3i0031k8sv9186fdzy","content":"<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: 121</span></span><br><span class=\"line\"><span class=\"section\">输出: true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: -121</span></span><br><span class=\"line\"><span class=\"section\">输出: false</span></span><br><span class=\"line\"><span class=\"section\">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: 10</span></span><br><span class=\"line\"><span class=\"section\">输出: false</span></span><br><span class=\"line\"><span class=\"section\">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>未优化版</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res = res * <span class=\"number\">10</span> + y % <span class=\"number\">10</span>; <span class=\"comment\">// 反转整数</span></span><br><span class=\"line\">        y = <span class=\"built_in\">Math</span>.floor(y / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res === x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优化版</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res = res * <span class=\"number\">10</span> + y % <span class=\"number\">10</span>; <span class=\"comment\">// 反转整数</span></span><br><span class=\"line\">        y = <span class=\"built_in\">Math</span>.floor(y / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> !== <span class=\"number\">0</span> &amp;&amp; res === y) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res === x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><strong>优化版执行结果</strong></p>\n<p>执行用时: 200 ms, 在所有 JavaScript 提交中击败了 94.49% 的用户<br>内存消耗: 45 MB, 在所有 JavaScript 提交中击败了 87.79% 的用户</p>\n","site":{"data":{}},"excerpt":"","more":"<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: 121</span></span><br><span class=\"line\"><span class=\"section\">输出: true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: -121</span></span><br><span class=\"line\"><span class=\"section\">输出: false</span></span><br><span class=\"line\"><span class=\"section\">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">输入: 10</span></span><br><span class=\"line\"><span class=\"section\">输出: false</span></span><br><span class=\"line\"><span class=\"section\">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>未优化版</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res = res * <span class=\"number\">10</span> + y % <span class=\"number\">10</span>; <span class=\"comment\">// 反转整数</span></span><br><span class=\"line\">        y = <span class=\"built_in\">Math</span>.floor(y / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res === x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优化版</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        res = res * <span class=\"number\">10</span> + y % <span class=\"number\">10</span>; <span class=\"comment\">// 反转整数</span></span><br><span class=\"line\">        y = <span class=\"built_in\">Math</span>.floor(y / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> !== <span class=\"number\">0</span> &amp;&amp; res === y) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res === x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h5><p><strong>优化版执行结果</strong></p>\n<p>执行用时: 200 ms, 在所有 JavaScript 提交中击败了 94.49% 的用户<br>内存消耗: 45 MB, 在所有 JavaScript 提交中击败了 87.79% 的用户</p>\n"},{"title":"【每日一题】93. 复原IP地址","date":"2020-08-13T00:00:00.000Z","author":"Jelon","thumbnail":null,"blogexcerpt":"给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔...","_content":"\n给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。\n\n有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔。\n\n**示例:**\n\n```\n输入: \"25525511135\"\n输出: [\"255.255.11.135\", \"255.255.111.35\"]\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n  const res = []\n\n  /**\n   * cur 当前\n   * sub 剩余字符串\n   */\n  const search = (cur, sub) => {\n    // 超出范围\n    if (sub.length > 12) {\n      return res\n    } else if (cur.length === 4 && cur.join('') === s) {\n      res.push(cur.join('.'))\n    } else {\n      // ip位最长只有三位\n      const len = Math.min(3, sub.length)\n      for (let i = 0; i < len; i++) {\n        const tmp = sub.substr(0, i + 1)\n        if (tmp < 256 && Number(tmp).toString() === tmp) {\n          search([ ...cur, tmp ], sub.substr(i + 1))\n        }\n      }\n    }\n  }\n  search([], s)\n  return res\n};\n```\n\n##### 解决思路\n\n> 递归\n\n\n","source":"_posts/leetcode-93.md","raw":"title: 【每日一题】93. 复原IP地址\ndate: 2020-08-13\ncategories:\n  - 算法练习\nauthor: Jelon\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔...\n\n---\n\n给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。\n\n有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔。\n\n**示例:**\n\n```\n输入: \"25525511135\"\n输出: [\"255.255.11.135\", \"255.255.111.35\"]\n```\n\n##### 参考解答\n\n```js\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n  const res = []\n\n  /**\n   * cur 当前\n   * sub 剩余字符串\n   */\n  const search = (cur, sub) => {\n    // 超出范围\n    if (sub.length > 12) {\n      return res\n    } else if (cur.length === 4 && cur.join('') === s) {\n      res.push(cur.join('.'))\n    } else {\n      // ip位最长只有三位\n      const len = Math.min(3, sub.length)\n      for (let i = 0; i < len; i++) {\n        const tmp = sub.substr(0, i + 1)\n        if (tmp < 256 && Number(tmp).toString() === tmp) {\n          search([ ...cur, tmp ], sub.substr(i + 1))\n        }\n      }\n    }\n  }\n  search([], s)\n  return res\n};\n```\n\n##### 解决思路\n\n> 递归\n\n\n","slug":"leetcode-93","published":1,"updated":"2020-08-13T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3j0034k8sv7he13kii","content":"<p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p>\n<p>有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 ‘.’ 分隔。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;25525511135&quot;</span></span><br><span class=\"line\">输出: [<span class=\"string\">&quot;255.255.11.135&quot;</span>, <span class=\"string\">&quot;255.255.111.35&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> restoreIpAddresses = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * cur 当前</span></span><br><span class=\"line\"><span class=\"comment\">   * sub 剩余字符串</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> search = <span class=\"function\">(<span class=\"params\">cur, sub</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 超出范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sub.length &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur.length === <span class=\"number\">4</span> &amp;&amp; cur.join(<span class=\"string\">&#x27;&#x27;</span>) === s) &#123;</span><br><span class=\"line\">      res.push(cur.join(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ip位最长只有三位</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> len = <span class=\"built_in\">Math</span>.min(<span class=\"number\">3</span>, sub.length)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tmp = sub.substr(<span class=\"number\">0</span>, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">Number</span>(tmp).toString() === tmp) &#123;</span><br><span class=\"line\">          search([ ...cur, tmp ], sub.substr(i + <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search([], s)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><blockquote>\n<p>递归</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p>\n<p>有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 ‘.’ 分隔。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">&quot;25525511135&quot;</span></span><br><span class=\"line\">输出: [<span class=\"string\">&quot;255.255.11.135&quot;</span>, <span class=\"string\">&quot;255.255.111.35&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考解答\"><a href=\"#参考解答\" class=\"headerlink\" title=\"参考解答\"></a>参考解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> restoreIpAddresses = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * cur 当前</span></span><br><span class=\"line\"><span class=\"comment\">   * sub 剩余字符串</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> search = <span class=\"function\">(<span class=\"params\">cur, sub</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 超出范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sub.length &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur.length === <span class=\"number\">4</span> &amp;&amp; cur.join(<span class=\"string\">&#x27;&#x27;</span>) === s) &#123;</span><br><span class=\"line\">      res.push(cur.join(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ip位最长只有三位</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> len = <span class=\"built_in\">Math</span>.min(<span class=\"number\">3</span>, sub.length)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tmp = sub.substr(<span class=\"number\">0</span>, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">Number</span>(tmp).toString() === tmp) &#123;</span><br><span class=\"line\">          search([ ...cur, tmp ], sub.substr(i + <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search([], s)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><blockquote>\n<p>递归</p>\n</blockquote>\n"},{"title":"【每日一题】912. 排序数组","author":"Jelon","date":"2020-03-31T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给你一个整数数组 nums，请你将该数组升序排列。示例 1：输入：nums = [5,2,3,1]输出：[1,2,3,5]示例 2：输入：nums = [5,1,1,2,0,0]输出：[0,0,1,1,2,5]提示：1 <= nums.length <= 50000-50000 <= nums[i] <= 50000...","_content":"\n给你一个整数数组 `nums`，请你将该数组升序排列。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [5,2,3,1]\n输出：[1,2,3,5]\n```\n\n**示例 2：**\n\n```\n输入：nums = [5,1,1,2,0,0]\n输出：[0,0,1,1,2,5]\n```\n\n**提示：**\n\n1. `1 <= nums.length <= 50000`\n2. `-50000 <= nums[i] <= 50000`\n\n\n##### 个人解答\n\n**冒泡**\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n  var len = nums.length;\n  for (var i = len - 1; i > 0; i--) {\n    for (var j = 0; j < i; j++) {\n      if (nums[i] < nums[j]) {\n        var temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n      }\n    }\n  }\n  return nums;\n};\n```\n\n**快排**\n\n```\nvar sortArray = function(nums) {\n  return quickSort(nums);\n};\n\nfunction quickSort (nums) {\n  if (nums.length <= 1) {\n    return nums;\n  } else {\n    var biggers = [];\n    var base = nums[0];\n    var smallers = [];\n    for (var i = 1; i < nums.length; i++) {\n      if (nums[i] > base) {\n        biggers.push(nums[i]);\n      } else {\n        smallers.push(nums[i]);\n      }\n    }\n    return [ ...quickSort(smallers), base, ...quickSort(biggers) ];\n  }\n}\n```\n\n##### 解题思路\n\n纯排序题，写了两种我自己比较擅长的 ==。\n","source":"_posts/leetcode-912.md","raw":"---\ntitle: 【每日一题】912. 排序数组\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-03-31\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给你一个整数数组 nums，请你将该数组升序排列。示例 1：输入：nums = [5,2,3,1]输出：[1,2,3,5]示例 2：输入：nums = [5,1,1,2,0,0]输出：[0,0,1,1,2,5]提示：1 <= nums.length <= 50000-50000 <= nums[i] <= 50000...\n\n---\n\n给你一个整数数组 `nums`，请你将该数组升序排列。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [5,2,3,1]\n输出：[1,2,3,5]\n```\n\n**示例 2：**\n\n```\n输入：nums = [5,1,1,2,0,0]\n输出：[0,0,1,1,2,5]\n```\n\n**提示：**\n\n1. `1 <= nums.length <= 50000`\n2. `-50000 <= nums[i] <= 50000`\n\n\n##### 个人解答\n\n**冒泡**\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n  var len = nums.length;\n  for (var i = len - 1; i > 0; i--) {\n    for (var j = 0; j < i; j++) {\n      if (nums[i] < nums[j]) {\n        var temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n      }\n    }\n  }\n  return nums;\n};\n```\n\n**快排**\n\n```\nvar sortArray = function(nums) {\n  return quickSort(nums);\n};\n\nfunction quickSort (nums) {\n  if (nums.length <= 1) {\n    return nums;\n  } else {\n    var biggers = [];\n    var base = nums[0];\n    var smallers = [];\n    for (var i = 1; i < nums.length; i++) {\n      if (nums[i] > base) {\n        biggers.push(nums[i]);\n      } else {\n        smallers.push(nums[i]);\n      }\n    }\n    return [ ...quickSort(smallers), base, ...quickSort(biggers) ];\n  }\n}\n```\n\n##### 解题思路\n\n纯排序题，写了两种我自己比较擅长的 ==。\n","slug":"leetcode-912","published":1,"updated":"2020-03-31T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3k0037k8sveef7fop5","content":"<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">5,2,3,1</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">1,2,3,5</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = <span class=\"string\">[5,1,1,2,0,0]</span></span><br><span class=\"line\">输出：<span class=\"string\">[0,0,1,1,2,5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= nums.length &lt;= 50000</code></li>\n<li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>冒泡</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>快排</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArray = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nums)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(nums);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span> <span class=\"params\">(nums)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> biggers = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smallers = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &gt; base) &#123;</span><br><span class=\"line\">        biggers.push(nums[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smallers.push(nums[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ ...quickSort(smallers), base, ...quickSort(biggers) ];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>纯排序题，写了两种我自己比较擅长的 ==。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">5,2,3,1</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">1,2,3,5</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = <span class=\"string\">[5,1,1,2,0,0]</span></span><br><span class=\"line\">输出：<span class=\"string\">[0,0,1,1,2,5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>1 &lt;= nums.length &lt;= 50000</code></li>\n<li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li>\n</ol>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>冒泡</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>快排</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortArray = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nums)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(nums);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span> <span class=\"params\">(nums)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> biggers = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smallers = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &gt; base) &#123;</span><br><span class=\"line\">        biggers.push(nums[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        smallers.push(nums[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ ...quickSort(smallers), base, ...quickSort(biggers) ];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>纯排序题，写了两种我自己比较擅长的 ==。</p>\n"},{"title":"【每日一题】94. 二叉树的中序遍历","author":"Jelon","date":"2020-05-27T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个二叉树，返回它的中序遍历。示例：输入：[1,null,2,3] 123 输出：[1,3,2] ...","_content":"\n给定一个二叉树，返回它的中序 遍历。\n\n**示例:**\n\n```\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n##### 个人解答\n\n**方法一：递归**\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n  const res = []\n  traversal(root, res)\n  return res\n};\nfunction traversal (root, res) {\n  if (root) {\n    if (root.left) {\n      traversal(root.left, res)\n    }\n    res.push(root.val)\n    if (root.right) {\n      traversal(root.right, res)\n    }\n  }\n}\n```\n\n**方法而：栈**\n\n```js\nvar inorderTraversal = function(root) {\n  var res = []\n  var stack = []\n  \n  while (root || stack.length) {\n  \tif (root.left) { // 如果有左节点先遍历左节点\n  \t  stack.push(root)\n  \t  root = root.left\n  \t} else if (!root.left && !root.right) { // 既没有左节点也没有右节点\n  \t  res.push(root.val)\n  \t  root = stack.pop() // 回溯\n  \t  root && (root.left = null)\n  \t} else if (root.right) { // 如果有右节点\n  \t  res.push(root.val)\n  \t  root = root.right\n  \t}\n  }\n  \n  return res\n}\n```\n\n##### 解题思路\n\n![https://jangdelong.github.io/blog_img/images/leetcode-94/1.png](https://jangdelong.github.io/blog_img/images/leetcode-94/1.png)\n\n- 前序遍历：先输出根节点，在依次前序遍历左子树和右子树；\n\n- **中序遍历：先中序遍历左子树，在输出根节点，最后中序遍历右子树；**\n\n- 后序遍历：先后序遍历左子树，接着后序遍历右子树，最后输出根节点。\n\n输出\n\n前序遍历：1，2，4，5，3，6，7；\n\n**中序遍历：4，2，5，1，3，7，6**\n\n后序遍历：4，5，2，7，6，3，1\n","source":"_posts/leetcode-94.md","raw":"---\n\ntitle: 【每日一题】94. 二叉树的中序遍历\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-27\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定一个二叉树，返回它的中序遍历。示例：输入：[1,null,2,3] 123 输出：[1,3,2] ...\n\n---\n\n给定一个二叉树，返回它的中序 遍历。\n\n**示例:**\n\n```\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n##### 个人解答\n\n**方法一：递归**\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n  const res = []\n  traversal(root, res)\n  return res\n};\nfunction traversal (root, res) {\n  if (root) {\n    if (root.left) {\n      traversal(root.left, res)\n    }\n    res.push(root.val)\n    if (root.right) {\n      traversal(root.right, res)\n    }\n  }\n}\n```\n\n**方法而：栈**\n\n```js\nvar inorderTraversal = function(root) {\n  var res = []\n  var stack = []\n  \n  while (root || stack.length) {\n  \tif (root.left) { // 如果有左节点先遍历左节点\n  \t  stack.push(root)\n  \t  root = root.left\n  \t} else if (!root.left && !root.right) { // 既没有左节点也没有右节点\n  \t  res.push(root.val)\n  \t  root = stack.pop() // 回溯\n  \t  root && (root.left = null)\n  \t} else if (root.right) { // 如果有右节点\n  \t  res.push(root.val)\n  \t  root = root.right\n  \t}\n  }\n  \n  return res\n}\n```\n\n##### 解题思路\n\n![https://jangdelong.github.io/blog_img/images/leetcode-94/1.png](https://jangdelong.github.io/blog_img/images/leetcode-94/1.png)\n\n- 前序遍历：先输出根节点，在依次前序遍历左子树和右子树；\n\n- **中序遍历：先中序遍历左子树，在输出根节点，最后中序遍历右子树；**\n\n- 后序遍历：先后序遍历左子树，接着后序遍历右子树，最后输出根节点。\n\n输出\n\n前序遍历：1，2，4，5，3，6，7；\n\n**中序遍历：4，2，5，1，3，7，6**\n\n后序遍历：4，5，2，7，6，3，1\n","slug":"leetcode-94","published":1,"updated":"2020-05-27T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3l003ak8sv0uav9ldj","content":"<p>给定一个二叉树，返回它的中序 遍历。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"comment\">[1,null,2,3]</span></span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"comment\">[1,3,2]</span></span><br></pre></td></tr></table></figure>\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>方法一：递归</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  traversal(root, res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traversal</span> (<span class=\"params\">root, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) &#123;</span><br><span class=\"line\">      traversal(root.left, res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(root.val)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) &#123;</span><br><span class=\"line\">      traversal(root.right, res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法而：栈</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (root.left) &#123; <span class=\"comment\">// 如果有左节点先遍历左节点</span></span><br><span class=\"line\">  \t  stack.push(root)</span><br><span class=\"line\">  \t  root = root.left</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!root.left &amp;&amp; !root.right) &#123; <span class=\"comment\">// 既没有左节点也没有右节点</span></span><br><span class=\"line\">  \t  res.push(root.val)</span><br><span class=\"line\">  \t  root = stack.pop() <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">  \t  root &amp;&amp; (root.left = <span class=\"literal\">null</span>)</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right) &#123; <span class=\"comment\">// 如果有右节点</span></span><br><span class=\"line\">  \t  res.push(root.val)</span><br><span class=\"line\">  \t  root = root.right</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-94/1.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-94/1.png\"></p>\n<ul>\n<li><p>前序遍历：先输出根节点，在依次前序遍历左子树和右子树；</p>\n</li>\n<li><p><strong>中序遍历：先中序遍历左子树，在输出根节点，最后中序遍历右子树；</strong></p>\n</li>\n<li><p>后序遍历：先后序遍历左子树，接着后序遍历右子树，最后输出根节点。</p>\n</li>\n</ul>\n<p>输出</p>\n<p>前序遍历：1，2，4，5，3，6，7；</p>\n<p><strong>中序遍历：4，2，5，1，3，7，6</strong></p>\n<p>后序遍历：4，5，2，7，6，3，1</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个二叉树，返回它的中序 遍历。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"comment\">[1,null,2,3]</span></span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"comment\">[1,3,2]</span></span><br></pre></td></tr></table></figure>\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p><strong>方法一：递归</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  traversal(root, res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traversal</span> (<span class=\"params\">root, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) &#123;</span><br><span class=\"line\">      traversal(root.left, res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(root.val)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) &#123;</span><br><span class=\"line\">      traversal(root.right, res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法而：栈</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (root.left) &#123; <span class=\"comment\">// 如果有左节点先遍历左节点</span></span><br><span class=\"line\">  \t  stack.push(root)</span><br><span class=\"line\">  \t  root = root.left</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!root.left &amp;&amp; !root.right) &#123; <span class=\"comment\">// 既没有左节点也没有右节点</span></span><br><span class=\"line\">  \t  res.push(root.val)</span><br><span class=\"line\">  \t  root = stack.pop() <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">  \t  root &amp;&amp; (root.left = <span class=\"literal\">null</span>)</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right) &#123; <span class=\"comment\">// 如果有右节点</span></span><br><span class=\"line\">  \t  res.push(root.val)</span><br><span class=\"line\">  \t  root = root.right</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-94/1.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-94/1.png\"></p>\n<ul>\n<li><p>前序遍历：先输出根节点，在依次前序遍历左子树和右子树；</p>\n</li>\n<li><p><strong>中序遍历：先中序遍历左子树，在输出根节点，最后中序遍历右子树；</strong></p>\n</li>\n<li><p>后序遍历：先后序遍历左子树，接着后序遍历右子树，最后输出根节点。</p>\n</li>\n</ul>\n<p>输出</p>\n<p>前序遍历：1，2，4，5，3，6，7；</p>\n<p><strong>中序遍历：4，2，5，1，3，7，6</strong></p>\n<p>后序遍历：4，5，2，7，6，3，1</p>\n"},{"title":"【每日一题】面试题 02.03. 删除中间节点","author":"Jelon","date":"2020-05-06T00:00:00.000Z","thumbnail":null,"blogexcerpt":"实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。示例：输入：单向链表a->b->c->d->e->f中的节点c 结果：不返回任何数据，但该链表变为a->b->d->e->f...","_content":"\n实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。\n\n \n\n**示例：**\n\n```\n输入：单向链表a->b->c->d->e->f中的节点c\n结果：不返回任何数据，但该链表变为a->b->d->e->f\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n  let current = node;\n  node.val = current.next.val;\n  node.next = current.next.next;\n};\n```\n\n##### 解题思路\n\n删除当前节点只需要把当前节点指向下个节点值即可。\n\n\n\n","source":"_posts/leetcode-case-02-03.md","raw":"---\ntitle: 【每日一题】面试题 02.03. 删除中间节点\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-06\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。示例：输入：单向链表a->b->c->d->e->f中的节点c 结果：不返回任何数据，但该链表变为a->b->d->e->f...\n\n---\n\n实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。\n\n \n\n**示例：**\n\n```\n输入：单向链表a->b->c->d->e->f中的节点c\n结果：不返回任何数据，但该链表变为a->b->d->e->f\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n  let current = node;\n  node.val = current.next.val;\n  node.next = current.next.next;\n};\n```\n\n##### 解题思路\n\n删除当前节点只需要把当前节点指向下个节点值即可。\n\n\n\n","slug":"leetcode-case-02-03","published":1,"updated":"2020-05-06T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3m003dk8sv790930vw","content":"<p>实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：单向链表<span class=\"function\"><span class=\"title\">a</span>-&gt;</span><span class=\"function\"><span class=\"title\">b</span>-&gt;</span><span class=\"function\"><span class=\"title\">c</span>-&gt;</span><span class=\"function\"><span class=\"title\">d</span>-&gt;</span><span class=\"function\"><span class=\"title\">e</span>-&gt;</span>f中的节点c</span><br><span class=\"line\">结果：不返回任何数据，但该链表变为<span class=\"function\"><span class=\"title\">a</span>-&gt;</span><span class=\"function\"><span class=\"title\">b</span>-&gt;</span><span class=\"function\"><span class=\"title\">d</span>-&gt;</span><span class=\"function\"><span class=\"title\">e</span>-&gt;</span>f</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">node</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify node in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = node;</span><br><span class=\"line\">  node.val = current.next.val;</span><br><span class=\"line\">  node.next = current.next.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>删除当前节点只需要把当前节点指向下个节点值即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：单向链表<span class=\"function\"><span class=\"title\">a</span>-&gt;</span><span class=\"function\"><span class=\"title\">b</span>-&gt;</span><span class=\"function\"><span class=\"title\">c</span>-&gt;</span><span class=\"function\"><span class=\"title\">d</span>-&gt;</span><span class=\"function\"><span class=\"title\">e</span>-&gt;</span>f中的节点c</span><br><span class=\"line\">结果：不返回任何数据，但该链表变为<span class=\"function\"><span class=\"title\">a</span>-&gt;</span><span class=\"function\"><span class=\"title\">b</span>-&gt;</span><span class=\"function\"><span class=\"title\">d</span>-&gt;</span><span class=\"function\"><span class=\"title\">e</span>-&gt;</span>f</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">node</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify node in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = node;</span><br><span class=\"line\">  node.val = current.next.val;</span><br><span class=\"line\">  node.next = current.next.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>删除当前节点只需要把当前节点指向下个节点值即可。</p>\n"},{"title":"【每日一题】面试题 16.01. 交换数字","author":"Jelon","date":"2020-05-18T00:00:00.000Z","thumbnail":null,"blogexcerpt":"编写一个函数，不用临时变量，直接交换numbers = [a, b]中a与b的值。示例：输入： numbers = [1,2] 输出： [2,1] 提示：numbers.length == 2...","_content":"\n编写一个函数，不用临时变量，直接交换 `numbers = [a, b]` 中 `a` 与 `b` 的值。\n\n**示例：**\n\n```\n输入: numbers = [1,2]\n输出: [2,1]\n```\n\n**提示：**\n\n- numbers.length == 2\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} numbers\n * @return {number[]}\n */\n// 做减法\nvar swapNumbers = function(numbers) {\n  numbers[1] = numbers[0] - numbers[1];\n  numbers[0] = numbers[0] - numbers[1];\n  numbers[1] = numbers[0] + numbers[1];\n  return numbers\n};\n```\n\n##### 解题思路\n\n使用减法思路。\n\n以 a、b 为例：a = 1; b = 2\n\n第一遍：b（临时） = a - b;\n第二遍：a = a - b（临时）; // 得出 a = 原b;\n第三遍：b = a（原b） + b（临时：原a - 原b）; // 得出 b = 原a;\n\n\n","source":"_posts/leetcode-case-16-01.md","raw":"---\ntitle: 【每日一题】面试题 16.01. 交换数字\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-18\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 编写一个函数，不用临时变量，直接交换numbers = [a, b]中a与b的值。示例：输入： numbers = [1,2] 输出： [2,1] 提示：numbers.length == 2...\n\n---\n\n编写一个函数，不用临时变量，直接交换 `numbers = [a, b]` 中 `a` 与 `b` 的值。\n\n**示例：**\n\n```\n输入: numbers = [1,2]\n输出: [2,1]\n```\n\n**提示：**\n\n- numbers.length == 2\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} numbers\n * @return {number[]}\n */\n// 做减法\nvar swapNumbers = function(numbers) {\n  numbers[1] = numbers[0] - numbers[1];\n  numbers[0] = numbers[0] - numbers[1];\n  numbers[1] = numbers[0] + numbers[1];\n  return numbers\n};\n```\n\n##### 解题思路\n\n使用减法思路。\n\n以 a、b 为例：a = 1; b = 2\n\n第一遍：b（临时） = a - b;\n第二遍：a = a - b（临时）; // 得出 a = 原b;\n第三遍：b = a（原b） + b（临时：原a - 原b）; // 得出 b = 原a;\n\n\n","slug":"leetcode-case-16-01","published":1,"updated":"2020-05-18T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3n003gk8sv3b4v19vi","content":"<p>编写一个函数，不用临时变量，直接交换 <code>numbers = [a, b]</code> 中 <code>a</code> 与 <code>b</code> 的值。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: numbers = <span class=\"comment\">[1,2]</span></span><br><span class=\"line\">输出: <span class=\"comment\">[2,1]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>numbers.length == 2</li>\n</ul>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 做减法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> swapNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers</span>) </span>&#123;</span><br><span class=\"line\">  numbers[<span class=\"number\">1</span>] = numbers[<span class=\"number\">0</span>] - numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  numbers[<span class=\"number\">0</span>] = numbers[<span class=\"number\">0</span>] - numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  numbers[<span class=\"number\">1</span>] = numbers[<span class=\"number\">0</span>] + numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numbers</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>使用减法思路。</p>\n<p>以 a、b 为例：a = 1; b = 2</p>\n<p>第一遍：b（临时） = a - b;<br>第二遍：a = a - b（临时）; // 得出 a = 原b;<br>第三遍：b = a（原b） + b（临时：原a - 原b）; // 得出 b = 原a;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编写一个函数，不用临时变量，直接交换 <code>numbers = [a, b]</code> 中 <code>a</code> 与 <code>b</code> 的值。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: numbers = <span class=\"comment\">[1,2]</span></span><br><span class=\"line\">输出: <span class=\"comment\">[2,1]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>numbers.length == 2</li>\n</ul>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 做减法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> swapNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers</span>) </span>&#123;</span><br><span class=\"line\">  numbers[<span class=\"number\">1</span>] = numbers[<span class=\"number\">0</span>] - numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  numbers[<span class=\"number\">0</span>] = numbers[<span class=\"number\">0</span>] - numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  numbers[<span class=\"number\">1</span>] = numbers[<span class=\"number\">0</span>] + numbers[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> numbers</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>使用减法思路。</p>\n<p>以 a、b 为例：a = 1; b = 2</p>\n<p>第一遍：b（临时） = a - b;<br>第二遍：a = a - b（临时）; // 得出 a = 原b;<br>第三遍：b = a（原b） + b（临时：原a - 原b）; // 得出 b = 原a;</p>\n"},{"title":"【每日一题】面试题 17.16. 按摩师","author":"Jelon","date":"2020-03-24T00:00:00.000Z","thumbnail":null,"blogexcerpt":"一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。注意：本题相对原题稍作改动...","_content":"\n一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。\n\n**注意：**本题相对原题稍作改动\n\n \n\n**示例 1：**\n\n```\n输入： [1,2,3,1]\n输出： 4\n解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。\n```\n\n**示例 2：**\n\n```\n输入： [2,7,9,3,1]\n输出： 12\n解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。\n```\n\n**示例 3：**\n\n```\n输入： [2,1,4,5,3,1,1,3]\n输出： 12\n解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar massage = function(nums) {\n  var older = 0;\n  var newer = 0;\n  for (var i = 0; i < nums.length; i++) {\n    var temp = newer;\n    newer = Math.max(newer, older + nums[i]);\n    older = temp;\n  }\n\n  return newer;\n};\n```\n\n##### 解题思路\n\n动态规划。\n","source":"_posts/leetcode-case-17-16.md","raw":"---\ntitle: 【每日一题】面试题 17.16. 按摩师\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-03-24\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。注意：本题相对原题稍作改动...\n\n---\n\n一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。\n\n**注意：**本题相对原题稍作改动\n\n \n\n**示例 1：**\n\n```\n输入： [1,2,3,1]\n输出： 4\n解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。\n```\n\n**示例 2：**\n\n```\n输入： [2,7,9,3,1]\n输出： 12\n解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。\n```\n\n**示例 3：**\n\n```\n输入： [2,1,4,5,3,1,1,3]\n输出： 12\n解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。\n```\n\n##### 个人解答\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar massage = function(nums) {\n  var older = 0;\n  var newer = 0;\n  for (var i = 0; i < nums.length; i++) {\n    var temp = newer;\n    newer = Math.max(newer, older + nums[i]);\n    older = temp;\n  }\n\n  return newer;\n};\n```\n\n##### 解题思路\n\n动态规划。\n","slug":"leetcode-case-17-16","published":1,"updated":"2020-03-24T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3o003jk8sv6ugl75bv","content":"<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p>\n<p><strong>注意：</strong>本题相对原题稍作改动</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [1,2,3,1]</span><br><span class=\"line\">输出： 4</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约和<span class=\"number\"> 3 </span>号预约，总时长 =<span class=\"number\"> 1 </span>+<span class=\"number\"> 3 </span>= 4。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,7,9,3,1]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约、<span class=\"number\"> 3 </span>号预约和<span class=\"number\"> 5 </span>号预约，总时长 =<span class=\"number\"> 2 </span>+<span class=\"number\"> 9 </span>+<span class=\"number\"> 1 </span>= 12。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,1,4,5,3,1,1,3]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约、<span class=\"number\"> 3 </span>号预约、<span class=\"number\"> 5 </span>号预约和<span class=\"number\"> 8 </span>号预约，总时长 =<span class=\"number\"> 2 </span>+<span class=\"number\"> 4 </span>+<span class=\"number\"> 3 </span>+<span class=\"number\"> 3 </span>= 12。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> massage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> older = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newer = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = newer;</span><br><span class=\"line\">    newer = <span class=\"built_in\">Math</span>.max(newer, older + nums[i]);</span><br><span class=\"line\">    older = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>动态规划。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p>\n<p><strong>注意：</strong>本题相对原题稍作改动</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [1,2,3,1]</span><br><span class=\"line\">输出： 4</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约和<span class=\"number\"> 3 </span>号预约，总时长 =<span class=\"number\"> 1 </span>+<span class=\"number\"> 3 </span>= 4。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,7,9,3,1]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约、<span class=\"number\"> 3 </span>号预约和<span class=\"number\"> 5 </span>号预约，总时长 =<span class=\"number\"> 2 </span>+<span class=\"number\"> 9 </span>+<span class=\"number\"> 1 </span>= 12。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,1,4,5,3,1,1,3]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择<span class=\"number\"> 1 </span>号预约、<span class=\"number\"> 3 </span>号预约、<span class=\"number\"> 5 </span>号预约和<span class=\"number\"> 8 </span>号预约，总时长 =<span class=\"number\"> 2 </span>+<span class=\"number\"> 4 </span>+<span class=\"number\"> 3 </span>+<span class=\"number\"> 3 </span>= 12。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> massage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> older = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newer = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = newer;</span><br><span class=\"line\">    newer = <span class=\"built_in\">Math</span>.max(newer, older + nums[i]);</span><br><span class=\"line\">    older = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>动态规划。</p>\n"},{"title":"【每日一题】面试题22. 链表中倒数第k个节点","author":"Jelon","date":"2020-05-21T00:00:00.000Z","thumbnail":null,"blogexcerpt":"输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点...","_content":"\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。\n\n \n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\n// 双指针\nvar getKthFromEnd = function(head, k) {\n  if (k < 0 || !head) {\n    return null\n  }\n  var pointer = head\n  for (var i = 1; i < k; i++) {\n    if (pointer.next) {\n      pointer = pointer.next\n    } else {\n      return null\n    }\n  }\n  while (pointer.next) {\n    head = head.next\n    pointer = pointer.next\n  }\n  return head\n};\n```\n\n##### 解题思路\n\n双指针\n\n1. 参考指针 pointer 先从头遍历到 k，然后剩下长度为 len - k；\n2. head 指针再从投开始遍历 len - k 个节点，即可得到倒数第 k 个节点。\n","source":"_posts/leetcode-case-22.md","raw":"---\ntitle: 【每日一题】面试题22. 链表中倒数第k个节点\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-21\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点...\n\n---\n\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。\n\n \n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\n// 双指针\nvar getKthFromEnd = function(head, k) {\n  if (k < 0 || !head) {\n    return null\n  }\n  var pointer = head\n  for (var i = 1; i < k; i++) {\n    if (pointer.next) {\n      pointer = pointer.next\n    } else {\n      return null\n    }\n  }\n  while (pointer.next) {\n    head = head.next\n    pointer = pointer.next\n  }\n  return head\n};\n```\n\n##### 解题思路\n\n双指针\n\n1. 参考指针 pointer 先从头遍历到 k，然后剩下长度为 len - k；\n2. head 指针再从投开始遍历 len - k 个节点，即可得到倒数第 k 个节点。\n","slug":"leetcode-case-22","published":1,"updated":"2020-05-21T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3p003mk8sv344h1ssi","content":"<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个链表: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>, 和 k = <span class=\"number\">2.</span></span><br><span class=\"line\"></span><br><span class=\"line\">返回链表 <span class=\"number\">4</span>-&gt;<span class=\"number\">5.</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 双指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getKthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span> || !head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pointer = head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pointer.next) &#123;</span><br><span class=\"line\">      pointer = pointer.next</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pointer.next) &#123;</span><br><span class=\"line\">    head = head.next</span><br><span class=\"line\">    pointer = pointer.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>双指针</p>\n<ol>\n<li>参考指针 pointer 先从头遍历到 k，然后剩下长度为 len - k；</li>\n<li>head 指针再从投开始遍历 len - k 个节点，即可得到倒数第 k 个节点。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p>\n<p> </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个链表: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>, 和 k = <span class=\"number\">2.</span></span><br><span class=\"line\"></span><br><span class=\"line\">返回链表 <span class=\"number\">4</span>-&gt;<span class=\"number\">5.</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 双指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getKthFromEnd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span> || !head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pointer = head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pointer.next) &#123;</span><br><span class=\"line\">      pointer = pointer.next</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pointer.next) &#123;</span><br><span class=\"line\">    head = head.next</span><br><span class=\"line\">    pointer = pointer.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>双指针</p>\n<ol>\n<li>参考指针 pointer 先从头遍历到 k，然后剩下长度为 len - k；</li>\n<li>head 指针再从投开始遍历 len - k 个节点，即可得到倒数第 k 个节点。</li>\n</ol>\n"},{"title":"【每日一题】面试题40. 最小的k个数","author":"Jelon","date":"2020-03-20T00:00:00.000Z","thumbnail":null,"blogexcerpt":"输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。示例 1：输入：arr = [3,2,1], k = 2 输出：[1,2] 或者 [2,1]...","_content":"\n输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n \n\n**示例 1：**\n\n```\n输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n```\n\n**示例 2：**\n\n```\n输入：arr = [0,1,2,1], k = 1\n输出：[0]\n```\n\n**限制：**\n\n```\n0 <= k <= arr.length <= 10000\n0 <= arr[i] <= 10000\n```\n\n##### 个人解答\n\n冒泡排序\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  const len = arr.length;\n  for (let i = len - 1; i > 0; i--) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[i]) {\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n      }\n    }\n  }\n  return arr.slice(0, k);\n};\n```\n\nArray.sort\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  return (arr.sort((a, b) => a - b)).slice(0, k);\n}\n```\n\n快速排序\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  return quickSort(arr).slice(0, k);\n}\nfunction quickSort(arr) {\n  const len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    const bigger = [];\n    const smaller = [];\n    const base = [arr[0]];\n    for (let i = 1; i < len; i++) {\n      if (arr[i] <= base[0]) {\n        smaller.push(arr[i]);\n      } else {\n        bigger.push(arr[i]);\n      }\n    }\n    return [...quickSort(smaller), ...base, ...quickSort(bigger)];\n  }\n}\n```\n\n#### 执行结果\n\n最优秀一次提交，用的是 `Array.sort`：\n\n| 提交结果 | 执行用时 | 内存消耗 |\n|:---:|:---:|:---:|\n| 通过| 124 ms | 39.3 |\n","source":"_posts/leetcode-case-40.md","raw":"---\ntitle: 【每日一题】面试题40. 最小的k个数\ncategories:\n\t- 算法练习\nauthor: Jelon\ndate: 2020-03-20\ntags:\n\t- LeetCode\n\t- 算法\nthumbnail:\nblogexcerpt: 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。示例 1：输入：arr = [3,2,1], k = 2 输出：[1,2] 或者 [2,1]...\n\n---\n\n输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n \n\n**示例 1：**\n\n```\n输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n```\n\n**示例 2：**\n\n```\n输入：arr = [0,1,2,1], k = 1\n输出：[0]\n```\n\n**限制：**\n\n```\n0 <= k <= arr.length <= 10000\n0 <= arr[i] <= 10000\n```\n\n##### 个人解答\n\n冒泡排序\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  const len = arr.length;\n  for (let i = len - 1; i > 0; i--) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[i]) {\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n      }\n    }\n  }\n  return arr.slice(0, k);\n};\n```\n\nArray.sort\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  return (arr.sort((a, b) => a - b)).slice(0, k);\n}\n```\n\n快速排序\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nconst getLeastNumbers = function (arr, k) {\n  return quickSort(arr).slice(0, k);\n}\nfunction quickSort(arr) {\n  const len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    const bigger = [];\n    const smaller = [];\n    const base = [arr[0]];\n    for (let i = 1; i < len; i++) {\n      if (arr[i] <= base[0]) {\n        smaller.push(arr[i]);\n      } else {\n        bigger.push(arr[i]);\n      }\n    }\n    return [...quickSort(smaller), ...base, ...quickSort(bigger)];\n  }\n}\n```\n\n#### 执行结果\n\n最优秀一次提交，用的是 `Array.sort`：\n\n| 提交结果 | 执行用时 | 内存消耗 |\n|:---:|:---:|:---:|\n| 通过| 124 ms | 39.3 |\n","slug":"leetcode-case-40","published":1,"updated":"2020-03-20T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n3p003ok8svb2fb9ejq","content":"<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = <span class=\"comment\">[3,2,1]</span>, k = 2</span><br><span class=\"line\">输出：<span class=\"comment\">[1,2]</span> 或者 <span class=\"comment\">[2,1]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = <span class=\"comment\">[0,1,2,1]</span>, k = 1</span><br><span class=\"line\">输出：<span class=\"comment\">[0]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span>&lt;= k &lt;= arr.length &lt;= <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>&lt;= arr[i] &lt;= <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p>冒泡排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = tmp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Array.sort</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>快速排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(arr).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base = [arr[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.push(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.push(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...quickSort(smaller), ...base, ...quickSort(bigger)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>最优秀一次提交，用的是 <code>Array.sort</code>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">提交结果</th>\n<th align=\"center\">执行用时</th>\n<th align=\"center\">内存消耗</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">通过</td>\n<td align=\"center\">124 ms</td>\n<td align=\"center\">39.3</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = <span class=\"comment\">[3,2,1]</span>, k = 2</span><br><span class=\"line\">输出：<span class=\"comment\">[1,2]</span> 或者 <span class=\"comment\">[2,1]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：arr = <span class=\"comment\">[0,1,2,1]</span>, k = 1</span><br><span class=\"line\">输出：<span class=\"comment\">[0]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>限制：</strong></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span>&lt;= k &lt;= arr.length &lt;= <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span>&lt;= arr[i] &lt;= <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><p>冒泡排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = tmp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Array.sort</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>快速排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">arr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLeastNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(arr).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base = [arr[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.push(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.push(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...quickSort(smaller), ...base, ...quickSort(bigger)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><p>最优秀一次提交，用的是 <code>Array.sort</code>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">提交结果</th>\n<th align=\"center\">执行用时</th>\n<th align=\"center\">内存消耗</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">通过</td>\n<td align=\"center\">124 ms</td>\n<td align=\"center\">39.3</td>\n</tr>\n</tbody></table>\n"},{"title":"Mac 终端命令大全介绍","author":"Jelon","date":"2016-06-25T00:00:00.000Z","thumbnail":null,"blogexcerpt":"OSX 的文件系统 OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在/Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ 在终端里执行 ls /Volumes/USBHD, 看看显示出的是不是这个移动硬盘的内容...","_content":"\n<!-- toc -->\n\n### OSX 的文件系统\n\nOSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在/Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ \n\n在终端里执行 `ls /Volumes/USBHD`, 看看显示出的是不是这个移动硬盘的内容。\n\n|    位置    |  目录  |\n|:--------:|:------|\n|根目录位置| /核心 Mach_kernel|\n|驱动所在位置 | /Systme/Library/Extensions | \n|用户文件夹位置 | /User/用户名 |\n|桌面的位置 | /User/用户名/Desktop|\n\n\n注：\n\n- 文件通配符为星号 `* `；\n- 在Unix系统中是区别大小写字符的，`J.txt` 不等于 `j.txt`；\n- 根目录标志`/ `不是可有可无，`cd /Document` 表示转到根目录下的Document中，而`cd Document` 表示转到当前目录下的Document中。\n\n### 如何进入命令操作模式\n\n再图形界面下，用finder 打开“应用程序” -> “实用程序” -> “终端”，如果连图形界面都进不去了（比如安错了显示驱动），开机时按 F8，用－s参数启动，然后输入命令`mount -uw /`。\n\n### 获取权限\n\n为了防止误操作破坏系统，再用户状态下时没有权限操作系统重要文件的，所以先要取得root权限 `sudo －s` ；然后输入密码，输入密码时没有任何回显，连星号都没有，只管输完回车就行了。 \n\n### 基本命令\n\n**列出文件**\n\n`ls 参数 目录名` \n\n例: 想看看根目录下有什么， \n`ls /` \n\n想看看驱动目录下有什么， \n\n`ls /System/Library/Extensions` \n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件 \n\n\n**转换目录** \n\n`cd 目录名` \n\n例：想到驱动目录下溜达一圈 \n\n`cd /System/Library/Extensions`\n \n\n**建立新目录** \n\n`mkdir 目录名` \n\n例：在驱动目录下建一个备份目录 backup \n\n`mkdir /System/Library/Extensions/backup`\n\n在桌面上建一个备份目录 backup \n\n`mkdir /User/用户名/Desktop/backup`\n\n**拷贝文件**\n \n`cp 参数 源文件 目标文件` \n\n例：想把桌面的jelon.txt 拷贝到驱动目录中 \n\n`cp -R /User/用户名/Desktop/jelon.txt /System/Library/Extensions `\n\n参数R表示对目录进行递归操作。\n \n把驱动目录下的所有文件备份到桌面backup \n\n`cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup`\n\n**删除文件**\n \n`rm 参数 文件`\n\n例：想删除驱动的缓存 \n\n`rm -rf /System/Library/Extensions.kextcache` \n`rm -rf /System/Library/Extensions.mkext`\n \n参数`－rf`表示递归和强制，千万要小心使用，如果执行了`rm -rf /`你的系统就全没了！！！ \n\n**移动文件**\n \n`mv 文件`\n\n例：想把AppleHDA.Kext 移到桌面\n \n`mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop`\n\n想把AppleHDA.Kext 移到备份目录中 \n\n`mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup`\n\n**更改文件权限**\n\n`chmod 参数 权限 文件`\n\n例：把驱动目录下所有文件设定到root读写，其他用户只读 \n\n`chmod -R 755 /System/Library/Extensions`\n\n参数R 表示递归，755表示各用户的权限。\n\n\n**更改文件属主** \n\n`chown 参数 用户:组 文件`\n \n例：把驱动目录下的所有文件属主改成根用户 \n\n`chown -R root:wheel /System/Library/Extensions`\n\n参数R 表示递归操作 \n\n**修复整个系统中文件的权限**\n\n`diskutil repairpermissions /`\n \n严格的说这不是一个unix 命令，而是osx一个软件，记得修改或添加的驱动就执行一次。 \n\n**文本编辑** \n\n`nano 文件名`\n\n例：编辑natit Info.plist \n\n`nano /System/Library/Extensions/Natit.kext/Info.plist`\n\n编辑完成后 用 Ctrl ＋O 存盘，Ctrl＋X 退出；\n\n另一个文本编辑软件是 vi，操作有些古怪，熟了是非常好用的，而且在所有类Unix系统中都它，走遍天下都不怕了。 \n\n**运行脚本命令**\n \nsh 脚本文件名 \n\n例 修改驱动后所有需要的操作存成一个脚本，以后修改了驱动后只要运行一次这个脚本就可以了，方便吧。\n\n1. 终端中运行`nano /clean`； \n2. 把下列代码粘贴到 nano 中：\n```bash\nrm -rf /System/Library/Extensions.kextcache \nrm -rf /System/Library/Extensions.mkext \nchown -R root:wheel /System/Library/Extensions \nchmod -R 755 /System/Library/Extensions \ndiskutil repairpermissions / \nkextcache -k /System/Library/Extensions/ \n```\n3. Ctrl ＋O 存盘，Ctrl＋X 退出；\n4. 以后只要动了驱动，就在终端中运行一次 `sh /clean`。\n\n\n### 小技巧 \n\n**用Tab键自动补齐命令**\n\n比如想到`/System`目录中去，输入`cd /Sy`然后按一下Tab 键，命令就会自动补齐成 cd /System；\n\n**操作带名字中带有空格的文件和目录**\n \n空格在命令中写成 空格， 比如要进入My Documents，命令为`cd My Documents`；\n \n**查看命令的详细帮助**\n\n`man 命令名`\n \n比如要看看ls命令的详细用法，执行 `man ls`。 \n\n\n\n\n\n\n\n\n","source":"_posts/mac-command.md","raw":"---\ntitle: Mac 终端命令大全介绍\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-06-25\ntags:\n  - Mac OSX\n  - 命令大全\n\t\nthumbnail:\nblogexcerpt: OSX 的文件系统 OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在/Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ 在终端里执行 ls /Volumes/USBHD, 看看显示出的是不是这个移动硬盘的内容...\n\n---\n\n<!-- toc -->\n\n### OSX 的文件系统\n\nOSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在/Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ \n\n在终端里执行 `ls /Volumes/USBHD`, 看看显示出的是不是这个移动硬盘的内容。\n\n|    位置    |  目录  |\n|:--------:|:------|\n|根目录位置| /核心 Mach_kernel|\n|驱动所在位置 | /Systme/Library/Extensions | \n|用户文件夹位置 | /User/用户名 |\n|桌面的位置 | /User/用户名/Desktop|\n\n\n注：\n\n- 文件通配符为星号 `* `；\n- 在Unix系统中是区别大小写字符的，`J.txt` 不等于 `j.txt`；\n- 根目录标志`/ `不是可有可无，`cd /Document` 表示转到根目录下的Document中，而`cd Document` 表示转到当前目录下的Document中。\n\n### 如何进入命令操作模式\n\n再图形界面下，用finder 打开“应用程序” -> “实用程序” -> “终端”，如果连图形界面都进不去了（比如安错了显示驱动），开机时按 F8，用－s参数启动，然后输入命令`mount -uw /`。\n\n### 获取权限\n\n为了防止误操作破坏系统，再用户状态下时没有权限操作系统重要文件的，所以先要取得root权限 `sudo －s` ；然后输入密码，输入密码时没有任何回显，连星号都没有，只管输完回车就行了。 \n\n### 基本命令\n\n**列出文件**\n\n`ls 参数 目录名` \n\n例: 想看看根目录下有什么， \n`ls /` \n\n想看看驱动目录下有什么， \n\n`ls /System/Library/Extensions` \n参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件 \n\n\n**转换目录** \n\n`cd 目录名` \n\n例：想到驱动目录下溜达一圈 \n\n`cd /System/Library/Extensions`\n \n\n**建立新目录** \n\n`mkdir 目录名` \n\n例：在驱动目录下建一个备份目录 backup \n\n`mkdir /System/Library/Extensions/backup`\n\n在桌面上建一个备份目录 backup \n\n`mkdir /User/用户名/Desktop/backup`\n\n**拷贝文件**\n \n`cp 参数 源文件 目标文件` \n\n例：想把桌面的jelon.txt 拷贝到驱动目录中 \n\n`cp -R /User/用户名/Desktop/jelon.txt /System/Library/Extensions `\n\n参数R表示对目录进行递归操作。\n \n把驱动目录下的所有文件备份到桌面backup \n\n`cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup`\n\n**删除文件**\n \n`rm 参数 文件`\n\n例：想删除驱动的缓存 \n\n`rm -rf /System/Library/Extensions.kextcache` \n`rm -rf /System/Library/Extensions.mkext`\n \n参数`－rf`表示递归和强制，千万要小心使用，如果执行了`rm -rf /`你的系统就全没了！！！ \n\n**移动文件**\n \n`mv 文件`\n\n例：想把AppleHDA.Kext 移到桌面\n \n`mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop`\n\n想把AppleHDA.Kext 移到备份目录中 \n\n`mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup`\n\n**更改文件权限**\n\n`chmod 参数 权限 文件`\n\n例：把驱动目录下所有文件设定到root读写，其他用户只读 \n\n`chmod -R 755 /System/Library/Extensions`\n\n参数R 表示递归，755表示各用户的权限。\n\n\n**更改文件属主** \n\n`chown 参数 用户:组 文件`\n \n例：把驱动目录下的所有文件属主改成根用户 \n\n`chown -R root:wheel /System/Library/Extensions`\n\n参数R 表示递归操作 \n\n**修复整个系统中文件的权限**\n\n`diskutil repairpermissions /`\n \n严格的说这不是一个unix 命令，而是osx一个软件，记得修改或添加的驱动就执行一次。 \n\n**文本编辑** \n\n`nano 文件名`\n\n例：编辑natit Info.plist \n\n`nano /System/Library/Extensions/Natit.kext/Info.plist`\n\n编辑完成后 用 Ctrl ＋O 存盘，Ctrl＋X 退出；\n\n另一个文本编辑软件是 vi，操作有些古怪，熟了是非常好用的，而且在所有类Unix系统中都它，走遍天下都不怕了。 \n\n**运行脚本命令**\n \nsh 脚本文件名 \n\n例 修改驱动后所有需要的操作存成一个脚本，以后修改了驱动后只要运行一次这个脚本就可以了，方便吧。\n\n1. 终端中运行`nano /clean`； \n2. 把下列代码粘贴到 nano 中：\n```bash\nrm -rf /System/Library/Extensions.kextcache \nrm -rf /System/Library/Extensions.mkext \nchown -R root:wheel /System/Library/Extensions \nchmod -R 755 /System/Library/Extensions \ndiskutil repairpermissions / \nkextcache -k /System/Library/Extensions/ \n```\n3. Ctrl ＋O 存盘，Ctrl＋X 退出；\n4. 以后只要动了驱动，就在终端中运行一次 `sh /clean`。\n\n\n### 小技巧 \n\n**用Tab键自动补齐命令**\n\n比如想到`/System`目录中去，输入`cd /Sy`然后按一下Tab 键，命令就会自动补齐成 cd /System；\n\n**操作带名字中带有空格的文件和目录**\n \n空格在命令中写成 空格， 比如要进入My Documents，命令为`cd My Documents`；\n \n**查看命令的详细帮助**\n\n`man 命令名`\n \n比如要看看ls命令的详细用法，执行 `man ls`。 \n\n\n\n\n\n\n\n\n","slug":"mac-command","published":1,"updated":"2016-06-25T00:00:00.000Z","_id":"cmduj3n3q003qk8sv080xeq4k","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#osx-%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">OSX 的文件系统</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F\">如何进入命令操作模式</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90\">获取权限</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4\">基本命令</a></li>\n<li><a href=\"#%E5%B0%8F%E6%8A%80%E5%B7%A7\">小技巧</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"osx-的文件系统\">OSX 的文件系统</span></h3><p>OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在&#x2F;Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ </p>\n<p>在终端里执行 <code>ls /Volumes/USBHD</code>, 看看显示出的是不是这个移动硬盘的内容。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">位置</th>\n<th align=\"left\">目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">根目录位置</td>\n<td align=\"left\">&#x2F;核心 Mach_kernel</td>\n</tr>\n<tr>\n<td align=\"center\">驱动所在位置</td>\n<td align=\"left\">&#x2F;Systme&#x2F;Library&#x2F;Extensions</td>\n</tr>\n<tr>\n<td align=\"center\">用户文件夹位置</td>\n<td align=\"left\">&#x2F;User&#x2F;用户名</td>\n</tr>\n<tr>\n<td align=\"center\">桌面的位置</td>\n<td align=\"left\">&#x2F;User&#x2F;用户名&#x2F;Desktop</td>\n</tr>\n</tbody></table>\n<p>注：</p>\n<ul>\n<li>文件通配符为星号 <code>* </code>；</li>\n<li>在Unix系统中是区别大小写字符的，<code>J.txt</code> 不等于 <code>j.txt</code>；</li>\n<li>根目录标志<code>/ </code>不是可有可无，<code>cd /Document</code> 表示转到根目录下的Document中，而<code>cd Document</code> 表示转到当前目录下的Document中。</li>\n</ul>\n<h3><span id=\"如何进入命令操作模式\">如何进入命令操作模式</span></h3><p>再图形界面下，用finder 打开“应用程序” -&gt; “实用程序” -&gt; “终端”，如果连图形界面都进不去了（比如安错了显示驱动），开机时按 F8，用－s参数启动，然后输入命令<code>mount -uw /</code>。</p>\n<h3><span id=\"获取权限\">获取权限</span></h3><p>为了防止误操作破坏系统，再用户状态下时没有权限操作系统重要文件的，所以先要取得root权限 <code>sudo －s</code> ；然后输入密码，输入密码时没有任何回显，连星号都没有，只管输完回车就行了。 </p>\n<h3><span id=\"基本命令\">基本命令</span></h3><p><strong>列出文件</strong></p>\n<p><code>ls 参数 目录名</code> </p>\n<p>例: 想看看根目录下有什么，<br><code>ls /</code> </p>\n<p>想看看驱动目录下有什么， </p>\n<p><code>ls /System/Library/Extensions</code><br>参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件 </p>\n<p><strong>转换目录</strong> </p>\n<p><code>cd 目录名</code> </p>\n<p>例：想到驱动目录下溜达一圈 </p>\n<p><code>cd /System/Library/Extensions</code></p>\n<p><strong>建立新目录</strong> </p>\n<p><code>mkdir 目录名</code> </p>\n<p>例：在驱动目录下建一个备份目录 backup </p>\n<p><code>mkdir /System/Library/Extensions/backup</code></p>\n<p>在桌面上建一个备份目录 backup </p>\n<p><code>mkdir /User/用户名/Desktop/backup</code></p>\n<p><strong>拷贝文件</strong></p>\n<p><code>cp 参数 源文件 目标文件</code> </p>\n<p>例：想把桌面的jelon.txt 拷贝到驱动目录中 </p>\n<p><code>cp -R /User/用户名/Desktop/jelon.txt /System/Library/Extensions </code></p>\n<p>参数R表示对目录进行递归操作。</p>\n<p>把驱动目录下的所有文件备份到桌面backup </p>\n<p><code>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</code></p>\n<p><strong>删除文件</strong></p>\n<p><code>rm 参数 文件</code></p>\n<p>例：想删除驱动的缓存 </p>\n<p><code>rm -rf /System/Library/Extensions.kextcache</code><br><code>rm -rf /System/Library/Extensions.mkext</code></p>\n<p>参数<code>－rf</code>表示递归和强制，千万要小心使用，如果执行了<code>rm -rf /</code>你的系统就全没了！！！ </p>\n<p><strong>移动文件</strong></p>\n<p><code>mv 文件</code></p>\n<p>例：想把AppleHDA.Kext 移到桌面</p>\n<p><code>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</code></p>\n<p>想把AppleHDA.Kext 移到备份目录中 </p>\n<p><code>mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup</code></p>\n<p><strong>更改文件权限</strong></p>\n<p><code>chmod 参数 权限 文件</code></p>\n<p>例：把驱动目录下所有文件设定到root读写，其他用户只读 </p>\n<p><code>chmod -R 755 /System/Library/Extensions</code></p>\n<p>参数R 表示递归，755表示各用户的权限。</p>\n<p><strong>更改文件属主</strong> </p>\n<p><code>chown 参数 用户:组 文件</code></p>\n<p>例：把驱动目录下的所有文件属主改成根用户 </p>\n<p><code>chown -R root:wheel /System/Library/Extensions</code></p>\n<p>参数R 表示递归操作 </p>\n<p><strong>修复整个系统中文件的权限</strong></p>\n<p><code>diskutil repairpermissions /</code></p>\n<p>严格的说这不是一个unix 命令，而是osx一个软件，记得修改或添加的驱动就执行一次。 </p>\n<p><strong>文本编辑</strong> </p>\n<p><code>nano 文件名</code></p>\n<p>例：编辑natit Info.plist </p>\n<p><code>nano /System/Library/Extensions/Natit.kext/Info.plist</code></p>\n<p>编辑完成后 用 Ctrl ＋O 存盘，Ctrl＋X 退出；</p>\n<p>另一个文本编辑软件是 vi，操作有些古怪，熟了是非常好用的，而且在所有类Unix系统中都它，走遍天下都不怕了。 </p>\n<p><strong>运行脚本命令</strong></p>\n<p>sh 脚本文件名 </p>\n<p>例 修改驱动后所有需要的操作存成一个脚本，以后修改了驱动后只要运行一次这个脚本就可以了，方便吧。</p>\n<ol>\n<li>终端中运行<code>nano /clean</code>； </li>\n<li>把下列代码粘贴到 nano 中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf /System/Library/Extensions.kextcache </span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /System/Library/Extensions.mkext </span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R root:wheel /System/Library/Extensions </span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 755 /System/Library/Extensions </span><br><span class=\"line\">diskutil repairpermissions / </span><br><span class=\"line\">kextcache -k /System/Library/Extensions/ </span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Ctrl ＋O 存盘，Ctrl＋X 退出；</li>\n<li>以后只要动了驱动，就在终端中运行一次 <code>sh /clean</code>。</li>\n</ol>\n<h3><span id=\"小技巧\">小技巧</span></h3><p><strong>用Tab键自动补齐命令</strong></p>\n<p>比如想到<code>/System</code>目录中去，输入<code>cd /Sy</code>然后按一下Tab 键，命令就会自动补齐成 cd &#x2F;System；</p>\n<p><strong>操作带名字中带有空格的文件和目录</strong></p>\n<p>空格在命令中写成 空格， 比如要进入My Documents，命令为<code>cd My Documents</code>；</p>\n<p><strong>查看命令的详细帮助</strong></p>\n<p><code>man 命令名</code></p>\n<p>比如要看看ls命令的详细用法，执行 <code>man ls</code>。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#osx-%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">OSX 的文件系统</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F\">如何进入命令操作模式</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90\">获取权限</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4\">基本命令</a></li>\n<li><a href=\"#%E5%B0%8F%E6%8A%80%E5%B7%A7\">小技巧</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"OSX-的文件系统\"><a href=\"#OSX-的文件系统\" class=\"headerlink\" title=\"OSX 的文件系统\"></a>OSX 的文件系统</h3><p>OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在&#x2F;Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ </p>\n<p>在终端里执行 <code>ls /Volumes/USBHD</code>, 看看显示出的是不是这个移动硬盘的内容。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">位置</th>\n<th align=\"left\">目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">根目录位置</td>\n<td align=\"left\">&#x2F;核心 Mach_kernel</td>\n</tr>\n<tr>\n<td align=\"center\">驱动所在位置</td>\n<td align=\"left\">&#x2F;Systme&#x2F;Library&#x2F;Extensions</td>\n</tr>\n<tr>\n<td align=\"center\">用户文件夹位置</td>\n<td align=\"left\">&#x2F;User&#x2F;用户名</td>\n</tr>\n<tr>\n<td align=\"center\">桌面的位置</td>\n<td align=\"left\">&#x2F;User&#x2F;用户名&#x2F;Desktop</td>\n</tr>\n</tbody></table>\n<p>注：</p>\n<ul>\n<li>文件通配符为星号 <code>* </code>；</li>\n<li>在Unix系统中是区别大小写字符的，<code>J.txt</code> 不等于 <code>j.txt</code>；</li>\n<li>根目录标志<code>/ </code>不是可有可无，<code>cd /Document</code> 表示转到根目录下的Document中，而<code>cd Document</code> 表示转到当前目录下的Document中。</li>\n</ul>\n<h3 id=\"如何进入命令操作模式\"><a href=\"#如何进入命令操作模式\" class=\"headerlink\" title=\"如何进入命令操作模式\"></a>如何进入命令操作模式</h3><p>再图形界面下，用finder 打开“应用程序” -&gt; “实用程序” -&gt; “终端”，如果连图形界面都进不去了（比如安错了显示驱动），开机时按 F8，用－s参数启动，然后输入命令<code>mount -uw /</code>。</p>\n<h3 id=\"获取权限\"><a href=\"#获取权限\" class=\"headerlink\" title=\"获取权限\"></a>获取权限</h3><p>为了防止误操作破坏系统，再用户状态下时没有权限操作系统重要文件的，所以先要取得root权限 <code>sudo －s</code> ；然后输入密码，输入密码时没有任何回显，连星号都没有，只管输完回车就行了。 </p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><p><strong>列出文件</strong></p>\n<p><code>ls 参数 目录名</code> </p>\n<p>例: 想看看根目录下有什么，<br><code>ls /</code> </p>\n<p>想看看驱动目录下有什么， </p>\n<p><code>ls /System/Library/Extensions</code><br>参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件 </p>\n<p><strong>转换目录</strong> </p>\n<p><code>cd 目录名</code> </p>\n<p>例：想到驱动目录下溜达一圈 </p>\n<p><code>cd /System/Library/Extensions</code></p>\n<p><strong>建立新目录</strong> </p>\n<p><code>mkdir 目录名</code> </p>\n<p>例：在驱动目录下建一个备份目录 backup </p>\n<p><code>mkdir /System/Library/Extensions/backup</code></p>\n<p>在桌面上建一个备份目录 backup </p>\n<p><code>mkdir /User/用户名/Desktop/backup</code></p>\n<p><strong>拷贝文件</strong></p>\n<p><code>cp 参数 源文件 目标文件</code> </p>\n<p>例：想把桌面的jelon.txt 拷贝到驱动目录中 </p>\n<p><code>cp -R /User/用户名/Desktop/jelon.txt /System/Library/Extensions </code></p>\n<p>参数R表示对目录进行递归操作。</p>\n<p>把驱动目录下的所有文件备份到桌面backup </p>\n<p><code>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</code></p>\n<p><strong>删除文件</strong></p>\n<p><code>rm 参数 文件</code></p>\n<p>例：想删除驱动的缓存 </p>\n<p><code>rm -rf /System/Library/Extensions.kextcache</code><br><code>rm -rf /System/Library/Extensions.mkext</code></p>\n<p>参数<code>－rf</code>表示递归和强制，千万要小心使用，如果执行了<code>rm -rf /</code>你的系统就全没了！！！ </p>\n<p><strong>移动文件</strong></p>\n<p><code>mv 文件</code></p>\n<p>例：想把AppleHDA.Kext 移到桌面</p>\n<p><code>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</code></p>\n<p>想把AppleHDA.Kext 移到备份目录中 </p>\n<p><code>mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup</code></p>\n<p><strong>更改文件权限</strong></p>\n<p><code>chmod 参数 权限 文件</code></p>\n<p>例：把驱动目录下所有文件设定到root读写，其他用户只读 </p>\n<p><code>chmod -R 755 /System/Library/Extensions</code></p>\n<p>参数R 表示递归，755表示各用户的权限。</p>\n<p><strong>更改文件属主</strong> </p>\n<p><code>chown 参数 用户:组 文件</code></p>\n<p>例：把驱动目录下的所有文件属主改成根用户 </p>\n<p><code>chown -R root:wheel /System/Library/Extensions</code></p>\n<p>参数R 表示递归操作 </p>\n<p><strong>修复整个系统中文件的权限</strong></p>\n<p><code>diskutil repairpermissions /</code></p>\n<p>严格的说这不是一个unix 命令，而是osx一个软件，记得修改或添加的驱动就执行一次。 </p>\n<p><strong>文本编辑</strong> </p>\n<p><code>nano 文件名</code></p>\n<p>例：编辑natit Info.plist </p>\n<p><code>nano /System/Library/Extensions/Natit.kext/Info.plist</code></p>\n<p>编辑完成后 用 Ctrl ＋O 存盘，Ctrl＋X 退出；</p>\n<p>另一个文本编辑软件是 vi，操作有些古怪，熟了是非常好用的，而且在所有类Unix系统中都它，走遍天下都不怕了。 </p>\n<p><strong>运行脚本命令</strong></p>\n<p>sh 脚本文件名 </p>\n<p>例 修改驱动后所有需要的操作存成一个脚本，以后修改了驱动后只要运行一次这个脚本就可以了，方便吧。</p>\n<ol>\n<li>终端中运行<code>nano /clean</code>； </li>\n<li>把下列代码粘贴到 nano 中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf /System/Library/Extensions.kextcache </span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /System/Library/Extensions.mkext </span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R root:wheel /System/Library/Extensions </span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 755 /System/Library/Extensions </span><br><span class=\"line\">diskutil repairpermissions / </span><br><span class=\"line\">kextcache -k /System/Library/Extensions/ </span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Ctrl ＋O 存盘，Ctrl＋X 退出；</li>\n<li>以后只要动了驱动，就在终端中运行一次 <code>sh /clean</code>。</li>\n</ol>\n<h3 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h3><p><strong>用Tab键自动补齐命令</strong></p>\n<p>比如想到<code>/System</code>目录中去，输入<code>cd /Sy</code>然后按一下Tab 键，命令就会自动补齐成 cd &#x2F;System；</p>\n<p><strong>操作带名字中带有空格的文件和目录</strong></p>\n<p>空格在命令中写成 空格， 比如要进入My Documents，命令为<code>cd My Documents</code>；</p>\n<p><strong>查看命令的详细帮助</strong></p>\n<p><code>man 命令名</code></p>\n<p>比如要看看ls命令的详细用法，执行 <code>man ls</code>。</p>\n"},{"title":"Mac 开机变慢怎么办？","author":"网络","date":"2016-11-12T00:00:00.000Z","thumbnail":null,"blogexcerpt":"有部分Mac用户朋友可能会感觉到，自己的 Mac 在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化 Mac 开机速度的小技巧，希望能帮助到大家。一、尽量删除桌面文件...每次 Mac 启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标( thumbnail icons )等等。因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理...","_content":"\n<!-- toc -->\n\n   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。\n\n\n![Mac Tips](https://jangdelong.github.io/blog_img/images/mac-tips/mac-tips.jpg)\n\n### 一、尽量删除桌面文件\n\n　　每次Mac启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标(thumbnail icons )等等。\n　　\n　　因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理。\n　　\n### 二、 去除启动加载程序\n\n　　系统偏好的用户设定里可以去除一些不用的启动程序(System Preferences and User Accounts)你只需把那些程序前的钩子点去就行(比如iChat)。通过Activity Monitor程序，你可以看到后台运行程序的清单。\n　　\n　　这个对于我来说，是一个习惯，平时有软件新安装后要求在启动时检查更新，我一般都会点击否。\n\n### 三、 禁用Dashboard\n\n　　如果你经常使用的话，dashboard固然好。然而，你也要清楚，每个 widgets 和 web clips 都非常占内存和资源。怎样禁止? 方法也很简单。\n　　\n　　打开Terminal 敲入以下命令:\n　　\n　　```bash\n　　defaults write com.apple.dashboard mcx-disabled -boolean YES\n　　```\n\n　　然后你可以重启macbook或者敲入以下命令：\n　　　　\n　　```bash\n　　killall Dock\n　　```\n　　\n　　当你又需要dashboard的时候，以下命令可以逆转：\n　　　　\n　　```bash\n　　defaults write com.apple.dashboard mcx-disabled -boolean NO　\n　　\n　　# 再重启或敲入 :\n　　killall Dock\n　　```\n　　\n### 四、清除 PRAM (只适用于英特尔的苹果电脑)\n\n　　这个方法不是根本的解决方法，但是可以除去一些不必要的开机设置。因而也节省了时间。方法是：重启你的电脑，同时按下 command + option + p + r 直到听到3 到4 声启动铃响之后松手。\n　　\n### 五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：\n\n　　1. 确保Macbook关闭。\n　　2. 去掉电源适配器和电池。\n　　3. 按下电源开关并保持 5 秒钟，放开。\n　　4. 接上电源适配器和电池。\n　　5. 打开电源开关。\n　　\n　　对于Macbook Air用户，方法是：\n　　\n　　1. 确保Air关机状态。\n　　2. 把电源适配器接上工作电源。\n　　3. 按下(左)Shift-Control-Option 同时按一下电源开关. (记住，要用左边的shift等键)。\n　　4. 等5 分钟，按下电源开关重启 Macbook Air。\n　　\n### 六、禁止无用的系统选项.\n\n　　如果你没有用到Wireless(无线上网), Bluetooth(蓝牙), Speech Recognition(语音识别) or Internet Sharing(共享)，那么，很简单， 关掉他们！\n\n### 参考\n\n来自 [http://www.3lian.com/edu/2015/07-04/226772.html](http://www.3lian.com/edu/2015/07-04/226772.html)\n　　","source":"_posts/mac-tips.md","raw":"---\ntitle: Mac 开机变慢怎么办？\ncategories:\n  - 生活琐事\nauthor: 网络\ndate: 2016-11-12\ntags:\n\t- Mac\n\t- 开机变慢\nthumbnail: \nblogexcerpt: 有部分Mac用户朋友可能会感觉到，自己的 Mac 在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化 Mac 开机速度的小技巧，希望能帮助到大家。一、尽量删除桌面文件...每次 Mac 启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标( thumbnail icons )等等。因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理...\n\n---\n\n<!-- toc -->\n\n   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。\n\n\n![Mac Tips](https://jangdelong.github.io/blog_img/images/mac-tips/mac-tips.jpg)\n\n### 一、尽量删除桌面文件\n\n　　每次Mac启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标(thumbnail icons )等等。\n　　\n　　因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理。\n　　\n### 二、 去除启动加载程序\n\n　　系统偏好的用户设定里可以去除一些不用的启动程序(System Preferences and User Accounts)你只需把那些程序前的钩子点去就行(比如iChat)。通过Activity Monitor程序，你可以看到后台运行程序的清单。\n　　\n　　这个对于我来说，是一个习惯，平时有软件新安装后要求在启动时检查更新，我一般都会点击否。\n\n### 三、 禁用Dashboard\n\n　　如果你经常使用的话，dashboard固然好。然而，你也要清楚，每个 widgets 和 web clips 都非常占内存和资源。怎样禁止? 方法也很简单。\n　　\n　　打开Terminal 敲入以下命令:\n　　\n　　```bash\n　　defaults write com.apple.dashboard mcx-disabled -boolean YES\n　　```\n\n　　然后你可以重启macbook或者敲入以下命令：\n　　　　\n　　```bash\n　　killall Dock\n　　```\n　　\n　　当你又需要dashboard的时候，以下命令可以逆转：\n　　　　\n　　```bash\n　　defaults write com.apple.dashboard mcx-disabled -boolean NO　\n　　\n　　# 再重启或敲入 :\n　　killall Dock\n　　```\n　　\n### 四、清除 PRAM (只适用于英特尔的苹果电脑)\n\n　　这个方法不是根本的解决方法，但是可以除去一些不必要的开机设置。因而也节省了时间。方法是：重启你的电脑，同时按下 command + option + p + r 直到听到3 到4 声启动铃响之后松手。\n　　\n### 五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：\n\n　　1. 确保Macbook关闭。\n　　2. 去掉电源适配器和电池。\n　　3. 按下电源开关并保持 5 秒钟，放开。\n　　4. 接上电源适配器和电池。\n　　5. 打开电源开关。\n　　\n　　对于Macbook Air用户，方法是：\n　　\n　　1. 确保Air关机状态。\n　　2. 把电源适配器接上工作电源。\n　　3. 按下(左)Shift-Control-Option 同时按一下电源开关. (记住，要用左边的shift等键)。\n　　4. 等5 分钟，按下电源开关重启 Macbook Air。\n　　\n### 六、禁止无用的系统选项.\n\n　　如果你没有用到Wireless(无线上网), Bluetooth(蓝牙), Speech Recognition(语音识别) or Internet Sharing(共享)，那么，很简单， 关掉他们！\n\n### 参考\n\n来自 [http://www.3lian.com/edu/2015/07-04/226772.html](http://www.3lian.com/edu/2015/07-04/226772.html)\n　　","slug":"mac-tips","published":1,"updated":"2016-11-12T00:00:00.000Z","_id":"cmduj3n3s003uk8svgq8c6td5","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%B0%BD%E9%87%8F%E5%88%A0%E9%99%A4%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6\">一、尽量删除桌面文件</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%8E%BB%E9%99%A4%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E7%A8%8B%E5%BA%8F\">二、 去除启动加载程序</a></li>\n<li><a href=\"#%E4%B8%89-%E7%A6%81%E7%94%A8dashboard\">三、 禁用Dashboard</a></li>\n<li><a href=\"#%E5%9B%9B-%E6%B8%85%E9%99%A4-pram-%E5%8F%AA%E9%80%82%E7%94%A8%E4%BA%8E%E8%8B%B1%E7%89%B9%E5%B0%94%E7%9A%84%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91\">四、清除 PRAM (只适用于英特尔的苹果电脑)</a></li>\n<li><a href=\"#%E4%BA%94-%E6%B8%85%E9%99%A4pmu-imac%E4%B8%8D%E9%80%82%E7%94%A8%E5%AF%B9%E4%BA%8Emacbook-macbook-pro%E7%94%A8%E6%88%B7%E6%96%B9%E6%B3%95%E6%98%AF\">五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：</a></li>\n<li><a href=\"#%E5%85%AD-%E7%A6%81%E6%AD%A2%E6%97%A0%E7%94%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%80%89%E9%A1%B9\">六、禁止无用的系统选项.</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mac-tips/mac-tips.jpg\" alt=\"Mac Tips\"></p>\n<h3><span id=\"一-尽量删除桌面文件\">一、尽量删除桌面文件</span></h3><p>　　每次Mac启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标(thumbnail icons )等等。<br>　　<br>　　因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理。\n　　</p>\n<h3><span id=\"二-去除启动加载程序\">二、 去除启动加载程序</span></h3><p>　　系统偏好的用户设定里可以去除一些不用的启动程序(System Preferences and User Accounts)你只需把那些程序前的钩子点去就行(比如iChat)。通过Activity Monitor程序，你可以看到后台运行程序的清单。<br>　　<br>　　这个对于我来说，是一个习惯，平时有软件新安装后要求在启动时检查更新，我一般都会点击否。</p>\n<h3><span id=\"三-禁用dashboard\">三、 禁用Dashboard</span></h3><p>　　如果你经常使用的话，dashboard固然好。然而，你也要清楚，每个 widgets 和 web clips 都非常占内存和资源。怎样禁止? 方法也很简单。<br>　　<br>　　打开Terminal 敲入以下命令:<br>　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　defaults write com.apple.dashboard mcx-disabled -boolean YES</span><br></pre></td></tr></table></figure></p>\n<p>　　然后你可以重启macbook或者敲入以下命令：<br>　　　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　killall Dock</span><br></pre></td></tr></table></figure><br>　　<br>　　当你又需要dashboard的时候，以下命令可以逆转：<br>　　　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　defaults write com.apple.dashboard mcx-disabled -boolean NO　</span><br><span class=\"line\">　　</span><br><span class=\"line\">　　<span class=\"comment\"># 再重启或敲入 :</span></span><br><span class=\"line\">　　killall Dock</span><br></pre></td></tr></table></figure>\n　　</p>\n<h3><span id=\"四-清除-pram-只适用于英特尔的苹果电脑\">四、清除 PRAM (只适用于英特尔的苹果电脑)</span></h3><p>　　这个方法不是根本的解决方法，但是可以除去一些不必要的开机设置。因而也节省了时间。方法是：重启你的电脑，同时按下 command + option + p + r 直到听到3 到4 声启动铃响之后松手。\n　　</p>\n<h3><span id=\"五-清除pmu-imac不适用对于macbook-macbook-pro用户方法是\">五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：</span></h3><p>　　1. 确保Macbook关闭。<br>　　2. 去掉电源适配器和电池。<br>　　3. 按下电源开关并保持 5 秒钟，放开。<br>　　4. 接上电源适配器和电池。<br>　　5. 打开电源开关。<br>　　<br>　　对于Macbook Air用户，方法是：<br>　　<br>　　1. 确保Air关机状态。<br>　　2. 把电源适配器接上工作电源。<br>　　3. 按下(左)Shift-Control-Option 同时按一下电源开关. (记住，要用左边的shift等键)。<br>　　4. 等5 分钟，按下电源开关重启 Macbook Air。\n　　</p>\n<h3><span id=\"六-禁止无用的系统选项\">六、禁止无用的系统选项.</span></h3><p>　　如果你没有用到Wireless(无线上网), Bluetooth(蓝牙), Speech Recognition(语音识别) or Internet Sharing(共享)，那么，很简单， 关掉他们！</p>\n<h3><span id=\"参考\">参考</span></h3><p>来自 <a href=\"http://www.3lian.com/edu/2015/07-04/226772.html\">http://www.3lian.com/edu/2015/07-04/226772.html</a></p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%B0%BD%E9%87%8F%E5%88%A0%E9%99%A4%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6\">一、尽量删除桌面文件</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%8E%BB%E9%99%A4%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E7%A8%8B%E5%BA%8F\">二、 去除启动加载程序</a></li>\n<li><a href=\"#%E4%B8%89-%E7%A6%81%E7%94%A8dashboard\">三、 禁用Dashboard</a></li>\n<li><a href=\"#%E5%9B%9B-%E6%B8%85%E9%99%A4-pram-%E5%8F%AA%E9%80%82%E7%94%A8%E4%BA%8E%E8%8B%B1%E7%89%B9%E5%B0%94%E7%9A%84%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91\">四、清除 PRAM (只适用于英特尔的苹果电脑)</a></li>\n<li><a href=\"#%E4%BA%94-%E6%B8%85%E9%99%A4pmu-imac%E4%B8%8D%E9%80%82%E7%94%A8%E5%AF%B9%E4%BA%8Emacbook-macbook-pro%E7%94%A8%E6%88%B7%E6%96%B9%E6%B3%95%E6%98%AF\">五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：</a></li>\n<li><a href=\"#%E5%85%AD-%E7%A6%81%E6%AD%A2%E6%97%A0%E7%94%A8%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%80%89%E9%A1%B9\">六、禁止无用的系统选项.</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mac-tips/mac-tips.jpg\" alt=\"Mac Tips\"></p>\n<h3 id=\"一、尽量删除桌面文件\"><a href=\"#一、尽量删除桌面文件\" class=\"headerlink\" title=\"一、尽量删除桌面文件\"></a>一、尽量删除桌面文件</h3><p>　　每次Mac启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标(thumbnail icons )等等。<br>　　<br>　　因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理。\n　　</p>\n<h3 id=\"二、-去除启动加载程序\"><a href=\"#二、-去除启动加载程序\" class=\"headerlink\" title=\"二、 去除启动加载程序\"></a>二、 去除启动加载程序</h3><p>　　系统偏好的用户设定里可以去除一些不用的启动程序(System Preferences and User Accounts)你只需把那些程序前的钩子点去就行(比如iChat)。通过Activity Monitor程序，你可以看到后台运行程序的清单。<br>　　<br>　　这个对于我来说，是一个习惯，平时有软件新安装后要求在启动时检查更新，我一般都会点击否。</p>\n<h3 id=\"三、-禁用Dashboard\"><a href=\"#三、-禁用Dashboard\" class=\"headerlink\" title=\"三、 禁用Dashboard\"></a>三、 禁用Dashboard</h3><p>　　如果你经常使用的话，dashboard固然好。然而，你也要清楚，每个 widgets 和 web clips 都非常占内存和资源。怎样禁止? 方法也很简单。<br>　　<br>　　打开Terminal 敲入以下命令:<br>　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　defaults write com.apple.dashboard mcx-disabled -boolean YES</span><br></pre></td></tr></table></figure></p>\n<p>　　然后你可以重启macbook或者敲入以下命令：<br>　　　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　killall Dock</span><br></pre></td></tr></table></figure><br>　　<br>　　当你又需要dashboard的时候，以下命令可以逆转：<br>　　　　<br>　　<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　defaults write com.apple.dashboard mcx-disabled -boolean NO　</span><br><span class=\"line\">　　</span><br><span class=\"line\">　　<span class=\"comment\"># 再重启或敲入 :</span></span><br><span class=\"line\">　　killall Dock</span><br></pre></td></tr></table></figure>\n　　</p>\n<h3 id=\"四、清除-PRAM-只适用于英特尔的苹果电脑\"><a href=\"#四、清除-PRAM-只适用于英特尔的苹果电脑\" class=\"headerlink\" title=\"四、清除 PRAM (只适用于英特尔的苹果电脑)\"></a>四、清除 PRAM (只适用于英特尔的苹果电脑)</h3><p>　　这个方法不是根本的解决方法，但是可以除去一些不必要的开机设置。因而也节省了时间。方法是：重启你的电脑，同时按下 command + option + p + r 直到听到3 到4 声启动铃响之后松手。\n　　</p>\n<h3 id=\"五、清除PMU-iMac不适用-，对于Macbook-Macbook-Pro用户，方法是：\"><a href=\"#五、清除PMU-iMac不适用-，对于Macbook-Macbook-Pro用户，方法是：\" class=\"headerlink\" title=\"五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：\"></a>五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：</h3><p>　　1. 确保Macbook关闭。<br>　　2. 去掉电源适配器和电池。<br>　　3. 按下电源开关并保持 5 秒钟，放开。<br>　　4. 接上电源适配器和电池。<br>　　5. 打开电源开关。<br>　　<br>　　对于Macbook Air用户，方法是：<br>　　<br>　　1. 确保Air关机状态。<br>　　2. 把电源适配器接上工作电源。<br>　　3. 按下(左)Shift-Control-Option 同时按一下电源开关. (记住，要用左边的shift等键)。<br>　　4. 等5 分钟，按下电源开关重启 Macbook Air。\n　　</p>\n<h3 id=\"六、禁止无用的系统选项\"><a href=\"#六、禁止无用的系统选项\" class=\"headerlink\" title=\"六、禁止无用的系统选项.\"></a>六、禁止无用的系统选项.</h3><p>　　如果你没有用到Wireless(无线上网), Bluetooth(蓝牙), Speech Recognition(语音识别) or Internet Sharing(共享)，那么，很简单， 关掉他们！</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>来自 <a href=\"http://www.3lian.com/edu/2015/07-04/226772.html\">http://www.3lian.com/edu/2015/07-04/226772.html</a></p>\n"},{"title":"基于 MongoDB 的博客系统 Schema 设计","author":"Jelon","date":"2017-03-12T00:00:00.000Z","thumbnail":null,"blogexcerpt":"选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。博客系统实现需要三张表...","_content":"\n<!-- toc -->\n\n选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。\n\n博客系统实现需要三张表：\n\n- 文章表\n\n- 分类表\n\n- 用户表\n\n### 文章表\n\n文章表包含了以下这些字段。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| title | 文章的标题 |\n| content | 文章的内容 |\n| category | 文章的分类 |\n| author | 文章的作者 |\n| slug | 文章的url(如果是中文的话，给其起一个英文的名称，说是有利于搜索引擎的优化，有点不大明白) |\n| published | 文章是否发布 |\n| meta | 搜集这个文章被赞了多少次，被踩了多少次。 |\n| comments | 文章的评论 |\n| created | 文章的创建时间 |\n\n实现：\n\n``` javascript\n\nvar mongoose = require('mongoose'),\nSchema       = mongoose.Schema;\n\n\nvar PostSchma = new Schema({\n    title    : { type: String, required: true },\n    content  : { type: String, required: true },\n    category : { type: Schema.Types.ObjectId, ref: 'Category' },//作为外键\n    author   : { type: Schema.Types.ObjectId, ref: 'User' },   //作为外键\n    slug     : { type: String, required: true },\n    published: { type: Boolean, default: false },\n    meta     : { type: Schema.Types.Mixed },\n    comments : [ Schema.Types.Mixed ],\n    created  : { type: Date }\n});\n\nmongoose.model('Post', PostSchema);\n```\n\n### 用户表\n\n用户表主要由以下字段构成。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| name | 用户名 |\n| email | 邮箱地址 | \n| password | 密码 |\n| created | 创建时间 |\n\n实现：\n\n``` javascript\nvar mongoose = require('mongoose'),\n Schema      = mongoose.Schema;\n\nvar md5      = require('md5');\n\nvar UserSchema = new Schema({\n    name    : { type: String, required: true },\n    email   : { type: String, required: true },\n    password: { type: String, required: true },\n    created : { type: Date }\n});\n\nmongoose.model('User', UserSchema);\n```\n\n### 分类表\n\n分类表主要有以下字段构成。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| name | 分类名称 |\n| slug | 固定链接 |\n| created | 创建时间 |\n\n实现：\n\n``` javascript\nvar mongoose = require('mongoose'),\nSchema       = mongoose.Schema;\n\t\t\nvar CategorySchema = new Schema({\n    name   : { type: String, required: true },\n    slug   : { type: String, required: true },\n    created: { type: Date }\n});\n\nmongoose.model('Category', CategorySchema);\n```\n\n","source":"_posts/mongodb-blog-design.md","raw":"---\ntitle: 基于 MongoDB 的博客系统 Schema 设计\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-03-12\ntags:\n\t- Mongoose\n\t- Node.js\nthumbnail:\nblogexcerpt: 选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。博客系统实现需要三张表...\n\n---\n\n<!-- toc -->\n\n选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。\n\n博客系统实现需要三张表：\n\n- 文章表\n\n- 分类表\n\n- 用户表\n\n### 文章表\n\n文章表包含了以下这些字段。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| title | 文章的标题 |\n| content | 文章的内容 |\n| category | 文章的分类 |\n| author | 文章的作者 |\n| slug | 文章的url(如果是中文的话，给其起一个英文的名称，说是有利于搜索引擎的优化，有点不大明白) |\n| published | 文章是否发布 |\n| meta | 搜集这个文章被赞了多少次，被踩了多少次。 |\n| comments | 文章的评论 |\n| created | 文章的创建时间 |\n\n实现：\n\n``` javascript\n\nvar mongoose = require('mongoose'),\nSchema       = mongoose.Schema;\n\n\nvar PostSchma = new Schema({\n    title    : { type: String, required: true },\n    content  : { type: String, required: true },\n    category : { type: Schema.Types.ObjectId, ref: 'Category' },//作为外键\n    author   : { type: Schema.Types.ObjectId, ref: 'User' },   //作为外键\n    slug     : { type: String, required: true },\n    published: { type: Boolean, default: false },\n    meta     : { type: Schema.Types.Mixed },\n    comments : [ Schema.Types.Mixed ],\n    created  : { type: Date }\n});\n\nmongoose.model('Post', PostSchema);\n```\n\n### 用户表\n\n用户表主要由以下字段构成。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| name | 用户名 |\n| email | 邮箱地址 | \n| password | 密码 |\n| created | 创建时间 |\n\n实现：\n\n``` javascript\nvar mongoose = require('mongoose'),\n Schema      = mongoose.Schema;\n\nvar md5      = require('md5');\n\nvar UserSchema = new Schema({\n    name    : { type: String, required: true },\n    email   : { type: String, required: true },\n    password: { type: String, required: true },\n    created : { type: Date }\n});\n\nmongoose.model('User', UserSchema);\n```\n\n### 分类表\n\n分类表主要有以下字段构成。\n\n| 字段名 | 字段含义 |\n| :--- | :----- | \n| name | 分类名称 |\n| slug | 固定链接 |\n| created | 创建时间 |\n\n实现：\n\n``` javascript\nvar mongoose = require('mongoose'),\nSchema       = mongoose.Schema;\n\t\t\nvar CategorySchema = new Schema({\n    name   : { type: String, required: true },\n    slug   : { type: String, required: true },\n    created: { type: Date }\n});\n\nmongoose.model('Category', CategorySchema);\n```\n\n","slug":"mongodb-blog-design","published":1,"updated":"2017-03-12T00:00:00.000Z","_id":"cmduj3n3t003xk8sv5j517b27","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%96%87%E7%AB%A0%E8%A1%A8\">文章表</a></li>\n<li><a href=\"#%E7%94%A8%E6%88%B7%E8%A1%A8\">用户表</a></li>\n<li><a href=\"#%E5%88%86%E7%B1%BB%E8%A1%A8\">分类表</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。</p>\n<p>博客系统实现需要三张表：</p>\n<ul>\n<li><p>文章表</p>\n</li>\n<li><p>分类表</p>\n</li>\n<li><p>用户表</p>\n</li>\n</ul>\n<h3><span id=\"文章表\">文章表</span></h3><p>文章表包含了以下这些字段。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">title</td>\n<td align=\"left\">文章的标题</td>\n</tr>\n<tr>\n<td align=\"left\">content</td>\n<td align=\"left\">文章的内容</td>\n</tr>\n<tr>\n<td align=\"left\">category</td>\n<td align=\"left\">文章的分类</td>\n</tr>\n<tr>\n<td align=\"left\">author</td>\n<td align=\"left\">文章的作者</td>\n</tr>\n<tr>\n<td align=\"left\">slug</td>\n<td align=\"left\">文章的url(如果是中文的话，给其起一个英文的名称，说是有利于搜索引擎的优化，有点不大明白)</td>\n</tr>\n<tr>\n<td align=\"left\">published</td>\n<td align=\"left\">文章是否发布</td>\n</tr>\n<tr>\n<td align=\"left\">meta</td>\n<td align=\"left\">搜集这个文章被赞了多少次，被踩了多少次。</td>\n</tr>\n<tr>\n<td align=\"left\">comments</td>\n<td align=\"left\">文章的评论</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">文章的创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"><span class=\"title class_\">Schema</span>       = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PostSchma</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    title    : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    content  : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    category : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">ObjectId</span>, <span class=\"attr\">ref</span>: <span class=\"string\">&#x27;Category&#x27;</span> &#125;,<span class=\"comment\">//作为外键</span></span><br><span class=\"line\">    author   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">ObjectId</span>, <span class=\"attr\">ref</span>: <span class=\"string\">&#x27;User&#x27;</span> &#125;,   <span class=\"comment\">//作为外键</span></span><br><span class=\"line\">    slug     : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">published</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Boolean</span>, <span class=\"attr\">default</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    meta     : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">Mixed</span> &#125;,</span><br><span class=\"line\">    comments : [ <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">Mixed</span> ],</span><br><span class=\"line\">    created  : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Post&#x27;</span>, <span class=\"title class_\">PostSchema</span>);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"用户表\">用户表</span></h3><p>用户表主要由以下字段构成。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">name</td>\n<td align=\"left\">用户名</td>\n</tr>\n<tr>\n<td align=\"left\">email</td>\n<td align=\"left\">邮箱地址</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">密码</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"> <span class=\"title class_\">Schema</span>      = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5      = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;md5&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">UserSchema</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    name    : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    email   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    created : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;User&#x27;</span>, <span class=\"title class_\">UserSchema</span>);</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"分类表\">分类表</span></h3><p>分类表主要有以下字段构成。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">name</td>\n<td align=\"left\">分类名称</td>\n</tr>\n<tr>\n<td align=\"left\">slug</td>\n<td align=\"left\">固定链接</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"><span class=\"title class_\">Schema</span>       = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CategorySchema</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    name   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    slug   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">created</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Category&#x27;</span>, <span class=\"title class_\">CategorySchema</span>);</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%96%87%E7%AB%A0%E8%A1%A8\">文章表</a></li>\n<li><a href=\"#%E7%94%A8%E6%88%B7%E8%A1%A8\">用户表</a></li>\n<li><a href=\"#%E5%88%86%E7%B1%BB%E8%A1%A8\">分类表</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。</p>\n<p>博客系统实现需要三张表：</p>\n<ul>\n<li><p>文章表</p>\n</li>\n<li><p>分类表</p>\n</li>\n<li><p>用户表</p>\n</li>\n</ul>\n<h3 id=\"文章表\"><a href=\"#文章表\" class=\"headerlink\" title=\"文章表\"></a>文章表</h3><p>文章表包含了以下这些字段。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">title</td>\n<td align=\"left\">文章的标题</td>\n</tr>\n<tr>\n<td align=\"left\">content</td>\n<td align=\"left\">文章的内容</td>\n</tr>\n<tr>\n<td align=\"left\">category</td>\n<td align=\"left\">文章的分类</td>\n</tr>\n<tr>\n<td align=\"left\">author</td>\n<td align=\"left\">文章的作者</td>\n</tr>\n<tr>\n<td align=\"left\">slug</td>\n<td align=\"left\">文章的url(如果是中文的话，给其起一个英文的名称，说是有利于搜索引擎的优化，有点不大明白)</td>\n</tr>\n<tr>\n<td align=\"left\">published</td>\n<td align=\"left\">文章是否发布</td>\n</tr>\n<tr>\n<td align=\"left\">meta</td>\n<td align=\"left\">搜集这个文章被赞了多少次，被踩了多少次。</td>\n</tr>\n<tr>\n<td align=\"left\">comments</td>\n<td align=\"left\">文章的评论</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">文章的创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"><span class=\"title class_\">Schema</span>       = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PostSchma</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    title    : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    content  : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    category : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">ObjectId</span>, <span class=\"attr\">ref</span>: <span class=\"string\">&#x27;Category&#x27;</span> &#125;,<span class=\"comment\">//作为外键</span></span><br><span class=\"line\">    author   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">ObjectId</span>, <span class=\"attr\">ref</span>: <span class=\"string\">&#x27;User&#x27;</span> &#125;,   <span class=\"comment\">//作为外键</span></span><br><span class=\"line\">    slug     : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">published</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Boolean</span>, <span class=\"attr\">default</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    meta     : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">Mixed</span> &#125;,</span><br><span class=\"line\">    comments : [ <span class=\"title class_\">Schema</span>.<span class=\"property\">Types</span>.<span class=\"property\">Mixed</span> ],</span><br><span class=\"line\">    created  : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Post&#x27;</span>, <span class=\"title class_\">PostSchema</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户表\"><a href=\"#用户表\" class=\"headerlink\" title=\"用户表\"></a>用户表</h3><p>用户表主要由以下字段构成。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">name</td>\n<td align=\"left\">用户名</td>\n</tr>\n<tr>\n<td align=\"left\">email</td>\n<td align=\"left\">邮箱地址</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">密码</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"> <span class=\"title class_\">Schema</span>      = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5      = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;md5&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">UserSchema</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    name    : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    email   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    created : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;User&#x27;</span>, <span class=\"title class_\">UserSchema</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分类表\"><a href=\"#分类表\" class=\"headerlink\" title=\"分类表\"></a>分类表</h3><p>分类表主要有以下字段构成。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段名</th>\n<th align=\"left\">字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">name</td>\n<td align=\"left\">分类名称</td>\n</tr>\n<tr>\n<td align=\"left\">slug</td>\n<td align=\"left\">固定链接</td>\n</tr>\n<tr>\n<td align=\"left\">created</td>\n<td align=\"left\">创建时间</td>\n</tr>\n</tbody></table>\n<p>实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose&#x27;</span>),</span><br><span class=\"line\"><span class=\"title class_\">Schema</span>       = mongoose.<span class=\"property\">Schema</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">CategorySchema</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Schema</span>(&#123;</span><br><span class=\"line\">    name   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    slug   : &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">created</span>: &#123; <span class=\"attr\">type</span>: <span class=\"title class_\">Date</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.<span class=\"title function_\">model</span>(<span class=\"string\">&#x27;Category&#x27;</span>, <span class=\"title class_\">CategorySchema</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Mac 下 MongoDB 及其客户端管理工具的安装和使用","author":"Jelon","date":"2017-02-17T00:00:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/mongodb_for_mac_thumbnail.png","blogexcerpt":"什么是 MongoDB ？MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。","_content":"\n<!-- toc -->\n\n### 什么是 MongoDB\n\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。\n\n### MongoDB 的特点\n\n- 【JSON风格文件的形式，面向文档存储：数据存储】 MongoDB的提供了一个面向文档存储，操作起来比较简单和容易；\n- 【对任何属性可索引】 通过设置任何属性的索引 (如：FirstName=\"Sameer\", Address=\"8 Gandhi Road\")来实现更快的排序；\n\n- 【复制和高可用性】 通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性；\n\n- 【自动分片】 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片；\n\n- 【丰富的查询】 Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组；\n\n- 【快速就地更新】 MongoDb 使用 update() 命令可以实现替换完成的文档（数据）或者一些指定的数据字段；\n\n- Mongodb 中的 Map/reduce 主要是用来对数据进行批量处理和聚合操作；\n\n- Map 和 Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理；\n\n- Map函数和Reduce函数是使用 Javascript 编写的，并可以通过 db.runCommand 或mapreduce 命令来执行 MapReduce 操作；\n\n- GridFS是 MongoDB 中的一个内置功能，可以用于存放大量小文件；\n\n- MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可；\n\n- MongoDB 支持各种编程语言: RUBY，PYTHON，JAVA，C++，PHP，C#，Node.js 等多种语言。\n\n### MongoDB 适用场景\n\n- 大数据\n\n- 内容管理和交付\n\n- 移动和社交基础设施\n\n- 用户数据管理\n\n- 数据平台\n\n### Mac 下 MongoDB 安装\n\n方法一，通过终端下载安装；\n\n*with Homebrew*\n\n``` bash\n# Update Homebrew’s package database\nbrew update\n\t\n# Install MongoDB\n# Install the MongoDB Binaries\nbrew install mongodb \n# Install the MongoDB Binaries with TLS/SSL Support\nbrew install mongodb --with-openssl\n# Install the Latest Development Release of MongoDB\nbrew install mongodb --devel\n\t\n```\n\n*Install MongoDB Community Edition Manually*\n\t\n\t\n``` bash\ncurl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz > mongodb.tgz\n```\n\t\n方法二，直接浏览器登录官网下载解压即可；\n\n![MongoDB 官网](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/1.jpeg)\n\n### 使用\n\n- 打开终端，切换至 mongodb/bin 目录下，输入 `./mongod`，如下图所示开启服务。\n\n![开启服务](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/2.png)\n\n- 打开另外一个终端，切换至 mongodb/bin 目录下，输入 `./mongo` 来允许输入 mongdb shell。\n\n### MongoDB 常用 shell 命令\n\n- use 命令\n\nMongoDB use DATABASE_NAME 用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。\n\n- dropDatabase() 方法\n \nMongoDB db.dropDatabase() 命令是用来删除一个现有的数据库。\ndropDatabase() 命令的基本语法如下：\n\n``` bash\ndb.dropDatabase()\n```\n\n- drop() 方法\n\nMongoDB 的 db.collection.drop() 是用来从数据库中删除一个集合。\n\n- insert() 方法\n\n要插入数据到 MongoDB 集合，需要使用 MongoDB 的 insert() 或 save() 方法。\n\n- find() 方法\n\n要从MongoDB 查询集合数据，需要使用MongoDB 的 find() 方法。\n\n- pretty() 方法\n\n结果显示在一个格式化的方式，可以使用 pretty() 方法.\n\n- limit() 方法\n\n要限制 MongoDB 中的记录，需要使用 limit() 方法。 limit() 方法接受一个数字型的参数，这是要显示的文档数。\n\n`limit()` 方法的基本语法如下\n\n``` bash\ndb.COLLECTION_NAME.find().limit(NUMBER)  \n```\n\n### Mac 下客户端管理工具 ---- Toad\n\n- 简介\n\nToad 是一个强大的生产力解决方案，简化了 OS X 用户的数据库管理。 它使您能够在自动化开发过程构建高质量的数据库应用程序。Toad 界面很流畅，能使你轻松切换任务。 此外，它不止支持 MongoDB，还支持 Oracle，MySQL 和 PostgreSQL。\n\n- 安装\n\n打开 App Store ，搜索 Toad（图标为一只蛤蟆），直接安装即可。\n\n![Toad](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/3.png)\n\n- 使用\n\n安装好之后打开 Toad，在事先已经开启 MongoDB 服务的前提下，输入以下内容，进行数据库连接。\n\n连接：\n\n![Toad](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/4.png)\n\n工具演示：\n\n![演示](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/5.gif)\n\n### 参考\n\n1. [https://www.mongodb.com/](https://www.mongodb.com/)\n2. [http://www.runoob.com/mongodb/mongodb-tutorial.html](http://www.runoob.com/mongodb/mongodb-tutorial.html)\n3. [https://segmentfault.com/a/1190000002547229](https://segmentfault.com/a/1190000002547229)\n\n\n\n","source":"_posts/mongodb-for-mac.md","raw":"---\ntitle: Mac 下 MongoDB 及其客户端管理工具的安装和使用\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-02-17\ntags:\n\t- MongoDB\n\t-  Mac OSX\n\t-   Node.js\nthumbnail: https://jangdelong.github.io/blog_img/images/mongodb-for-mac/mongodb_for_mac_thumbnail.png\nblogexcerpt: 什么是 MongoDB ？MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。\n\n---\n\n<!-- toc -->\n\n### 什么是 MongoDB\n\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。\n\n### MongoDB 的特点\n\n- 【JSON风格文件的形式，面向文档存储：数据存储】 MongoDB的提供了一个面向文档存储，操作起来比较简单和容易；\n- 【对任何属性可索引】 通过设置任何属性的索引 (如：FirstName=\"Sameer\", Address=\"8 Gandhi Road\")来实现更快的排序；\n\n- 【复制和高可用性】 通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性；\n\n- 【自动分片】 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片；\n\n- 【丰富的查询】 Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组；\n\n- 【快速就地更新】 MongoDb 使用 update() 命令可以实现替换完成的文档（数据）或者一些指定的数据字段；\n\n- Mongodb 中的 Map/reduce 主要是用来对数据进行批量处理和聚合操作；\n\n- Map 和 Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理；\n\n- Map函数和Reduce函数是使用 Javascript 编写的，并可以通过 db.runCommand 或mapreduce 命令来执行 MapReduce 操作；\n\n- GridFS是 MongoDB 中的一个内置功能，可以用于存放大量小文件；\n\n- MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可；\n\n- MongoDB 支持各种编程语言: RUBY，PYTHON，JAVA，C++，PHP，C#，Node.js 等多种语言。\n\n### MongoDB 适用场景\n\n- 大数据\n\n- 内容管理和交付\n\n- 移动和社交基础设施\n\n- 用户数据管理\n\n- 数据平台\n\n### Mac 下 MongoDB 安装\n\n方法一，通过终端下载安装；\n\n*with Homebrew*\n\n``` bash\n# Update Homebrew’s package database\nbrew update\n\t\n# Install MongoDB\n# Install the MongoDB Binaries\nbrew install mongodb \n# Install the MongoDB Binaries with TLS/SSL Support\nbrew install mongodb --with-openssl\n# Install the Latest Development Release of MongoDB\nbrew install mongodb --devel\n\t\n```\n\n*Install MongoDB Community Edition Manually*\n\t\n\t\n``` bash\ncurl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz > mongodb.tgz\n```\n\t\n方法二，直接浏览器登录官网下载解压即可；\n\n![MongoDB 官网](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/1.jpeg)\n\n### 使用\n\n- 打开终端，切换至 mongodb/bin 目录下，输入 `./mongod`，如下图所示开启服务。\n\n![开启服务](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/2.png)\n\n- 打开另外一个终端，切换至 mongodb/bin 目录下，输入 `./mongo` 来允许输入 mongdb shell。\n\n### MongoDB 常用 shell 命令\n\n- use 命令\n\nMongoDB use DATABASE_NAME 用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。\n\n- dropDatabase() 方法\n \nMongoDB db.dropDatabase() 命令是用来删除一个现有的数据库。\ndropDatabase() 命令的基本语法如下：\n\n``` bash\ndb.dropDatabase()\n```\n\n- drop() 方法\n\nMongoDB 的 db.collection.drop() 是用来从数据库中删除一个集合。\n\n- insert() 方法\n\n要插入数据到 MongoDB 集合，需要使用 MongoDB 的 insert() 或 save() 方法。\n\n- find() 方法\n\n要从MongoDB 查询集合数据，需要使用MongoDB 的 find() 方法。\n\n- pretty() 方法\n\n结果显示在一个格式化的方式，可以使用 pretty() 方法.\n\n- limit() 方法\n\n要限制 MongoDB 中的记录，需要使用 limit() 方法。 limit() 方法接受一个数字型的参数，这是要显示的文档数。\n\n`limit()` 方法的基本语法如下\n\n``` bash\ndb.COLLECTION_NAME.find().limit(NUMBER)  \n```\n\n### Mac 下客户端管理工具 ---- Toad\n\n- 简介\n\nToad 是一个强大的生产力解决方案，简化了 OS X 用户的数据库管理。 它使您能够在自动化开发过程构建高质量的数据库应用程序。Toad 界面很流畅，能使你轻松切换任务。 此外，它不止支持 MongoDB，还支持 Oracle，MySQL 和 PostgreSQL。\n\n- 安装\n\n打开 App Store ，搜索 Toad（图标为一只蛤蟆），直接安装即可。\n\n![Toad](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/3.png)\n\n- 使用\n\n安装好之后打开 Toad，在事先已经开启 MongoDB 服务的前提下，输入以下内容，进行数据库连接。\n\n连接：\n\n![Toad](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/4.png)\n\n工具演示：\n\n![演示](https://jangdelong.github.io/blog_img/images/mongodb-for-mac/5.gif)\n\n### 参考\n\n1. [https://www.mongodb.com/](https://www.mongodb.com/)\n2. [http://www.runoob.com/mongodb/mongodb-tutorial.html](http://www.runoob.com/mongodb/mongodb-tutorial.html)\n3. [https://segmentfault.com/a/1190000002547229](https://segmentfault.com/a/1190000002547229)\n\n\n\n","slug":"mongodb-for-mac","published":1,"updated":"2017-02-17T00:00:00.000Z","_id":"cmduj3n3u0040k8svdod6eosl","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-mongodb\">什么是 MongoDB</a></li>\n<li><a href=\"#mongodb-%E7%9A%84%E7%89%B9%E7%82%B9\">MongoDB 的特点</a></li>\n<li><a href=\"#mongodb-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\">MongoDB 适用场景</a></li>\n<li><a href=\"#mac-%E4%B8%8B-mongodb-%E5%AE%89%E8%A3%85\">Mac 下 MongoDB 安装</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#mongodb-%E5%B8%B8%E7%94%A8-shell-%E5%91%BD%E4%BB%A4\">MongoDB 常用 shell 命令</a></li>\n<li><a href=\"#mac-%E4%B8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-toad\">Mac 下客户端管理工具 —- Toad</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"什么是-mongodb\">什么是 MongoDB</span></h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<h3><span id=\"mongodb-的特点\">MongoDB 的特点</span></h3><ul>\n<li><p>【JSON风格文件的形式，面向文档存储：数据存储】 MongoDB的提供了一个面向文档存储，操作起来比较简单和容易；</p>\n</li>\n<li><p>【对任何属性可索引】 通过设置任何属性的索引 (如：FirstName&#x3D;”Sameer”, Address&#x3D;”8 Gandhi Road”)来实现更快的排序；</p>\n</li>\n<li><p>【复制和高可用性】 通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性；</p>\n</li>\n<li><p>【自动分片】 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片；</p>\n</li>\n<li><p>【丰富的查询】 Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组；</p>\n</li>\n<li><p>【快速就地更新】 MongoDb 使用 update() 命令可以实现替换完成的文档（数据）或者一些指定的数据字段；</p>\n</li>\n<li><p>Mongodb 中的 Map&#x2F;reduce 主要是用来对数据进行批量处理和聚合操作；</p>\n</li>\n<li><p>Map 和 Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理；</p>\n</li>\n<li><p>Map函数和Reduce函数是使用 Javascript 编写的，并可以通过 db.runCommand 或mapreduce 命令来执行 MapReduce 操作；</p>\n</li>\n<li><p>GridFS是 MongoDB 中的一个内置功能，可以用于存放大量小文件；</p>\n</li>\n<li><p>MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可；</p>\n</li>\n<li><p>MongoDB 支持各种编程语言: RUBY，PYTHON，JAVA，C++，PHP，C#，Node.js 等多种语言。</p>\n</li>\n</ul>\n<h3><span id=\"mongodb-适用场景\">MongoDB 适用场景</span></h3><ul>\n<li><p>大数据</p>\n</li>\n<li><p>内容管理和交付</p>\n</li>\n<li><p>移动和社交基础设施</p>\n</li>\n<li><p>用户数据管理</p>\n</li>\n<li><p>数据平台</p>\n</li>\n</ul>\n<h3><span id=\"mac-下-mongodb-安装\">Mac 下 MongoDB 安装</span></h3><p>方法一，通过终端下载安装；</p>\n<p><em>with Homebrew</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Update Homebrew’s package database</span></span><br><span class=\"line\">brew update</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># Install MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># Install the MongoDB Binaries</span></span><br><span class=\"line\">brew install mongodb </span><br><span class=\"line\"><span class=\"comment\"># Install the MongoDB Binaries with TLS/SSL Support</span></span><br><span class=\"line\">brew install mongodb --with-openssl</span><br><span class=\"line\"><span class=\"comment\"># Install the Latest Development Release of MongoDB</span></span><br><span class=\"line\">brew install mongodb --devel</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p><em>Install MongoDB Community Edition Manually</em>\n\t\n\t</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz &gt; mongodb.tgz</span><br></pre></td></tr></table></figure>\n<p>方法二，直接浏览器登录官网下载解压即可；</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/1.jpeg\" alt=\"MongoDB 官网\"></p>\n<h3><span id=\"使用\">使用</span></h3><ul>\n<li>打开终端，切换至 mongodb&#x2F;bin 目录下，输入 <code>./mongod</code>，如下图所示开启服务。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/2.png\" alt=\"开启服务\"></p>\n<ul>\n<li>打开另外一个终端，切换至 mongodb&#x2F;bin 目录下，输入 <code>./mongo</code> 来允许输入 mongdb shell。</li>\n</ul>\n<h3><span id=\"mongodb-常用-shell-命令\">MongoDB 常用 shell 命令</span></h3><ul>\n<li>use 命令</li>\n</ul>\n<p>MongoDB use DATABASE_NAME 用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。</p>\n<ul>\n<li>dropDatabase() 方法</li>\n</ul>\n<p>MongoDB db.dropDatabase() 命令是用来删除一个现有的数据库。<br>dropDatabase() 命令的基本语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>drop() 方法</li>\n</ul>\n<p>MongoDB 的 db.collection.drop() 是用来从数据库中删除一个集合。</p>\n<ul>\n<li>insert() 方法</li>\n</ul>\n<p>要插入数据到 MongoDB 集合，需要使用 MongoDB 的 insert() 或 save() 方法。</p>\n<ul>\n<li>find() 方法</li>\n</ul>\n<p>要从MongoDB 查询集合数据，需要使用MongoDB 的 find() 方法。</p>\n<ul>\n<li>pretty() 方法</li>\n</ul>\n<p>结果显示在一个格式化的方式，可以使用 pretty() 方法.</p>\n<ul>\n<li>limit() 方法</li>\n</ul>\n<p>要限制 MongoDB 中的记录，需要使用 limit() 方法。 limit() 方法接受一个数字型的参数，这是要显示的文档数。</p>\n<p><code>limit()</code> 方法的基本语法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.find().<span class=\"built_in\">limit</span>(NUMBER)  </span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"mac-下客户端管理工具-toad\">Mac 下客户端管理工具 —- Toad</span></h3><ul>\n<li>简介</li>\n</ul>\n<p>Toad 是一个强大的生产力解决方案，简化了 OS X 用户的数据库管理。 它使您能够在自动化开发过程构建高质量的数据库应用程序。Toad 界面很流畅，能使你轻松切换任务。 此外，它不止支持 MongoDB，还支持 Oracle，MySQL 和 PostgreSQL。</p>\n<ul>\n<li>安装</li>\n</ul>\n<p>打开 App Store ，搜索 Toad（图标为一只蛤蟆），直接安装即可。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/3.png\" alt=\"Toad\"></p>\n<ul>\n<li>使用</li>\n</ul>\n<p>安装好之后打开 Toad，在事先已经开启 MongoDB 服务的前提下，输入以下内容，进行数据库连接。</p>\n<p>连接：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/4.png\" alt=\"Toad\"></p>\n<p>工具演示：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/5.gif\" alt=\"演示\"></p>\n<h3><span id=\"参考\">参考</span></h3><ol>\n<li><a href=\"https://www.mongodb.com/\">https://www.mongodb.com/</a></li>\n<li><a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002547229\">https://segmentfault.com/a/1190000002547229</a></li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-mongodb\">什么是 MongoDB</a></li>\n<li><a href=\"#mongodb-%E7%9A%84%E7%89%B9%E7%82%B9\">MongoDB 的特点</a></li>\n<li><a href=\"#mongodb-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\">MongoDB 适用场景</a></li>\n<li><a href=\"#mac-%E4%B8%8B-mongodb-%E5%AE%89%E8%A3%85\">Mac 下 MongoDB 安装</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#mongodb-%E5%B8%B8%E7%94%A8-shell-%E5%91%BD%E4%BB%A4\">MongoDB 常用 shell 命令</a></li>\n<li><a href=\"#mac-%E4%B8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-toad\">Mac 下客户端管理工具 —- Toad</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"什么是-MongoDB\"><a href=\"#什么是-MongoDB\" class=\"headerlink\" title=\"什么是 MongoDB\"></a>什么是 MongoDB</h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<h3 id=\"MongoDB-的特点\"><a href=\"#MongoDB-的特点\" class=\"headerlink\" title=\"MongoDB 的特点\"></a>MongoDB 的特点</h3><ul>\n<li><p>【JSON风格文件的形式，面向文档存储：数据存储】 MongoDB的提供了一个面向文档存储，操作起来比较简单和容易；</p>\n</li>\n<li><p>【对任何属性可索引】 通过设置任何属性的索引 (如：FirstName&#x3D;”Sameer”, Address&#x3D;”8 Gandhi Road”)来实现更快的排序；</p>\n</li>\n<li><p>【复制和高可用性】 通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性；</p>\n</li>\n<li><p>【自动分片】 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片；</p>\n</li>\n<li><p>【丰富的查询】 Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组；</p>\n</li>\n<li><p>【快速就地更新】 MongoDb 使用 update() 命令可以实现替换完成的文档（数据）或者一些指定的数据字段；</p>\n</li>\n<li><p>Mongodb 中的 Map&#x2F;reduce 主要是用来对数据进行批量处理和聚合操作；</p>\n</li>\n<li><p>Map 和 Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理；</p>\n</li>\n<li><p>Map函数和Reduce函数是使用 Javascript 编写的，并可以通过 db.runCommand 或mapreduce 命令来执行 MapReduce 操作；</p>\n</li>\n<li><p>GridFS是 MongoDB 中的一个内置功能，可以用于存放大量小文件；</p>\n</li>\n<li><p>MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可；</p>\n</li>\n<li><p>MongoDB 支持各种编程语言: RUBY，PYTHON，JAVA，C++，PHP，C#，Node.js 等多种语言。</p>\n</li>\n</ul>\n<h3 id=\"MongoDB-适用场景\"><a href=\"#MongoDB-适用场景\" class=\"headerlink\" title=\"MongoDB 适用场景\"></a>MongoDB 适用场景</h3><ul>\n<li><p>大数据</p>\n</li>\n<li><p>内容管理和交付</p>\n</li>\n<li><p>移动和社交基础设施</p>\n</li>\n<li><p>用户数据管理</p>\n</li>\n<li><p>数据平台</p>\n</li>\n</ul>\n<h3 id=\"Mac-下-MongoDB-安装\"><a href=\"#Mac-下-MongoDB-安装\" class=\"headerlink\" title=\"Mac 下 MongoDB 安装\"></a>Mac 下 MongoDB 安装</h3><p>方法一，通过终端下载安装；</p>\n<p><em>with Homebrew</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Update Homebrew’s package database</span></span><br><span class=\"line\">brew update</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># Install MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># Install the MongoDB Binaries</span></span><br><span class=\"line\">brew install mongodb </span><br><span class=\"line\"><span class=\"comment\"># Install the MongoDB Binaries with TLS/SSL Support</span></span><br><span class=\"line\">brew install mongodb --with-openssl</span><br><span class=\"line\"><span class=\"comment\"># Install the Latest Development Release of MongoDB</span></span><br><span class=\"line\">brew install mongodb --devel</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p><em>Install MongoDB Community Edition Manually</em>\n\t\n\t</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz &gt; mongodb.tgz</span><br></pre></td></tr></table></figure>\n<p>方法二，直接浏览器登录官网下载解压即可；</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/1.jpeg\" alt=\"MongoDB 官网\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li>打开终端，切换至 mongodb&#x2F;bin 目录下，输入 <code>./mongod</code>，如下图所示开启服务。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/2.png\" alt=\"开启服务\"></p>\n<ul>\n<li>打开另外一个终端，切换至 mongodb&#x2F;bin 目录下，输入 <code>./mongo</code> 来允许输入 mongdb shell。</li>\n</ul>\n<h3 id=\"MongoDB-常用-shell-命令\"><a href=\"#MongoDB-常用-shell-命令\" class=\"headerlink\" title=\"MongoDB 常用 shell 命令\"></a>MongoDB 常用 shell 命令</h3><ul>\n<li>use 命令</li>\n</ul>\n<p>MongoDB use DATABASE_NAME 用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。</p>\n<ul>\n<li>dropDatabase() 方法</li>\n</ul>\n<p>MongoDB db.dropDatabase() 命令是用来删除一个现有的数据库。<br>dropDatabase() 命令的基本语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>drop() 方法</li>\n</ul>\n<p>MongoDB 的 db.collection.drop() 是用来从数据库中删除一个集合。</p>\n<ul>\n<li>insert() 方法</li>\n</ul>\n<p>要插入数据到 MongoDB 集合，需要使用 MongoDB 的 insert() 或 save() 方法。</p>\n<ul>\n<li>find() 方法</li>\n</ul>\n<p>要从MongoDB 查询集合数据，需要使用MongoDB 的 find() 方法。</p>\n<ul>\n<li>pretty() 方法</li>\n</ul>\n<p>结果显示在一个格式化的方式，可以使用 pretty() 方法.</p>\n<ul>\n<li>limit() 方法</li>\n</ul>\n<p>要限制 MongoDB 中的记录，需要使用 limit() 方法。 limit() 方法接受一个数字型的参数，这是要显示的文档数。</p>\n<p><code>limit()</code> 方法的基本语法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.find().<span class=\"built_in\">limit</span>(NUMBER)  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mac-下客户端管理工具-—-Toad\"><a href=\"#Mac-下客户端管理工具-—-Toad\" class=\"headerlink\" title=\"Mac 下客户端管理工具 —- Toad\"></a>Mac 下客户端管理工具 —- Toad</h3><ul>\n<li>简介</li>\n</ul>\n<p>Toad 是一个强大的生产力解决方案，简化了 OS X 用户的数据库管理。 它使您能够在自动化开发过程构建高质量的数据库应用程序。Toad 界面很流畅，能使你轻松切换任务。 此外，它不止支持 MongoDB，还支持 Oracle，MySQL 和 PostgreSQL。</p>\n<ul>\n<li>安装</li>\n</ul>\n<p>打开 App Store ，搜索 Toad（图标为一只蛤蟆），直接安装即可。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/3.png\" alt=\"Toad\"></p>\n<ul>\n<li>使用</li>\n</ul>\n<p>安装好之后打开 Toad，在事先已经开启 MongoDB 服务的前提下，输入以下内容，进行数据库连接。</p>\n<p>连接：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/4.png\" alt=\"Toad\"></p>\n<p>工具演示：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/mongodb-for-mac/5.gif\" alt=\"演示\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://www.mongodb.com/\">https://www.mongodb.com/</a></li>\n<li><a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002547229\">https://segmentfault.com/a/1190000002547229</a></li>\n</ol>\n"},{"title":"Node.js多线程","author":"Jelon","date":"2023-04-15T00:22:48.000Z","thumbnail":null,"blogexcerpt":"在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程...","_content":"\n<!-- toc -->\n\n在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：\n\n1. 使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程。\n2. 使用 Child Processes 模块：该模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。\n3. 使用 Cluster 模块：该模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。\n\n需要注意的是，虽然 Node.js 可以使用多线程来提高应用程序的性能，但多线程编程也可能会带来一些问题，如竞争条件和死锁等。因此，在使用多线程编程时，需要仔细考虑和处理这些问题，以确保应用程序的正确性和稳定性。\n\n详细展开说如下。\n\n1. 使用 Worker Threads 模块\n\nWorker Threads 是 Node.js 内置的一个模块，它提供了一种在 Node.js 中创建和管理多线程的方式。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。\n\nWorker Threads 模块使用了共享内存和线程间消息传递来实现多线程编程。具体来说，可以通过 Worker 类来创建和管理多个线程，每个线程都可以独立地执行一个任务。在任务执行过程中，可以使用 postMessage() 方法向其他线程发送消息，也可以使用 on() 方法监听其他线程发送的消息。\n\n需要注意的是，由于多个线程共享同一个内存空间，因此需要特别小心，避免出现竞争条件和内存泄漏等问题。\n\n以下是使用 Worker Threads 模块示例：\n\n```js\nconst { Worker } = require('worker_threads');\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nasync function run() {\n  const result = await runService('hello');\n  console.log(result);\n}\n\nrun();\n\n```\n\n在上面的示例中，我们使用 Worker Threads 模块创建了一个新的 Worker 对象，并指定了需要执行的 worker.js 文件和传递给它的 workerData 参数。在 worker.js 文件中，我们可以使用 parentPort.postMessage() 方法向主线程发送消息，也可以使用 workerData 属性获取从主线程传递过来的参数。\n\n2. 使用 Child Processes 模块\n\nChild Processes 模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。\n\n使用 Child Processes 模块时，可以通过 spawn() 方法创建一个子进程，并指定该子进程执行的命令和参数。子进程创建后，可以使用 stdin、stdout 和 stderr 等标准 I/O 流与其进行通信。此外，还可以使用 IPC 机制来实现主进程和子进程之间的通信。\n\n需要注意的是，子进程与主进程之间的通信会涉及到进程间的上下文切换，因此在大规模并发的情况下，可能会导致性能问题。\n\n以下是使用 Child Processes 模块示例：\n\n```js\nconst { spawn } = require('child_process');\n\nconst child = spawn('ls', ['-lh', '/usr']);\n\nchild.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nchild.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nchild.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n\n```\n\n在上面的示例中，我们使用 Child Processes 模块创建了一个新的子进程，并指定需要执行的 ls 命令和参数。在子进程中，我们可以使用 process.stdout 和 process.stderr 对象输出日志信息，也可以使用 process.send() 方法向主进程发送消息。\n\n3. 使用 Cluster 模块\n\nCluster 模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。\n\n在使用 Cluster 模块时，可以通过调用 cluster.fork() 方法来创建一个新的工作进程，并将其注册到主进程的事件循环中。主进程和工作进程之间可以使用 IPC 机制进行通信，并共享一些数据和资源。此外，工作进程也可以独立地处理客户端的请求，从而提高应用程序的性能和可扩展性。\n\n需要注意的是，Cluster 模块虽然可以提高应用程序的性能，但也会带来一些复杂性和挑战。例如，需要考虑进程间通信的问题、负载均衡的问题以及进程的崩溃等问题。\n\n以下是使用 Cluster 模块示例：\n\n```js\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  console.log(`Worker ${process.pid} started`);\n\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} listening on port 8000`);\n}\n\n```\n\n在上面的示例中，我们使用 Cluster 模块创建了多个工作进程，并使用 HTTP 模块创建了一个 Web 服务器。每个工作进程都可以独立地处理客户端的请求，并使用 console.log() 方法输出日志信息。\n","source":"_posts/node-multi-process.md","raw":"title: Node.js多线程\nauthor: Jelon\ncategories:\n  - Web技术\ndate: 2023-04-15 00:22:48\ntags:\n  - Node.js\nthumbnail:\nblogexcerpt: 在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程...\n\n---\n\n<!-- toc -->\n\n在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：\n\n1. 使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程。\n2. 使用 Child Processes 模块：该模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。\n3. 使用 Cluster 模块：该模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。\n\n需要注意的是，虽然 Node.js 可以使用多线程来提高应用程序的性能，但多线程编程也可能会带来一些问题，如竞争条件和死锁等。因此，在使用多线程编程时，需要仔细考虑和处理这些问题，以确保应用程序的正确性和稳定性。\n\n详细展开说如下。\n\n1. 使用 Worker Threads 模块\n\nWorker Threads 是 Node.js 内置的一个模块，它提供了一种在 Node.js 中创建和管理多线程的方式。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。\n\nWorker Threads 模块使用了共享内存和线程间消息传递来实现多线程编程。具体来说，可以通过 Worker 类来创建和管理多个线程，每个线程都可以独立地执行一个任务。在任务执行过程中，可以使用 postMessage() 方法向其他线程发送消息，也可以使用 on() 方法监听其他线程发送的消息。\n\n需要注意的是，由于多个线程共享同一个内存空间，因此需要特别小心，避免出现竞争条件和内存泄漏等问题。\n\n以下是使用 Worker Threads 模块示例：\n\n```js\nconst { Worker } = require('worker_threads');\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nasync function run() {\n  const result = await runService('hello');\n  console.log(result);\n}\n\nrun();\n\n```\n\n在上面的示例中，我们使用 Worker Threads 模块创建了一个新的 Worker 对象，并指定了需要执行的 worker.js 文件和传递给它的 workerData 参数。在 worker.js 文件中，我们可以使用 parentPort.postMessage() 方法向主线程发送消息，也可以使用 workerData 属性获取从主线程传递过来的参数。\n\n2. 使用 Child Processes 模块\n\nChild Processes 模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。\n\n使用 Child Processes 模块时，可以通过 spawn() 方法创建一个子进程，并指定该子进程执行的命令和参数。子进程创建后，可以使用 stdin、stdout 和 stderr 等标准 I/O 流与其进行通信。此外，还可以使用 IPC 机制来实现主进程和子进程之间的通信。\n\n需要注意的是，子进程与主进程之间的通信会涉及到进程间的上下文切换，因此在大规模并发的情况下，可能会导致性能问题。\n\n以下是使用 Child Processes 模块示例：\n\n```js\nconst { spawn } = require('child_process');\n\nconst child = spawn('ls', ['-lh', '/usr']);\n\nchild.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nchild.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nchild.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n\n```\n\n在上面的示例中，我们使用 Child Processes 模块创建了一个新的子进程，并指定需要执行的 ls 命令和参数。在子进程中，我们可以使用 process.stdout 和 process.stderr 对象输出日志信息，也可以使用 process.send() 方法向主进程发送消息。\n\n3. 使用 Cluster 模块\n\nCluster 模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。\n\n在使用 Cluster 模块时，可以通过调用 cluster.fork() 方法来创建一个新的工作进程，并将其注册到主进程的事件循环中。主进程和工作进程之间可以使用 IPC 机制进行通信，并共享一些数据和资源。此外，工作进程也可以独立地处理客户端的请求，从而提高应用程序的性能和可扩展性。\n\n需要注意的是，Cluster 模块虽然可以提高应用程序的性能，但也会带来一些复杂性和挑战。例如，需要考虑进程间通信的问题、负载均衡的问题以及进程的崩溃等问题。\n\n以下是使用 Cluster 模块示例：\n\n```js\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  console.log(`Worker ${process.pid} started`);\n\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} listening on port 8000`);\n}\n\n```\n\n在上面的示例中，我们使用 Cluster 模块创建了多个工作进程，并使用 HTTP 模块创建了一个 Web 服务器。每个工作进程都可以独立地处理客户端的请求，并使用 console.log() 方法输出日志信息。\n","slug":"node-multi-process","published":1,"updated":"2023-04-15T00:22:48.000Z","_id":"cmduj3n3u0042k8svdtr952zd","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n\n\n<!-- tocstop -->\n\n</div>\n\n<p>在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：</p>\n<ol>\n<li>使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程。</li>\n<li>使用 Child Processes 模块：该模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。</li>\n<li>使用 Cluster 模块：该模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。</li>\n</ol>\n<p>需要注意的是，虽然 Node.js 可以使用多线程来提高应用程序的性能，但多线程编程也可能会带来一些问题，如竞争条件和死锁等。因此，在使用多线程编程时，需要仔细考虑和处理这些问题，以确保应用程序的正确性和稳定性。</p>\n<p>详细展开说如下。</p>\n<ol>\n<li>使用 Worker Threads 模块</li>\n</ol>\n<p>Worker Threads 是 Node.js 内置的一个模块，它提供了一种在 Node.js 中创建和管理多线程的方式。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。</p>\n<p>Worker Threads 模块使用了共享内存和线程间消息传递来实现多线程编程。具体来说，可以通过 Worker 类来创建和管理多个线程，每个线程都可以独立地执行一个任务。在任务执行过程中，可以使用 postMessage() 方法向其他线程发送消息，也可以使用 on() 方法监听其他线程发送的消息。</p>\n<p>需要注意的是，由于多个线程共享同一个内存空间，因此需要特别小心，避免出现竞争条件和内存泄漏等问题。</p>\n<p>以下是使用 Worker Threads 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Worker</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;worker_threads&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runService</span>(<span class=\"params\">workerData</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;./worker.js&#x27;</span>, &#123; workerData &#125;);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, resolve);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, reject);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">code</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (code !== <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Worker stopped with exit code <span class=\"subst\">$&#123;code&#125;</span>`</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">runService</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Worker Threads 模块创建了一个新的 Worker 对象，并指定了需要执行的 worker.js 文件和传递给它的 workerData 参数。在 worker.js 文件中，我们可以使用 parentPort.postMessage() 方法向主线程发送消息，也可以使用 workerData 属性获取从主线程传递过来的参数。</p>\n<ol start=\"2\">\n<li>使用 Child Processes 模块</li>\n</ol>\n<p>Child Processes 模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。</p>\n<p>使用 Child Processes 模块时，可以通过 spawn() 方法创建一个子进程，并指定该子进程执行的命令和参数。子进程创建后，可以使用 stdin、stdout 和 stderr 等标准 I&#x2F;O 流与其进行通信。此外，还可以使用 IPC 机制来实现主进程和子进程之间的通信。</p>\n<p>需要注意的是，子进程与主进程之间的通信会涉及到进程间的上下文切换，因此在大规模并发的情况下，可能会导致性能问题。</p>\n<p>以下是使用 Child Processes 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;ls&#x27;</span>, [<span class=\"string\">&#x27;-lh&#x27;</span>, <span class=\"string\">&#x27;/usr&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"property\">stderr</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`stderr: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">code</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`child process exited with code <span class=\"subst\">$&#123;code&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Child Processes 模块创建了一个新的子进程，并指定需要执行的 ls 命令和参数。在子进程中，我们可以使用 process.stdout 和 process.stderr 对象输出日志信息，也可以使用 process.send() 方法向主进程发送消息。</p>\n<ol start=\"3\">\n<li>使用 Cluster 模块</li>\n</ol>\n<p>Cluster 模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。</p>\n<p>在使用 Cluster 模块时，可以通过调用 cluster.fork() 方法来创建一个新的工作进程，并将其注册到主进程的事件循环中。主进程和工作进程之间可以使用 IPC 机制进行通信，并共享一些数据和资源。此外，工作进程也可以独立地处理客户端的请求，从而提高应用程序的性能和可扩展性。</p>\n<p>需要注意的是，Cluster 模块虽然可以提高应用程序的性能，但也会带来一些复杂性和挑战。例如，需要考虑进程间通信的问题、负载均衡的问题以及进程的崩溃等问题。</p>\n<p>以下是使用 Cluster 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cluster&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cluster.<span class=\"property\">isMaster</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Master <span class=\"subst\">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  cluster.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">worker, code, signal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`worker <span class=\"subst\">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Worker <span class=\"subst\">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;Hello World\\n&#x27;</span>);</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Worker <span class=\"subst\">$&#123;process.pid&#125;</span> listening on port 8000`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Cluster 模块创建了多个工作进程，并使用 HTTP 模块创建了一个 Web 服务器。每个工作进程都可以独立地处理客户端的请求，并使用 console.log() 方法输出日志信息。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n\n\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>在 Node.js 中，可以使用多种方式实现多线程编程，其中最常用的方式包括：</p>\n<ol>\n<li>使用 Worker Threads 模块：这是 Node.js 内置的一个模块，它提供了创建和管理多线程的 API。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。该模块使用了共享内存和线程间消息传递来实现多线程编程。</li>\n<li>使用 Child Processes 模块：该模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。</li>\n<li>使用 Cluster 模块：该模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。</li>\n</ol>\n<p>需要注意的是，虽然 Node.js 可以使用多线程来提高应用程序的性能，但多线程编程也可能会带来一些问题，如竞争条件和死锁等。因此，在使用多线程编程时，需要仔细考虑和处理这些问题，以确保应用程序的正确性和稳定性。</p>\n<p>详细展开说如下。</p>\n<ol>\n<li>使用 Worker Threads 模块</li>\n</ol>\n<p>Worker Threads 是 Node.js 内置的一个模块，它提供了一种在 Node.js 中创建和管理多线程的方式。通过该模块，可以在 Node.js 中启动多个线程来执行不同的任务，以提高应用程序的性能和响应速度。</p>\n<p>Worker Threads 模块使用了共享内存和线程间消息传递来实现多线程编程。具体来说，可以通过 Worker 类来创建和管理多个线程，每个线程都可以独立地执行一个任务。在任务执行过程中，可以使用 postMessage() 方法向其他线程发送消息，也可以使用 on() 方法监听其他线程发送的消息。</p>\n<p>需要注意的是，由于多个线程共享同一个内存空间，因此需要特别小心，避免出现竞争条件和内存泄漏等问题。</p>\n<p>以下是使用 Worker Threads 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Worker</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;worker_threads&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runService</span>(<span class=\"params\">workerData</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;./worker.js&#x27;</span>, &#123; workerData &#125;);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, resolve);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, reject);</span><br><span class=\"line\">    worker.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">code</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (code !== <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Worker stopped with exit code <span class=\"subst\">$&#123;code&#125;</span>`</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">runService</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Worker Threads 模块创建了一个新的 Worker 对象，并指定了需要执行的 worker.js 文件和传递给它的 workerData 参数。在 worker.js 文件中，我们可以使用 parentPort.postMessage() 方法向主线程发送消息，也可以使用 workerData 属性获取从主线程传递过来的参数。</p>\n<ol start=\"2\">\n<li>使用 Child Processes 模块</li>\n</ol>\n<p>Child Processes 模块也是 Node.js 内置的一个模块，它允许创建子进程来执行一些独立的任务。这些子进程可以通过 IPC（进程间通信）与主进程进行通信，从而实现多线程编程。</p>\n<p>使用 Child Processes 模块时，可以通过 spawn() 方法创建一个子进程，并指定该子进程执行的命令和参数。子进程创建后，可以使用 stdin、stdout 和 stderr 等标准 I&#x2F;O 流与其进行通信。此外，还可以使用 IPC 机制来实现主进程和子进程之间的通信。</p>\n<p>需要注意的是，子进程与主进程之间的通信会涉及到进程间的上下文切换，因此在大规模并发的情况下，可能会导致性能问题。</p>\n<p>以下是使用 Child Processes 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;ls&#x27;</span>, [<span class=\"string\">&#x27;-lh&#x27;</span>, <span class=\"string\">&#x27;/usr&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stdout: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"property\">stderr</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`stderr: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">(<span class=\"params\">code</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`child process exited with code <span class=\"subst\">$&#123;code&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Child Processes 模块创建了一个新的子进程，并指定需要执行的 ls 命令和参数。在子进程中，我们可以使用 process.stdout 和 process.stderr 对象输出日志信息，也可以使用 process.send() 方法向主进程发送消息。</p>\n<ol start=\"3\">\n<li>使用 Cluster 模块</li>\n</ol>\n<p>Cluster 模块允许将 Node.js 应用程序分为多个进程，每个进程都可以处理来自客户端的请求。通过将请求分配给不同的进程，可以有效地利用多核 CPU，从而提高应用程序的性能。</p>\n<p>在使用 Cluster 模块时，可以通过调用 cluster.fork() 方法来创建一个新的工作进程，并将其注册到主进程的事件循环中。主进程和工作进程之间可以使用 IPC 机制进行通信，并共享一些数据和资源。此外，工作进程也可以独立地处理客户端的请求，从而提高应用程序的性能和可扩展性。</p>\n<p>需要注意的是，Cluster 模块虽然可以提高应用程序的性能，但也会带来一些复杂性和挑战。例如，需要考虑进程间通信的问题、负载均衡的问题以及进程的崩溃等问题。</p>\n<p>以下是使用 Cluster 模块示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cluster&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cluster.<span class=\"property\">isMaster</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Master <span class=\"subst\">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">    cluster.<span class=\"title function_\">fork</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  cluster.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">worker, code, signal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`worker <span class=\"subst\">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Worker <span class=\"subst\">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;Hello World\\n&#x27;</span>);</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Worker <span class=\"subst\">$&#123;process.pid&#125;</span> listening on port 8000`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们使用 Cluster 模块创建了多个工作进程，并使用 HTTP 模块创建了一个 Web 服务器。每个工作进程都可以独立地处理客户端的请求，并使用 console.log() 方法输出日志信息。</p>\n"},{"title":"给项目 npm 依赖包升级","date":"2021-01-12T19:55:33.000Z","author":"Jelon","thumbnail":null,"blogexcerpt":"先检查更新 sh npm outdated 执行以上命令，可以看到所有可以更新的模块。我们需要先更新 package.json 文件。 方法一 我们需要安装 npm-check-updates 模块...","_content":"\n<!-- toc -->\n\n升级之前要先检查更新\n\n```sh\nnpm outdated\n```\n\n执行以上命令，可以看到所有可以更新的模块。\n我们需要先更新 package.json 文件。\n\n### 方法一\n\n我们需要安装 `npm-check-updates` 模块\n\n```sh\nnpm install -g npm-check-updates\n```\n\n检查可更新的模块\n\n```sh\nncu\n```\n\n或者\n\n```sh\nnpm-check-updates\n```\n\n以上两条命令都可以检查可更新模块。接下来更新 package.json 的依赖包到最新版本：\n\n```sh\nncu -u\n```\n\n以上命令执行时更新全部模块。\n\n### 方法二\n\n实际场景不建议一次性全部更新，有一定的风险，可以根据实际需要，更新指定的模块，并且可以根据作用范围在后面加上 -D、-S 或者 -g。\n\n```sh\nnpm update xxxx # -D 、-S 或者 -g\n```\n\n如果，是需要指定更新到某个版本可提前修改 package.json 中的版本号。\n\n保险起见，更新完之后，可先删除 node_modules 目录，然后重新安装 npm 包。\n\n```sh\nnpm install\n```\n","source":"_posts/npm-check-updates.md","raw":"title: 给项目 npm 依赖包升级\ncategories:\n  - Web技术\ndate: 2021-01-12 19:55:33\nauthor: Jelon\ntags:\n  - npm\nthumbnail:\nblogexcerpt: 先检查更新 sh npm outdated 执行以上命令，可以看到所有可以更新的模块。我们需要先更新 package.json 文件。 方法一 我们需要安装 npm-check-updates 模块...\n\n---\n\n<!-- toc -->\n\n升级之前要先检查更新\n\n```sh\nnpm outdated\n```\n\n执行以上命令，可以看到所有可以更新的模块。\n我们需要先更新 package.json 文件。\n\n### 方法一\n\n我们需要安装 `npm-check-updates` 模块\n\n```sh\nnpm install -g npm-check-updates\n```\n\n检查可更新的模块\n\n```sh\nncu\n```\n\n或者\n\n```sh\nnpm-check-updates\n```\n\n以上两条命令都可以检查可更新模块。接下来更新 package.json 的依赖包到最新版本：\n\n```sh\nncu -u\n```\n\n以上命令执行时更新全部模块。\n\n### 方法二\n\n实际场景不建议一次性全部更新，有一定的风险，可以根据实际需要，更新指定的模块，并且可以根据作用范围在后面加上 -D、-S 或者 -g。\n\n```sh\nnpm update xxxx # -D 、-S 或者 -g\n```\n\n如果，是需要指定更新到某个版本可提前修改 package.json 中的版本号。\n\n保险起见，更新完之后，可先删除 node_modules 目录，然后重新安装 npm 包。\n\n```sh\nnpm install\n```\n","slug":"npm-check-updates","published":1,"updated":"2021-01-12T19:55:33.000Z","_id":"cmduj3n3w0045k8sv5rkm03tm","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\">方法一</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\">方法二</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>升级之前要先检查更新</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated</span><br></pre></td></tr></table></figure>\n\n<p>执行以上命令，可以看到所有可以更新的模块。<br>我们需要先更新 package.json 文件。</p>\n<h3><span id=\"方法一\">方法一</span></h3><p>我们需要安装 <code>npm-check-updates</code> 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>\n\n<p>检查可更新的模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ncu</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm-check-updates</span><br></pre></td></tr></table></figure>\n\n<p>以上两条命令都可以检查可更新模块。接下来更新 package.json 的依赖包到最新版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ncu -u</span><br></pre></td></tr></table></figure>\n\n<p>以上命令执行时更新全部模块。</p>\n<h3><span id=\"方法二\">方法二</span></h3><p>实际场景不建议一次性全部更新，有一定的风险，可以根据实际需要，更新指定的模块，并且可以根据作用范围在后面加上 -D、-S 或者 -g。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update xxxx <span class=\"comment\"># -D 、-S 或者 -g</span></span><br></pre></td></tr></table></figure>\n\n<p>如果，是需要指定更新到某个版本可提前修改 package.json 中的版本号。</p>\n<p>保险起见，更新完之后，可先删除 node_modules 目录，然后重新安装 npm 包。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\">方法一</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\">方法二</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>升级之前要先检查更新</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated</span><br></pre></td></tr></table></figure>\n\n<p>执行以上命令，可以看到所有可以更新的模块。<br>我们需要先更新 package.json 文件。</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>我们需要安装 <code>npm-check-updates</code> 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>\n\n<p>检查可更新的模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ncu</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm-check-updates</span><br></pre></td></tr></table></figure>\n\n<p>以上两条命令都可以检查可更新模块。接下来更新 package.json 的依赖包到最新版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ncu -u</span><br></pre></td></tr></table></figure>\n\n<p>以上命令执行时更新全部模块。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>实际场景不建议一次性全部更新，有一定的风险，可以根据实际需要，更新指定的模块，并且可以根据作用范围在后面加上 -D、-S 或者 -g。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update xxxx <span class=\"comment\"># -D 、-S 或者 -g</span></span><br></pre></td></tr></table></figure>\n\n<p>如果，是需要指定更新到某个版本可提前修改 package.json 中的版本号。</p>\n<p>保险起见，更新完之后，可先删除 node_modules 目录，然后重新安装 npm 包。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n"},{"title":"开源许可证教程","author":"Jelon","date":"2017-10-15T00:00:00.000Z","thumbnail":null,"blogexcerpt":"作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话...","_content":"\n<!-- toc -->\n\n作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。\n\n许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。\n\n![配图](https://jangdelong.github.io/blog_img/images/open-source-license-tutorial/1.jpg)\n\n### 一、什么是开源许可证\n\n开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。\n\n版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。\n\n### 二、开源许可证的种类\n\n目前，国际公认的开源许可证共有80多种。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。\n\n如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入\"公共领域\"（public domain）。\n\n根据使用条件的不同，开源许可证分成两大类。\n\n- 宽松式（permissive）许可证\n- Copyleft 许可证\n\n### 三、宽松式许可证\n\n#### 3.1 特点\n\n宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。\n\n它有三个基本特点。\n\n（1）没有使用限制\n\n用户可以使用代码，做任何想做的事情。\n\n（2）没有担保\n\n不保证代码质量，用户自担风险。\n\n（3）披露要求（notice requirement）\n\n用户必须披露原始作者。\n\n#### 3.2 常见许可证\n\n常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。\n\n（1）BSD（二条款版）\n\n分发软件时，必须保留原始的许可证声明。\n\n（2） BSD（三条款版）\n\n分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。\n\n（3）MIT\n\n分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。\n\n（4）Apache 2\n\n分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。\n\n### 四、Copyleft 许可证\n\n#### 4.1 Copyleft 的含义\n\nCopyleft 是理查德·斯托曼发明的一个词，作为 Copyright （版权）的反义词。\n\nCopyright 直译是\"复制权\"，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。\n\n但是，它带有前提条件，比宽松式许可证的限制要多。\n\n- 如果分发二进制格式，必须提供源码\n- 修改后的源码，必须与修改前保持许可证一致\n- 不得在原始许可证以外，附加其他限制\n\n上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。\n\n#### 4.2 常见许可证\n\n常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。\n\n（1）Affero GPL (AGPL)\n\n如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。\n\n（2）GPL\n\n如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。\n\n（3）LGPL\n\n如果项目采用动态链接调用该许可证的库，项目可以不用开源。\n\n（4）Mozilla（MPL）\n\n只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。\n\n### 五、常见问题\n\n本节回答一些开源许可证的常见问题。\n\n#### 5.1 什么叫分发（distribution）？\n\n除了 Affero GPL (AGPL) ，其他许可证都规定只有在\"分发\"时，才需要遵守许可证。换言之，如果不\"分发\"，就不需要遵守。\n\n简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的\"人\"也指\"法人\"，因此如果使用方是公司，且只在公司内\n部使用，也不需要遵守许可证。\n\n云服务（SaaS）是否构成\"分发\"呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。\n\n#### 5.2 开源软件的专利如何处理？\n\n某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。\n\n另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。\n\n总得来说，除非有明确的\"保留专利\"的条款，使用开源软件都不会构成侵犯专利。\n\n#### 5.3 什么是披露要求？\n\n所有的开源许可证都带有\"披露要求\"（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。\n\n一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了\"披露要求\"。\n\n#### 5.4 GPL 病毒是真的吗？\n\nGPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成\"GPL 病毒\"。\n\n很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。\n\n但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做\"停止侵害\"），而不会强制要求你将源码开源，因为《版权法》里面的\"违约救济\"没有提到违约者必须开源，只提到可以停止侵害和赔偿损失。\n\n### 六、原文\n\n本文由本人转载于 [http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html](http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html)\n\n© 著作权归原作者所有","source":"_posts/open-source-license-tutorial.md","raw":"---\ntitle: 开源许可证教程\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-10-15\ntags:\n\t- 开源许可证\nthumbnail:\nblogexcerpt: 作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话...\n\n---\n\n<!-- toc -->\n\n作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。\n\n许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。\n\n![配图](https://jangdelong.github.io/blog_img/images/open-source-license-tutorial/1.jpg)\n\n### 一、什么是开源许可证\n\n开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。\n\n版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。\n\n### 二、开源许可证的种类\n\n目前，国际公认的开源许可证共有80多种。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。\n\n如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入\"公共领域\"（public domain）。\n\n根据使用条件的不同，开源许可证分成两大类。\n\n- 宽松式（permissive）许可证\n- Copyleft 许可证\n\n### 三、宽松式许可证\n\n#### 3.1 特点\n\n宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。\n\n它有三个基本特点。\n\n（1）没有使用限制\n\n用户可以使用代码，做任何想做的事情。\n\n（2）没有担保\n\n不保证代码质量，用户自担风险。\n\n（3）披露要求（notice requirement）\n\n用户必须披露原始作者。\n\n#### 3.2 常见许可证\n\n常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。\n\n（1）BSD（二条款版）\n\n分发软件时，必须保留原始的许可证声明。\n\n（2） BSD（三条款版）\n\n分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。\n\n（3）MIT\n\n分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。\n\n（4）Apache 2\n\n分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。\n\n### 四、Copyleft 许可证\n\n#### 4.1 Copyleft 的含义\n\nCopyleft 是理查德·斯托曼发明的一个词，作为 Copyright （版权）的反义词。\n\nCopyright 直译是\"复制权\"，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。\n\n但是，它带有前提条件，比宽松式许可证的限制要多。\n\n- 如果分发二进制格式，必须提供源码\n- 修改后的源码，必须与修改前保持许可证一致\n- 不得在原始许可证以外，附加其他限制\n\n上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。\n\n#### 4.2 常见许可证\n\n常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。\n\n（1）Affero GPL (AGPL)\n\n如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。\n\n（2）GPL\n\n如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。\n\n（3）LGPL\n\n如果项目采用动态链接调用该许可证的库，项目可以不用开源。\n\n（4）Mozilla（MPL）\n\n只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。\n\n### 五、常见问题\n\n本节回答一些开源许可证的常见问题。\n\n#### 5.1 什么叫分发（distribution）？\n\n除了 Affero GPL (AGPL) ，其他许可证都规定只有在\"分发\"时，才需要遵守许可证。换言之，如果不\"分发\"，就不需要遵守。\n\n简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的\"人\"也指\"法人\"，因此如果使用方是公司，且只在公司内\n部使用，也不需要遵守许可证。\n\n云服务（SaaS）是否构成\"分发\"呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。\n\n#### 5.2 开源软件的专利如何处理？\n\n某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。\n\n另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。\n\n总得来说，除非有明确的\"保留专利\"的条款，使用开源软件都不会构成侵犯专利。\n\n#### 5.3 什么是披露要求？\n\n所有的开源许可证都带有\"披露要求\"（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。\n\n一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了\"披露要求\"。\n\n#### 5.4 GPL 病毒是真的吗？\n\nGPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成\"GPL 病毒\"。\n\n很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。\n\n但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做\"停止侵害\"），而不会强制要求你将源码开源，因为《版权法》里面的\"违约救济\"没有提到违约者必须开源，只提到可以停止侵害和赔偿损失。\n\n### 六、原文\n\n本文由本人转载于 [http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html](http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html)\n\n© 著作权归原作者所有","slug":"open-source-license-tutorial","published":1,"updated":"2017-10-15T00:00:00.000Z","_id":"cmduj3n3x0048k8svba39a42g","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81\">一、什么是开源许可证</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E7%9A%84%E7%A7%8D%E7%B1%BB\">二、开源许可证的种类</a></li>\n<li><a href=\"#%E4%B8%89-%E5%AE%BD%E6%9D%BE%E5%BC%8F%E8%AE%B8%E5%8F%AF%E8%AF%81\">三、宽松式许可证</a></li>\n<li><a href=\"#%E5%9B%9B-copyleft-%E8%AE%B8%E5%8F%AF%E8%AF%81\">四、Copyleft 许可证</a></li>\n<li><a href=\"#%E4%BA%94-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">五、常见问题</a></li>\n<li><a href=\"#%E5%85%AD-%E5%8E%9F%E6%96%87\">六、原文</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。</p>\n<p>许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/open-source-license-tutorial/1.jpg\" alt=\"配图\"></p>\n<h3><span id=\"一-什么是开源许可证\">一、什么是开源许可证</span></h3><p>开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。</p>\n<p>版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。</p>\n<h3><span id=\"二-开源许可证的种类\">二、开源许可证的种类</span></h3><p>目前，国际公认的开源许可证共有80多种。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。</p>\n<p>如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入”公共领域”（public domain）。</p>\n<p>根据使用条件的不同，开源许可证分成两大类。</p>\n<ul>\n<li>宽松式（permissive）许可证</li>\n<li>Copyleft 许可证</li>\n</ul>\n<h3><span id=\"三-宽松式许可证\">三、宽松式许可证</span></h3><h4><span id=\"31-特点\">3.1 特点</span></h4><p>宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。</p>\n<p>它有三个基本特点。</p>\n<p>（1）没有使用限制</p>\n<p>用户可以使用代码，做任何想做的事情。</p>\n<p>（2）没有担保</p>\n<p>不保证代码质量，用户自担风险。</p>\n<p>（3）披露要求（notice requirement）</p>\n<p>用户必须披露原始作者。</p>\n<h4><span id=\"32-常见许可证\">3.2 常见许可证</span></h4><p>常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。</p>\n<p>（1）BSD（二条款版）</p>\n<p>分发软件时，必须保留原始的许可证声明。</p>\n<p>（2） BSD（三条款版）</p>\n<p>分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。</p>\n<p>（3）MIT</p>\n<p>分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。</p>\n<p>（4）Apache 2</p>\n<p>分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。</p>\n<h3><span id=\"四-copyleft-许可证\">四、Copyleft 许可证</span></h3><h4><span id=\"41-copyleft-的含义\">4.1 Copyleft 的含义</span></h4><p>Copyleft 是理查德·斯托曼发明的一个词，作为 Copyright （版权）的反义词。</p>\n<p>Copyright 直译是”复制权”，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。</p>\n<p>但是，它带有前提条件，比宽松式许可证的限制要多。</p>\n<ul>\n<li>如果分发二进制格式，必须提供源码</li>\n<li>修改后的源码，必须与修改前保持许可证一致</li>\n<li>不得在原始许可证以外，附加其他限制</li>\n</ul>\n<p>上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。</p>\n<h4><span id=\"42-常见许可证\">4.2 常见许可证</span></h4><p>常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。</p>\n<p>（1）Affero GPL (AGPL)</p>\n<p>如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。</p>\n<p>（2）GPL</p>\n<p>如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。</p>\n<p>（3）LGPL</p>\n<p>如果项目采用动态链接调用该许可证的库，项目可以不用开源。</p>\n<p>（4）Mozilla（MPL）</p>\n<p>只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。</p>\n<h3><span id=\"五-常见问题\">五、常见问题</span></h3><p>本节回答一些开源许可证的常见问题。</p>\n<h4><span id=\"51-什么叫分发distribution\">5.1 什么叫分发（distribution）？</span></h4><p>除了 Affero GPL (AGPL) ，其他许可证都规定只有在”分发”时，才需要遵守许可证。换言之，如果不”分发”，就不需要遵守。</p>\n<p>简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的”人”也指”法人”，因此如果使用方是公司，且只在公司内<br>部使用，也不需要遵守许可证。</p>\n<p>云服务（SaaS）是否构成”分发”呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。</p>\n<h4><span id=\"52-开源软件的专利如何处理\">5.2 开源软件的专利如何处理？</span></h4><p>某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。</p>\n<p>另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。</p>\n<p>总得来说，除非有明确的”保留专利”的条款，使用开源软件都不会构成侵犯专利。</p>\n<h4><span id=\"53-什么是披露要求\">5.3 什么是披露要求？</span></h4><p>所有的开源许可证都带有”披露要求”（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。</p>\n<p>一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了”披露要求”。</p>\n<h4><span id=\"54-gpl-病毒是真的吗\">5.4 GPL 病毒是真的吗？</span></h4><p>GPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成”GPL 病毒”。</p>\n<p>很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。</p>\n<p>但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做”停止侵害”），而不会强制要求你将源码开源，因为《版权法》里面的”违约救济”没有提到违约者必须开源，只提到可以停止侵害和赔偿损失。</p>\n<h3><span id=\"六-原文\">六、原文</span></h3><p>本文由本人转载于 <a href=\"http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html\">http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html</a></p>\n<p>© 著作权归原作者所有</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81\">一、什么是开源许可证</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E7%9A%84%E7%A7%8D%E7%B1%BB\">二、开源许可证的种类</a></li>\n<li><a href=\"#%E4%B8%89-%E5%AE%BD%E6%9D%BE%E5%BC%8F%E8%AE%B8%E5%8F%AF%E8%AF%81\">三、宽松式许可证</a></li>\n<li><a href=\"#%E5%9B%9B-copyleft-%E8%AE%B8%E5%8F%AF%E8%AF%81\">四、Copyleft 许可证</a></li>\n<li><a href=\"#%E4%BA%94-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">五、常见问题</a></li>\n<li><a href=\"#%E5%85%AD-%E5%8E%9F%E6%96%87\">六、原文</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。</p>\n<p>许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/open-source-license-tutorial/1.jpg\" alt=\"配图\"></p>\n<h3 id=\"一、什么是开源许可证\"><a href=\"#一、什么是开源许可证\" class=\"headerlink\" title=\"一、什么是开源许可证\"></a>一、什么是开源许可证</h3><p>开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。</p>\n<p>版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。</p>\n<h3 id=\"二、开源许可证的种类\"><a href=\"#二、开源许可证的种类\" class=\"headerlink\" title=\"二、开源许可证的种类\"></a>二、开源许可证的种类</h3><p>目前，国际公认的开源许可证共有80多种。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。</p>\n<p>如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入”公共领域”（public domain）。</p>\n<p>根据使用条件的不同，开源许可证分成两大类。</p>\n<ul>\n<li>宽松式（permissive）许可证</li>\n<li>Copyleft 许可证</li>\n</ul>\n<h3 id=\"三、宽松式许可证\"><a href=\"#三、宽松式许可证\" class=\"headerlink\" title=\"三、宽松式许可证\"></a>三、宽松式许可证</h3><h4 id=\"3-1-特点\"><a href=\"#3-1-特点\" class=\"headerlink\" title=\"3.1 特点\"></a>3.1 特点</h4><p>宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。</p>\n<p>它有三个基本特点。</p>\n<p>（1）没有使用限制</p>\n<p>用户可以使用代码，做任何想做的事情。</p>\n<p>（2）没有担保</p>\n<p>不保证代码质量，用户自担风险。</p>\n<p>（3）披露要求（notice requirement）</p>\n<p>用户必须披露原始作者。</p>\n<h4 id=\"3-2-常见许可证\"><a href=\"#3-2-常见许可证\" class=\"headerlink\" title=\"3.2 常见许可证\"></a>3.2 常见许可证</h4><p>常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。</p>\n<p>（1）BSD（二条款版）</p>\n<p>分发软件时，必须保留原始的许可证声明。</p>\n<p>（2） BSD（三条款版）</p>\n<p>分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。</p>\n<p>（3）MIT</p>\n<p>分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。</p>\n<p>（4）Apache 2</p>\n<p>分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。</p>\n<h3 id=\"四、Copyleft-许可证\"><a href=\"#四、Copyleft-许可证\" class=\"headerlink\" title=\"四、Copyleft 许可证\"></a>四、Copyleft 许可证</h3><h4 id=\"4-1-Copyleft-的含义\"><a href=\"#4-1-Copyleft-的含义\" class=\"headerlink\" title=\"4.1 Copyleft 的含义\"></a>4.1 Copyleft 的含义</h4><p>Copyleft 是理查德·斯托曼发明的一个词，作为 Copyright （版权）的反义词。</p>\n<p>Copyright 直译是”复制权”，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。</p>\n<p>但是，它带有前提条件，比宽松式许可证的限制要多。</p>\n<ul>\n<li>如果分发二进制格式，必须提供源码</li>\n<li>修改后的源码，必须与修改前保持许可证一致</li>\n<li>不得在原始许可证以外，附加其他限制</li>\n</ul>\n<p>上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。</p>\n<h4 id=\"4-2-常见许可证\"><a href=\"#4-2-常见许可证\" class=\"headerlink\" title=\"4.2 常见许可证\"></a>4.2 常见许可证</h4><p>常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。</p>\n<p>（1）Affero GPL (AGPL)</p>\n<p>如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。</p>\n<p>（2）GPL</p>\n<p>如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。</p>\n<p>（3）LGPL</p>\n<p>如果项目采用动态链接调用该许可证的库，项目可以不用开源。</p>\n<p>（4）Mozilla（MPL）</p>\n<p>只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。</p>\n<h3 id=\"五、常见问题\"><a href=\"#五、常见问题\" class=\"headerlink\" title=\"五、常见问题\"></a>五、常见问题</h3><p>本节回答一些开源许可证的常见问题。</p>\n<h4 id=\"5-1-什么叫分发（distribution）？\"><a href=\"#5-1-什么叫分发（distribution）？\" class=\"headerlink\" title=\"5.1 什么叫分发（distribution）？\"></a>5.1 什么叫分发（distribution）？</h4><p>除了 Affero GPL (AGPL) ，其他许可证都规定只有在”分发”时，才需要遵守许可证。换言之，如果不”分发”，就不需要遵守。</p>\n<p>简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的”人”也指”法人”，因此如果使用方是公司，且只在公司内<br>部使用，也不需要遵守许可证。</p>\n<p>云服务（SaaS）是否构成”分发”呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。</p>\n<h4 id=\"5-2-开源软件的专利如何处理？\"><a href=\"#5-2-开源软件的专利如何处理？\" class=\"headerlink\" title=\"5.2 开源软件的专利如何处理？\"></a>5.2 开源软件的专利如何处理？</h4><p>某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。</p>\n<p>另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。</p>\n<p>总得来说，除非有明确的”保留专利”的条款，使用开源软件都不会构成侵犯专利。</p>\n<h4 id=\"5-3-什么是披露要求？\"><a href=\"#5-3-什么是披露要求？\" class=\"headerlink\" title=\"5.3 什么是披露要求？\"></a>5.3 什么是披露要求？</h4><p>所有的开源许可证都带有”披露要求”（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。</p>\n<p>一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了”披露要求”。</p>\n<h4 id=\"5-4-GPL-病毒是真的吗？\"><a href=\"#5-4-GPL-病毒是真的吗？\" class=\"headerlink\" title=\"5.4 GPL 病毒是真的吗？\"></a>5.4 GPL 病毒是真的吗？</h4><p>GPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成”GPL 病毒”。</p>\n<p>很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。</p>\n<p>但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做”停止侵害”），而不会强制要求你将源码开源，因为《版权法》里面的”违约救济”没有提到违约者必须开源，只提到可以停止侵害和赔偿损失。</p>\n<h3 id=\"六、原文\"><a href=\"#六、原文\" class=\"headerlink\" title=\"六、原文\"></a>六、原文</h3><p>本文由本人转载于 <a href=\"http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html\">http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html</a></p>\n<p>© 著作权归原作者所有</p>\n"},{"title":"package.json 中 npm 依赖包版本前的符号的意义","author":"Jelon","date":"2018-04-07T00:00:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/package-json/1.jpg","blogexcerpt":"版本的格式 major.minor.patch 主版本号.次版本号.修补版本号patch：修复bug，兼容老版本 minor：新增功能，兼容老版本 major：新的架构调整，不兼容老版本 version 必须匹配某个版本 如：1.1.2，表示必须依赖1.1.2版 >version 必须大于某个版本 如：>1.1.2，表示必须大于 1.1.2 版 >=version > 可大于或等于某个版本 如：>=1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本...","_content":"\n<!-- toc -->\n\n### 版本的格式\n\n> major.minor.patch \n> 主版本号.次版本号.修补版本号\n\n- patch：修复bug，兼容老版本\n- minor：新增功能，兼容老版本\n- major：新的架构调整，不兼容老版本\n \n### version\n\n> 必须匹配某个版本\n\n如：1.1.2，表示必须依赖 1.1.2 版\n \n### >version\n\n> 必须大于某个版本\n\n如：>1.1.2，表示必须大于 1.1.2 版\n \n### >=version\n\n> 可大于或等于某个版本\n\n如：>=1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本\n \n### <version\n\n> 必须小于某个版本 \n\n如：<1.1.2，表示必须小于 1.1.2 版本\n \n### <=version\n\n> 可以小于或等于某个版本\n\n如：<=1.1.2，表示可以等于 1.1.2，也可以小于 1.1.2 版本\n \n### ~version\n\n> 大概匹配某个版本\n\n> 如果 minor 版本号指定了，那么 minor 版本号不变，而 patch 版本号任意\n\n> 如果 minor 和 patch 版本号未指定，那么 minor 和 patch 版本号任意\n\n- 如：~1.1.2，表示 >=1.1.2 <1.2.0，可以是 1.1.2，1.1.3，1.1.4，.....，1.1.n \n- 如：~1.1，表示 >=1.1.0 <1.2.0，可以是同上\n- 如：~1，表示 >=1.0.0 <2.0.0，可以是 1.0.0，1.0.1，1.0.2，.....，1.0.n，1.1.n，1.2.n，.....，1.n.n\n \n### ^version\n\n> 兼容某个版本\n\n> 版本号中最左边的非 0 数字的右侧可以任意\n\n> 如果缺少某个版本号，则这个版本号的位置可以任意\n\n注：个人觉得，该规则和上一条提到的规则 `~version` 稍微有点难理解\n\n- 如：^1.1.2 ，表示 >=1.1.2 <2.0.0，可以是 1.1.2，1.1.3，.....，1.1.n，1.2.n，.....，1.n.n\n- 如：^0.2.3 ，表示 >=0.2.3 <0.3.0，可以是 0.2.3，0.2.4，.....，0.2.n\n- 如：^0.0，表示 >=0.0.0 <0.1.0，可以是 0.0.0，0.0.1，.....，0.0.n\n \n### x-range\n\n> x 的位置表示任意版本\n\n> 如：1.2.x，表示可以 1.2.0，1.2.1，.....，1.2.n\n \n#### *-range\n\n> 任意版本，\"\" 也表示任意版本\n\n如：*，表示 >=0.0.0 的任意版本\n \n### version1 - version2\n\n> 大于等于 version1，小于等于 version2\n\n如：1.1.2 - 1.3.1，表示包括 1.1.2 和 1.3.1 以及他们件的任意版本\n \n### range1 || range2\n\n> 满足 range1 或者满足 range2，可以多个范围\n\n如：<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0，表示满足这3个范围的版本都可以\n","source":"_posts/package-json.md","raw":"---\ntitle: package.json 中 npm 依赖包版本前的符号的意义\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2018-04-07\ntags:\n\t- npm\n\t- node\nthumbnail: https://jangdelong.github.io/blog_img/images/package-json/1.jpg\nblogexcerpt: 版本的格式 major.minor.patch 主版本号.次版本号.修补版本号patch：修复bug，兼容老版本 minor：新增功能，兼容老版本 major：新的架构调整，不兼容老版本 version 必须匹配某个版本 如：1.1.2，表示必须依赖1.1.2版 >version 必须大于某个版本 如：>1.1.2，表示必须大于 1.1.2 版 >=version > 可大于或等于某个版本 如：>=1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本...\n\n---\n\n<!-- toc -->\n\n### 版本的格式\n\n> major.minor.patch \n> 主版本号.次版本号.修补版本号\n\n- patch：修复bug，兼容老版本\n- minor：新增功能，兼容老版本\n- major：新的架构调整，不兼容老版本\n \n### version\n\n> 必须匹配某个版本\n\n如：1.1.2，表示必须依赖 1.1.2 版\n \n### >version\n\n> 必须大于某个版本\n\n如：>1.1.2，表示必须大于 1.1.2 版\n \n### >=version\n\n> 可大于或等于某个版本\n\n如：>=1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本\n \n### <version\n\n> 必须小于某个版本 \n\n如：<1.1.2，表示必须小于 1.1.2 版本\n \n### <=version\n\n> 可以小于或等于某个版本\n\n如：<=1.1.2，表示可以等于 1.1.2，也可以小于 1.1.2 版本\n \n### ~version\n\n> 大概匹配某个版本\n\n> 如果 minor 版本号指定了，那么 minor 版本号不变，而 patch 版本号任意\n\n> 如果 minor 和 patch 版本号未指定，那么 minor 和 patch 版本号任意\n\n- 如：~1.1.2，表示 >=1.1.2 <1.2.0，可以是 1.1.2，1.1.3，1.1.4，.....，1.1.n \n- 如：~1.1，表示 >=1.1.0 <1.2.0，可以是同上\n- 如：~1，表示 >=1.0.0 <2.0.0，可以是 1.0.0，1.0.1，1.0.2，.....，1.0.n，1.1.n，1.2.n，.....，1.n.n\n \n### ^version\n\n> 兼容某个版本\n\n> 版本号中最左边的非 0 数字的右侧可以任意\n\n> 如果缺少某个版本号，则这个版本号的位置可以任意\n\n注：个人觉得，该规则和上一条提到的规则 `~version` 稍微有点难理解\n\n- 如：^1.1.2 ，表示 >=1.1.2 <2.0.0，可以是 1.1.2，1.1.3，.....，1.1.n，1.2.n，.....，1.n.n\n- 如：^0.2.3 ，表示 >=0.2.3 <0.3.0，可以是 0.2.3，0.2.4，.....，0.2.n\n- 如：^0.0，表示 >=0.0.0 <0.1.0，可以是 0.0.0，0.0.1，.....，0.0.n\n \n### x-range\n\n> x 的位置表示任意版本\n\n> 如：1.2.x，表示可以 1.2.0，1.2.1，.....，1.2.n\n \n#### *-range\n\n> 任意版本，\"\" 也表示任意版本\n\n如：*，表示 >=0.0.0 的任意版本\n \n### version1 - version2\n\n> 大于等于 version1，小于等于 version2\n\n如：1.1.2 - 1.3.1，表示包括 1.1.2 和 1.3.1 以及他们件的任意版本\n \n### range1 || range2\n\n> 满足 range1 或者满足 range2，可以多个范围\n\n如：<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0，表示满足这3个范围的版本都可以\n","slug":"package-json","published":1,"updated":"2018-04-07T00:00:00.000Z","_id":"cmduj3n3y004ck8svgacr6q5w","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E7%9A%84%E6%A0%BC%E5%BC%8F\">版本的格式</a></li>\n<li><a href=\"#version\">version</a></li>\n<li><a href=\"#version\">&gt;version</a></li>\n<li><a href=\"#version\">&gt;&#x3D;version</a></li>\n<li><a href=\"#version\">&lt;version</a></li>\n<li><a href=\"#version\">&lt;&#x3D;version</a></li>\n<li><a href=\"#~version\">~version</a></li>\n<li><a href=\"#version\">^version</a></li>\n<li><a href=\"#x-range\">x-range</a></li>\n<li><a href=\"#version1-version2\">version1 - version2</a></li>\n<li><a href=\"#range1-range2\">range1 || range2</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"版本的格式\">版本的格式</span></h3><blockquote>\n<p>major.minor.patch<br>主版本号.次版本号.修补版本号</p>\n</blockquote>\n<ul>\n<li>patch：修复bug，兼容老版本</li>\n<li>minor：新增功能，兼容老版本</li>\n<li>major：新的架构调整，不兼容老版本</li>\n</ul>\n<h3><span id=\"version\">version</span></h3><blockquote>\n<p>必须匹配某个版本</p>\n</blockquote>\n<p>如：1.1.2，表示必须依赖 1.1.2 版</p>\n<h3><span id=\"gtversion\">&gt;version</span></h3><blockquote>\n<p>必须大于某个版本</p>\n</blockquote>\n<p>如：&gt;1.1.2，表示必须大于 1.1.2 版</p>\n<h3><span id=\"gtx3dversion\">&gt;&#x3D;version</span></h3><blockquote>\n<p>可大于或等于某个版本</p>\n</blockquote>\n<p>如：&gt;&#x3D;1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本</p>\n<h3><span id=\"ltversion\">&lt;version</span></h3><blockquote>\n<p>必须小于某个版本 </p>\n</blockquote>\n<p>如：&lt;1.1.2，表示必须小于 1.1.2 版本</p>\n<h3><span id=\"ltx3dversion\">&lt;&#x3D;version</span></h3><blockquote>\n<p>可以小于或等于某个版本</p>\n</blockquote>\n<p>如：&lt;&#x3D;1.1.2，表示可以等于 1.1.2，也可以小于 1.1.2 版本</p>\n<h3><span id=\"~version\">~version</span></h3><blockquote>\n<p>大概匹配某个版本</p>\n</blockquote>\n<blockquote>\n<p>如果 minor 版本号指定了，那么 minor 版本号不变，而 patch 版本号任意</p>\n</blockquote>\n<blockquote>\n<p>如果 minor 和 patch 版本号未指定，那么 minor 和 patch 版本号任意</p>\n</blockquote>\n<ul>\n<li>如：~1.1.2，表示 &gt;&#x3D;1.1.2 &lt;1.2.0，可以是 1.1.2，1.1.3，1.1.4，…..，1.1.n </li>\n<li>如：~1.1，表示 &gt;&#x3D;1.1.0 &lt;1.2.0，可以是同上</li>\n<li>如：~1，表示 &gt;&#x3D;1.0.0 &lt;2.0.0，可以是 1.0.0，1.0.1，1.0.2，…..，1.0.n，1.1.n，1.2.n，…..，1.n.n</li>\n</ul>\n<h3><span id=\"version\">^version</span></h3><blockquote>\n<p>兼容某个版本</p>\n</blockquote>\n<blockquote>\n<p>版本号中最左边的非 0 数字的右侧可以任意</p>\n</blockquote>\n<blockquote>\n<p>如果缺少某个版本号，则这个版本号的位置可以任意</p>\n</blockquote>\n<p>注：个人觉得，该规则和上一条提到的规则 <code>~version</code> 稍微有点难理解</p>\n<ul>\n<li>如：^1.1.2 ，表示 &gt;&#x3D;1.1.2 &lt;2.0.0，可以是 1.1.2，1.1.3，…..，1.1.n，1.2.n，…..，1.n.n</li>\n<li>如：^0.2.3 ，表示 &gt;&#x3D;0.2.3 &lt;0.3.0，可以是 0.2.3，0.2.4，…..，0.2.n</li>\n<li>如：^0.0，表示 &gt;&#x3D;0.0.0 &lt;0.1.0，可以是 0.0.0，0.0.1，…..，0.0.n</li>\n</ul>\n<h3><span id=\"x-range\">x-range</span></h3><blockquote>\n<p>x 的位置表示任意版本</p>\n</blockquote>\n<blockquote>\n<p>如：1.2.x，表示可以 1.2.0，1.2.1，…..，1.2.n</p>\n</blockquote>\n<h4><span id=\"-range\">*-range</span></h4><blockquote>\n<p>任意版本，”” 也表示任意版本</p>\n</blockquote>\n<p>如：*，表示 &gt;&#x3D;0.0.0 的任意版本</p>\n<h3><span id=\"version1-version2\">version1 - version2</span></h3><blockquote>\n<p>大于等于 version1，小于等于 version2</p>\n</blockquote>\n<p>如：1.1.2 - 1.3.1，表示包括 1.1.2 和 1.3.1 以及他们件的任意版本</p>\n<h3><span id=\"range1-range2\">range1 || range2</span></h3><blockquote>\n<p>满足 range1 或者满足 range2，可以多个范围</p>\n</blockquote>\n<p>如：&lt;1.0.0 || &gt;&#x3D;2.3.1 &lt;2.4.5 || &gt;&#x3D;2.5.2 &lt;3.0.0，表示满足这3个范围的版本都可以</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%89%88%E6%9C%AC%E7%9A%84%E6%A0%BC%E5%BC%8F\">版本的格式</a></li>\n<li><a href=\"#version\">version</a></li>\n<li><a href=\"#version\">&gt;version</a></li>\n<li><a href=\"#version\">&gt;&#x3D;version</a></li>\n<li><a href=\"#version\">&lt;version</a></li>\n<li><a href=\"#version\">&lt;&#x3D;version</a></li>\n<li><a href=\"#~version\">~version</a></li>\n<li><a href=\"#version\">^version</a></li>\n<li><a href=\"#x-range\">x-range</a></li>\n<li><a href=\"#version1-version2\">version1 - version2</a></li>\n<li><a href=\"#range1-range2\">range1 || range2</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"版本的格式\"><a href=\"#版本的格式\" class=\"headerlink\" title=\"版本的格式\"></a>版本的格式</h3><blockquote>\n<p>major.minor.patch<br>主版本号.次版本号.修补版本号</p>\n</blockquote>\n<ul>\n<li>patch：修复bug，兼容老版本</li>\n<li>minor：新增功能，兼容老版本</li>\n<li>major：新的架构调整，不兼容老版本</li>\n</ul>\n<h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><blockquote>\n<p>必须匹配某个版本</p>\n</blockquote>\n<p>如：1.1.2，表示必须依赖 1.1.2 版</p>\n<h3 id=\"version-1\"><a href=\"#version-1\" class=\"headerlink\" title=\"&gt;version\"></a>&gt;version</h3><blockquote>\n<p>必须大于某个版本</p>\n</blockquote>\n<p>如：&gt;1.1.2，表示必须大于 1.1.2 版</p>\n<h3 id=\"version-2\"><a href=\"#version-2\" class=\"headerlink\" title=\"&gt;&#x3D;version\"></a>&gt;&#x3D;version</h3><blockquote>\n<p>可大于或等于某个版本</p>\n</blockquote>\n<p>如：&gt;&#x3D;1.1.2，表示可以等于 1.1.2，也可以大于 1.1.2 版本</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&lt;version\"></a>&lt;version</h3><blockquote>\n<p>必须小于某个版本 </p>\n</blockquote>\n<p>如：&lt;1.1.2，表示必须小于 1.1.2 版本</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"&lt;&#x3D;version\"></a>&lt;&#x3D;version</h3><blockquote>\n<p>可以小于或等于某个版本</p>\n</blockquote>\n<p>如：&lt;&#x3D;1.1.2，表示可以等于 1.1.2，也可以小于 1.1.2 版本</p>\n<h3 id=\"version-3\"><a href=\"#version-3\" class=\"headerlink\" title=\"~version\"></a>~version</h3><blockquote>\n<p>大概匹配某个版本</p>\n</blockquote>\n<blockquote>\n<p>如果 minor 版本号指定了，那么 minor 版本号不变，而 patch 版本号任意</p>\n</blockquote>\n<blockquote>\n<p>如果 minor 和 patch 版本号未指定，那么 minor 和 patch 版本号任意</p>\n</blockquote>\n<ul>\n<li>如：~1.1.2，表示 &gt;&#x3D;1.1.2 &lt;1.2.0，可以是 1.1.2，1.1.3，1.1.4，…..，1.1.n </li>\n<li>如：~1.1，表示 &gt;&#x3D;1.1.0 &lt;1.2.0，可以是同上</li>\n<li>如：~1，表示 &gt;&#x3D;1.0.0 &lt;2.0.0，可以是 1.0.0，1.0.1，1.0.2，…..，1.0.n，1.1.n，1.2.n，…..，1.n.n</li>\n</ul>\n<h3 id=\"version-4\"><a href=\"#version-4\" class=\"headerlink\" title=\"^version\"></a>^version</h3><blockquote>\n<p>兼容某个版本</p>\n</blockquote>\n<blockquote>\n<p>版本号中最左边的非 0 数字的右侧可以任意</p>\n</blockquote>\n<blockquote>\n<p>如果缺少某个版本号，则这个版本号的位置可以任意</p>\n</blockquote>\n<p>注：个人觉得，该规则和上一条提到的规则 <code>~version</code> 稍微有点难理解</p>\n<ul>\n<li>如：^1.1.2 ，表示 &gt;&#x3D;1.1.2 &lt;2.0.0，可以是 1.1.2，1.1.3，…..，1.1.n，1.2.n，…..，1.n.n</li>\n<li>如：^0.2.3 ，表示 &gt;&#x3D;0.2.3 &lt;0.3.0，可以是 0.2.3，0.2.4，…..，0.2.n</li>\n<li>如：^0.0，表示 &gt;&#x3D;0.0.0 &lt;0.1.0，可以是 0.0.0，0.0.1，…..，0.0.n</li>\n</ul>\n<h3 id=\"x-range\"><a href=\"#x-range\" class=\"headerlink\" title=\"x-range\"></a>x-range</h3><blockquote>\n<p>x 的位置表示任意版本</p>\n</blockquote>\n<blockquote>\n<p>如：1.2.x，表示可以 1.2.0，1.2.1，…..，1.2.n</p>\n</blockquote>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"*-range\"></a>*-range</h4><blockquote>\n<p>任意版本，”” 也表示任意版本</p>\n</blockquote>\n<p>如：*，表示 &gt;&#x3D;0.0.0 的任意版本</p>\n<h3 id=\"version1-version2\"><a href=\"#version1-version2\" class=\"headerlink\" title=\"version1 - version2\"></a>version1 - version2</h3><blockquote>\n<p>大于等于 version1，小于等于 version2</p>\n</blockquote>\n<p>如：1.1.2 - 1.3.1，表示包括 1.1.2 和 1.3.1 以及他们件的任意版本</p>\n<h3 id=\"range1-range2\"><a href=\"#range1-range2\" class=\"headerlink\" title=\"range1 || range2\"></a>range1 || range2</h3><blockquote>\n<p>满足 range1 或者满足 range2，可以多个范围</p>\n</blockquote>\n<p>如：&lt;1.0.0 || &gt;&#x3D;2.3.1 &lt;2.4.5 || &gt;&#x3D;2.5.2 &lt;3.0.0，表示满足这3个范围的版本都可以</p>\n"},{"title":"为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库","author":"Jelon","date":"2025-03-15T00:22:48.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png","blogexcerpt":"最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；...","_content":"\n<!-- toc -->\n\n## 一、背景\n\n最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：\n\n1. 不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；\n2. 使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；\n3. 现有组件库工程（所使用的工具链为 yarn + lerna）发包时会出现 401 鉴权问题，甚至有时连安装依赖包也有问题。\n\n基于以上三个问题，我们做了一些尝试：\n\n1. 将 yarn 从 1.x 升级到 2.x，也就是说 yarn 2.x + lerna，不行；❌\n2. 将 yarn 改成 pnpm，使用 pnpm + lerna 组合，也出现了一些问题；❌\n3. 将 yarn + lerna 组合改成 pnpm + workspace + [pnpm publish]，成功。✅\n\n最后，我们决定彻底地将 yarn + lerna 组合切换成 pnpm + workspace + changesets 。\n\n## 二、什么是 pnpm ？\n\npnpm 是新一代的包管理工具，是目前较为先进的包管理器。按照官网说法，可以实现节约磁盘空间并提升安装速度和创建非扁平化的 node_modules 文件夹两大目标，具体原理可以参考 pnpm 官网。\n\n以下是官方给的一张关于 pnpm 的原理图：\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png)\n\n所以，综合上图，我就现在知道 pnpm 为什么说是先进的包管理器了吧。\n\n首先，最大的优点是节省磁盘空间，一个包全局只保存一份，剩下的都是软硬连接，这必然节省不少磁盘空间，并且使用软链接的方式创建非扁平的 node_modules 嵌套关系。\n\n其次就是快，因为通过链接的方式而不是复制，自然会快。\n\n## 三、pnpm 对比 npm/yarn 有什么优势？\n\n1. 速度快\n\npnpm 安装包的速度究竟有多快？先以 React 包为例来对比一下:\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/2.webp)\n\n可以看到，作为黄色部分的 pnpm，在绝多大数场景下，包安装的速度都是明显优于 npm/yarn，速度会比 npm/yarn 快 2-3 倍。\n\n对 yarn 比较熟悉的同学可能会说，yarn 不是有 PnP 安装模式吗？直接去掉 node_modules，将依赖包内容写在磁盘，节省了 node 文件 I/O 的开销，这样也能提升安装速度。\n\n接下来，我们以这样一个仓库为例，我们来看一看 benchmark 数据，主要对比一下 pnpm 和 yarn PnP:\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/3.webp)\n\n从中可以看到，总体而言，pnpm 的包安装速度还是明显优于 yarn PnP 的。\n\n2. 高效利用磁盘空间\n\npnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这个文件系统出色的地方在于:\n\n- 不会重复安装同一个包。用 npm/yarn 的时候，如果 100 个项目都依赖 lodash，那么 lodash 很可能就被安装了 100 次，磁盘中就有 100 个地方写入了这部分代码。但在使用 pnpm 只会安装一次，磁盘中只有一个地方写入，后面再次使用都会直接使用 hardlink（硬链接）。\n- 即使一个包的不同版本，pnpm 也会极大程度地复用之前版本的代码。举个例子，比如 lodash 有 100 个文件，更新版本之后多了一个文件，那么磁盘当中并不会重新写入 101 个文件，而是保留原来的 100 个文件的 hardlink，仅仅写入那一个新增的文件。\n\n3. 支持 monorepo\n\n随着前端工程的日益复杂，越来越多的项目开始使用 monorepo。之前对于多个项目的管理，我们一般都是使用多个 git 仓库，但 monorepo 的宗旨就是用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的 packages 目录下，那么一个子项目就代表一个 package。\n\npnpm 与 npm/yarn 另外一个很大的不同就是支持了 monorepo，体现在各个子命令的功能上，比如在根目录下 `pnpm add A -r`, 那么所有的 package 中都会被添加 A 这个依赖，当然也支持 `--filter` 字段来对 package 进行过滤。\n\npnpm 通过 pnpm-workspace.yaml 配置定义工作空间目录，并能够使您从工作空间中包含 / 排除目录。\n\n4. 安全性高\n\n之前在使用 npm/yarn 的时候，由于 node_modules 的扁平结构，如果 A 依赖 B， B 依赖 C，那么 A 当中是可以直接使用 C 的，但问题是 A 当中并没有声明 C 这个依赖。因此会出现这种非法访问的情况。但 pnpm 脑洞特别大，自创了一套依赖管理方式，很好地解决了这个问题，保证了安全性，具体怎么体现安全、规避非法访问依赖的风险的，主要表现为幽灵依赖。\n\n小结\n\n总而言之，pnpm 与 npm/yarn 比较，可以通过以下表格总结出来。\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/4.png)\n\n## 四、什么是 changesets ？\n\n在 workspace 中对包版本管理是一个非常复杂的工作，原来 yarn 还可以使用 lerna，遗憾的是 pnpm 没有提供内置的解决方案，一部分开源项目在自己的项目中自己实现了一套包版本的管理机制，比如 Vue3、Vite等。\n\npnpm 推荐了两个开源的版本控制工具：\n\n- changesets\n- rush\n\n这里我们采用了 changesets 来做依赖包的管理。选用 changesets 的主要原因还是文档更加清晰一些，感觉上手比较容易。\n\n按照 changesets 文档介绍的，changesets 主要是做了两件事：\n\n> Changesets hold two key bits of information: a version type (following semver), and change information to be added to a changelog.\n\n简而言之就是管理包的 version 和生成 changelog。\n\n## 五、为什么要使用 changesets ？\n\n1. lerna 发包方案缺陷\n\n早期我们的组件库版本中采用了 lerna 这一套的发包方案，但随着频繁的使用和深入的研究发现，这套方案随之带来了不少问题：\n\n- ignoreChanges 不能做到文件的完全忽略，存在优先级问题；\n- lerna version 根据 commit 以及 tag 更新出来的包版本不符合预期；\n- 生成的 CHANGELOG 文件信息不完整；\n- lifecycle scripts 经常命中一些用户自定义的 script（例如 publish 等）；\n- CI 中自动化发包场景需要很高的定制成本；\n- lerna 本身不支持 workspace 协议，导致基于 pnpm 开发的一些仓库无法使用。\n\n2. changesets 的基本工作流程及优势\n\nChangesets 提供了简单、轻量的版本控制和发布方案，其工作流原理如下。\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/5.webp)\n\n\n整个流程可以理解为四部曲：\n\n第一步，`changeset init`。通过执行执行该命令，可以在项目根目录下生成一个 `.changeset` 目录，里面会生成一个 changesets 的 config 文件，一般项目初始化时，执行一遍即可，后续不用再执行该操作。\n\n第二步，`changeset add` 或者 `changeset`。`add` 在 changesets 中算得上比较关键的命令之一了，它会根据 monorepo下的项目来生成一个 changeset 文件，里面会包含前面提到的 changeset 文件信息(更新包名称、版本层级、CHANGELOG 信息。\n\n第三步，`changeset version`。 这个命令这里可以当作 `Bump Version`（版本号升级或更新操作）来理解，这里本质上做的工作是消耗 changesets 文件并且修改对应包版本以及依赖该包的包版本，同时会根据之前 changeset 文件里面的信息来生成对应的 CHANGELOG 信息。\n\n第四步，`changeset publish`。本质上就是对 `npm publish` 做了一次封装，同时会检查对应的 registry 上有没有对应包的版本，如果已经存在了，就不会再发包了，如果不存在会对对应的包版本执行一次 `npm publish`。\n\n另外，changesets 支持 `pre 版本` 和 `非 pre 版本` 的操作切换，需要在第二步之前执行 `changeset pre enter`、`changeset pre exit` 等操作。\n\n小结\n\n总而言之，主要优点在于提供了很大的自主权在使用者手中，在复杂的业务场景下能够做出一些合适的调整，例如用户可以自行修改 changesets 文件、changelog 文件、甚至是 Bump Version 后不满意的版本。\n\n相比较于 lerna 提供的比较理想化的方案而言，changeset 本身是一套泛用性很强的方案，而且比较适合当下 monorepo 工作流场景下的一些运作方式，虽然本身还存在着不少的缺点 。\n\n## 总结\n\n综上所述，为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库，可以总结为以下几个点。\n\n1. 使用 pnpm 解决私服开启鉴权带来的一些非常重要的影响和变化；\n2. 充分利用 pnpm 不可替代的速度快、高效利用磁盘空间、天然支持 monorepo（支持 workspace 配置）、 安全性高（比如解决幽灵依赖问题、node_modules 嵌套过深问题）等优势；\n3. changesets 带来更加简单、更加轻量的版本控制和发布方案，使得版本管理及发布流程更多的自主权掌握在使用者手中。\n","source":"_posts/pnpm-workspace-changesets.md","raw":"title: 为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库\nauthor: Jelon\ncategories:\n  - Web技术\ndate: 2025-03-15 00:22:48\ntags:\n  - pnpm\n  - monorepo\n  - changesets\nthumbnail: https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png\nblogexcerpt: 最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；...\n\n---\n\n<!-- toc -->\n\n## 一、背景\n\n最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：\n\n1. 不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；\n2. 使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；\n3. 现有组件库工程（所使用的工具链为 yarn + lerna）发包时会出现 401 鉴权问题，甚至有时连安装依赖包也有问题。\n\n基于以上三个问题，我们做了一些尝试：\n\n1. 将 yarn 从 1.x 升级到 2.x，也就是说 yarn 2.x + lerna，不行；❌\n2. 将 yarn 改成 pnpm，使用 pnpm + lerna 组合，也出现了一些问题；❌\n3. 将 yarn + lerna 组合改成 pnpm + workspace + [pnpm publish]，成功。✅\n\n最后，我们决定彻底地将 yarn + lerna 组合切换成 pnpm + workspace + changesets 。\n\n## 二、什么是 pnpm ？\n\npnpm 是新一代的包管理工具，是目前较为先进的包管理器。按照官网说法，可以实现节约磁盘空间并提升安装速度和创建非扁平化的 node_modules 文件夹两大目标，具体原理可以参考 pnpm 官网。\n\n以下是官方给的一张关于 pnpm 的原理图：\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png)\n\n所以，综合上图，我就现在知道 pnpm 为什么说是先进的包管理器了吧。\n\n首先，最大的优点是节省磁盘空间，一个包全局只保存一份，剩下的都是软硬连接，这必然节省不少磁盘空间，并且使用软链接的方式创建非扁平的 node_modules 嵌套关系。\n\n其次就是快，因为通过链接的方式而不是复制，自然会快。\n\n## 三、pnpm 对比 npm/yarn 有什么优势？\n\n1. 速度快\n\npnpm 安装包的速度究竟有多快？先以 React 包为例来对比一下:\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/2.webp)\n\n可以看到，作为黄色部分的 pnpm，在绝多大数场景下，包安装的速度都是明显优于 npm/yarn，速度会比 npm/yarn 快 2-3 倍。\n\n对 yarn 比较熟悉的同学可能会说，yarn 不是有 PnP 安装模式吗？直接去掉 node_modules，将依赖包内容写在磁盘，节省了 node 文件 I/O 的开销，这样也能提升安装速度。\n\n接下来，我们以这样一个仓库为例，我们来看一看 benchmark 数据，主要对比一下 pnpm 和 yarn PnP:\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/3.webp)\n\n从中可以看到，总体而言，pnpm 的包安装速度还是明显优于 yarn PnP 的。\n\n2. 高效利用磁盘空间\n\npnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这个文件系统出色的地方在于:\n\n- 不会重复安装同一个包。用 npm/yarn 的时候，如果 100 个项目都依赖 lodash，那么 lodash 很可能就被安装了 100 次，磁盘中就有 100 个地方写入了这部分代码。但在使用 pnpm 只会安装一次，磁盘中只有一个地方写入，后面再次使用都会直接使用 hardlink（硬链接）。\n- 即使一个包的不同版本，pnpm 也会极大程度地复用之前版本的代码。举个例子，比如 lodash 有 100 个文件，更新版本之后多了一个文件，那么磁盘当中并不会重新写入 101 个文件，而是保留原来的 100 个文件的 hardlink，仅仅写入那一个新增的文件。\n\n3. 支持 monorepo\n\n随着前端工程的日益复杂，越来越多的项目开始使用 monorepo。之前对于多个项目的管理，我们一般都是使用多个 git 仓库，但 monorepo 的宗旨就是用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的 packages 目录下，那么一个子项目就代表一个 package。\n\npnpm 与 npm/yarn 另外一个很大的不同就是支持了 monorepo，体现在各个子命令的功能上，比如在根目录下 `pnpm add A -r`, 那么所有的 package 中都会被添加 A 这个依赖，当然也支持 `--filter` 字段来对 package 进行过滤。\n\npnpm 通过 pnpm-workspace.yaml 配置定义工作空间目录，并能够使您从工作空间中包含 / 排除目录。\n\n4. 安全性高\n\n之前在使用 npm/yarn 的时候，由于 node_modules 的扁平结构，如果 A 依赖 B， B 依赖 C，那么 A 当中是可以直接使用 C 的，但问题是 A 当中并没有声明 C 这个依赖。因此会出现这种非法访问的情况。但 pnpm 脑洞特别大，自创了一套依赖管理方式，很好地解决了这个问题，保证了安全性，具体怎么体现安全、规避非法访问依赖的风险的，主要表现为幽灵依赖。\n\n小结\n\n总而言之，pnpm 与 npm/yarn 比较，可以通过以下表格总结出来。\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/4.png)\n\n## 四、什么是 changesets ？\n\n在 workspace 中对包版本管理是一个非常复杂的工作，原来 yarn 还可以使用 lerna，遗憾的是 pnpm 没有提供内置的解决方案，一部分开源项目在自己的项目中自己实现了一套包版本的管理机制，比如 Vue3、Vite等。\n\npnpm 推荐了两个开源的版本控制工具：\n\n- changesets\n- rush\n\n这里我们采用了 changesets 来做依赖包的管理。选用 changesets 的主要原因还是文档更加清晰一些，感觉上手比较容易。\n\n按照 changesets 文档介绍的，changesets 主要是做了两件事：\n\n> Changesets hold two key bits of information: a version type (following semver), and change information to be added to a changelog.\n\n简而言之就是管理包的 version 和生成 changelog。\n\n## 五、为什么要使用 changesets ？\n\n1. lerna 发包方案缺陷\n\n早期我们的组件库版本中采用了 lerna 这一套的发包方案，但随着频繁的使用和深入的研究发现，这套方案随之带来了不少问题：\n\n- ignoreChanges 不能做到文件的完全忽略，存在优先级问题；\n- lerna version 根据 commit 以及 tag 更新出来的包版本不符合预期；\n- 生成的 CHANGELOG 文件信息不完整；\n- lifecycle scripts 经常命中一些用户自定义的 script（例如 publish 等）；\n- CI 中自动化发包场景需要很高的定制成本；\n- lerna 本身不支持 workspace 协议，导致基于 pnpm 开发的一些仓库无法使用。\n\n2. changesets 的基本工作流程及优势\n\nChangesets 提供了简单、轻量的版本控制和发布方案，其工作流原理如下。\n\n![pnpm 原理图](https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/5.webp)\n\n\n整个流程可以理解为四部曲：\n\n第一步，`changeset init`。通过执行执行该命令，可以在项目根目录下生成一个 `.changeset` 目录，里面会生成一个 changesets 的 config 文件，一般项目初始化时，执行一遍即可，后续不用再执行该操作。\n\n第二步，`changeset add` 或者 `changeset`。`add` 在 changesets 中算得上比较关键的命令之一了，它会根据 monorepo下的项目来生成一个 changeset 文件，里面会包含前面提到的 changeset 文件信息(更新包名称、版本层级、CHANGELOG 信息。\n\n第三步，`changeset version`。 这个命令这里可以当作 `Bump Version`（版本号升级或更新操作）来理解，这里本质上做的工作是消耗 changesets 文件并且修改对应包版本以及依赖该包的包版本，同时会根据之前 changeset 文件里面的信息来生成对应的 CHANGELOG 信息。\n\n第四步，`changeset publish`。本质上就是对 `npm publish` 做了一次封装，同时会检查对应的 registry 上有没有对应包的版本，如果已经存在了，就不会再发包了，如果不存在会对对应的包版本执行一次 `npm publish`。\n\n另外，changesets 支持 `pre 版本` 和 `非 pre 版本` 的操作切换，需要在第二步之前执行 `changeset pre enter`、`changeset pre exit` 等操作。\n\n小结\n\n总而言之，主要优点在于提供了很大的自主权在使用者手中，在复杂的业务场景下能够做出一些合适的调整，例如用户可以自行修改 changesets 文件、changelog 文件、甚至是 Bump Version 后不满意的版本。\n\n相比较于 lerna 提供的比较理想化的方案而言，changeset 本身是一套泛用性很强的方案，而且比较适合当下 monorepo 工作流场景下的一些运作方式，虽然本身还存在着不少的缺点 。\n\n## 总结\n\n综上所述，为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库，可以总结为以下几个点。\n\n1. 使用 pnpm 解决私服开启鉴权带来的一些非常重要的影响和变化；\n2. 充分利用 pnpm 不可替代的速度快、高效利用磁盘空间、天然支持 monorepo（支持 workspace 配置）、 安全性高（比如解决幽灵依赖问题、node_modules 嵌套过深问题）等优势；\n3. changesets 带来更加简单、更加轻量的版本控制和发布方案，使得版本管理及发布流程更多的自主权掌握在使用者手中。\n","slug":"pnpm-workspace-changesets","published":1,"updated":"2025-03-15T00:22:48.000Z","_id":"cmduj3n3z004ek8svhwpghsqx","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E8%83%8C%E6%99%AF\">一、背景</a></li>\n<li><a href=\"#%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-pnpm\">二、什么是 pnpm ？</a></li>\n<li><a href=\"#%E4%B8%89-pnpm-%E5%AF%B9%E6%AF%94-npmyarn-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF\">三、pnpm 对比 npm&#x2F;yarn 有什么优势？</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BB%80%E4%B9%88%E6%98%AF-changesets\">四、什么是 changesets ？</a></li>\n<li><a href=\"#%E4%BA%94-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-changesets\">五、为什么要使用 changesets ？</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h2><span id=\"一-背景\">一、背景</span></h2><p>最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：</p>\n<ol>\n<li>不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；</li>\n<li>使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；</li>\n<li>现有组件库工程（所使用的工具链为 yarn + lerna）发包时会出现 401 鉴权问题，甚至有时连安装依赖包也有问题。</li>\n</ol>\n<p>基于以上三个问题，我们做了一些尝试：</p>\n<ol>\n<li>将 yarn 从 1.x 升级到 2.x，也就是说 yarn 2.x + lerna，不行；❌</li>\n<li>将 yarn 改成 pnpm，使用 pnpm + lerna 组合，也出现了一些问题；❌</li>\n<li>将 yarn + lerna 组合改成 pnpm + workspace + [pnpm publish]，成功。✅</li>\n</ol>\n<p>最后，我们决定彻底地将 yarn + lerna 组合切换成 pnpm + workspace + changesets 。</p>\n<h2><span id=\"二-什么是-pnpm\">二、什么是 pnpm ？</span></h2><p>pnpm 是新一代的包管理工具，是目前较为先进的包管理器。按照官网说法，可以实现节约磁盘空间并提升安装速度和创建非扁平化的 node_modules 文件夹两大目标，具体原理可以参考 pnpm 官网。</p>\n<p>以下是官方给的一张关于 pnpm 的原理图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png\" alt=\"pnpm 原理图\"></p>\n<p>所以，综合上图，我就现在知道 pnpm 为什么说是先进的包管理器了吧。</p>\n<p>首先，最大的优点是节省磁盘空间，一个包全局只保存一份，剩下的都是软硬连接，这必然节省不少磁盘空间，并且使用软链接的方式创建非扁平的 node_modules 嵌套关系。</p>\n<p>其次就是快，因为通过链接的方式而不是复制，自然会快。</p>\n<h2><span id=\"三-pnpm-对比-npmx2fyarn-有什么优势\">三、pnpm 对比 npm&#x2F;yarn 有什么优势？</span></h2><ol>\n<li>速度快</li>\n</ol>\n<p>pnpm 安装包的速度究竟有多快？先以 React 包为例来对比一下:</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/2.webp\" alt=\"pnpm 原理图\"></p>\n<p>可以看到，作为黄色部分的 pnpm，在绝多大数场景下，包安装的速度都是明显优于 npm&#x2F;yarn，速度会比 npm&#x2F;yarn 快 2-3 倍。</p>\n<p>对 yarn 比较熟悉的同学可能会说，yarn 不是有 PnP 安装模式吗？直接去掉 node_modules，将依赖包内容写在磁盘，节省了 node 文件 I&#x2F;O 的开销，这样也能提升安装速度。</p>\n<p>接下来，我们以这样一个仓库为例，我们来看一看 benchmark 数据，主要对比一下 pnpm 和 yarn PnP:</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/3.webp\" alt=\"pnpm 原理图\"></p>\n<p>从中可以看到，总体而言，pnpm 的包安装速度还是明显优于 yarn PnP 的。</p>\n<ol start=\"2\">\n<li>高效利用磁盘空间</li>\n</ol>\n<p>pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这个文件系统出色的地方在于:</p>\n<ul>\n<li>不会重复安装同一个包。用 npm&#x2F;yarn 的时候，如果 100 个项目都依赖 lodash，那么 lodash 很可能就被安装了 100 次，磁盘中就有 100 个地方写入了这部分代码。但在使用 pnpm 只会安装一次，磁盘中只有一个地方写入，后面再次使用都会直接使用 hardlink（硬链接）。</li>\n<li>即使一个包的不同版本，pnpm 也会极大程度地复用之前版本的代码。举个例子，比如 lodash 有 100 个文件，更新版本之后多了一个文件，那么磁盘当中并不会重新写入 101 个文件，而是保留原来的 100 个文件的 hardlink，仅仅写入那一个新增的文件。</li>\n</ul>\n<ol start=\"3\">\n<li>支持 monorepo</li>\n</ol>\n<p>随着前端工程的日益复杂，越来越多的项目开始使用 monorepo。之前对于多个项目的管理，我们一般都是使用多个 git 仓库，但 monorepo 的宗旨就是用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的 packages 目录下，那么一个子项目就代表一个 package。</p>\n<p>pnpm 与 npm&#x2F;yarn 另外一个很大的不同就是支持了 monorepo，体现在各个子命令的功能上，比如在根目录下 <code>pnpm add A -r</code>, 那么所有的 package 中都会被添加 A 这个依赖，当然也支持 <code>--filter</code> 字段来对 package 进行过滤。</p>\n<p>pnpm 通过 pnpm-workspace.yaml 配置定义工作空间目录，并能够使您从工作空间中包含 &#x2F; 排除目录。</p>\n<ol start=\"4\">\n<li>安全性高</li>\n</ol>\n<p>之前在使用 npm&#x2F;yarn 的时候，由于 node_modules 的扁平结构，如果 A 依赖 B， B 依赖 C，那么 A 当中是可以直接使用 C 的，但问题是 A 当中并没有声明 C 这个依赖。因此会出现这种非法访问的情况。但 pnpm 脑洞特别大，自创了一套依赖管理方式，很好地解决了这个问题，保证了安全性，具体怎么体现安全、规避非法访问依赖的风险的，主要表现为幽灵依赖。</p>\n<p>小结</p>\n<p>总而言之，pnpm 与 npm&#x2F;yarn 比较，可以通过以下表格总结出来。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/4.png\" alt=\"pnpm 原理图\"></p>\n<h2><span id=\"四-什么是-changesets\">四、什么是 changesets ？</span></h2><p>在 workspace 中对包版本管理是一个非常复杂的工作，原来 yarn 还可以使用 lerna，遗憾的是 pnpm 没有提供内置的解决方案，一部分开源项目在自己的项目中自己实现了一套包版本的管理机制，比如 Vue3、Vite等。</p>\n<p>pnpm 推荐了两个开源的版本控制工具：</p>\n<ul>\n<li>changesets</li>\n<li>rush</li>\n</ul>\n<p>这里我们采用了 changesets 来做依赖包的管理。选用 changesets 的主要原因还是文档更加清晰一些，感觉上手比较容易。</p>\n<p>按照 changesets 文档介绍的，changesets 主要是做了两件事：</p>\n<blockquote>\n<p>Changesets hold two key bits of information: a version type (following semver), and change information to be added to a changelog.</p>\n</blockquote>\n<p>简而言之就是管理包的 version 和生成 changelog。</p>\n<h2><span id=\"五-为什么要使用-changesets\">五、为什么要使用 changesets ？</span></h2><p>1. lerna 发包方案缺陷</p>\n<p>早期我们的组件库版本中采用了 lerna 这一套的发包方案，但随着频繁的使用和深入的研究发现，这套方案随之带来了不少问题：</p>\n<ul>\n<li>ignoreChanges 不能做到文件的完全忽略，存在优先级问题；</li>\n<li>lerna version 根据 commit 以及 tag 更新出来的包版本不符合预期；</li>\n<li>生成的 CHANGELOG 文件信息不完整；</li>\n<li>lifecycle scripts 经常命中一些用户自定义的 script（例如 publish 等）；</li>\n<li>CI 中自动化发包场景需要很高的定制成本；</li>\n<li>lerna 本身不支持 workspace 协议，导致基于 pnpm 开发的一些仓库无法使用。</li>\n</ul>\n<p>2. changesets 的基本工作流程及优势</p>\n<p>Changesets 提供了简单、轻量的版本控制和发布方案，其工作流原理如下。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/5.webp\" alt=\"pnpm 原理图\"></p>\n<p>整个流程可以理解为四部曲：</p>\n<p>第一步，<code>changeset init</code>。通过执行执行该命令，可以在项目根目录下生成一个 <code>.changeset</code> 目录，里面会生成一个 changesets 的 config 文件，一般项目初始化时，执行一遍即可，后续不用再执行该操作。</p>\n<p>第二步，<code>changeset add</code> 或者 <code>changeset</code>。<code>add</code> 在 changesets 中算得上比较关键的命令之一了，它会根据 monorepo下的项目来生成一个 changeset 文件，里面会包含前面提到的 changeset 文件信息(更新包名称、版本层级、CHANGELOG 信息。</p>\n<p>第三步，<code>changeset version</code>。 这个命令这里可以当作 <code>Bump Version</code>（版本号升级或更新操作）来理解，这里本质上做的工作是消耗 changesets 文件并且修改对应包版本以及依赖该包的包版本，同时会根据之前 changeset 文件里面的信息来生成对应的 CHANGELOG 信息。</p>\n<p>第四步，<code>changeset publish</code>。本质上就是对 <code>npm publish</code> 做了一次封装，同时会检查对应的 registry 上有没有对应包的版本，如果已经存在了，就不会再发包了，如果不存在会对对应的包版本执行一次 <code>npm publish</code>。</p>\n<p>另外，changesets 支持 <code>pre 版本</code> 和 <code>非 pre 版本</code> 的操作切换，需要在第二步之前执行 <code>changeset pre enter</code>、<code>changeset pre exit</code> 等操作。</p>\n<p>小结</p>\n<p>总而言之，主要优点在于提供了很大的自主权在使用者手中，在复杂的业务场景下能够做出一些合适的调整，例如用户可以自行修改 changesets 文件、changelog 文件、甚至是 Bump Version 后不满意的版本。</p>\n<p>相比较于 lerna 提供的比较理想化的方案而言，changeset 本身是一套泛用性很强的方案，而且比较适合当下 monorepo 工作流场景下的一些运作方式，虽然本身还存在着不少的缺点 。</p>\n<h2><span id=\"总结\">总结</span></h2><p>综上所述，为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库，可以总结为以下几个点。</p>\n<ol>\n<li>使用 pnpm 解决私服开启鉴权带来的一些非常重要的影响和变化；</li>\n<li>充分利用 pnpm 不可替代的速度快、高效利用磁盘空间、天然支持 monorepo（支持 workspace 配置）、 安全性高（比如解决幽灵依赖问题、node_modules 嵌套过深问题）等优势；</li>\n<li>changesets 带来更加简单、更加轻量的版本控制和发布方案，使得版本管理及发布流程更多的自主权掌握在使用者手中。</li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E8%83%8C%E6%99%AF\">一、背景</a></li>\n<li><a href=\"#%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-pnpm\">二、什么是 pnpm ？</a></li>\n<li><a href=\"#%E4%B8%89-pnpm-%E5%AF%B9%E6%AF%94-npmyarn-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF\">三、pnpm 对比 npm&#x2F;yarn 有什么优势？</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BB%80%E4%B9%88%E6%98%AF-changesets\">四、什么是 changesets ？</a></li>\n<li><a href=\"#%E4%BA%94-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-changesets\">五、为什么要使用 changesets ？</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p>最近公司私服开启鉴权，对于前端来说，带来一些非常重要的影响和变化：</p>\n<ol>\n<li>不管拉取 npm 包还是发布 npm 包，均需要鉴权，具体就是 .npmrc 配置信息需要增加 auth token 信息；</li>\n<li>使用 yarn 出现偶然下载包失败问题以及必现的无法发包问题，而 npm 和 pnpm 可以；</li>\n<li>现有组件库工程（所使用的工具链为 yarn + lerna）发包时会出现 401 鉴权问题，甚至有时连安装依赖包也有问题。</li>\n</ol>\n<p>基于以上三个问题，我们做了一些尝试：</p>\n<ol>\n<li>将 yarn 从 1.x 升级到 2.x，也就是说 yarn 2.x + lerna，不行；❌</li>\n<li>将 yarn 改成 pnpm，使用 pnpm + lerna 组合，也出现了一些问题；❌</li>\n<li>将 yarn + lerna 组合改成 pnpm + workspace + [pnpm publish]，成功。✅</li>\n</ol>\n<p>最后，我们决定彻底地将 yarn + lerna 组合切换成 pnpm + workspace + changesets 。</p>\n<h2 id=\"二、什么是-pnpm-？\"><a href=\"#二、什么是-pnpm-？\" class=\"headerlink\" title=\"二、什么是 pnpm ？\"></a>二、什么是 pnpm ？</h2><p>pnpm 是新一代的包管理工具，是目前较为先进的包管理器。按照官网说法，可以实现节约磁盘空间并提升安装速度和创建非扁平化的 node_modules 文件夹两大目标，具体原理可以参考 pnpm 官网。</p>\n<p>以下是官方给的一张关于 pnpm 的原理图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/1.png\" alt=\"pnpm 原理图\"></p>\n<p>所以，综合上图，我就现在知道 pnpm 为什么说是先进的包管理器了吧。</p>\n<p>首先，最大的优点是节省磁盘空间，一个包全局只保存一份，剩下的都是软硬连接，这必然节省不少磁盘空间，并且使用软链接的方式创建非扁平的 node_modules 嵌套关系。</p>\n<p>其次就是快，因为通过链接的方式而不是复制，自然会快。</p>\n<h2 id=\"三、pnpm-对比-npm-yarn-有什么优势？\"><a href=\"#三、pnpm-对比-npm-yarn-有什么优势？\" class=\"headerlink\" title=\"三、pnpm 对比 npm&#x2F;yarn 有什么优势？\"></a>三、pnpm 对比 npm&#x2F;yarn 有什么优势？</h2><ol>\n<li>速度快</li>\n</ol>\n<p>pnpm 安装包的速度究竟有多快？先以 React 包为例来对比一下:</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/2.webp\" alt=\"pnpm 原理图\"></p>\n<p>可以看到，作为黄色部分的 pnpm，在绝多大数场景下，包安装的速度都是明显优于 npm&#x2F;yarn，速度会比 npm&#x2F;yarn 快 2-3 倍。</p>\n<p>对 yarn 比较熟悉的同学可能会说，yarn 不是有 PnP 安装模式吗？直接去掉 node_modules，将依赖包内容写在磁盘，节省了 node 文件 I&#x2F;O 的开销，这样也能提升安装速度。</p>\n<p>接下来，我们以这样一个仓库为例，我们来看一看 benchmark 数据，主要对比一下 pnpm 和 yarn PnP:</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/3.webp\" alt=\"pnpm 原理图\"></p>\n<p>从中可以看到，总体而言，pnpm 的包安装速度还是明显优于 yarn PnP 的。</p>\n<ol start=\"2\">\n<li>高效利用磁盘空间</li>\n</ol>\n<p>pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这个文件系统出色的地方在于:</p>\n<ul>\n<li>不会重复安装同一个包。用 npm&#x2F;yarn 的时候，如果 100 个项目都依赖 lodash，那么 lodash 很可能就被安装了 100 次，磁盘中就有 100 个地方写入了这部分代码。但在使用 pnpm 只会安装一次，磁盘中只有一个地方写入，后面再次使用都会直接使用 hardlink（硬链接）。</li>\n<li>即使一个包的不同版本，pnpm 也会极大程度地复用之前版本的代码。举个例子，比如 lodash 有 100 个文件，更新版本之后多了一个文件，那么磁盘当中并不会重新写入 101 个文件，而是保留原来的 100 个文件的 hardlink，仅仅写入那一个新增的文件。</li>\n</ul>\n<ol start=\"3\">\n<li>支持 monorepo</li>\n</ol>\n<p>随着前端工程的日益复杂，越来越多的项目开始使用 monorepo。之前对于多个项目的管理，我们一般都是使用多个 git 仓库，但 monorepo 的宗旨就是用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的 packages 目录下，那么一个子项目就代表一个 package。</p>\n<p>pnpm 与 npm&#x2F;yarn 另外一个很大的不同就是支持了 monorepo，体现在各个子命令的功能上，比如在根目录下 <code>pnpm add A -r</code>, 那么所有的 package 中都会被添加 A 这个依赖，当然也支持 <code>--filter</code> 字段来对 package 进行过滤。</p>\n<p>pnpm 通过 pnpm-workspace.yaml 配置定义工作空间目录，并能够使您从工作空间中包含 &#x2F; 排除目录。</p>\n<ol start=\"4\">\n<li>安全性高</li>\n</ol>\n<p>之前在使用 npm&#x2F;yarn 的时候，由于 node_modules 的扁平结构，如果 A 依赖 B， B 依赖 C，那么 A 当中是可以直接使用 C 的，但问题是 A 当中并没有声明 C 这个依赖。因此会出现这种非法访问的情况。但 pnpm 脑洞特别大，自创了一套依赖管理方式，很好地解决了这个问题，保证了安全性，具体怎么体现安全、规避非法访问依赖的风险的，主要表现为幽灵依赖。</p>\n<p>小结</p>\n<p>总而言之，pnpm 与 npm&#x2F;yarn 比较，可以通过以下表格总结出来。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/4.png\" alt=\"pnpm 原理图\"></p>\n<h2 id=\"四、什么是-changesets-？\"><a href=\"#四、什么是-changesets-？\" class=\"headerlink\" title=\"四、什么是 changesets ？\"></a>四、什么是 changesets ？</h2><p>在 workspace 中对包版本管理是一个非常复杂的工作，原来 yarn 还可以使用 lerna，遗憾的是 pnpm 没有提供内置的解决方案，一部分开源项目在自己的项目中自己实现了一套包版本的管理机制，比如 Vue3、Vite等。</p>\n<p>pnpm 推荐了两个开源的版本控制工具：</p>\n<ul>\n<li>changesets</li>\n<li>rush</li>\n</ul>\n<p>这里我们采用了 changesets 来做依赖包的管理。选用 changesets 的主要原因还是文档更加清晰一些，感觉上手比较容易。</p>\n<p>按照 changesets 文档介绍的，changesets 主要是做了两件事：</p>\n<blockquote>\n<p>Changesets hold two key bits of information: a version type (following semver), and change information to be added to a changelog.</p>\n</blockquote>\n<p>简而言之就是管理包的 version 和生成 changelog。</p>\n<h2 id=\"五、为什么要使用-changesets-？\"><a href=\"#五、为什么要使用-changesets-？\" class=\"headerlink\" title=\"五、为什么要使用 changesets ？\"></a>五、为什么要使用 changesets ？</h2><p>1. lerna 发包方案缺陷</p>\n<p>早期我们的组件库版本中采用了 lerna 这一套的发包方案，但随着频繁的使用和深入的研究发现，这套方案随之带来了不少问题：</p>\n<ul>\n<li>ignoreChanges 不能做到文件的完全忽略，存在优先级问题；</li>\n<li>lerna version 根据 commit 以及 tag 更新出来的包版本不符合预期；</li>\n<li>生成的 CHANGELOG 文件信息不完整；</li>\n<li>lifecycle scripts 经常命中一些用户自定义的 script（例如 publish 等）；</li>\n<li>CI 中自动化发包场景需要很高的定制成本；</li>\n<li>lerna 本身不支持 workspace 协议，导致基于 pnpm 开发的一些仓库无法使用。</li>\n</ul>\n<p>2. changesets 的基本工作流程及优势</p>\n<p>Changesets 提供了简单、轻量的版本控制和发布方案，其工作流原理如下。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/pnpm-workspace-changesets/5.webp\" alt=\"pnpm 原理图\"></p>\n<p>整个流程可以理解为四部曲：</p>\n<p>第一步，<code>changeset init</code>。通过执行执行该命令，可以在项目根目录下生成一个 <code>.changeset</code> 目录，里面会生成一个 changesets 的 config 文件，一般项目初始化时，执行一遍即可，后续不用再执行该操作。</p>\n<p>第二步，<code>changeset add</code> 或者 <code>changeset</code>。<code>add</code> 在 changesets 中算得上比较关键的命令之一了，它会根据 monorepo下的项目来生成一个 changeset 文件，里面会包含前面提到的 changeset 文件信息(更新包名称、版本层级、CHANGELOG 信息。</p>\n<p>第三步，<code>changeset version</code>。 这个命令这里可以当作 <code>Bump Version</code>（版本号升级或更新操作）来理解，这里本质上做的工作是消耗 changesets 文件并且修改对应包版本以及依赖该包的包版本，同时会根据之前 changeset 文件里面的信息来生成对应的 CHANGELOG 信息。</p>\n<p>第四步，<code>changeset publish</code>。本质上就是对 <code>npm publish</code> 做了一次封装，同时会检查对应的 registry 上有没有对应包的版本，如果已经存在了，就不会再发包了，如果不存在会对对应的包版本执行一次 <code>npm publish</code>。</p>\n<p>另外，changesets 支持 <code>pre 版本</code> 和 <code>非 pre 版本</code> 的操作切换，需要在第二步之前执行 <code>changeset pre enter</code>、<code>changeset pre exit</code> 等操作。</p>\n<p>小结</p>\n<p>总而言之，主要优点在于提供了很大的自主权在使用者手中，在复杂的业务场景下能够做出一些合适的调整，例如用户可以自行修改 changesets 文件、changelog 文件、甚至是 Bump Version 后不满意的版本。</p>\n<p>相比较于 lerna 提供的比较理想化的方案而言，changeset 本身是一套泛用性很强的方案，而且比较适合当下 monorepo 工作流场景下的一些运作方式，虽然本身还存在着不少的缺点 。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>综上所述，为什么使用 pnpm + workspace + changesets 替代 yarn + lerna 构建我们组件库，可以总结为以下几个点。</p>\n<ol>\n<li>使用 pnpm 解决私服开启鉴权带来的一些非常重要的影响和变化；</li>\n<li>充分利用 pnpm 不可替代的速度快、高效利用磁盘空间、天然支持 monorepo（支持 workspace 配置）、 安全性高（比如解决幽灵依赖问题、node_modules 嵌套过深问题）等优势；</li>\n<li>changesets 带来更加简单、更加轻量的版本控制和发布方案，使得版本管理及发布流程更多的自主权掌握在使用者手中。</li>\n</ol>\n"},{"title":"初识React Native","author":"Jelon","date":"2016-07-06T00:00:00.000Z","thumbnail":null,"blogexcerpt":"如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结...","_content":"\n<!-- toc -->\n\n如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结。\n\n### 安装\n\n1. Node\n\t\n\tNode可前往官网[https://nodejs.org/en/](https://nodejs.org/en/)下载安装。React Native需要的Node版本是4.0以上，现在官网上面的最新版本\bv6.x版本是绝对可以满足的。\n\n2. React Native 命令行工具`react-native-cli`\n\t\n\t安装Node之后，Node会自带模块管理和发布工具NPM。接下来全局安装React Native命令行工具。\n\t\n\t```bash\n\tnpm install -g react-native-cli\n\t```\n3. Xcode\n\n\tReact Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。\n\t\n4. 其他工具\n\t\n\t- **Watchman** Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。\n\t- **Flow** Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。\n\n\n### 构建React-Native项目\n\n输入以下命令行进行React Native项目构建\n\n\n``` bash\n\n# 初始化项目\nreact-native init AwesomeProject\n\n# 运行项目\ncd AwesomeProject\nreact-native run-ios\n\n```\n\n项目结构如图\n\n![RN项目结构](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_code.jpg)\n\n或者用Xcode直接打开ios目录下的JelonProject.xcodeproj文件，点击运行即可。\nok，运行成功，如下图所示。\n\n![React Native](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_result.jpg)\n\n### 本地调试\n\nReact Native本地调试地址是```http://localhost:8081/debugger-ui```，可以利用谷歌浏览器进行断点调试，跟Web页面项目的js调试是一样的。\n\n![本地调试演示](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_test.gif)\n\n\n### 遇到的问题\n\n不知道，会不会有人也遇到一下问题，导致项目编译失败。\n\n![编译失败结果](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_bug1.jpg)\n\n解决方案：\n\n如果你电脑安装的Xcode版本是8 Beta，把该版本卸载，重新安装了7.3.1就没问题了，具体原因我也不是很清楚，我在中文社区问了，还没得到答案[http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5](http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5)。\n\n\n\n\n\n","source":"_posts/react-native-learning.md","raw":"---\ntitle: 初识React Native\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-07-06\ntags:\n\t- react\n\t- react-native\n\t- iOS\nthumbnail:\nblogexcerpt: 如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结...\n\n---\n\n<!-- toc -->\n\n如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结。\n\n### 安装\n\n1. Node\n\t\n\tNode可前往官网[https://nodejs.org/en/](https://nodejs.org/en/)下载安装。React Native需要的Node版本是4.0以上，现在官网上面的最新版本\bv6.x版本是绝对可以满足的。\n\n2. React Native 命令行工具`react-native-cli`\n\t\n\t安装Node之后，Node会自带模块管理和发布工具NPM。接下来全局安装React Native命令行工具。\n\t\n\t```bash\n\tnpm install -g react-native-cli\n\t```\n3. Xcode\n\n\tReact Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。\n\t\n4. 其他工具\n\t\n\t- **Watchman** Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。\n\t- **Flow** Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。\n\n\n### 构建React-Native项目\n\n输入以下命令行进行React Native项目构建\n\n\n``` bash\n\n# 初始化项目\nreact-native init AwesomeProject\n\n# 运行项目\ncd AwesomeProject\nreact-native run-ios\n\n```\n\n项目结构如图\n\n![RN项目结构](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_code.jpg)\n\n或者用Xcode直接打开ios目录下的JelonProject.xcodeproj文件，点击运行即可。\nok，运行成功，如下图所示。\n\n![React Native](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_result.jpg)\n\n### 本地调试\n\nReact Native本地调试地址是```http://localhost:8081/debugger-ui```，可以利用谷歌浏览器进行断点调试，跟Web页面项目的js调试是一样的。\n\n![本地调试演示](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_test.gif)\n\n\n### 遇到的问题\n\n不知道，会不会有人也遇到一下问题，导致项目编译失败。\n\n![编译失败结果](https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_bug1.jpg)\n\n解决方案：\n\n如果你电脑安装的Xcode版本是8 Beta，把该版本卸载，重新安装了7.3.1就没问题了，具体原因我也不是很清楚，我在中文社区问了，还没得到答案[http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5](http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5)。\n\n\n\n\n\n","slug":"react-native-learning","published":1,"updated":"2016-07-06T00:00:00.000Z","_id":"cmduj3n40004hk8sv910femsy","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E6%9E%84%E5%BB%BAreact-native%E9%A1%B9%E7%9B%AE\">构建React-Native项目</a></li>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95\">本地调试</a></li>\n<li><a href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">遇到的问题</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结。</p>\n<h3><span id=\"安装\">安装</span></h3><ol>\n<li><p>Node</p>\n<p> Node可前往官网<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a>下载安装。React Native需要的Node版本是4.0以上，现在官网上面的最新版本\bv6.x版本是绝对可以满足的。</p>\n</li>\n<li><p>React Native 命令行工具<code>react-native-cli</code></p>\n<p> 安装Node之后，Node会自带模块管理和发布工具NPM。接下来全局安装React Native命令行工具。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure></li>\n<li><p>Xcode</p>\n<p> React Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。</p>\n</li>\n<li><p>其他工具</p>\n<ul>\n<li><strong>Watchman</strong> Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。</li>\n<li><strong>Flow</strong> Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。</li>\n</ul>\n</li>\n</ol>\n<h3><span id=\"构建react-native项目\">构建React-Native项目</span></h3><p>输入以下命令行进行React Native项目构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">react-native init AwesomeProject</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> AwesomeProject</span><br><span class=\"line\">react-native run-ios</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>项目结构如图</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_code.jpg\" alt=\"RN项目结构\"></p>\n<p>或者用Xcode直接打开ios目录下的JelonProject.xcodeproj文件，点击运行即可。<br>ok，运行成功，如下图所示。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_result.jpg\" alt=\"React Native\"></p>\n<h3><span id=\"本地调试\">本地调试</span></h3><p>React Native本地调试地址是<code>http://localhost:8081/debugger-ui</code>，可以利用谷歌浏览器进行断点调试，跟Web页面项目的js调试是一样的。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_test.gif\" alt=\"本地调试演示\"></p>\n<h3><span id=\"遇到的问题\">遇到的问题</span></h3><p>不知道，会不会有人也遇到一下问题，导致项目编译失败。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_bug1.jpg\" alt=\"编译失败结果\"></p>\n<p>解决方案：</p>\n<p>如果你电脑安装的Xcode版本是8 Beta，把该版本卸载，重新安装了7.3.1就没问题了，具体原因我也不是很清楚，我在中文社区问了，还没得到答案<a href=\"http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5\">http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5</a>。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E6%9E%84%E5%BB%BAreact-native%E9%A1%B9%E7%9B%AE\">构建React-Native项目</a></li>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95\">本地调试</a></li>\n<li><a href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">遇到的问题</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><p>Node</p>\n<p> Node可前往官网<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a>下载安装。React Native需要的Node版本是4.0以上，现在官网上面的最新版本\bv6.x版本是绝对可以满足的。</p>\n</li>\n<li><p>React Native 命令行工具<code>react-native-cli</code></p>\n<p> 安装Node之后，Node会自带模块管理和发布工具NPM。接下来全局安装React Native命令行工具。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure></li>\n<li><p>Xcode</p>\n<p> React Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。</p>\n</li>\n<li><p>其他工具</p>\n<ul>\n<li><strong>Watchman</strong> Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。</li>\n<li><strong>Flow</strong> Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"构建React-Native项目\"><a href=\"#构建React-Native项目\" class=\"headerlink\" title=\"构建React-Native项目\"></a>构建React-Native项目</h3><p>输入以下命令行进行React Native项目构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">react-native init AwesomeProject</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> AwesomeProject</span><br><span class=\"line\">react-native run-ios</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>项目结构如图</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_code.jpg\" alt=\"RN项目结构\"></p>\n<p>或者用Xcode直接打开ios目录下的JelonProject.xcodeproj文件，点击运行即可。<br>ok，运行成功，如下图所示。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_result.jpg\" alt=\"React Native\"></p>\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>React Native本地调试地址是<code>http://localhost:8081/debugger-ui</code>，可以利用谷歌浏览器进行断点调试，跟Web页面项目的js调试是一样的。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_test.gif\" alt=\"本地调试演示\"></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>不知道，会不会有人也遇到一下问题，导致项目编译失败。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/react-native-learning/react_native_bug1.jpg\" alt=\"编译失败结果\"></p>\n<p>解决方案：</p>\n<p>如果你电脑安装的Xcode版本是8 Beta，把该版本卸载，重新安装了7.3.1就没问题了，具体原因我也不是很清楚，我在中文社区问了，还没得到答案<a href=\"http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5\">http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5</a>。</p>\n"},{"title":"Selenium 自动化测试","author":"Jelon","date":"2023-03-18T00:58:38.000Z","thumbnail":null,"blogexcerpt":"Selenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。","_content":"\nSelenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。\n\n以下是 Selenium 自动化测试的一般步骤：\n\n1. 安装 Selenium 和相应的浏览器驱动（如 ChromeDriver、FirefoxDriver 等）。\n2. 编写测试脚本，使用 Selenium API 模拟用户操作（如点击按钮、填写表单等），并对网页元素进行定位和操作（如查找元素、获取元素属性等）。\n3. 运行测试脚本，Selenium 将自动打开浏览器，并在浏览器中执行测试脚本。\n4. 测试结果将被记录在测试报告中，可以用于检查测试用例的执行情况和发现可能存在的问题。\n\nSelenium 可以通过集成其他测试框架（如 TestNG、JUnit、PyTest 等）来扩展其功能。此外，Selenium 还支持分布式测试和并行测试，可以提高测试效率。\n\n\n**Selenium 自动化测试实例**\n\n以下是一个简单的 Selenium 自动化测试实例，使用 Python 编写：\n\n```py\nfrom selenium import webdriver\n\n# 创建一个 Chrome 浏览器实例\ndriver = webdriver.Chrome()\n\n# 访问指定的网页\ndriver.get(\"https://www.baidu.com\")\n\n# 在搜索框中输入关键字并提交搜索\nsearch_box = driver.find_element_by_name(\"wd\")\nsearch_box.send_keys(\"Selenium 自动化测试\")\nsearch_box.submit()\n\n# 打印搜索结果页面的标题\nprint(driver.title)\n\n# 关闭浏览器\ndriver.quit()\n```\n\n上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后在搜索框中输入关键字“Selenium 自动化测试”并提交搜索。最后，它会打印搜索结果页面的标题，并关闭浏览器。\n\n这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的自动化测试，例如模拟用户登录、填写表单、执行 JavaScript 等。\n\n**Selenium 自动化测试实例js版本**\n\n以下是一个使用 Selenium 进行 JavaScript 自动化测试的示例，使用 JavaScript 编写：\n\n```js\nconst webdriver = require('selenium-webdriver');\n\n// 创建一个 Chrome 浏览器实例\nconst driver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .build();\n\n// 访问指定的网页\ndriver.get('https://www.baidu.com');\n\n// 执行 JavaScript\ndriver.executeScript(\"alert('Hello, world!')\");\n\n// 等待用户关闭弹窗\ndriver.switchTo().alert().accept();\n\n// 关闭浏览器\ndriver.quit();\n```\n\n上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后执行一个 JavaScript 弹窗，显示“Hello, world!”。然后，它会等待用户关闭弹窗，最后关闭浏览器。\n\n这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的 JavaScript 自动化测试，例如执行特定的 DOM 操作、获取页面元素的属性和值等。\n","source":"_posts/selenium.md","raw":"title: Selenium 自动化测试\nauthor: Jelon\ncategories:\n  - Web技术\ndate: 2023-03-18 00:58:38\ntags:\n  - Selenium\n  - 测试\nthumbnail:\nblogexcerpt: Selenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。\n\n---\n\nSelenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。\n\n以下是 Selenium 自动化测试的一般步骤：\n\n1. 安装 Selenium 和相应的浏览器驱动（如 ChromeDriver、FirefoxDriver 等）。\n2. 编写测试脚本，使用 Selenium API 模拟用户操作（如点击按钮、填写表单等），并对网页元素进行定位和操作（如查找元素、获取元素属性等）。\n3. 运行测试脚本，Selenium 将自动打开浏览器，并在浏览器中执行测试脚本。\n4. 测试结果将被记录在测试报告中，可以用于检查测试用例的执行情况和发现可能存在的问题。\n\nSelenium 可以通过集成其他测试框架（如 TestNG、JUnit、PyTest 等）来扩展其功能。此外，Selenium 还支持分布式测试和并行测试，可以提高测试效率。\n\n\n**Selenium 自动化测试实例**\n\n以下是一个简单的 Selenium 自动化测试实例，使用 Python 编写：\n\n```py\nfrom selenium import webdriver\n\n# 创建一个 Chrome 浏览器实例\ndriver = webdriver.Chrome()\n\n# 访问指定的网页\ndriver.get(\"https://www.baidu.com\")\n\n# 在搜索框中输入关键字并提交搜索\nsearch_box = driver.find_element_by_name(\"wd\")\nsearch_box.send_keys(\"Selenium 自动化测试\")\nsearch_box.submit()\n\n# 打印搜索结果页面的标题\nprint(driver.title)\n\n# 关闭浏览器\ndriver.quit()\n```\n\n上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后在搜索框中输入关键字“Selenium 自动化测试”并提交搜索。最后，它会打印搜索结果页面的标题，并关闭浏览器。\n\n这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的自动化测试，例如模拟用户登录、填写表单、执行 JavaScript 等。\n\n**Selenium 自动化测试实例js版本**\n\n以下是一个使用 Selenium 进行 JavaScript 自动化测试的示例，使用 JavaScript 编写：\n\n```js\nconst webdriver = require('selenium-webdriver');\n\n// 创建一个 Chrome 浏览器实例\nconst driver = new webdriver.Builder()\n    .forBrowser('chrome')\n    .build();\n\n// 访问指定的网页\ndriver.get('https://www.baidu.com');\n\n// 执行 JavaScript\ndriver.executeScript(\"alert('Hello, world!')\");\n\n// 等待用户关闭弹窗\ndriver.switchTo().alert().accept();\n\n// 关闭浏览器\ndriver.quit();\n```\n\n上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后执行一个 JavaScript 弹窗，显示“Hello, world!”。然后，它会等待用户关闭弹窗，最后关闭浏览器。\n\n这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的 JavaScript 自动化测试，例如执行特定的 DOM 操作、获取页面元素的属性和值等。\n","slug":"selenium","published":1,"updated":"2023-03-18T00:58:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n41004kk8svb0fr5aj5","content":"<p>Selenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。</p>\n<p>以下是 Selenium 自动化测试的一般步骤：</p>\n<ol>\n<li>安装 Selenium 和相应的浏览器驱动（如 ChromeDriver、FirefoxDriver 等）。</li>\n<li>编写测试脚本，使用 Selenium API 模拟用户操作（如点击按钮、填写表单等），并对网页元素进行定位和操作（如查找元素、获取元素属性等）。</li>\n<li>运行测试脚本，Selenium 将自动打开浏览器，并在浏览器中执行测试脚本。</li>\n<li>测试结果将被记录在测试报告中，可以用于检查测试用例的执行情况和发现可能存在的问题。</li>\n</ol>\n<p>Selenium 可以通过集成其他测试框架（如 TestNG、JUnit、PyTest 等）来扩展其功能。此外，Selenium 还支持分布式测试和并行测试，可以提高测试效率。</p>\n<p><strong>Selenium 自动化测试实例</strong></p>\n<p>以下是一个简单的 Selenium 自动化测试实例，使用 Python 编写：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个 Chrome 浏览器实例</span></span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问指定的网页</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在搜索框中输入关键字并提交搜索</span></span><br><span class=\"line\">search_box = driver.find_element_by_name(<span class=\"string\">&quot;wd&quot;</span>)</span><br><span class=\"line\">search_box.send_keys(<span class=\"string\">&quot;Selenium 自动化测试&quot;</span>)</span><br><span class=\"line\">search_box.submit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印搜索结果页面的标题</span></span><br><span class=\"line\">print(driver.title)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">driver.quit()</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后在搜索框中输入关键字“Selenium 自动化测试”并提交搜索。最后，它会打印搜索结果页面的标题，并关闭浏览器。</p>\n<p>这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的自动化测试，例如模拟用户登录、填写表单、执行 JavaScript 等。</p>\n<p><strong>Selenium 自动化测试实例js版本</strong></p>\n<p>以下是一个使用 Selenium 进行 JavaScript 自动化测试的示例，使用 JavaScript 编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webdriver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;selenium-webdriver&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 Chrome 浏览器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> webdriver.Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">&#x27;chrome&#x27;</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问指定的网页</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行 JavaScript</span></span><br><span class=\"line\">driver.executeScript(<span class=\"string\">&quot;alert(&#x27;Hello, world!&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待用户关闭弹窗</span></span><br><span class=\"line\">driver.switchTo().alert().accept();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭浏览器</span></span><br><span class=\"line\">driver.quit();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后执行一个 JavaScript 弹窗，显示“Hello, world!”。然后，它会等待用户关闭弹窗，最后关闭浏览器。</p>\n<p>这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的 JavaScript 自动化测试，例如执行特定的 DOM 操作、获取页面元素的属性和值等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Selenium 是一种流行的自动化测试工具，它可以用于测试 Web 应用程序的功能和用户界面。Selenium 提供了一个强大的 API，可以用多种编程语言（如 Java、Python、C# 等）编写自动化测试脚本。</p>\n<p>以下是 Selenium 自动化测试的一般步骤：</p>\n<ol>\n<li>安装 Selenium 和相应的浏览器驱动（如 ChromeDriver、FirefoxDriver 等）。</li>\n<li>编写测试脚本，使用 Selenium API 模拟用户操作（如点击按钮、填写表单等），并对网页元素进行定位和操作（如查找元素、获取元素属性等）。</li>\n<li>运行测试脚本，Selenium 将自动打开浏览器，并在浏览器中执行测试脚本。</li>\n<li>测试结果将被记录在测试报告中，可以用于检查测试用例的执行情况和发现可能存在的问题。</li>\n</ol>\n<p>Selenium 可以通过集成其他测试框架（如 TestNG、JUnit、PyTest 等）来扩展其功能。此外，Selenium 还支持分布式测试和并行测试，可以提高测试效率。</p>\n<p><strong>Selenium 自动化测试实例</strong></p>\n<p>以下是一个简单的 Selenium 自动化测试实例，使用 Python 编写：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个 Chrome 浏览器实例</span></span><br><span class=\"line\">driver = webdriver.Chrome()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问指定的网页</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在搜索框中输入关键字并提交搜索</span></span><br><span class=\"line\">search_box = driver.find_element_by_name(<span class=\"string\">&quot;wd&quot;</span>)</span><br><span class=\"line\">search_box.send_keys(<span class=\"string\">&quot;Selenium 自动化测试&quot;</span>)</span><br><span class=\"line\">search_box.submit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印搜索结果页面的标题</span></span><br><span class=\"line\">print(driver.title)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">driver.quit()</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后在搜索框中输入关键字“Selenium 自动化测试”并提交搜索。最后，它会打印搜索结果页面的标题，并关闭浏览器。</p>\n<p>这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的自动化测试，例如模拟用户登录、填写表单、执行 JavaScript 等。</p>\n<p><strong>Selenium 自动化测试实例js版本</strong></p>\n<p>以下是一个使用 Selenium 进行 JavaScript 自动化测试的示例，使用 JavaScript 编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webdriver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;selenium-webdriver&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 Chrome 浏览器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> webdriver.Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">&#x27;chrome&#x27;</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问指定的网页</span></span><br><span class=\"line\">driver.get(<span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行 JavaScript</span></span><br><span class=\"line\">driver.executeScript(<span class=\"string\">&quot;alert(&#x27;Hello, world!&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待用户关闭弹窗</span></span><br><span class=\"line\">driver.switchTo().alert().accept();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭浏览器</span></span><br><span class=\"line\">driver.quit();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会打开一个 Chrome 浏览器实例，访问百度首页，然后执行一个 JavaScript 弹窗，显示“Hello, world!”。然后，它会等待用户关闭弹窗，最后关闭浏览器。</p>\n<p>这只是一个简单的示例，实际上可以使用 Selenium 进行更复杂的 JavaScript 自动化测试，例如执行特定的 DOM 操作、获取页面元素的属性和值等。</p>\n"},{"title":"MAC 下修改 MySQL 初始密码的方法","author":"Jelon","date":"2017-05-17T00:00:00.000Z","thumbnail":null,"blogexcerpt":"苹果 -> 系统偏好设置 -> MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。进入终端输入：`cd /usr/local/mysql/bin/`c回车后 登录管理员权限 `sudo su`回车后输入以下命令来禁止 MySQL 验证功能 `./mysqld_safe --skip-grant-tables &` 回车后mysql会自动重启（偏好设置中mysql的状态会变成 running）...","_content":"\n<!-- toc -->\n\n这里只介绍输入命令行方法。\n\n### 第一步\n\n苹果 -> 系统偏好设置 -> MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。\n\n### 第二步\n\n进入终端输入：`cd /usr/local/mysql/bin/`；\n回车后，登录管理员权限，输入命令行 `sudo su`；\n\n回车后输入以下命令来禁止 MySQL 验证功能 `./mysqld_safe --skip-grant-tables &`；\n回车后，MySQL 会自动重启（偏好设置中 MySQL 的状态会变成 running）。\n\n### 第三步\n\n接下来，输入命令 `./mysql`；\n\n回车后，输入命令 `FLUSH PRIVILEGES`；\n\n回车后，输入命令 `SET PASSWORD FOR 'root'@'localhost' = PASSWORD('你的新密码')`。\n\n至此，密码修改完成，可以成功登录。","source":"_posts/set-mysql-initial-password-on-mac.md","raw":"---\ntitle: MAC 下修改 MySQL 初始密码的方法\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-05-17\ntags:\n\t- MySQL\n\t- Mac\nthumbnail:\nblogexcerpt: 苹果 -> 系统偏好设置 -> MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。进入终端输入：`cd /usr/local/mysql/bin/`c回车后 登录管理员权限 `sudo su`回车后输入以下命令来禁止 MySQL 验证功能 `./mysqld_safe --skip-grant-tables &` 回车后mysql会自动重启（偏好设置中mysql的状态会变成 running）...\n\n---\n\n<!-- toc -->\n\n这里只介绍输入命令行方法。\n\n### 第一步\n\n苹果 -> 系统偏好设置 -> MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。\n\n### 第二步\n\n进入终端输入：`cd /usr/local/mysql/bin/`；\n回车后，登录管理员权限，输入命令行 `sudo su`；\n\n回车后输入以下命令来禁止 MySQL 验证功能 `./mysqld_safe --skip-grant-tables &`；\n回车后，MySQL 会自动重启（偏好设置中 MySQL 的状态会变成 running）。\n\n### 第三步\n\n接下来，输入命令 `./mysql`；\n\n回车后，输入命令 `FLUSH PRIVILEGES`；\n\n回车后，输入命令 `SET PASSWORD FOR 'root'@'localhost' = PASSWORD('你的新密码')`。\n\n至此，密码修改完成，可以成功登录。","slug":"set-mysql-initial-password-on-mac","published":1,"updated":"2017-05-17T00:00:00.000Z","_id":"cmduj3n41004nk8svaivdg42r","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5\">第一步</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5\">第二步</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5\">第三步</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>这里只介绍输入命令行方法。</p>\n<h3><span id=\"第一步\">第一步</span></h3><p>苹果 -&gt; 系统偏好设置 -&gt; MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。</p>\n<h3><span id=\"第二步\">第二步</span></h3><p>进入终端输入：<code>cd /usr/local/mysql/bin/</code>；<br>回车后，登录管理员权限，输入命令行 <code>sudo su</code>；</p>\n<p>回车后输入以下命令来禁止 MySQL 验证功能 <code>./mysqld_safe --skip-grant-tables &amp;</code>；<br>回车后，MySQL 会自动重启（偏好设置中 MySQL 的状态会变成 running）。</p>\n<h3><span id=\"第三步\">第三步</span></h3><p>接下来，输入命令 <code>./mysql</code>；</p>\n<p>回车后，输入命令 <code>FLUSH PRIVILEGES</code>；</p>\n<p>回车后，输入命令 <code>SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;你的新密码&#39;)</code>。</p>\n<p>至此，密码修改完成，可以成功登录。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5\">第一步</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5\">第二步</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5\">第三步</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>这里只介绍输入命令行方法。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>苹果 -&gt; 系统偏好设置 -&gt; MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>进入终端输入：<code>cd /usr/local/mysql/bin/</code>；<br>回车后，登录管理员权限，输入命令行 <code>sudo su</code>；</p>\n<p>回车后输入以下命令来禁止 MySQL 验证功能 <code>./mysqld_safe --skip-grant-tables &amp;</code>；<br>回车后，MySQL 会自动重启（偏好设置中 MySQL 的状态会变成 running）。</p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>接下来，输入命令 <code>./mysql</code>；</p>\n<p>回车后，输入命令 <code>FLUSH PRIVILEGES</code>；</p>\n<p>回车后，输入命令 <code>SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;你的新密码&#39;)</code>。</p>\n<p>至此，密码修改完成，可以成功登录。</p>\n"},{"title":"静态博客框架 Hexo 入门","author":"Jelon","date":"2015-10-06T10:23:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png","_content":"\n### hexo 简介\n\n<!-- toc -->\n\n简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：\n官网链接：*https://hexo.io/*\n\n<!-- more -->\n\n![Hexo官网截图](https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png)\n\nGithub 主页：https://github.com/hexojs/hexo\n不过，现在网上一搜都会搜到很多关于hexo的一些文章，所以想更加地了解 hexo 和获取其主题可以网上找找。\n\n### hexo 特性\n\n* Blazing Fast —— 速度快——几百篇文章也可以秒生成；\n* Markdown Support —— 支持 GitHub Flavored Markdown 和所有 Octopress 的插件；\n* One-Command Deployment —— 需要一个命令就可以配置您的网站 GitHub 页面， Heroku 或其他网站；\n* Various Plugins —— Hexo 支持 EJS 、Swig和Stylus。通过插件支持 Haml、Jade 和 Less。\n\n### hexo 使用\n\n**hexo 安装**\n\n首先，在安装 hexo 之前，你要先安装 Node.js 和 Git ，具体下载和安装请访问它们的官网。\n接下来，安装 hexo ：\n\n```bash\n$ npm install -g hexo-cli\n```\n\n**初始化 hexo**\n\n初始化指定目录，会在目前的文件夹建立一个名为 <folder> 的新文件夹；否则会在目前文件夹初始化。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n接下来看一下我们安装完之后 hexo 的目录结构是如下这样的：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n为了看起来更加直观，在这里我截一个我自己的目录图：\n\n![目录截图](https://jangdelong.github.io/blog_img/images/start-hexo/2344787021.jpg)\n\n目录结构作用在这里简单的介绍一下：\n\n- _config.yml 文件    ---- 为网站配置文件；\n- package.json 文件 ---- 项目模块描述；\n- source 目录            ---- 创建博客文章的源目录，后面有说到这个；\n- public 目录            ---- 静态资源，就是我们直接可以访问的一些资源，这些资源在执行 hexo generate 命令后生成；\n- themes 目录          ---- 放置博客主题，就像WordPress、typecho这些博客程序都是有一个专门用来放置主体的目录，如果一个博客程序没这个功能，那未免也太过于单调，对吧。\n\n**创建新博客**\n\n```bash\n$ hexo new \"中国移动-139邮箱\" # 创建文章 post\n$ hexo new page \"about\"     # 创建页面 page\n```\n\n创建博客或文章会在 `/source/_posts/` 下生成后缀为 `.md` 的文件，我们可以这个文件上编写我们想要发表的文章或博客，hexo 支持 markdown 语法，很方便快捷。\n\n**生成博客**\n\n```bash\n$ hexo generate  # 或者 hexo g\n```\n\n生成博客这一步也叫编译，讲写好的 `.md` 内容生成到 public 目录去，也就是后面运行服务器之后直接访问的东西。\n\n**运行服务器**\n\n```bash\n$ hexo server # 或者 hexo s\n```\n\n注意：\n\n- 服务器默认会跑在 http://localhost:port （port 默认为 4000端口，可在 _config.yml 设置）；\n- hexo 所依赖的模块参考如下：\n\n![依赖模块](https://jangdelong.github.io/blog_img/images/start-hexo/452712668.png)\n\n### 部署\n\n编译完博客之后，可以生成的博客内容（静态页面）部署到 github，如果你嫌 github 访问速度比较慢的话，coding 是一个不错的选择。下面是以部署至 github 为例，做简单介绍。\n\n1. 首先，现在 github 上创建一个新的 repository，（假设，项目名为 jangdelong ）创建好之后，会生成一个 git 项目地址；\n\n2. 把创建好的 github repository 的 git 地址配置到 hexo 目录下的 `_config.yml` 的配置文件中；\n\n\t```\n\tdeploy:\n\t  type: git\n\t  message: 博客更新 -- at {{ now('YYYY-MM-DD HH:mm:ss') }}\n\t  repository: https://github.com/jangdelong/jangdelong.github.com.git\n\t  branch: master\n\t```\n\n3. 执行 `hexo deploy` 或者 `hexo d` 即可部署；\n\n4. 部署完之后，浏览器地址栏输入 `jangdelong.github.io` 即可访问。 \n\n### 参考\n\n- [hexo官网：https://hexo.io/](https://hexo.io/)；\n- [http://segmentfault.com/a/1190000000370778](http://segmentfault.com/a/1190000000370778)；\n- [http://segmentfault.com/a/1190000002538363](http://segmentfault.com/a/1190000002538363)。\n\n","source":"_posts/start-hexo.md","raw":"title: 静态博客框架 Hexo 入门\nauthor: Jelon\ndate: 2015-10-06 10:23\ntags:\n    - Hexo\n    - 静态博客\n    - Node.js\ncategories:\n    - Web技术\nthumbnail: https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png\n\n---\n\n### hexo 简介\n\n<!-- toc -->\n\n简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：\n官网链接：*https://hexo.io/*\n\n<!-- more -->\n\n![Hexo官网截图](https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png)\n\nGithub 主页：https://github.com/hexojs/hexo\n不过，现在网上一搜都会搜到很多关于hexo的一些文章，所以想更加地了解 hexo 和获取其主题可以网上找找。\n\n### hexo 特性\n\n* Blazing Fast —— 速度快——几百篇文章也可以秒生成；\n* Markdown Support —— 支持 GitHub Flavored Markdown 和所有 Octopress 的插件；\n* One-Command Deployment —— 需要一个命令就可以配置您的网站 GitHub 页面， Heroku 或其他网站；\n* Various Plugins —— Hexo 支持 EJS 、Swig和Stylus。通过插件支持 Haml、Jade 和 Less。\n\n### hexo 使用\n\n**hexo 安装**\n\n首先，在安装 hexo 之前，你要先安装 Node.js 和 Git ，具体下载和安装请访问它们的官网。\n接下来，安装 hexo ：\n\n```bash\n$ npm install -g hexo-cli\n```\n\n**初始化 hexo**\n\n初始化指定目录，会在目前的文件夹建立一个名为 <folder> 的新文件夹；否则会在目前文件夹初始化。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n接下来看一下我们安装完之后 hexo 的目录结构是如下这样的：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n为了看起来更加直观，在这里我截一个我自己的目录图：\n\n![目录截图](https://jangdelong.github.io/blog_img/images/start-hexo/2344787021.jpg)\n\n目录结构作用在这里简单的介绍一下：\n\n- _config.yml 文件    ---- 为网站配置文件；\n- package.json 文件 ---- 项目模块描述；\n- source 目录            ---- 创建博客文章的源目录，后面有说到这个；\n- public 目录            ---- 静态资源，就是我们直接可以访问的一些资源，这些资源在执行 hexo generate 命令后生成；\n- themes 目录          ---- 放置博客主题，就像WordPress、typecho这些博客程序都是有一个专门用来放置主体的目录，如果一个博客程序没这个功能，那未免也太过于单调，对吧。\n\n**创建新博客**\n\n```bash\n$ hexo new \"中国移动-139邮箱\" # 创建文章 post\n$ hexo new page \"about\"     # 创建页面 page\n```\n\n创建博客或文章会在 `/source/_posts/` 下生成后缀为 `.md` 的文件，我们可以这个文件上编写我们想要发表的文章或博客，hexo 支持 markdown 语法，很方便快捷。\n\n**生成博客**\n\n```bash\n$ hexo generate  # 或者 hexo g\n```\n\n生成博客这一步也叫编译，讲写好的 `.md` 内容生成到 public 目录去，也就是后面运行服务器之后直接访问的东西。\n\n**运行服务器**\n\n```bash\n$ hexo server # 或者 hexo s\n```\n\n注意：\n\n- 服务器默认会跑在 http://localhost:port （port 默认为 4000端口，可在 _config.yml 设置）；\n- hexo 所依赖的模块参考如下：\n\n![依赖模块](https://jangdelong.github.io/blog_img/images/start-hexo/452712668.png)\n\n### 部署\n\n编译完博客之后，可以生成的博客内容（静态页面）部署到 github，如果你嫌 github 访问速度比较慢的话，coding 是一个不错的选择。下面是以部署至 github 为例，做简单介绍。\n\n1. 首先，现在 github 上创建一个新的 repository，（假设，项目名为 jangdelong ）创建好之后，会生成一个 git 项目地址；\n\n2. 把创建好的 github repository 的 git 地址配置到 hexo 目录下的 `_config.yml` 的配置文件中；\n\n\t```\n\tdeploy:\n\t  type: git\n\t  message: 博客更新 -- at {{ now('YYYY-MM-DD HH:mm:ss') }}\n\t  repository: https://github.com/jangdelong/jangdelong.github.com.git\n\t  branch: master\n\t```\n\n3. 执行 `hexo deploy` 或者 `hexo d` 即可部署；\n\n4. 部署完之后，浏览器地址栏输入 `jangdelong.github.io` 即可访问。 \n\n### 参考\n\n- [hexo官网：https://hexo.io/](https://hexo.io/)；\n- [http://segmentfault.com/a/1190000000370778](http://segmentfault.com/a/1190000000370778)；\n- [http://segmentfault.com/a/1190000002538363](http://segmentfault.com/a/1190000002538363)。\n\n","slug":"start-hexo","published":1,"updated":"2015-10-06T10:23:00.000Z","_id":"cmduj3n42004qk8sv8z9nghkt","comments":1,"layout":"post","photos":[],"content":"<h3><span id=\"hexo-简介\">hexo 简介</span></h3><div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#hexo-%E7%89%B9%E6%80%A7\">hexo 特性</a></li>\n<li><a href=\"#hexo-%E4%BD%BF%E7%94%A8\">hexo 使用</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2\">部署</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：<br>官网链接：<em><a href=\"https://hexo.io/\">https://hexo.io/</a></em></p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png\" alt=\"Hexo官网截图\"></p>\n<p>Github 主页：<a href=\"https://github.com/hexojs/hexo\">https://github.com/hexojs/hexo</a><br>不过，现在网上一搜都会搜到很多关于hexo的一些文章，所以想更加地了解 hexo 和获取其主题可以网上找找。</p>\n<h3><span id=\"hexo-特性\">hexo 特性</span></h3><ul>\n<li>Blazing Fast —— 速度快——几百篇文章也可以秒生成；</li>\n<li>Markdown Support —— 支持 GitHub Flavored Markdown 和所有 Octopress 的插件；</li>\n<li>One-Command Deployment —— 需要一个命令就可以配置您的网站 GitHub 页面， Heroku 或其他网站；</li>\n<li>Various Plugins —— Hexo 支持 EJS 、Swig和Stylus。通过插件支持 Haml、Jade 和 Less。</li>\n</ul>\n<h3><span id=\"hexo-使用\">hexo 使用</span></h3><p><strong>hexo 安装</strong></p>\n<p>首先，在安装 hexo 之前，你要先安装 Node.js 和 Git ，具体下载和安装请访问它们的官网。<br>接下来，安装 hexo ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化 hexo</strong></p>\n<p>初始化指定目录，会在目前的文件夹建立一个名为 <folder> 的新文件夹；否则会在目前文件夹初始化。</folder></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>接下来看一下我们安装完之后 hexo 的目录结构是如下这样的：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── source</span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<p>为了看起来更加直观，在这里我截一个我自己的目录图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/2344787021.jpg\" alt=\"目录截图\"></p>\n<p>目录结构作用在这里简单的介绍一下：</p>\n<ul>\n<li>_config.yml 文件    —- 为网站配置文件；</li>\n<li>package.json 文件 —- 项目模块描述；</li>\n<li>source 目录            —- 创建博客文章的源目录，后面有说到这个；</li>\n<li>public 目录            —- 静态资源，就是我们直接可以访问的一些资源，这些资源在执行 hexo generate 命令后生成；</li>\n<li>themes 目录          —- 放置博客主题，就像WordPress、typecho这些博客程序都是有一个专门用来放置主体的目录，如果一个博客程序没这个功能，那未免也太过于单调，对吧。</li>\n</ul>\n<p><strong>创建新博客</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;中国移动-139邮箱&quot;</span> <span class=\"comment\"># 创建文章 post</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;about&quot;</span>     <span class=\"comment\"># 创建页面 page</span></span><br></pre></td></tr></table></figure>\n\n<p>创建博客或文章会在 <code>/source/_posts/</code> 下生成后缀为 <code>.md</code> 的文件，我们可以这个文件上编写我们想要发表的文章或博客，hexo 支持 markdown 语法，很方便快捷。</p>\n<p><strong>生成博客</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate  <span class=\"comment\"># 或者 hexo g</span></span><br></pre></td></tr></table></figure>\n\n<p>生成博客这一步也叫编译，讲写好的 <code>.md</code> 内容生成到 public 目录去，也就是后面运行服务器之后直接访问的东西。</p>\n<p><strong>运行服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 或者 hexo s</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>服务器默认会跑在 <a href=\"http://localhost:port\">http://localhost:port</a> （port 默认为 4000端口，可在 _config.yml 设置）；</li>\n<li>hexo 所依赖的模块参考如下：</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/452712668.png\" alt=\"依赖模块\"></p>\n<h3><span id=\"部署\">部署</span></h3><p>编译完博客之后，可以生成的博客内容（静态页面）部署到 github，如果你嫌 github 访问速度比较慢的话，coding 是一个不错的选择。下面是以部署至 github 为例，做简单介绍。</p>\n<ol>\n<li><p>首先，现在 github 上创建一个新的 repository，（假设，项目名为 jangdelong ）创建好之后，会生成一个 git 项目地址；</p>\n</li>\n<li><p>把创建好的 github repository 的 git 地址配置到 hexo 目录下的 <code>_config.yml</code> 的配置文件中；</p>\n <figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\">deploy:</span></span><br><span class=\"line\"><span class=\"language-xml\">  type: git</span></span><br><span class=\"line\"><span class=\"language-xml\">  message: 博客更新 -- at </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">now</span>(<span class=\"name\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">  repository: https://github.com/jangdelong/jangdelong.github.com.git</span></span><br><span class=\"line\"><span class=\"language-xml\">  branch: master</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 <code>hexo deploy</code> 或者 <code>hexo d</code> 即可部署；</p>\n</li>\n<li><p>部署完之后，浏览器地址栏输入 <code>jangdelong.github.io</code> 即可访问。</p>\n</li>\n</ol>\n<h3><span id=\"参考\">参考</span></h3><ul>\n<li><a href=\"https://hexo.io/\">hexo官网：https://hexo.io/</a>；</li>\n<li><a href=\"http://segmentfault.com/a/1190000000370778\">http://segmentfault.com/a/1190000000370778</a>；</li>\n<li><a href=\"http://segmentfault.com/a/1190000002538363\">http://segmentfault.com/a/1190000002538363</a>。</li>\n</ul>\n","excerpt":"<h3 id=\"hexo-简介\"><a href=\"#hexo-简介\" class=\"headerlink\" title=\"hexo 简介\"></a>hexo 简介</h3><div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#hexo-%E7%89%B9%E6%80%A7\">hexo 特性</a></li>\n<li><a href=\"#hexo-%E4%BD%BF%E7%94%A8\">hexo 使用</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2\">部署</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：<br>官网链接：<em><a href=\"https://hexo.io/\">https://hexo.io/</a></em></p>","more":"<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/2132683522.png\" alt=\"Hexo官网截图\"></p>\n<p>Github 主页：<a href=\"https://github.com/hexojs/hexo\">https://github.com/hexojs/hexo</a><br>不过，现在网上一搜都会搜到很多关于hexo的一些文章，所以想更加地了解 hexo 和获取其主题可以网上找找。</p>\n<h3 id=\"hexo-特性\"><a href=\"#hexo-特性\" class=\"headerlink\" title=\"hexo 特性\"></a>hexo 特性</h3><ul>\n<li>Blazing Fast —— 速度快——几百篇文章也可以秒生成；</li>\n<li>Markdown Support —— 支持 GitHub Flavored Markdown 和所有 Octopress 的插件；</li>\n<li>One-Command Deployment —— 需要一个命令就可以配置您的网站 GitHub 页面， Heroku 或其他网站；</li>\n<li>Various Plugins —— Hexo 支持 EJS 、Swig和Stylus。通过插件支持 Haml、Jade 和 Less。</li>\n</ul>\n<h3 id=\"hexo-使用\"><a href=\"#hexo-使用\" class=\"headerlink\" title=\"hexo 使用\"></a>hexo 使用</h3><p><strong>hexo 安装</strong></p>\n<p>首先，在安装 hexo 之前，你要先安装 Node.js 和 Git ，具体下载和安装请访问它们的官网。<br>接下来，安装 hexo ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化 hexo</strong></p>\n<p>初始化指定目录，会在目前的文件夹建立一个名为 <folder> 的新文件夹；否则会在目前文件夹初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>接下来看一下我们安装完之后 hexo 的目录结构是如下这样的：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── source</span><br><span class=\"line\"><span class=\"string\">|   ├── _drafts</span></span><br><span class=\"line\"><span class=\"string\">|   └── _posts</span></span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<p>为了看起来更加直观，在这里我截一个我自己的目录图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/2344787021.jpg\" alt=\"目录截图\"></p>\n<p>目录结构作用在这里简单的介绍一下：</p>\n<ul>\n<li>_config.yml 文件    —- 为网站配置文件；</li>\n<li>package.json 文件 —- 项目模块描述；</li>\n<li>source 目录            —- 创建博客文章的源目录，后面有说到这个；</li>\n<li>public 目录            —- 静态资源，就是我们直接可以访问的一些资源，这些资源在执行 hexo generate 命令后生成；</li>\n<li>themes 目录          —- 放置博客主题，就像WordPress、typecho这些博客程序都是有一个专门用来放置主体的目录，如果一个博客程序没这个功能，那未免也太过于单调，对吧。</li>\n</ul>\n<p><strong>创建新博客</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;中国移动-139邮箱&quot;</span> <span class=\"comment\"># 创建文章 post</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;about&quot;</span>     <span class=\"comment\"># 创建页面 page</span></span><br></pre></td></tr></table></figure>\n\n<p>创建博客或文章会在 <code>/source/_posts/</code> 下生成后缀为 <code>.md</code> 的文件，我们可以这个文件上编写我们想要发表的文章或博客，hexo 支持 markdown 语法，很方便快捷。</p>\n<p><strong>生成博客</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate  <span class=\"comment\"># 或者 hexo g</span></span><br></pre></td></tr></table></figure>\n\n<p>生成博客这一步也叫编译，讲写好的 <code>.md</code> 内容生成到 public 目录去，也就是后面运行服务器之后直接访问的东西。</p>\n<p><strong>运行服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 或者 hexo s</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>服务器默认会跑在 <a href=\"http://localhost:port\">http://localhost:port</a> （port 默认为 4000端口，可在 _config.yml 设置）；</li>\n<li>hexo 所依赖的模块参考如下：</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/start-hexo/452712668.png\" alt=\"依赖模块\"></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>编译完博客之后，可以生成的博客内容（静态页面）部署到 github，如果你嫌 github 访问速度比较慢的话，coding 是一个不错的选择。下面是以部署至 github 为例，做简单介绍。</p>\n<ol>\n<li><p>首先，现在 github 上创建一个新的 repository，（假设，项目名为 jangdelong ）创建好之后，会生成一个 git 项目地址；</p>\n</li>\n<li><p>把创建好的 github repository 的 git 地址配置到 hexo 目录下的 <code>_config.yml</code> 的配置文件中；</p>\n <figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\">deploy:</span></span><br><span class=\"line\"><span class=\"language-xml\">  type: git</span></span><br><span class=\"line\"><span class=\"language-xml\">  message: 博客更新 -- at </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">now</span>(<span class=\"name\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">  repository: https://github.com/jangdelong/jangdelong.github.com.git</span></span><br><span class=\"line\"><span class=\"language-xml\">  branch: master</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 <code>hexo deploy</code> 或者 <code>hexo d</code> 即可部署；</p>\n</li>\n<li><p>部署完之后，浏览器地址栏输入 <code>jangdelong.github.io</code> 即可访问。</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://hexo.io/\">hexo官网：https://hexo.io/</a>；</li>\n<li><a href=\"http://segmentfault.com/a/1190000000370778\">http://segmentfault.com/a/1190000000370778</a>；</li>\n<li><a href=\"http://segmentfault.com/a/1190000002538363\">http://segmentfault.com/a/1190000002538363</a>。</li>\n</ul>"},{"title":"小程序项目小结","author":"Jelon","date":"2017-03-16T00:00:00.000Z","thumbnail":null,"blogexcerpt":"其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个...","_content":"\n<!-- toc -->\n\n其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个，也就是今天我要总结的东西 ---- 结合日历实现会议室预订微信小程序产品需求。\n\n### 需求\n\n首先，看一下需求列表。功能清单大概如下3点：\n\n- 小程序首页可以根据日期查看会议订满和可预订状态；\n\n- 可以查看会议室预订情况，在空闲时段可以预订会议室；\n\n- 预订会议室后，提供集中查看页面，查看自己预订的所有会议室。\n\n此外，还有一个比较重要的功能点也就是登录功能：包括绑定账号登录，以及登录态的维护。当初评审的时候，没有把登录功能加入到工作量里面，事实上，登录功能也一点儿不比其他功能要简单。\n\n需求整体流程图大概如下：\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/1.png\" alt=\"主要流程\" width=\"400\" >\n\n### 项目结构\n\n根据需求以及UI设计，我们把页面分成了登录页、我的（用户中心）、会议室列表页面、会议室预订页面、预订成功页面、我的预订六个模块页面以及其他公共方法模块。\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/2.png\" alt=\"项目结构\" width=\"500\" >\n\n### 主要模块分解\n\n**会议室列表模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/3.png\" alt=\"会议室列表页\" width=\"300\" >\n\n会议室列表页面主要包含两个部分，头部的滑动日历组件，以及内容部分的会议室列表。\n\n**预订页面模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/4.png\" alt=\"预订页面-可预订\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/5.png\" alt=\"预订页面-已失效\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/9.png\" alt=\"预订页面\" width=\"300\" >\n\n预订会议室包含当前会议室预订的列表、预订两个部分。根据底部预订按钮可以分为三种情况，可预订、已订满（截图没有）、已失效；会议室预订的最小粒度为30分钟。\n\n- 可预订：说明当天该会议室至少有30分钟的时间段是可以预订，提供预订按钮；\n\n- 已订满：说明当天已经订满或者不可以在预订了，不提供预订按钮；\n\n- 已失效：比如，我今天打开昨天的会议室，就是已失效会议室，不提供预订按钮。\n\n**登录模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/6.png\" alt=\"登录页面\" width=\"350\" >\n\n登录分为手机号登录和邮箱账号登录。\n\n### 重点实现\n\n**会议室列表日历组件**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/8.png\" alt=\"登录页面\" width=\"300\" >\n\n会议室列表页面模块页面重点的部分就是头部这个日历组件，所以有必要重点讲一下这个组件的实现流程。虽然小程序，有很多很好看并且也很好用的组件，但是像头部这种滑动日历组件小程序肯定是没有的，所以只能自己去写一个，实现起来其实也不难，主要用到小程序里面的 touchstart、touchmove、touchend 以及 touchcancel（防止滑动时遇到突然来电话等情况） 事件（当然这4个事件也是 w3c 里面的事件）。关于这个日历组件的实现思路大概如下：\n\n1. *初始化单元格* 这个日历组件总共有15个单元，虽然展示在我们面前的只有5个，实际上在这5个单元格的左边和右边都分别有5个看不到的日历单元格；\n\n2. *填充单元内容* 接下来就是填充着15个单元格里面的日期以及星期，应该如何计算？其实，只需要获取今天00点00分时的时间戳，然后通过加减 n（其他日期与今天的差值） 个 86400000 毫秒即可，这个 86400000 毫秒就是两天之间的时间戳只差，比如3月16日00时00分与3月15日00时00分之间刚好相差 86400000 毫秒；\n\n3. *计算宽度* 每个单元格宽度为五分之一屏幕宽度；\n\n4. *日历组件居中* 为了保证第七个单元格居中，也就是让这中间这个单元格选中，组件容器向左负偏移一个屏幕宽度距离。`transiform: translate(-SCREENWIDTHpx, 0)`；\n\n5. *向左滑动处理* 计算向左滑动的距离，设置组件容器的偏移量；\n\n6. *向右滑动处理* 计算向右滑动距离，设置组件容器的偏移量；\n\n7. *滑动结束* 当滑动结束，根据最终滑动的距离计算向左或向右滑动了多少天，来选中最终的日期，然后根据这个日期重新渲染单元格；\n\n8. *滑动取消* 对于滑动取消这种情况，复位组件，即选中今天。\n\n**登录态维护**\n\n登录时序图\n\n![登录态维护](https://mp.weixin.qq.com/debug/wxadoc/dev/image/login.png?t=201733)\n\n参考以上的微信提供的登录时序图，以及结合 139 邮箱小程序的登录特征，后台后台提供两个接口：一个是用户第一次登录（ sid、rmKey 等登录信息不存在）时所调用的登录接口；另外一个则是，用户之前已经登录过（小程序缓存 Storage 里面已存在 sid、rmKey等登录信息）时所调用的免登录接口。\n\n流程图如下：\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/7.png\" alt=\"登录页面\" width=\"450\" >\n\n代码实现如下：\n\n登录\n\n```javascript\n...\n\ndoLogin: function () {\n    var _this = this;\n    if (_this.data.phoneLogin && !_this.data.phoneNumber.trim()) {\n      wx.showModal({\n        title     : '139邮箱提示',\n        content   : '请输入手机号',\n        showCancel: false\n      });\n      return;\n    }\n\n    if (_this.data.mailLogin && !_this.data.mailName.trim()) {\n      wx.showModal({\n        title     : '139邮箱提示',\n        content   : '请输入邮箱账号',\n        showCancel: false\n      });\n      return;\n    }\n    // 登录成功，跳转至用户中心\n    wx.login({\n      success: function (res) {\n        var code  = res.code;\n        if (code) {\n          if (_this.data.phoneLogin) {\n            _this.loginFunc({\n              code        : code,\n              userNumber  : _this.data.phoneNumber.trim(),\n              password    : _this.data.smsCode   \n            }, function (json) {\n              if (json.statusCode === 200) {\n                  var data = json.data;\n                  if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                  }\n                  // 登录成功，跳转至用户中心\n                  if (data && data.code === 'S_OK') {\n                    wx.setStorage({\n                      key : 'sid',\n                      data: data.sid\n                    });\n                    // 登录成功，跳转至用户中心\n                    wx.switchTab({\n                      url    : '../../pages/conference/meetingRoom',\n                      success: function (res) {\n                        console.log('登录成功！');\n                      }\n                    });\n                  }\n                }\n              });\n          } else if (_this.data.mailLogin) {\n            _this.loginFunc({\n              code        : code,\n              userNumber  : _this.data.mailName.trim(),\n              password    : _this.data.password   \n            }, function (json) {\n                if (json.statusCode === 200) {\n                  var data = json.data;\n                  if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                  }\n                  // 登录成功，跳转至用户中心\n                  if (data && data.code === 'S_OK') {\n                    wx.setStorage({\n                      key : 'sid',\n                      data: data.sid\n                    });\n                    wx.setStorage({\n                      key : 'rmKey',\n                      data: data.rmKey\n                    });\n\n                    // 登录成功，跳转至用户中心\n                    wx.switchTab({\n                      url    : '../../pages/conference/meetingRoom',\n                      success: function (res) {\n                        console.log('登录成功！');\n                      }\n                    });\n                  }\n                }\n            });\n          }\n        }\n      }\n    });\n  },\n ...\n```\n\n免登陆\n\n```javascript\n...\n\n  /** \n   * 免登录操作 \n   */\n  freeLoginAction: function (callback) {\n    var sid   = wx.getStorageSync('sid');\n    var code  = wx.getStorageSync('code');\n    var rmKey = wx.getStorageSync('rmKey');\n    if (sid && code && rmKey && !/MP_USER_####/.test(sid)) {\n      this.freeLogin({\n        sid : sid,\n        code: code\n      }, rmKey, function (res) {\n        if (res.statusCode === 200) {\n          var data = res.data;\n          // 只有成功的时候才传回调\n          if (data.code === 'S_OK') {\n            wx.setStorageSync('sid', data.sid);\n            data.rmKey && wx.setStorageSync('rmKey', data.rmKey)\n            callback && callback(res);\n          }\n        }\n      });\n    } else {\n      // 如果还没登录，缓存中的 sid 为空或者无效，跳转至登录页\n      wx.navigateTo({\n        url: '../../pages/login/login'\n      });\n    }\n  },\n  /**\n   * 免登录\n   * @param  {Object}    options   请求参数\n   * @param  {String}    rmKey     RMKEY\n   * @param  {Function}  callback  回调\n   * @return void(0)\n   */\n  freeLogin: function (options, rmKey, callback) {\n    options = util.json2xml(options);\n    wx.request({\n      url    : 'https://xxx.cn' + '/weixin/s?func=weixin:freeLoginMiniProgram',\n      data   : options,\n      method : 'POST',\n      header : {\n        'Cookie'      : 'RMKEY=' + rmKey,\n        'content-type': 'application/xml'\n      }, \n      success: function (res) {\n        if (res) {\n          callback && callback(res);\n        }\n      },\n      fail   : function (err) {\n        callback && callback(err);\n      }\n    })\n  },\n\n...\n```\n\n\n\n\n### 遇到的问题\n\n- 小程序使用 Mustache 语法（双大括号）将变量包起来的数据绑定，不支持比较复杂的运算，哪怕稍微有点复杂，如：\n\n支持\n\n```javascript\n{{ a + b}}\n```\n\n不支持\n\n```javascript\n{{ a + b + c }}\n```\n\n因此，如果涉及到数据的计算，最好先在 js 里面计算好了，在绑定到 View 层。\n\n- 小程序不支持 Cookie。小程序使用框架提供的 `wx.request` 接口发送 https 请求不会携带 Cookie 信息，传统webserver的会话管理能力 session（比如邮箱会话校验所使用的 RMKEY ）在微信小程序无法直接使用，在这点上微信小程序更像CS架构的开发模式，开发者需要自己实现会话管理功能。\n\n我们的解决方法是将 RMKEY 放到请求的头部新建字段带给后台。\n\n```javascript\nsubMeetingRoom: function (options, rmKey, callback) {\n\tvar sid   = wx.getStorageSync('sid');\n\tvar rmKey = wx.getStorageSync('rmKey'); \n\toptions   = util.json2xml(options);\n\twx.request({\n\t  url    : 'https://xxx.com' + '/calendar/s?func=calendar:subMeetingRoom&sid=' + sid,\n\t  data   : options,\n\t  method : 'POST',\n\t  header : {\n\t    'content-type': 'application/xml',\n\t    'Cookie'      : 'RMKEY=' + rmKey  // 请求创建一个 Cookie 字段\n\t  },\n\t  success: function (res) {\n\t    if (res) {\n\t      callback && callback(res);\n\t    }\n\t  },\n\t  fail   : function (err) {\n\t    callback && callback(err);\n\t  }\n\t})\n}\n```\n\n- 小程序长度单位 rpx 和 px 的转换，有些情况只能到真机里面去看；如果使用微信开发工具的话，建议切换成 iPhone 6 模式。\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/ac2a2834-4bf0-44c1-84aa-ece1f6abfeca.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/a814a870-e0d9-47f2-84e7-ca49b1b80996.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/26f9bd25-2e5d-4d07-aabf-ae19d00f1dfe.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n以上是在 Windows 下使用的微信开发者工具返回来的像素比，iPhone 4s 的像素比居然的也是 2。\n\n\n### 总结\n\n站在开发者的角度看，\n\n- 小程序入手简单，也正是因为简单，所以不适合做一些场景比较复杂的应用；\n\n- 很多组件小程序都已经帮你封装好了，简洁、也好看；但是如果，你要自己去实现一些更加个性化的组件还是有点麻烦。\n","source":"_posts/summary-of-mini-program.md","raw":"---\ntitle: 小程序项目小结\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-03-16\ntags:\n\t- 小程序\n\t- WeChat\nthumbnail:\nblogexcerpt: 其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个...\n\n---\n\n<!-- toc -->\n\n其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个，也就是今天我要总结的东西 ---- 结合日历实现会议室预订微信小程序产品需求。\n\n### 需求\n\n首先，看一下需求列表。功能清单大概如下3点：\n\n- 小程序首页可以根据日期查看会议订满和可预订状态；\n\n- 可以查看会议室预订情况，在空闲时段可以预订会议室；\n\n- 预订会议室后，提供集中查看页面，查看自己预订的所有会议室。\n\n此外，还有一个比较重要的功能点也就是登录功能：包括绑定账号登录，以及登录态的维护。当初评审的时候，没有把登录功能加入到工作量里面，事实上，登录功能也一点儿不比其他功能要简单。\n\n需求整体流程图大概如下：\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/1.png\" alt=\"主要流程\" width=\"400\" >\n\n### 项目结构\n\n根据需求以及UI设计，我们把页面分成了登录页、我的（用户中心）、会议室列表页面、会议室预订页面、预订成功页面、我的预订六个模块页面以及其他公共方法模块。\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/2.png\" alt=\"项目结构\" width=\"500\" >\n\n### 主要模块分解\n\n**会议室列表模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/3.png\" alt=\"会议室列表页\" width=\"300\" >\n\n会议室列表页面主要包含两个部分，头部的滑动日历组件，以及内容部分的会议室列表。\n\n**预订页面模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/4.png\" alt=\"预订页面-可预订\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/5.png\" alt=\"预订页面-已失效\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/9.png\" alt=\"预订页面\" width=\"300\" >\n\n预订会议室包含当前会议室预订的列表、预订两个部分。根据底部预订按钮可以分为三种情况，可预订、已订满（截图没有）、已失效；会议室预订的最小粒度为30分钟。\n\n- 可预订：说明当天该会议室至少有30分钟的时间段是可以预订，提供预订按钮；\n\n- 已订满：说明当天已经订满或者不可以在预订了，不提供预订按钮；\n\n- 已失效：比如，我今天打开昨天的会议室，就是已失效会议室，不提供预订按钮。\n\n**登录模块**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/6.png\" alt=\"登录页面\" width=\"350\" >\n\n登录分为手机号登录和邮箱账号登录。\n\n### 重点实现\n\n**会议室列表日历组件**\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/8.png\" alt=\"登录页面\" width=\"300\" >\n\n会议室列表页面模块页面重点的部分就是头部这个日历组件，所以有必要重点讲一下这个组件的实现流程。虽然小程序，有很多很好看并且也很好用的组件，但是像头部这种滑动日历组件小程序肯定是没有的，所以只能自己去写一个，实现起来其实也不难，主要用到小程序里面的 touchstart、touchmove、touchend 以及 touchcancel（防止滑动时遇到突然来电话等情况） 事件（当然这4个事件也是 w3c 里面的事件）。关于这个日历组件的实现思路大概如下：\n\n1. *初始化单元格* 这个日历组件总共有15个单元，虽然展示在我们面前的只有5个，实际上在这5个单元格的左边和右边都分别有5个看不到的日历单元格；\n\n2. *填充单元内容* 接下来就是填充着15个单元格里面的日期以及星期，应该如何计算？其实，只需要获取今天00点00分时的时间戳，然后通过加减 n（其他日期与今天的差值） 个 86400000 毫秒即可，这个 86400000 毫秒就是两天之间的时间戳只差，比如3月16日00时00分与3月15日00时00分之间刚好相差 86400000 毫秒；\n\n3. *计算宽度* 每个单元格宽度为五分之一屏幕宽度；\n\n4. *日历组件居中* 为了保证第七个单元格居中，也就是让这中间这个单元格选中，组件容器向左负偏移一个屏幕宽度距离。`transiform: translate(-SCREENWIDTHpx, 0)`；\n\n5. *向左滑动处理* 计算向左滑动的距离，设置组件容器的偏移量；\n\n6. *向右滑动处理* 计算向右滑动距离，设置组件容器的偏移量；\n\n7. *滑动结束* 当滑动结束，根据最终滑动的距离计算向左或向右滑动了多少天，来选中最终的日期，然后根据这个日期重新渲染单元格；\n\n8. *滑动取消* 对于滑动取消这种情况，复位组件，即选中今天。\n\n**登录态维护**\n\n登录时序图\n\n![登录态维护](https://mp.weixin.qq.com/debug/wxadoc/dev/image/login.png?t=201733)\n\n参考以上的微信提供的登录时序图，以及结合 139 邮箱小程序的登录特征，后台后台提供两个接口：一个是用户第一次登录（ sid、rmKey 等登录信息不存在）时所调用的登录接口；另外一个则是，用户之前已经登录过（小程序缓存 Storage 里面已存在 sid、rmKey等登录信息）时所调用的免登录接口。\n\n流程图如下：\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/7.png\" alt=\"登录页面\" width=\"450\" >\n\n代码实现如下：\n\n登录\n\n```javascript\n...\n\ndoLogin: function () {\n    var _this = this;\n    if (_this.data.phoneLogin && !_this.data.phoneNumber.trim()) {\n      wx.showModal({\n        title     : '139邮箱提示',\n        content   : '请输入手机号',\n        showCancel: false\n      });\n      return;\n    }\n\n    if (_this.data.mailLogin && !_this.data.mailName.trim()) {\n      wx.showModal({\n        title     : '139邮箱提示',\n        content   : '请输入邮箱账号',\n        showCancel: false\n      });\n      return;\n    }\n    // 登录成功，跳转至用户中心\n    wx.login({\n      success: function (res) {\n        var code  = res.code;\n        if (code) {\n          if (_this.data.phoneLogin) {\n            _this.loginFunc({\n              code        : code,\n              userNumber  : _this.data.phoneNumber.trim(),\n              password    : _this.data.smsCode   \n            }, function (json) {\n              if (json.statusCode === 200) {\n                  var data = json.data;\n                  if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                  }\n                  // 登录成功，跳转至用户中心\n                  if (data && data.code === 'S_OK') {\n                    wx.setStorage({\n                      key : 'sid',\n                      data: data.sid\n                    });\n                    // 登录成功，跳转至用户中心\n                    wx.switchTab({\n                      url    : '../../pages/conference/meetingRoom',\n                      success: function (res) {\n                        console.log('登录成功！');\n                      }\n                    });\n                  }\n                }\n              });\n          } else if (_this.data.mailLogin) {\n            _this.loginFunc({\n              code        : code,\n              userNumber  : _this.data.mailName.trim(),\n              password    : _this.data.password   \n            }, function (json) {\n                if (json.statusCode === 200) {\n                  var data = json.data;\n                  if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                  }\n                  // 登录成功，跳转至用户中心\n                  if (data && data.code === 'S_OK') {\n                    wx.setStorage({\n                      key : 'sid',\n                      data: data.sid\n                    });\n                    wx.setStorage({\n                      key : 'rmKey',\n                      data: data.rmKey\n                    });\n\n                    // 登录成功，跳转至用户中心\n                    wx.switchTab({\n                      url    : '../../pages/conference/meetingRoom',\n                      success: function (res) {\n                        console.log('登录成功！');\n                      }\n                    });\n                  }\n                }\n            });\n          }\n        }\n      }\n    });\n  },\n ...\n```\n\n免登陆\n\n```javascript\n...\n\n  /** \n   * 免登录操作 \n   */\n  freeLoginAction: function (callback) {\n    var sid   = wx.getStorageSync('sid');\n    var code  = wx.getStorageSync('code');\n    var rmKey = wx.getStorageSync('rmKey');\n    if (sid && code && rmKey && !/MP_USER_####/.test(sid)) {\n      this.freeLogin({\n        sid : sid,\n        code: code\n      }, rmKey, function (res) {\n        if (res.statusCode === 200) {\n          var data = res.data;\n          // 只有成功的时候才传回调\n          if (data.code === 'S_OK') {\n            wx.setStorageSync('sid', data.sid);\n            data.rmKey && wx.setStorageSync('rmKey', data.rmKey)\n            callback && callback(res);\n          }\n        }\n      });\n    } else {\n      // 如果还没登录，缓存中的 sid 为空或者无效，跳转至登录页\n      wx.navigateTo({\n        url: '../../pages/login/login'\n      });\n    }\n  },\n  /**\n   * 免登录\n   * @param  {Object}    options   请求参数\n   * @param  {String}    rmKey     RMKEY\n   * @param  {Function}  callback  回调\n   * @return void(0)\n   */\n  freeLogin: function (options, rmKey, callback) {\n    options = util.json2xml(options);\n    wx.request({\n      url    : 'https://xxx.cn' + '/weixin/s?func=weixin:freeLoginMiniProgram',\n      data   : options,\n      method : 'POST',\n      header : {\n        'Cookie'      : 'RMKEY=' + rmKey,\n        'content-type': 'application/xml'\n      }, \n      success: function (res) {\n        if (res) {\n          callback && callback(res);\n        }\n      },\n      fail   : function (err) {\n        callback && callback(err);\n      }\n    })\n  },\n\n...\n```\n\n\n\n\n### 遇到的问题\n\n- 小程序使用 Mustache 语法（双大括号）将变量包起来的数据绑定，不支持比较复杂的运算，哪怕稍微有点复杂，如：\n\n支持\n\n```javascript\n{{ a + b}}\n```\n\n不支持\n\n```javascript\n{{ a + b + c }}\n```\n\n因此，如果涉及到数据的计算，最好先在 js 里面计算好了，在绑定到 View 层。\n\n- 小程序不支持 Cookie。小程序使用框架提供的 `wx.request` 接口发送 https 请求不会携带 Cookie 信息，传统webserver的会话管理能力 session（比如邮箱会话校验所使用的 RMKEY ）在微信小程序无法直接使用，在这点上微信小程序更像CS架构的开发模式，开发者需要自己实现会话管理功能。\n\n我们的解决方法是将 RMKEY 放到请求的头部新建字段带给后台。\n\n```javascript\nsubMeetingRoom: function (options, rmKey, callback) {\n\tvar sid   = wx.getStorageSync('sid');\n\tvar rmKey = wx.getStorageSync('rmKey'); \n\toptions   = util.json2xml(options);\n\twx.request({\n\t  url    : 'https://xxx.com' + '/calendar/s?func=calendar:subMeetingRoom&sid=' + sid,\n\t  data   : options,\n\t  method : 'POST',\n\t  header : {\n\t    'content-type': 'application/xml',\n\t    'Cookie'      : 'RMKEY=' + rmKey  // 请求创建一个 Cookie 字段\n\t  },\n\t  success: function (res) {\n\t    if (res) {\n\t      callback && callback(res);\n\t    }\n\t  },\n\t  fail   : function (err) {\n\t    callback && callback(err);\n\t  }\n\t})\n}\n```\n\n- 小程序长度单位 rpx 和 px 的转换，有些情况只能到真机里面去看；如果使用微信开发工具的话，建议切换成 iPhone 6 模式。\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/ac2a2834-4bf0-44c1-84aa-ece1f6abfeca.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/a814a870-e0d9-47f2-84e7-ca49b1b80996.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/26f9bd25-2e5d-4d07-aabf-ae19d00f1dfe.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n以上是在 Windows 下使用的微信开发者工具返回来的像素比，iPhone 4s 的像素比居然的也是 2。\n\n\n### 总结\n\n站在开发者的角度看，\n\n- 小程序入手简单，也正是因为简单，所以不适合做一些场景比较复杂的应用；\n\n- 很多组件小程序都已经帮你封装好了，简洁、也好看；但是如果，你要自己去实现一些更加个性化的组件还是有点麻烦。\n","slug":"summary-of-mini-program","published":1,"updated":"2017-03-16T00:00:00.000Z","_id":"cmduj3n43004sk8sv3vetdfe3","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E9%9C%80%E6%B1%82\">需求</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">项目结构</a></li>\n<li><a href=\"#%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97%E5%88%86%E8%A7%A3\">主要模块分解</a></li>\n<li><a href=\"#%E9%87%8D%E7%82%B9%E5%AE%9E%E7%8E%B0\">重点实现</a></li>\n<li><a href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">遇到的问题</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个，也就是今天我要总结的东西 —- 结合日历实现会议室预订微信小程序产品需求。</p>\n<h3><span id=\"需求\">需求</span></h3><p>首先，看一下需求列表。功能清单大概如下3点：</p>\n<ul>\n<li><p>小程序首页可以根据日期查看会议订满和可预订状态；</p>\n</li>\n<li><p>可以查看会议室预订情况，在空闲时段可以预订会议室；</p>\n</li>\n<li><p>预订会议室后，提供集中查看页面，查看自己预订的所有会议室。</p>\n</li>\n</ul>\n<p>此外，还有一个比较重要的功能点也就是登录功能：包括绑定账号登录，以及登录态的维护。当初评审的时候，没有把登录功能加入到工作量里面，事实上，登录功能也一点儿不比其他功能要简单。</p>\n<p>需求整体流程图大概如下：</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/1.png\" alt=\"主要流程\" width=\"400\">\n\n<h3><span id=\"项目结构\">项目结构</span></h3><p>根据需求以及UI设计，我们把页面分成了登录页、我的（用户中心）、会议室列表页面、会议室预订页面、预订成功页面、我的预订六个模块页面以及其他公共方法模块。</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/2.png\" alt=\"项目结构\" width=\"500\">\n\n<h3><span id=\"主要模块分解\">主要模块分解</span></h3><p><strong>会议室列表模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/3.png\" alt=\"会议室列表页\" width=\"300\">\n\n<p>会议室列表页面主要包含两个部分，头部的滑动日历组件，以及内容部分的会议室列表。</p>\n<p><strong>预订页面模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/4.png\" alt=\"预订页面-可预订\" width=\"300\">\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/5.png\" alt=\"预订页面-已失效\" width=\"300\">\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/9.png\" alt=\"预订页面\" width=\"300\">\n\n<p>预订会议室包含当前会议室预订的列表、预订两个部分。根据底部预订按钮可以分为三种情况，可预订、已订满（截图没有）、已失效；会议室预订的最小粒度为30分钟。</p>\n<ul>\n<li><p>可预订：说明当天该会议室至少有30分钟的时间段是可以预订，提供预订按钮；</p>\n</li>\n<li><p>已订满：说明当天已经订满或者不可以在预订了，不提供预订按钮；</p>\n</li>\n<li><p>已失效：比如，我今天打开昨天的会议室，就是已失效会议室，不提供预订按钮。</p>\n</li>\n</ul>\n<p><strong>登录模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/6.png\" alt=\"登录页面\" width=\"350\">\n\n<p>登录分为手机号登录和邮箱账号登录。</p>\n<h3><span id=\"重点实现\">重点实现</span></h3><p><strong>会议室列表日历组件</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/8.png\" alt=\"登录页面\" width=\"300\">\n\n<p>会议室列表页面模块页面重点的部分就是头部这个日历组件，所以有必要重点讲一下这个组件的实现流程。虽然小程序，有很多很好看并且也很好用的组件，但是像头部这种滑动日历组件小程序肯定是没有的，所以只能自己去写一个，实现起来其实也不难，主要用到小程序里面的 touchstart、touchmove、touchend 以及 touchcancel（防止滑动时遇到突然来电话等情况） 事件（当然这4个事件也是 w3c 里面的事件）。关于这个日历组件的实现思路大概如下：</p>\n<ol>\n<li><p><em>初始化单元格</em> 这个日历组件总共有15个单元，虽然展示在我们面前的只有5个，实际上在这5个单元格的左边和右边都分别有5个看不到的日历单元格；</p>\n</li>\n<li><p><em>填充单元内容</em> 接下来就是填充着15个单元格里面的日期以及星期，应该如何计算？其实，只需要获取今天00点00分时的时间戳，然后通过加减 n（其他日期与今天的差值） 个 86400000 毫秒即可，这个 86400000 毫秒就是两天之间的时间戳只差，比如3月16日00时00分与3月15日00时00分之间刚好相差 86400000 毫秒；</p>\n</li>\n<li><p><em>计算宽度</em> 每个单元格宽度为五分之一屏幕宽度；</p>\n</li>\n<li><p><em>日历组件居中</em> 为了保证第七个单元格居中，也就是让这中间这个单元格选中，组件容器向左负偏移一个屏幕宽度距离。<code>transiform: translate(-SCREENWIDTHpx, 0)</code>；</p>\n</li>\n<li><p><em>向左滑动处理</em> 计算向左滑动的距离，设置组件容器的偏移量；</p>\n</li>\n<li><p><em>向右滑动处理</em> 计算向右滑动距离，设置组件容器的偏移量；</p>\n</li>\n<li><p><em>滑动结束</em> 当滑动结束，根据最终滑动的距离计算向左或向右滑动了多少天，来选中最终的日期，然后根据这个日期重新渲染单元格；</p>\n</li>\n<li><p><em>滑动取消</em> 对于滑动取消这种情况，复位组件，即选中今天。</p>\n</li>\n</ol>\n<p><strong>登录态维护</strong></p>\n<p>登录时序图</p>\n<p><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/login.png?t=201733\" alt=\"登录态维护\"></p>\n<p>参考以上的微信提供的登录时序图，以及结合 139 邮箱小程序的登录特征，后台后台提供两个接口：一个是用户第一次登录（ sid、rmKey 等登录信息不存在）时所调用的登录接口；另外一个则是，用户之前已经登录过（小程序缓存 Storage 里面已存在 sid、rmKey等登录信息）时所调用的免登录接口。</p>\n<p>流程图如下：</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/7.png\" alt=\"登录页面\" width=\"450\">\n\n<p>代码实现如下：</p>\n<p>登录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">doLogin</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">phoneLogin</span> &amp;&amp; !_this.<span class=\"property\">data</span>.<span class=\"property\">phoneNumber</span>.<span class=\"title function_\">trim</span>()) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">        title     : <span class=\"string\">&#x27;139邮箱提示&#x27;</span>,</span><br><span class=\"line\">        content   : <span class=\"string\">&#x27;请输入手机号&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showCancel</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">mailLogin</span> &amp;&amp; !_this.<span class=\"property\">data</span>.<span class=\"property\">mailName</span>.<span class=\"title function_\">trim</span>()) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">        title     : <span class=\"string\">&#x27;139邮箱提示&#x27;</span>,</span><br><span class=\"line\">        content   : <span class=\"string\">&#x27;请输入邮箱账号&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showCancel</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">    wx.<span class=\"title function_\">login</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code  = res.<span class=\"property\">code</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (code) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">phoneLogin</span>) &#123;</span><br><span class=\"line\">            _this.<span class=\"title function_\">loginFunc</span>(&#123;</span><br><span class=\"line\">              code        : code,</span><br><span class=\"line\">              userNumber  : _this.<span class=\"property\">data</span>.<span class=\"property\">phoneNumber</span>.<span class=\"title function_\">trim</span>(),</span><br><span class=\"line\">              password    : _this.<span class=\"property\">data</span>.<span class=\"property\">smsCode</span>   </span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (json.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> data = json.<span class=\"property\">data</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                    data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;sid&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">sid</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                    wx.<span class=\"title function_\">switchTab</span>(&#123;</span><br><span class=\"line\">                      url    : <span class=\"string\">&#x27;../../pages/conference/meetingRoom&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;登录成功！&#x27;</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">mailLogin</span>) &#123;</span><br><span class=\"line\">            _this.<span class=\"title function_\">loginFunc</span>(&#123;</span><br><span class=\"line\">              code        : code,</span><br><span class=\"line\">              userNumber  : _this.<span class=\"property\">data</span>.<span class=\"property\">mailName</span>.<span class=\"title function_\">trim</span>(),</span><br><span class=\"line\">              password    : _this.<span class=\"property\">data</span>.<span class=\"property\">password</span>   </span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (json.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> data = json.<span class=\"property\">data</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                    data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;sid&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">sid</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;rmKey&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">rmKey</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                    wx.<span class=\"title function_\">switchTab</span>(&#123;</span><br><span class=\"line\">                      url    : <span class=\"string\">&#x27;../../pages/conference/meetingRoom&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;登录成功！&#x27;</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>免登陆</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">   * 免登录操作 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">freeLoginAction</span>: <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sid   = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> code  = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;code&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rmKey = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sid &amp;&amp; code &amp;&amp; rmKey &amp;&amp; !<span class=\"regexp\">/MP_USER_####/</span>.<span class=\"title function_\">test</span>(sid)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">freeLogin</span>(&#123;</span><br><span class=\"line\">        sid : sid,</span><br><span class=\"line\">        <span class=\"attr\">code</span>: code</span><br><span class=\"line\">      &#125;, rmKey, <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 只有成功的时候才传回调</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">setStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>, data.<span class=\"property\">sid</span>);</span><br><span class=\"line\">            data.<span class=\"property\">rmKey</span> &amp;&amp; wx.<span class=\"title function_\">setStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>, data.<span class=\"property\">rmKey</span>)</span><br><span class=\"line\">            callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果还没登录，缓存中的 sid 为空或者无效，跳转至登录页</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../../pages/login/login&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 免登录</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">Object</span>&#125;    options   请求参数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">String</span>&#125;    rmKey     RMKEY</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">Function</span>&#125;  callback  回调</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> void(0)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">freeLogin</span>: <span class=\"keyword\">function</span> (<span class=\"params\">options, rmKey, callback</span>) &#123;</span><br><span class=\"line\">    options = util.<span class=\"title function_\">json2xml</span>(options);</span><br><span class=\"line\">    wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      url    : <span class=\"string\">&#x27;https://xxx.cn&#x27;</span> + <span class=\"string\">&#x27;/weixin/s?func=weixin:freeLoginMiniProgram&#x27;</span>,</span><br><span class=\"line\">      data   : options,</span><br><span class=\"line\">      method : <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">      header : &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Cookie&#x27;</span>      : <span class=\"string\">&#x27;RMKEY=&#x27;</span> + rmKey,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/xml&#x27;</span></span><br><span class=\"line\">      &#125;, </span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">          callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail   : <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">        callback &amp;&amp; <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3><span id=\"遇到的问题\">遇到的问题</span></h3><ul>\n<li>小程序使用 Mustache 语法（双大括号）将变量包起来的数据绑定，不支持比较复杂的运算，哪怕稍微有点复杂，如：</li>\n</ul>\n<p>支持</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; a + b&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不支持</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; a + b + c &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，如果涉及到数据的计算，最好先在 js 里面计算好了，在绑定到 View 层。</p>\n<ul>\n<li>小程序不支持 Cookie。小程序使用框架提供的 <code>wx.request</code> 接口发送 https 请求不会携带 Cookie 信息，传统webserver的会话管理能力 session（比如邮箱会话校验所使用的 RMKEY ）在微信小程序无法直接使用，在这点上微信小程序更像CS架构的开发模式，开发者需要自己实现会话管理功能。</li>\n</ul>\n<p>我们的解决方法是将 RMKEY 放到请求的头部新建字段带给后台。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">subMeetingRoom</span>: <span class=\"keyword\">function</span> (<span class=\"params\">options, rmKey, callback</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sid   = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rmKey = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>); </span><br><span class=\"line\">\toptions   = util.<span class=\"title function_\">json2xml</span>(options);</span><br><span class=\"line\">\twx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t  url    : <span class=\"string\">&#x27;https://xxx.com&#x27;</span> + <span class=\"string\">&#x27;/calendar/s?func=calendar:subMeetingRoom&amp;sid=&#x27;</span> + sid,</span><br><span class=\"line\">\t  data   : options,</span><br><span class=\"line\">\t  method : <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">\t  header : &#123;</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/xml&#x27;</span>,</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;Cookie&#x27;</span>      : <span class=\"string\">&#x27;RMKEY=&#x27;</span> + rmKey  <span class=\"comment\">// 请求创建一个 Cookie 字段</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">\t      callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  fail   : <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">\t    callback &amp;&amp; <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>小程序长度单位 rpx 和 px 的转换，有些情况只能到真机里面去看；如果使用微信开发工具的话，建议切换成 iPhone 6 模式。</li>\n</ul>\n<img src=\"https://dn-coding-net-production-pp.qbox.me/ac2a2834-4bf0-44c1-84aa-ece1f6abfeca.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\">\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/a814a870-e0d9-47f2-84e7-ca49b1b80996.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\">\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/26f9bd25-2e5d-4d07-aabf-ae19d00f1dfe.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\">\n\n<p>以上是在 Windows 下使用的微信开发者工具返回来的像素比，iPhone 4s 的像素比居然的也是 2。</p>\n<h3><span id=\"总结\">总结</span></h3><p>站在开发者的角度看，</p>\n<ul>\n<li><p>小程序入手简单，也正是因为简单，所以不适合做一些场景比较复杂的应用；</p>\n</li>\n<li><p>很多组件小程序都已经帮你封装好了，简洁、也好看；但是如果，你要自己去实现一些更加个性化的组件还是有点麻烦。</p>\n</li>\n</ul>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E9%9C%80%E6%B1%82\">需求</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">项目结构</a></li>\n<li><a href=\"#%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97%E5%88%86%E8%A7%A3\">主要模块分解</a></li>\n<li><a href=\"#%E9%87%8D%E7%82%B9%E5%AE%9E%E7%8E%B0\">重点实现</a></li>\n<li><a href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">遇到的问题</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个，也就是今天我要总结的东西 —- 结合日历实现会议室预订微信小程序产品需求。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>首先，看一下需求列表。功能清单大概如下3点：</p>\n<ul>\n<li><p>小程序首页可以根据日期查看会议订满和可预订状态；</p>\n</li>\n<li><p>可以查看会议室预订情况，在空闲时段可以预订会议室；</p>\n</li>\n<li><p>预订会议室后，提供集中查看页面，查看自己预订的所有会议室。</p>\n</li>\n</ul>\n<p>此外，还有一个比较重要的功能点也就是登录功能：包括绑定账号登录，以及登录态的维护。当初评审的时候，没有把登录功能加入到工作量里面，事实上，登录功能也一点儿不比其他功能要简单。</p>\n<p>需求整体流程图大概如下：</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/1.png\" alt=\"主要流程\" width=\"400\" >\n\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>根据需求以及UI设计，我们把页面分成了登录页、我的（用户中心）、会议室列表页面、会议室预订页面、预订成功页面、我的预订六个模块页面以及其他公共方法模块。</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/2.png\" alt=\"项目结构\" width=\"500\" >\n\n<h3 id=\"主要模块分解\"><a href=\"#主要模块分解\" class=\"headerlink\" title=\"主要模块分解\"></a>主要模块分解</h3><p><strong>会议室列表模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/3.png\" alt=\"会议室列表页\" width=\"300\" >\n\n<p>会议室列表页面主要包含两个部分，头部的滑动日历组件，以及内容部分的会议室列表。</p>\n<p><strong>预订页面模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/4.png\" alt=\"预订页面-可预订\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/5.png\" alt=\"预订页面-已失效\" width=\"300\" >\n\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/9.png\" alt=\"预订页面\" width=\"300\" >\n\n<p>预订会议室包含当前会议室预订的列表、预订两个部分。根据底部预订按钮可以分为三种情况，可预订、已订满（截图没有）、已失效；会议室预订的最小粒度为30分钟。</p>\n<ul>\n<li><p>可预订：说明当天该会议室至少有30分钟的时间段是可以预订，提供预订按钮；</p>\n</li>\n<li><p>已订满：说明当天已经订满或者不可以在预订了，不提供预订按钮；</p>\n</li>\n<li><p>已失效：比如，我今天打开昨天的会议室，就是已失效会议室，不提供预订按钮。</p>\n</li>\n</ul>\n<p><strong>登录模块</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/6.png\" alt=\"登录页面\" width=\"350\" >\n\n<p>登录分为手机号登录和邮箱账号登录。</p>\n<h3 id=\"重点实现\"><a href=\"#重点实现\" class=\"headerlink\" title=\"重点实现\"></a>重点实现</h3><p><strong>会议室列表日历组件</strong></p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/8.png\" alt=\"登录页面\" width=\"300\" >\n\n<p>会议室列表页面模块页面重点的部分就是头部这个日历组件，所以有必要重点讲一下这个组件的实现流程。虽然小程序，有很多很好看并且也很好用的组件，但是像头部这种滑动日历组件小程序肯定是没有的，所以只能自己去写一个，实现起来其实也不难，主要用到小程序里面的 touchstart、touchmove、touchend 以及 touchcancel（防止滑动时遇到突然来电话等情况） 事件（当然这4个事件也是 w3c 里面的事件）。关于这个日历组件的实现思路大概如下：</p>\n<ol>\n<li><p><em>初始化单元格</em> 这个日历组件总共有15个单元，虽然展示在我们面前的只有5个，实际上在这5个单元格的左边和右边都分别有5个看不到的日历单元格；</p>\n</li>\n<li><p><em>填充单元内容</em> 接下来就是填充着15个单元格里面的日期以及星期，应该如何计算？其实，只需要获取今天00点00分时的时间戳，然后通过加减 n（其他日期与今天的差值） 个 86400000 毫秒即可，这个 86400000 毫秒就是两天之间的时间戳只差，比如3月16日00时00分与3月15日00时00分之间刚好相差 86400000 毫秒；</p>\n</li>\n<li><p><em>计算宽度</em> 每个单元格宽度为五分之一屏幕宽度；</p>\n</li>\n<li><p><em>日历组件居中</em> 为了保证第七个单元格居中，也就是让这中间这个单元格选中，组件容器向左负偏移一个屏幕宽度距离。<code>transiform: translate(-SCREENWIDTHpx, 0)</code>；</p>\n</li>\n<li><p><em>向左滑动处理</em> 计算向左滑动的距离，设置组件容器的偏移量；</p>\n</li>\n<li><p><em>向右滑动处理</em> 计算向右滑动距离，设置组件容器的偏移量；</p>\n</li>\n<li><p><em>滑动结束</em> 当滑动结束，根据最终滑动的距离计算向左或向右滑动了多少天，来选中最终的日期，然后根据这个日期重新渲染单元格；</p>\n</li>\n<li><p><em>滑动取消</em> 对于滑动取消这种情况，复位组件，即选中今天。</p>\n</li>\n</ol>\n<p><strong>登录态维护</strong></p>\n<p>登录时序图</p>\n<p><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/login.png?t=201733\" alt=\"登录态维护\"></p>\n<p>参考以上的微信提供的登录时序图，以及结合 139 邮箱小程序的登录特征，后台后台提供两个接口：一个是用户第一次登录（ sid、rmKey 等登录信息不存在）时所调用的登录接口；另外一个则是，用户之前已经登录过（小程序缓存 Storage 里面已存在 sid、rmKey等登录信息）时所调用的免登录接口。</p>\n<p>流程图如下：</p>\n<img src=\"https://jangdelong.github.io/blog_img/images/summary-of-mini-program/7.png\" alt=\"登录页面\" width=\"450\" >\n\n<p>代码实现如下：</p>\n<p>登录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">doLogin</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">phoneLogin</span> &amp;&amp; !_this.<span class=\"property\">data</span>.<span class=\"property\">phoneNumber</span>.<span class=\"title function_\">trim</span>()) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">        title     : <span class=\"string\">&#x27;139邮箱提示&#x27;</span>,</span><br><span class=\"line\">        content   : <span class=\"string\">&#x27;请输入手机号&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showCancel</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">mailLogin</span> &amp;&amp; !_this.<span class=\"property\">data</span>.<span class=\"property\">mailName</span>.<span class=\"title function_\">trim</span>()) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">        title     : <span class=\"string\">&#x27;139邮箱提示&#x27;</span>,</span><br><span class=\"line\">        content   : <span class=\"string\">&#x27;请输入邮箱账号&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showCancel</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">    wx.<span class=\"title function_\">login</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> code  = res.<span class=\"property\">code</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (code) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">phoneLogin</span>) &#123;</span><br><span class=\"line\">            _this.<span class=\"title function_\">loginFunc</span>(&#123;</span><br><span class=\"line\">              code        : code,</span><br><span class=\"line\">              userNumber  : _this.<span class=\"property\">data</span>.<span class=\"property\">phoneNumber</span>.<span class=\"title function_\">trim</span>(),</span><br><span class=\"line\">              password    : _this.<span class=\"property\">data</span>.<span class=\"property\">smsCode</span>   </span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (json.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> data = json.<span class=\"property\">data</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                    data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;sid&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">sid</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                    wx.<span class=\"title function_\">switchTab</span>(&#123;</span><br><span class=\"line\">                      url    : <span class=\"string\">&#x27;../../pages/conference/meetingRoom&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;登录成功！&#x27;</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_this.<span class=\"property\">data</span>.<span class=\"property\">mailLogin</span>) &#123;</span><br><span class=\"line\">            _this.<span class=\"title function_\">loginFunc</span>(&#123;</span><br><span class=\"line\">              code        : code,</span><br><span class=\"line\">              userNumber  : _this.<span class=\"property\">data</span>.<span class=\"property\">mailName</span>.<span class=\"title function_\">trim</span>(),</span><br><span class=\"line\">              password    : _this.<span class=\"property\">data</span>.<span class=\"property\">password</span>   </span><br><span class=\"line\">            &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">json</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (json.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> data = json.<span class=\"property\">data</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                    data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;sid&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">sid</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    wx.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                      key : <span class=\"string\">&#x27;rmKey&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">data</span>: data.<span class=\"property\">rmKey</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功，跳转至用户中心</span></span><br><span class=\"line\">                    wx.<span class=\"title function_\">switchTab</span>(&#123;</span><br><span class=\"line\">                      url    : <span class=\"string\">&#x27;../../pages/conference/meetingRoom&#x27;</span>,</span><br><span class=\"line\">                      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;登录成功！&#x27;</span>);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>免登陆</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">   * 免登录操作 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">freeLoginAction</span>: <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sid   = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> code  = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;code&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rmKey = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sid &amp;&amp; code &amp;&amp; rmKey &amp;&amp; !<span class=\"regexp\">/MP_USER_####/</span>.<span class=\"title function_\">test</span>(sid)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">freeLogin</span>(&#123;</span><br><span class=\"line\">        sid : sid,</span><br><span class=\"line\">        <span class=\"attr\">code</span>: code</span><br><span class=\"line\">      &#125;, rmKey, <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">statusCode</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 只有成功的时候才传回调</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (data.<span class=\"property\">code</span> === <span class=\"string\">&#x27;S_OK&#x27;</span>) &#123;</span><br><span class=\"line\">            wx.<span class=\"title function_\">setStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>, data.<span class=\"property\">sid</span>);</span><br><span class=\"line\">            data.<span class=\"property\">rmKey</span> &amp;&amp; wx.<span class=\"title function_\">setStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>, data.<span class=\"property\">rmKey</span>)</span><br><span class=\"line\">            callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果还没登录，缓存中的 sid 为空或者无效，跳转至登录页</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../../pages/login/login&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 免登录</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">Object</span>&#125;    options   请求参数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">String</span>&#125;    rmKey     RMKEY</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">Function</span>&#125;  callback  回调</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> void(0)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">freeLogin</span>: <span class=\"keyword\">function</span> (<span class=\"params\">options, rmKey, callback</span>) &#123;</span><br><span class=\"line\">    options = util.<span class=\"title function_\">json2xml</span>(options);</span><br><span class=\"line\">    wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      url    : <span class=\"string\">&#x27;https://xxx.cn&#x27;</span> + <span class=\"string\">&#x27;/weixin/s?func=weixin:freeLoginMiniProgram&#x27;</span>,</span><br><span class=\"line\">      data   : options,</span><br><span class=\"line\">      method : <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">      header : &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Cookie&#x27;</span>      : <span class=\"string\">&#x27;RMKEY=&#x27;</span> + rmKey,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/xml&#x27;</span></span><br><span class=\"line\">      &#125;, </span><br><span class=\"line\">      <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">          callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail   : <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">        callback &amp;&amp; <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>小程序使用 Mustache 语法（双大括号）将变量包起来的数据绑定，不支持比较复杂的运算，哪怕稍微有点复杂，如：</li>\n</ul>\n<p>支持</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; a + b&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不支持</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; a + b + c &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，如果涉及到数据的计算，最好先在 js 里面计算好了，在绑定到 View 层。</p>\n<ul>\n<li>小程序不支持 Cookie。小程序使用框架提供的 <code>wx.request</code> 接口发送 https 请求不会携带 Cookie 信息，传统webserver的会话管理能力 session（比如邮箱会话校验所使用的 RMKEY ）在微信小程序无法直接使用，在这点上微信小程序更像CS架构的开发模式，开发者需要自己实现会话管理功能。</li>\n</ul>\n<p>我们的解决方法是将 RMKEY 放到请求的头部新建字段带给后台。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">subMeetingRoom</span>: <span class=\"keyword\">function</span> (<span class=\"params\">options, rmKey, callback</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sid   = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;sid&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rmKey = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;rmKey&#x27;</span>); </span><br><span class=\"line\">\toptions   = util.<span class=\"title function_\">json2xml</span>(options);</span><br><span class=\"line\">\twx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t  url    : <span class=\"string\">&#x27;https://xxx.com&#x27;</span> + <span class=\"string\">&#x27;/calendar/s?func=calendar:subMeetingRoom&amp;sid=&#x27;</span> + sid,</span><br><span class=\"line\">\t  data   : options,</span><br><span class=\"line\">\t  method : <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">\t  header : &#123;</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/xml&#x27;</span>,</span><br><span class=\"line\">\t    <span class=\"string\">&#x27;Cookie&#x27;</span>      : <span class=\"string\">&#x27;RMKEY=&#x27;</span> + rmKey  <span class=\"comment\">// 请求创建一个 Cookie 字段</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">\t      callback &amp;&amp; <span class=\"title function_\">callback</span>(res);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  fail   : <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">\t    callback &amp;&amp; <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>小程序长度单位 rpx 和 px 的转换，有些情况只能到真机里面去看；如果使用微信开发工具的话，建议切换成 iPhone 6 模式。</li>\n</ul>\n<img src=\"https://dn-coding-net-production-pp.qbox.me/ac2a2834-4bf0-44c1-84aa-ece1f6abfeca.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/a814a870-e0d9-47f2-84e7-ca49b1b80996.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<img src=\"https://dn-coding-net-production-pp.qbox.me/26f9bd25-2e5d-4d07-aabf-ae19d00f1dfe.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1\" alt=\"rpx\" >\n\n<p>以上是在 Windows 下使用的微信开发者工具返回来的像素比，iPhone 4s 的像素比居然的也是 2。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>站在开发者的角度看，</p>\n<ul>\n<li><p>小程序入手简单，也正是因为简单，所以不适合做一些场景比较复杂的应用；</p>\n</li>\n<li><p>很多组件小程序都已经帮你封装好了，简洁、也好看；但是如果，你要自己去实现一些更加个性化的组件还是有点麻烦。</p>\n</li>\n</ul>\n"},{"title":"淘宝 NPM 镜像","author":"Jelon","date":"2016-07-30T00:00:00.000Z","thumbnail":null,"blogexcerpt":"Node包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm ...","_content":"\n<!-- toc -->\n\n### 什么是 NPM\n\nNode 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm 是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装 npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm。\n\n### NPM 用途\n\nnpm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n### NPM 在国内\n\n虽说 npm 很方便，但是在国内由于网络原因，使用 npm 下载一些依赖包的时候，速度还是很慢，甚至有时候还要翻墙，大大影响了我们的开发效率。那么，是否有解决方案呢，答案是有的，那就是淘宝 npm 镜像。\n\n### 什么是淘宝 NPM 镜像\n\n淘宝的npm镜像是一个完整的 npmjs.org 镜像。你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步，[官网](http://npm.taobao.org/)截图如下。\n\n![taonpm官网](https://jangdelong.github.io/blog_img/images/taonpm/1.33pic_hd.jpg)\n\n### 淘宝 NPM 镜像安装及使用\n\n**安装**\n\n- 可以使用淘宝 npm 镜像定制的`cnpm`(gzip 压缩支持) 命令行工具代替默认的 `npm` :\n\n```bash\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 或者直接通过添加 `npm` 参数 alias 一个新命令:\n\n```bash\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n\n# Or alias it in .bashrc or .zshrc\n$ echo '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n  --cache=$HOME/.npm/.cache/cnpm \\\n  --disturl=https://npm.taobao.org/dist \\\n  --userconfig=$HOME/.cnpmrc\"' >> ~/.zshrc && source ~/.zshrc\n```\n\n**使用**\n\n- 安装模块\n\n从 `registry.npm.taobao.org` 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 npm 会自动在后台进行同步, 并且会让你从官方 `NPM registry.npmjs.org` 进行安装. 下次你再安装这个模块的时候, 就会直接从淘宝 npm 安装了。\n\n``` bash\n$ cnpm install [name]\n```\n\n- 同步模块\n\n直接通过 `sync` 命令马上同步一个模块, 只有 `cnpm` 命令行才有此功能:\n\n```bash\n$ cnpm sync connect\n```\n\n当然, 你可以直接通过 `web` 方式来同步: `/sync/connect`\n\n```bash\n$ open https://npm.taobao.org/sync/connect\n```\n\n- 其他模块\n\n支持 `npm` 除了 `publish` 之外的所有命令, 如:\n\n```bash\n$ cnpm info connect\n```\n\n### 当然，还可以这样安装和使用\n\n如果你不想用 `cnpm` ，或许你可以直接修改 `npm` config配置的 `registry` ，来使用淘宝 npm 镜像：\n\n**安装**\n\n```bash\nnpm config set registry https://registry.npm.taobao.org \n```\n\n接着 config ls 一下：\n\n```bash\nnpm config ls -l\n```\n\n![npm config ls](https://jangdelong.github.io/blog_img/images/taonpm/npm_registry.jpg)\n\n**使用**\n\n```bash\n$ npm install [name]\n```\n\n好了，现在开发者再一次解放出来（不用担心安装管理包时的速度问题）。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/taonpm.md","raw":"---\ntitle: 淘宝 NPM 镜像\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-07-30\ntags:\n\t- npm\n\t- 淘宝npm\nthumbnail:\nblogexcerpt: Node包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm ...\n\n---\n\n<!-- toc -->\n\n### 什么是 NPM\n\nNode 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm 是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装 npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm。\n\n### NPM 用途\n\nnpm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n### NPM 在国内\n\n虽说 npm 很方便，但是在国内由于网络原因，使用 npm 下载一些依赖包的时候，速度还是很慢，甚至有时候还要翻墙，大大影响了我们的开发效率。那么，是否有解决方案呢，答案是有的，那就是淘宝 npm 镜像。\n\n### 什么是淘宝 NPM 镜像\n\n淘宝的npm镜像是一个完整的 npmjs.org 镜像。你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步，[官网](http://npm.taobao.org/)截图如下。\n\n![taonpm官网](https://jangdelong.github.io/blog_img/images/taonpm/1.33pic_hd.jpg)\n\n### 淘宝 NPM 镜像安装及使用\n\n**安装**\n\n- 可以使用淘宝 npm 镜像定制的`cnpm`(gzip 压缩支持) 命令行工具代替默认的 `npm` :\n\n```bash\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 或者直接通过添加 `npm` 参数 alias 一个新命令:\n\n```bash\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n\n# Or alias it in .bashrc or .zshrc\n$ echo '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n  --cache=$HOME/.npm/.cache/cnpm \\\n  --disturl=https://npm.taobao.org/dist \\\n  --userconfig=$HOME/.cnpmrc\"' >> ~/.zshrc && source ~/.zshrc\n```\n\n**使用**\n\n- 安装模块\n\n从 `registry.npm.taobao.org` 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 npm 会自动在后台进行同步, 并且会让你从官方 `NPM registry.npmjs.org` 进行安装. 下次你再安装这个模块的时候, 就会直接从淘宝 npm 安装了。\n\n``` bash\n$ cnpm install [name]\n```\n\n- 同步模块\n\n直接通过 `sync` 命令马上同步一个模块, 只有 `cnpm` 命令行才有此功能:\n\n```bash\n$ cnpm sync connect\n```\n\n当然, 你可以直接通过 `web` 方式来同步: `/sync/connect`\n\n```bash\n$ open https://npm.taobao.org/sync/connect\n```\n\n- 其他模块\n\n支持 `npm` 除了 `publish` 之外的所有命令, 如:\n\n```bash\n$ cnpm info connect\n```\n\n### 当然，还可以这样安装和使用\n\n如果你不想用 `cnpm` ，或许你可以直接修改 `npm` config配置的 `registry` ，来使用淘宝 npm 镜像：\n\n**安装**\n\n```bash\nnpm config set registry https://registry.npm.taobao.org \n```\n\n接着 config ls 一下：\n\n```bash\nnpm config ls -l\n```\n\n![npm config ls](https://jangdelong.github.io/blog_img/images/taonpm/npm_registry.jpg)\n\n**使用**\n\n```bash\n$ npm install [name]\n```\n\n好了，现在开发者再一次解放出来（不用担心安装管理包时的速度问题）。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"taonpm","published":1,"updated":"2016-07-30T00:00:00.000Z","_id":"cmduj3n44004vk8sv3omcepqh","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-npm\">什么是 NPM</a></li>\n<li><a href=\"#npm-%E7%94%A8%E9%80%94\">NPM 用途</a></li>\n<li><a href=\"#npm-%E5%9C%A8%E5%9B%BD%E5%86%85\">NPM 在国内</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%98%E5%AE%9D-npm-%E9%95%9C%E5%83%8F\">什么是淘宝 NPM 镜像</a></li>\n<li><a href=\"#%E6%B7%98%E5%AE%9D-npm-%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8\">淘宝 NPM 镜像安装及使用</a></li>\n<li><a href=\"#%E5%BD%93%E7%84%B6%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8\">当然，还可以这样安装和使用</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"什么是-npm\">什么是 NPM</span></h3><p>Node 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm 是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装 npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm。</p>\n<h3><span id=\"npm-用途\">NPM 用途</span></h3><p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h3><span id=\"npm-在国内\">NPM 在国内</span></h3><p>虽说 npm 很方便，但是在国内由于网络原因，使用 npm 下载一些依赖包的时候，速度还是很慢，甚至有时候还要翻墙，大大影响了我们的开发效率。那么，是否有解决方案呢，答案是有的，那就是淘宝 npm 镜像。</p>\n<h3><span id=\"什么是淘宝-npm-镜像\">什么是淘宝 NPM 镜像</span></h3><p>淘宝的npm镜像是一个完整的 npmjs.org 镜像。你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步，<a href=\"http://npm.taobao.org/\">官网</a>截图如下。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/taonpm/1.33pic_hd.jpg\" alt=\"taonpm官网\"></p>\n<h3><span id=\"淘宝-npm-镜像安装及使用\">淘宝 NPM 镜像安装及使用</span></h3><p><strong>安装</strong></p>\n<ul>\n<li>可以使用淘宝 npm 镜像定制的<code>cnpm</code>(gzip 压缩支持) 命令行工具代替默认的 <code>npm</code> :</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>或者直接通过添加 <code>npm</code> 参数 alias 一个新命令:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cnpm=<span class=\"string\">&quot;npm --registry=https://registry.npm.taobao.org \\</span></span><br><span class=\"line\"><span class=\"string\">--cache=<span class=\"variable\">$HOME</span>/.npm/.cache/cnpm \\</span></span><br><span class=\"line\"><span class=\"string\">--disturl=https://npm.taobao.org/dist \\</span></span><br><span class=\"line\"><span class=\"string\">--userconfig=<span class=\"variable\">$HOME</span>/.cnpmrc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Or alias it in .bashrc or .zshrc</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;\\n#alias for cnpm\\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\</span></span><br><span class=\"line\"><span class=\"string\">  --cache=$HOME/.npm/.cache/cnpm \\</span></span><br><span class=\"line\"><span class=\"string\">  --disturl=https://npm.taobao.org/dist \\</span></span><br><span class=\"line\"><span class=\"string\">  --userconfig=$HOME/.cnpmrc&quot;&#x27;</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用</strong></p>\n<ul>\n<li>安装模块</li>\n</ul>\n<p>从 <code>registry.npm.taobao.org</code> 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 npm 会自动在后台进行同步, 并且会让你从官方 <code>NPM registry.npmjs.org</code> 进行安装. 下次你再安装这个模块的时候, 就会直接从淘宝 npm 安装了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install [name]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步模块</li>\n</ul>\n<p>直接通过 <code>sync</code> 命令马上同步一个模块, 只有 <code>cnpm</code> 命令行才有此功能:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm <span class=\"built_in\">sync</span> connect</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你可以直接通过 <code>web</code> 方式来同步: <code>/sync/connect</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open https://npm.taobao.org/sync/connect</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他模块</li>\n</ul>\n<p>支持 <code>npm</code> 除了 <code>publish</code> 之外的所有命令, 如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm info connect</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"当然还可以这样安装和使用\">当然，还可以这样安装和使用</span></h3><p>如果你不想用 <code>cnpm</code> ，或许你可以直接修改 <code>npm</code> config配置的 <code>registry</code> ，来使用淘宝 npm 镜像：</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<p>接着 config ls 一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">ls</span> -l</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/taonpm/npm_registry.jpg\" alt=\"npm config ls\"></p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install [name]</span><br></pre></td></tr></table></figure>\n\n<p>好了，现在开发者再一次解放出来（不用担心安装管理包时的速度问题）。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-npm\">什么是 NPM</a></li>\n<li><a href=\"#npm-%E7%94%A8%E9%80%94\">NPM 用途</a></li>\n<li><a href=\"#npm-%E5%9C%A8%E5%9B%BD%E5%86%85\">NPM 在国内</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%98%E5%AE%9D-npm-%E9%95%9C%E5%83%8F\">什么是淘宝 NPM 镜像</a></li>\n<li><a href=\"#%E6%B7%98%E5%AE%9D-npm-%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8\">淘宝 NPM 镜像安装及使用</a></li>\n<li><a href=\"#%E5%BD%93%E7%84%B6%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8\">当然，还可以这样安装和使用</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"什么是-NPM\"><a href=\"#什么是-NPM\" class=\"headerlink\" title=\"什么是 NPM\"></a>什么是 NPM</h3><p>Node 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm 是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装 npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm。</p>\n<h3 id=\"NPM-用途\"><a href=\"#NPM-用途\" class=\"headerlink\" title=\"NPM 用途\"></a>NPM 用途</h3><p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h3 id=\"NPM-在国内\"><a href=\"#NPM-在国内\" class=\"headerlink\" title=\"NPM 在国内\"></a>NPM 在国内</h3><p>虽说 npm 很方便，但是在国内由于网络原因，使用 npm 下载一些依赖包的时候，速度还是很慢，甚至有时候还要翻墙，大大影响了我们的开发效率。那么，是否有解决方案呢，答案是有的，那就是淘宝 npm 镜像。</p>\n<h3 id=\"什么是淘宝-NPM-镜像\"><a href=\"#什么是淘宝-NPM-镜像\" class=\"headerlink\" title=\"什么是淘宝 NPM 镜像\"></a>什么是淘宝 NPM 镜像</h3><p>淘宝的npm镜像是一个完整的 npmjs.org 镜像。你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步，<a href=\"http://npm.taobao.org/\">官网</a>截图如下。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/taonpm/1.33pic_hd.jpg\" alt=\"taonpm官网\"></p>\n<h3 id=\"淘宝-NPM-镜像安装及使用\"><a href=\"#淘宝-NPM-镜像安装及使用\" class=\"headerlink\" title=\"淘宝 NPM 镜像安装及使用\"></a>淘宝 NPM 镜像安装及使用</h3><p><strong>安装</strong></p>\n<ul>\n<li>可以使用淘宝 npm 镜像定制的<code>cnpm</code>(gzip 压缩支持) 命令行工具代替默认的 <code>npm</code> :</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>或者直接通过添加 <code>npm</code> 参数 alias 一个新命令:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cnpm=<span class=\"string\">&quot;npm --registry=https://registry.npm.taobao.org \\</span></span><br><span class=\"line\"><span class=\"string\">--cache=<span class=\"variable\">$HOME</span>/.npm/.cache/cnpm \\</span></span><br><span class=\"line\"><span class=\"string\">--disturl=https://npm.taobao.org/dist \\</span></span><br><span class=\"line\"><span class=\"string\">--userconfig=<span class=\"variable\">$HOME</span>/.cnpmrc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Or alias it in .bashrc or .zshrc</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;\\n#alias for cnpm\\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\</span></span><br><span class=\"line\"><span class=\"string\">  --cache=$HOME/.npm/.cache/cnpm \\</span></span><br><span class=\"line\"><span class=\"string\">  --disturl=https://npm.taobao.org/dist \\</span></span><br><span class=\"line\"><span class=\"string\">  --userconfig=$HOME/.cnpmrc&quot;&#x27;</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用</strong></p>\n<ul>\n<li>安装模块</li>\n</ul>\n<p>从 <code>registry.npm.taobao.org</code> 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 npm 会自动在后台进行同步, 并且会让你从官方 <code>NPM registry.npmjs.org</code> 进行安装. 下次你再安装这个模块的时候, 就会直接从淘宝 npm 安装了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install [name]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步模块</li>\n</ul>\n<p>直接通过 <code>sync</code> 命令马上同步一个模块, 只有 <code>cnpm</code> 命令行才有此功能:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm <span class=\"built_in\">sync</span> connect</span><br></pre></td></tr></table></figure>\n\n<p>当然, 你可以直接通过 <code>web</code> 方式来同步: <code>/sync/connect</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open https://npm.taobao.org/sync/connect</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他模块</li>\n</ul>\n<p>支持 <code>npm</code> 除了 <code>publish</code> 之外的所有命令, 如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm info connect</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"当然，还可以这样安装和使用\"><a href=\"#当然，还可以这样安装和使用\" class=\"headerlink\" title=\"当然，还可以这样安装和使用\"></a>当然，还可以这样安装和使用</h3><p>如果你不想用 <code>cnpm</code> ，或许你可以直接修改 <code>npm</code> config配置的 <code>registry</code> ，来使用淘宝 npm 镜像：</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n\n<p>接着 config ls 一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">ls</span> -l</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://jangdelong.github.io/blog_img/images/taonpm/npm_registry.jpg\" alt=\"npm config ls\"></p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install [name]</span><br></pre></td></tr></table></figure>\n\n<p>好了，现在开发者再一次解放出来（不用担心安装管理包时的速度问题）。</p>\n"},{"title":"Vue 源码分析之 nextTick","author":"ustbhuangyi","date":"2018-08-08T00:00:00.000Z","thumbnail":null,"blogexcerpt":"nextTick 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤。(1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件...","_content":"\n<!-- toc -->\n\n`nextTick` 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。\n\n## JS 运行机制\n\nJS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：\n\n（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n（3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n\n<img :src=\"$withBase('/assets/event-loop.png')\"/>\n\n主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度被调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。\n\n关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：\n\n```js\nfor (macroTask of macroTaskQueue) {\n    // 1. Handle current MACRO-TASK\n    handleMacroTask();\n      \n    // 2. Handle all MICRO-TASK\n    for (microTask of microTaskQueue) {\n        handleMicroTask(microTask);\n    }\n}\n```\n在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。\n\n## Vue 的实现\n\n在 Vue 源码 2.5+ 后，`nextTick` 的实现单独有一个 JS 文件来维护它，它的源码并不多，总共也就 100 多行。接下来我们来看一下它的实现，在 `src/core/util/next-tick.js` 中：\n\n```js\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIOS, isNative } from './env'\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nlet microTimerFunc\nlet macroTimerFunc\nlet useMacroTask = false\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () => {\n    port.postMessage(1)\n  }\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  microTimerFunc = () => {\n    p.then(flushCallbacks)\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) setTimeout(noop)\n  }\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nexport function withMacroTask (fn: Function): Function {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true\n    const res = fn.apply(null, arguments)\n    useMacroTask = false\n    return res\n  })\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    if (useMacroTask) {\n      macroTimerFunc()\n    } else {\n      microTimerFunc()\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n`next-tick.js` 申明了 `microTimerFunc` 和 `macroTimerFunc` 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 `setImmediate`，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 `MessageChannel`，如果也不支持的话就会降级为 `setTimeout 0`；而对于 micro task 的实现，则检测浏览器是否原生支持 Promise，不支持的话直接指向 macro task 的实现。\n\n`next-tick.js` 对外暴露了 2 个函数，先来看 `nextTick`，这就是我们在上一节执行 `nextTick(flushSchedulerQueue)` 所用到的函数。它的逻辑也很简单，把传入的回调函数 `cb` 压入 `callbacks` 数组，最后一次性地根据 `useMacroTask` 条件执行 `macroTimerFunc` 或者是 `microTimerFunc`，而它们都会在下一个 tick 执行 `flushCallbacks`，`flushCallbacks` 的逻辑非常简单，对 `callbacks` 遍历，然后执行相应的回调函数。\n\n这里使用 `callbacks` 而不是直接在 `nextTick` 中执行回调函数的原因是保证在同一个 tick 内多次执行 `nextTick`，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。\n\n`nextTick` 函数最后还有一段逻辑：\n```js\n if (!cb && typeof Promise !== 'undefined') {\n  return new Promise(resolve => {\n    _resolve = resolve\n  })\n}\n```\n这是当 `nextTick` 不传 `cb` 参数的时候，提供一个 Promise 化的调用，比如：\n```js\nnextTick().then(() => {})\n```\n当 `_resolve` 函数执行，就会跳到 `then` 的逻辑中。\n\n`next-tick.js` 还对外暴露了 `withMacroTask` 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 `nextTick` 的时候强制走 `macroTimerFunc`。比如对于一些 DOM 交互事件，如 `v-on` 绑定的事件回调函数的处理，会强制走 macro task。\n\n## 总结\n\n通过这一节对 `nextTick` 的分析，并结合上一节的 setter 分析，我们了解到数据的变化到 DOM 的重新渲染是一个异步过程，发生在下一个 tick。这就是我们平时在开发的过程中，比如从服务端接口去获取数据的时候，数据做了修改，如果我们的某些方法去依赖了数据修改后的 DOM 变化，我们就必须在 `nextTick` 后执行。比如下面的伪代码：\n\n```js\ngetData(res).then(()=>{\n  this.xxx = res.data\n  this.$nextTick(() => {\n    // 这里我们可以获取变化后的 DOM\n  })\n})\n```\n\nVue.js 提供了 2 种调用 `nextTick` 的方式，一种是全局 API `Vue.nextTick`，一种是实例上的方法 `vm.$nextTick`，无论我们使用哪一种，最后都是调用 `next-tick.js` 中实现的 `nextTick` 方法。\n\n","source":"_posts/vue-next-tick.md","raw":"---\n\ntitle: Vue 源码分析之 nextTick\ncategories:\n  - Web技术\nauthor: ustbhuangyi\ndate: 2018-08-08\ntags:\n\t- vue\n\t- nextTick\nthumbnail:\nblogexcerpt: nextTick 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤。(1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件...\n\n---\n\n<!-- toc -->\n\n`nextTick` 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。\n\n## JS 运行机制\n\nJS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：\n\n（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。\n\n（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。\n\n（3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n\n（4）主线程不断重复上面的第三步。\n\n<img :src=\"$withBase('/assets/event-loop.png')\"/>\n\n主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度被调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。\n\n关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：\n\n```js\nfor (macroTask of macroTaskQueue) {\n    // 1. Handle current MACRO-TASK\n    handleMacroTask();\n      \n    // 2. Handle all MICRO-TASK\n    for (microTask of microTaskQueue) {\n        handleMicroTask(microTask);\n    }\n}\n```\n在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。\n\n## Vue 的实现\n\n在 Vue 源码 2.5+ 后，`nextTick` 的实现单独有一个 JS 文件来维护它，它的源码并不多，总共也就 100 多行。接下来我们来看一下它的实现，在 `src/core/util/next-tick.js` 中：\n\n```js\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIOS, isNative } from './env'\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nlet microTimerFunc\nlet macroTimerFunc\nlet useMacroTask = false\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () => {\n    port.postMessage(1)\n  }\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  microTimerFunc = () => {\n    p.then(flushCallbacks)\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) setTimeout(noop)\n  }\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nexport function withMacroTask (fn: Function): Function {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true\n    const res = fn.apply(null, arguments)\n    useMacroTask = false\n    return res\n  })\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    if (useMacroTask) {\n      macroTimerFunc()\n    } else {\n      microTimerFunc()\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n`next-tick.js` 申明了 `microTimerFunc` 和 `macroTimerFunc` 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 `setImmediate`，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 `MessageChannel`，如果也不支持的话就会降级为 `setTimeout 0`；而对于 micro task 的实现，则检测浏览器是否原生支持 Promise，不支持的话直接指向 macro task 的实现。\n\n`next-tick.js` 对外暴露了 2 个函数，先来看 `nextTick`，这就是我们在上一节执行 `nextTick(flushSchedulerQueue)` 所用到的函数。它的逻辑也很简单，把传入的回调函数 `cb` 压入 `callbacks` 数组，最后一次性地根据 `useMacroTask` 条件执行 `macroTimerFunc` 或者是 `microTimerFunc`，而它们都会在下一个 tick 执行 `flushCallbacks`，`flushCallbacks` 的逻辑非常简单，对 `callbacks` 遍历，然后执行相应的回调函数。\n\n这里使用 `callbacks` 而不是直接在 `nextTick` 中执行回调函数的原因是保证在同一个 tick 内多次执行 `nextTick`，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。\n\n`nextTick` 函数最后还有一段逻辑：\n```js\n if (!cb && typeof Promise !== 'undefined') {\n  return new Promise(resolve => {\n    _resolve = resolve\n  })\n}\n```\n这是当 `nextTick` 不传 `cb` 参数的时候，提供一个 Promise 化的调用，比如：\n```js\nnextTick().then(() => {})\n```\n当 `_resolve` 函数执行，就会跳到 `then` 的逻辑中。\n\n`next-tick.js` 还对外暴露了 `withMacroTask` 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 `nextTick` 的时候强制走 `macroTimerFunc`。比如对于一些 DOM 交互事件，如 `v-on` 绑定的事件回调函数的处理，会强制走 macro task。\n\n## 总结\n\n通过这一节对 `nextTick` 的分析，并结合上一节的 setter 分析，我们了解到数据的变化到 DOM 的重新渲染是一个异步过程，发生在下一个 tick。这就是我们平时在开发的过程中，比如从服务端接口去获取数据的时候，数据做了修改，如果我们的某些方法去依赖了数据修改后的 DOM 变化，我们就必须在 `nextTick` 后执行。比如下面的伪代码：\n\n```js\ngetData(res).then(()=>{\n  this.xxx = res.data\n  this.$nextTick(() => {\n    // 这里我们可以获取变化后的 DOM\n  })\n})\n```\n\nVue.js 提供了 2 种调用 `nextTick` 的方式，一种是全局 API `Vue.nextTick`，一种是实例上的方法 `vm.$nextTick`，无论我们使用哪一种，最后都是调用 `next-tick.js` 中实现的 `nextTick` 方法。\n\n","slug":"vue-next-tick","published":1,"updated":"2018-08-08T00:00:00.000Z","_id":"cmduj3n45004yk8sv8shg45wo","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6\">JS 运行机制</a></li>\n<li><a href=\"#vue-%E7%9A%84%E5%AE%9E%E7%8E%B0\">Vue 的实现</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p><code>nextTick</code> 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。</p>\n<h2><span id=\"js-运行机制\">JS 运行机制</span></h2><p>JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：</p>\n<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>\n<p>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p>\n<p>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>\n<p>（4）主线程不断重复上面的第三步。</p>\n<img :src=\"$withBase('/assets/event-loop.png')\">\n\n<p>主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度被调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。</p>\n<p>关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (macroTask <span class=\"keyword\">of</span> macroTaskQueue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Handle current MACRO-TASK</span></span><br><span class=\"line\">    <span class=\"title function_\">handleMacroTask</span>();</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">// 2. Handle all MICRO-TASK</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (microTask <span class=\"keyword\">of</span> microTaskQueue) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleMicroTask</span>(microTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。</p>\n<h2><span id=\"vue-的实现\">Vue 的实现</span></h2><p>在 Vue 源码 2.5+ 后，<code>nextTick</code> 的实现单独有一个 JS 文件来维护它，它的源码并不多，总共也就 100 多行。接下来我们来看一下它的实现，在 <code>src/core/util/next-tick.js</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;shared/util&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; handleError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./error&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isIOS, isNative &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./env&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here we have async deferring wrappers using both microtasks and (macro) tasks.</span></span><br><span class=\"line\"><span class=\"comment\">// In &lt; 2.4 we used microtasks everywhere, but there are some scenarios where</span></span><br><span class=\"line\"><span class=\"comment\">// microtasks have too high a priority and fire in between supposedly</span></span><br><span class=\"line\"><span class=\"comment\">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span></span><br><span class=\"line\"><span class=\"comment\">// event (#6566). However, using (macro) tasks everywhere also has subtle problems</span></span><br><span class=\"line\"><span class=\"comment\">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span></span><br><span class=\"line\"><span class=\"comment\">// Here we use microtask by default, but expose a way to force (macro) task when</span></span><br><span class=\"line\"><span class=\"comment\">// needed (e.g. in event handlers attached by v-on).</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> microTimerFunc</span><br><span class=\"line\"><span class=\"keyword\">let</span> macroTimerFunc</span><br><span class=\"line\"><span class=\"keyword\">let</span> useMacroTask = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Determine (macro) task defer implementation.</span></span><br><span class=\"line\"><span class=\"comment\">// Technically setImmediate should be the ideal choice, but it&#x27;s only available</span></span><br><span class=\"line\"><span class=\"comment\">// in IE. The only polyfill that consistently queues the callback after all DOM</span></span><br><span class=\"line\"><span class=\"comment\">// events triggered in the same loop is by using MessageChannel.</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MessageChannel</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MessageChannel</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS</span></span><br><span class=\"line\">  <span class=\"title class_\">MessageChannel</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MessageChannelConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> channel = <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChannel</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> port = channel.<span class=\"property\">port2</span></span><br><span class=\"line\">  channel.<span class=\"property\">port1</span>.<span class=\"property\">onmessage</span> = flushCallbacks</span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    port.<span class=\"title function_\">postMessage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Determine microtask defer implementation.</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next, $flow-disable-line */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  microTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fallback to macro</span></span><br><span class=\"line\">  microTimerFunc = macroTimerFunc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Wrap a function so that if any code inside triggers state change,</span></span><br><span class=\"line\"><span class=\"comment\"> * the changes are queued using a (macro) task instead of a microtask.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">withMacroTask</span> (<span class=\"params\">fn: <span class=\"built_in\">Function</span></span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn.<span class=\"property\">_withTask</span> || (fn.<span class=\"property\">_withTask</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    useMacroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    useMacroTask = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useMacroTask) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">macroTimerFunc</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">microTimerFunc</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>next-tick.js</code> 申明了 <code>microTimerFunc</code> 和 <code>macroTimerFunc</code> 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 <code>setImmediate</code>，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 <code>MessageChannel</code>，如果也不支持的话就会降级为 <code>setTimeout 0</code>；而对于 micro task 的实现，则检测浏览器是否原生支持 Promise，不支持的话直接指向 macro task 的实现。</p>\n<p><code>next-tick.js</code> 对外暴露了 2 个函数，先来看 <code>nextTick</code>，这就是我们在上一节执行 <code>nextTick(flushSchedulerQueue)</code> 所用到的函数。它的逻辑也很简单，把传入的回调函数 <code>cb</code> 压入 <code>callbacks</code> 数组，最后一次性地根据 <code>useMacroTask</code> 条件执行 <code>macroTimerFunc</code> 或者是 <code>microTimerFunc</code>，而它们都会在下一个 tick 执行 <code>flushCallbacks</code>，<code>flushCallbacks</code> 的逻辑非常简单，对 <code>callbacks</code> 遍历，然后执行相应的回调函数。</p>\n<p>这里使用 <code>callbacks</code> 而不是直接在 <code>nextTick</code> 中执行回调函数的原因是保证在同一个 tick 内多次执行 <code>nextTick</code>，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。</p>\n<p><code>nextTick</code> 函数最后还有一段逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    _resolve = resolve</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是当 <code>nextTick</code> 不传 <code>cb</code> 参数的时候，提供一个 Promise 化的调用，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">nextTick</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>当 <code>_resolve</code> 函数执行，就会跳到 <code>then</code> 的逻辑中。</p>\n<p><code>next-tick.js</code> 还对外暴露了 <code>withMacroTask</code> 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 <code>nextTick</code> 的时候强制走 <code>macroTimerFunc</code>。比如对于一些 DOM 交互事件，如 <code>v-on</code> 绑定的事件回调函数的处理，会强制走 macro task。</p>\n<h2><span id=\"总结\">总结</span></h2><p>通过这一节对 <code>nextTick</code> 的分析，并结合上一节的 setter 分析，我们了解到数据的变化到 DOM 的重新渲染是一个异步过程，发生在下一个 tick。这就是我们平时在开发的过程中，比如从服务端接口去获取数据的时候，数据做了修改，如果我们的某些方法去依赖了数据修改后的 DOM 变化，我们就必须在 <code>nextTick</code> 后执行。比如下面的伪代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getData</span>(res).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">xxx</span> = res.<span class=\"property\">data</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里我们可以获取变化后的 DOM</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Vue.js 提供了 2 种调用 <code>nextTick</code> 的方式，一种是全局 API <code>Vue.nextTick</code>，一种是实例上的方法 <code>vm.$nextTick</code>，无论我们使用哪一种，最后都是调用 <code>next-tick.js</code> 中实现的 <code>nextTick</code> 方法。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#js-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6\">JS 运行机制</a></li>\n<li><a href=\"#vue-%E7%9A%84%E5%AE%9E%E7%8E%B0\">Vue 的实现</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p><code>nextTick</code> 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。</p>\n<h2 id=\"JS-运行机制\"><a href=\"#JS-运行机制\" class=\"headerlink\" title=\"JS 运行机制\"></a>JS 运行机制</h2><p>JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：</p>\n<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>\n<p>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p>\n<p>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>\n<p>（4）主线程不断重复上面的第三步。</p>\n<img :src=\"$withBase('/assets/event-loop.png')\"/>\n\n<p>主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度被调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。</p>\n<p>关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (macroTask <span class=\"keyword\">of</span> macroTaskQueue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Handle current MACRO-TASK</span></span><br><span class=\"line\">    <span class=\"title function_\">handleMacroTask</span>();</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">// 2. Handle all MICRO-TASK</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (microTask <span class=\"keyword\">of</span> microTaskQueue) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleMicroTask</span>(microTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。</p>\n<h2 id=\"Vue-的实现\"><a href=\"#Vue-的实现\" class=\"headerlink\" title=\"Vue 的实现\"></a>Vue 的实现</h2><p>在 Vue 源码 2.5+ 后，<code>nextTick</code> 的实现单独有一个 JS 文件来维护它，它的源码并不多，总共也就 100 多行。接下来我们来看一下它的实现，在 <code>src/core/util/next-tick.js</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;shared/util&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; handleError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./error&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isIOS, isNative &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./env&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here we have async deferring wrappers using both microtasks and (macro) tasks.</span></span><br><span class=\"line\"><span class=\"comment\">// In &lt; 2.4 we used microtasks everywhere, but there are some scenarios where</span></span><br><span class=\"line\"><span class=\"comment\">// microtasks have too high a priority and fire in between supposedly</span></span><br><span class=\"line\"><span class=\"comment\">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span></span><br><span class=\"line\"><span class=\"comment\">// event (#6566). However, using (macro) tasks everywhere also has subtle problems</span></span><br><span class=\"line\"><span class=\"comment\">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span></span><br><span class=\"line\"><span class=\"comment\">// Here we use microtask by default, but expose a way to force (macro) task when</span></span><br><span class=\"line\"><span class=\"comment\">// needed (e.g. in event handlers attached by v-on).</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> microTimerFunc</span><br><span class=\"line\"><span class=\"keyword\">let</span> macroTimerFunc</span><br><span class=\"line\"><span class=\"keyword\">let</span> useMacroTask = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Determine (macro) task defer implementation.</span></span><br><span class=\"line\"><span class=\"comment\">// Technically setImmediate should be the ideal choice, but it&#x27;s only available</span></span><br><span class=\"line\"><span class=\"comment\">// in IE. The only polyfill that consistently queues the callback after all DOM</span></span><br><span class=\"line\"><span class=\"comment\">// events triggered in the same loop is by using MessageChannel.</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MessageChannel</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MessageChannel</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS</span></span><br><span class=\"line\">  <span class=\"title class_\">MessageChannel</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MessageChannelConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> channel = <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChannel</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> port = channel.<span class=\"property\">port2</span></span><br><span class=\"line\">  channel.<span class=\"property\">port1</span>.<span class=\"property\">onmessage</span> = flushCallbacks</span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    port.<span class=\"title function_\">postMessage</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">  macroTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Determine microtask defer implementation.</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next, $flow-disable-line */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  microTimerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fallback to macro</span></span><br><span class=\"line\">  microTimerFunc = macroTimerFunc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Wrap a function so that if any code inside triggers state change,</span></span><br><span class=\"line\"><span class=\"comment\"> * the changes are queued using a (macro) task instead of a microtask.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">withMacroTask</span> (<span class=\"params\">fn: <span class=\"built_in\">Function</span></span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn.<span class=\"property\">_withTask</span> || (fn.<span class=\"property\">_withTask</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    useMacroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    useMacroTask = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useMacroTask) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">macroTimerFunc</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">microTimerFunc</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>next-tick.js</code> 申明了 <code>microTimerFunc</code> 和 <code>macroTimerFunc</code> 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 <code>setImmediate</code>，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 <code>MessageChannel</code>，如果也不支持的话就会降级为 <code>setTimeout 0</code>；而对于 micro task 的实现，则检测浏览器是否原生支持 Promise，不支持的话直接指向 macro task 的实现。</p>\n<p><code>next-tick.js</code> 对外暴露了 2 个函数，先来看 <code>nextTick</code>，这就是我们在上一节执行 <code>nextTick(flushSchedulerQueue)</code> 所用到的函数。它的逻辑也很简单，把传入的回调函数 <code>cb</code> 压入 <code>callbacks</code> 数组，最后一次性地根据 <code>useMacroTask</code> 条件执行 <code>macroTimerFunc</code> 或者是 <code>microTimerFunc</code>，而它们都会在下一个 tick 执行 <code>flushCallbacks</code>，<code>flushCallbacks</code> 的逻辑非常简单，对 <code>callbacks</code> 遍历，然后执行相应的回调函数。</p>\n<p>这里使用 <code>callbacks</code> 而不是直接在 <code>nextTick</code> 中执行回调函数的原因是保证在同一个 tick 内多次执行 <code>nextTick</code>，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。</p>\n<p><code>nextTick</code> 函数最后还有一段逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    _resolve = resolve</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是当 <code>nextTick</code> 不传 <code>cb</code> 参数的时候，提供一个 Promise 化的调用，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">nextTick</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>当 <code>_resolve</code> 函数执行，就会跳到 <code>then</code> 的逻辑中。</p>\n<p><code>next-tick.js</code> 还对外暴露了 <code>withMacroTask</code> 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 <code>nextTick</code> 的时候强制走 <code>macroTimerFunc</code>。比如对于一些 DOM 交互事件，如 <code>v-on</code> 绑定的事件回调函数的处理，会强制走 macro task。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这一节对 <code>nextTick</code> 的分析，并结合上一节的 setter 分析，我们了解到数据的变化到 DOM 的重新渲染是一个异步过程，发生在下一个 tick。这就是我们平时在开发的过程中，比如从服务端接口去获取数据的时候，数据做了修改，如果我们的某些方法去依赖了数据修改后的 DOM 变化，我们就必须在 <code>nextTick</code> 后执行。比如下面的伪代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getData</span>(res).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">xxx</span> = res.<span class=\"property\">data</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里我们可以获取变化后的 DOM</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Vue.js 提供了 2 种调用 <code>nextTick</code> 的方式，一种是全局 API <code>Vue.nextTick</code>，一种是实例上的方法 <code>vm.$nextTick</code>，无论我们使用哪一种，最后都是调用 <code>next-tick.js</code> 中实现的 <code>nextTick</code> 方法。</p>\n"},{"title":"JavaScript 实现几种常见的排序及二分查找","author":"Jelon","date":"2017-08-27T00:00:00.000Z","thumbnail":null,"blogexcerpt":"首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等......当然，也问到...","_content":"\n<!-- toc -->\n\n首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等......当然，也问到了一些简单的算法问题，当时有点懵逼了，虽然大学的时候学过，但是时间久了，统统还给老师了，尴尬。对于算法，虽然相对后端语言来说，前端工作中还是比较少接触算法的，就算会接触，大都不会太复杂，但是一些简单的算法也是不得不知道的，大厂们都比较重视这个。\n\n排序。排序是我们最常见的算法题目，当然工作中也会遇到（前端 js API 里面已经有封装一个叫 `sort` 的方法），但，后面将要介绍几种排序是用 js 实现的方法。在这里整理一下，需要的时候可以翻看一下;\n\n查找。顺便总结一下常见的一些查找，如二分查找。\n\n### 一、冒泡排序\n\n```javascript\nfunction BubbleSort(arr) {\n  var len = arr.length;\n  for (var i = len - 1; i > 0; i--) {\n    for (var j = 0; j < i; j++) {\n      if (arr[j] > arr[j+1]) { \n        var temp = arr[j];\n        arr[j] = arr[j+1];\n        arr[j+1] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\n// es6\nfunction BubleSort(arr) {\n  const len = arr.length;\n  for (let i = len - 1; i > 0; i--) {\n    if (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j+1]) {\n        [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n      }\n    }\n  }\n  return arr;\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n) | O(n^2) | O(1) | 稳定 |\n\n### 二、选择排序\n\n```javascript\nfunction SelectionSort(arr) {\n  var len = arr.length;\n  for (var i = 0; i < len; i++) {\n    var min = arr[i];\n    var index = i;\n    for (var j = i + 1; j < len; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n        index = j;\n      }\n    }\n    if (index != i) {\n      var temp = arr[i];\n      arr[i] = arr[index];\n      arr[index] = temp;\n    }\n  }\n  return arr;\n}\n\n// es6\nfunction SelectionSort(arr) {\n  const len = arr.length;\n  for (let i = 0 ;i < len - 1; i++) {\n    for (let j = i ; j<len; j++) {\n\t   if (arr[j] < arr[i]) {\n\t     [arr[i],arr[j]] = [arr[j],arr[i]];\n\t   }\n\t }\n  }\n  return arr\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n^2) | O(n^2) | O(1) | 不稳定 |\n\n### 三、插入排序\n\n```javascript\nfunction InsertionSort(arr) {\n  var len = arr.length;\n  for (var i = 0; i < len - 1; i++) {\n    var insert = arr[i+1];\n    var index = i + 1;\n    for (var j = i; j >= 0; j--) {\n      if (insert < arr[j]) {\n        arr[j+1] = arr[j];\n        index = j;\n      }\n    }\n    arr[index] = insert;\n  }\n  return arr;\n}\n\n// es 6\nfunction InserttionSort(arr) {\n  const len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i; j > 0; j--) {\n      if (arr[j] < arr[j-1]) {\n        [arr[j], arr[j-1]] = [arr[j-1], arr[j]];\n      } else {\n        break;\n      }\n    }\n  }\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n) | O(n^2) | O(1) | 稳定 |\n\n### 四、希尔排序\n\n```javascript\nfunction ShellSort(arr) {\n  var len = arr.length;\n  var gap = Math.round(len / 2);\n  while (gap > 0) {\n    for (var i = gap; i < len; i++) {\n      var insert = arr[i];\n      var index = i;\n      for (var j = i; j >= 0; j -= gap) {\n        if (insert < arr[j]) {\n          arr[j + gap] = arr[j];\n          index = j;\n        }\n      }\n      arr[index] = insert;\n    }\n    gap = Math.round(gap/2 - 0.1);\n  }\n  return arr;\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^1.3) | O(n) | O(n^2) | O(1) | 不稳定 |\n\n### 五、归并排序\n\n```javascript\nfunction merge(leftArr, rightArr) {  \n  var result = []\n  while (leftArr.length > 0 && rightArr.length > 0) {  \n    if (leftArr[0] < rightArr[0])  \n      result.push(leftArr.shift()) // 把最小的最先取出，放到结果集中   \n    else   \n      result.push(rightArr.shift())\n  }   \n  return result.concat(leftArr).concat(rightArr)  // 剩下的就是合并，这样就排好序了  \n}  \n\nfunction mergeSort(array) {  \n  if (array.length == 1) return array\n  var middle = Math.floor(array.length / 2)       // 求出中点  \n  var left = array.slice(0, middle)               // 分割数组  \n  var right = array.slice(middle)  \n  return merge(mergeSort(left), mergeSort(right)) // 递归合并与排序  \n} \n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n*log(n)) (n乘以n的以2为底的对数) | O(n*log(n)) | O(N*log(n))  | O(n) | 稳定 |\n\n### 六、快速排序\n\n```javascript\nfunction QuickSort(arr) {\n  var len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    var smaller = [];\n    var bigger = [];\n    var base = [arr[0]];\n    for (var i = 1; i < len; i++) {\n      if (arr[i] <= base[0]) {\n        smaller.push(arr[i]);\n      } else {\n        bigger.push(arr[i]);\n      }\n    }\n    return QuickSort(smaller).concat(base.concat(QuickSort(bigger)));\n  }\n}\n\n// es6\nfunction QuickSort(arr) {\n  const len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    const smallers = [];\n    const biggers = [];\n    const base = arr[0];\n    for (let i = 1; i < len; i++) {\n      if (arr[i] <= base) {\n        smallers.push(arr[i]);\n      } else {\n        biggers.push(arr[i]);\n      }\n    }\n    return [...QuickSort(smallers), base, ...QuickSort(biggers)];\n  }\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n*log(n)) (n乘以n的以2为底的对数) | O(n*log(n)) | O(n^2)  | O(log(n))~O(n)  | 不稳定 |\n\n### 七、二分查找\n\n二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。\n\n1. 递归实现\n\n```javascript\n// 递归实现的js代码\n// 查找值为 key 所在数组中的下标\nfunction binary_search2(arr, low, high, key) {\n    if (low > high) {\n        return -1;\n    }\n    var mid = parseInt((high + low) / 2);\n    if (arr[mid] === key) {\n        return mid;\n    } else if (arr[mid] > key) {\n        high = mid -1;\n        return binary_search2(arr, low, high, key);\n    } else if (arr[mid] < key) {\n        low = mid +1;\n        return binary_search2(arr, low, high, key);\n    }\n}\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 44, 86];\nvar result2 = binary_search2(arr, 0, 13, 10);\nconsole.log(result2);   // 9\n```\n\n\n2. 非递归实现\n\n```javascript\n// 非递归实现的js代码\n// 查找值为 key 所在数组中的下标\nfunction binary_search(arr, key) {\n    var low = 0;\n    var high = arr.length - 1;\n\t // 遍历 \n    while (low <= high) {\n        var mid = parseInt((high + low) / 2);\n        if (key === arr[mid]) {\n            return mid;\n        } else if (key > arr[mid]) {\n            low = mid + 1;\n        } else if (key < arr[mid]) {\n            high = mid -1;\n        } else {\n            return -1;\n        }\n    }\n}\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 44, 86];\nvar result = binary_search(arr, 10);\nconsole.log(result);   // 9\n```\n\n以上代码是笔者参考网上，经过整理而成，有遗漏之处，欢迎指正。\n\n\n\n","source":"_posts/sorting-by-js.md","raw":"---\ntitle: JavaScript 实现几种常见的排序及二分查找\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-08-27\ntags:\n\t- 算法\n\t- js\nthumbnail:\nblogexcerpt: 首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等......当然，也问到...\n\n---\n\n<!-- toc -->\n\n首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等......当然，也问到了一些简单的算法问题，当时有点懵逼了，虽然大学的时候学过，但是时间久了，统统还给老师了，尴尬。对于算法，虽然相对后端语言来说，前端工作中还是比较少接触算法的，就算会接触，大都不会太复杂，但是一些简单的算法也是不得不知道的，大厂们都比较重视这个。\n\n排序。排序是我们最常见的算法题目，当然工作中也会遇到（前端 js API 里面已经有封装一个叫 `sort` 的方法），但，后面将要介绍几种排序是用 js 实现的方法。在这里整理一下，需要的时候可以翻看一下;\n\n查找。顺便总结一下常见的一些查找，如二分查找。\n\n### 一、冒泡排序\n\n```javascript\nfunction BubbleSort(arr) {\n  var len = arr.length;\n  for (var i = len - 1; i > 0; i--) {\n    for (var j = 0; j < i; j++) {\n      if (arr[j] > arr[j+1]) { \n        var temp = arr[j];\n        arr[j] = arr[j+1];\n        arr[j+1] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\n// es6\nfunction BubleSort(arr) {\n  const len = arr.length;\n  for (let i = len - 1; i > 0; i--) {\n    if (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j+1]) {\n        [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n      }\n    }\n  }\n  return arr;\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n) | O(n^2) | O(1) | 稳定 |\n\n### 二、选择排序\n\n```javascript\nfunction SelectionSort(arr) {\n  var len = arr.length;\n  for (var i = 0; i < len; i++) {\n    var min = arr[i];\n    var index = i;\n    for (var j = i + 1; j < len; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n        index = j;\n      }\n    }\n    if (index != i) {\n      var temp = arr[i];\n      arr[i] = arr[index];\n      arr[index] = temp;\n    }\n  }\n  return arr;\n}\n\n// es6\nfunction SelectionSort(arr) {\n  const len = arr.length;\n  for (let i = 0 ;i < len - 1; i++) {\n    for (let j = i ; j<len; j++) {\n\t   if (arr[j] < arr[i]) {\n\t     [arr[i],arr[j]] = [arr[j],arr[i]];\n\t   }\n\t }\n  }\n  return arr\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n^2) | O(n^2) | O(1) | 不稳定 |\n\n### 三、插入排序\n\n```javascript\nfunction InsertionSort(arr) {\n  var len = arr.length;\n  for (var i = 0; i < len - 1; i++) {\n    var insert = arr[i+1];\n    var index = i + 1;\n    for (var j = i; j >= 0; j--) {\n      if (insert < arr[j]) {\n        arr[j+1] = arr[j];\n        index = j;\n      }\n    }\n    arr[index] = insert;\n  }\n  return arr;\n}\n\n// es 6\nfunction InserttionSort(arr) {\n  const len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i; j > 0; j--) {\n      if (arr[j] < arr[j-1]) {\n        [arr[j], arr[j-1]] = [arr[j-1], arr[j]];\n      } else {\n        break;\n      }\n    }\n  }\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^2) | O(n) | O(n^2) | O(1) | 稳定 |\n\n### 四、希尔排序\n\n```javascript\nfunction ShellSort(arr) {\n  var len = arr.length;\n  var gap = Math.round(len / 2);\n  while (gap > 0) {\n    for (var i = gap; i < len; i++) {\n      var insert = arr[i];\n      var index = i;\n      for (var j = i; j >= 0; j -= gap) {\n        if (insert < arr[j]) {\n          arr[j + gap] = arr[j];\n          index = j;\n        }\n      }\n      arr[index] = insert;\n    }\n    gap = Math.round(gap/2 - 0.1);\n  }\n  return arr;\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n^1.3) | O(n) | O(n^2) | O(1) | 不稳定 |\n\n### 五、归并排序\n\n```javascript\nfunction merge(leftArr, rightArr) {  \n  var result = []\n  while (leftArr.length > 0 && rightArr.length > 0) {  \n    if (leftArr[0] < rightArr[0])  \n      result.push(leftArr.shift()) // 把最小的最先取出，放到结果集中   \n    else   \n      result.push(rightArr.shift())\n  }   \n  return result.concat(leftArr).concat(rightArr)  // 剩下的就是合并，这样就排好序了  \n}  \n\nfunction mergeSort(array) {  \n  if (array.length == 1) return array\n  var middle = Math.floor(array.length / 2)       // 求出中点  \n  var left = array.slice(0, middle)               // 分割数组  \n  var right = array.slice(middle)  \n  return merge(mergeSort(left), mergeSort(right)) // 递归合并与排序  \n} \n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n*log(n)) (n乘以n的以2为底的对数) | O(n*log(n)) | O(N*log(n))  | O(n) | 稳定 |\n\n### 六、快速排序\n\n```javascript\nfunction QuickSort(arr) {\n  var len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    var smaller = [];\n    var bigger = [];\n    var base = [arr[0]];\n    for (var i = 1; i < len; i++) {\n      if (arr[i] <= base[0]) {\n        smaller.push(arr[i]);\n      } else {\n        bigger.push(arr[i]);\n      }\n    }\n    return QuickSort(smaller).concat(base.concat(QuickSort(bigger)));\n  }\n}\n\n// es6\nfunction QuickSort(arr) {\n  const len = arr.length;\n  if (len <= 1) {\n    return arr;\n  } else {\n    const smallers = [];\n    const biggers = [];\n    const base = arr[0];\n    for (let i = 1; i < len; i++) {\n      if (arr[i] <= base) {\n        smallers.push(arr[i]);\n      } else {\n        biggers.push(arr[i]);\n      }\n    }\n    return [...QuickSort(smallers), base, ...QuickSort(biggers)];\n  }\n}\n```\n\n复杂度：\n\n| 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性 |\n|----|----|----|----|----|\n| O(n*log(n)) (n乘以n的以2为底的对数) | O(n*log(n)) | O(n^2)  | O(log(n))~O(n)  | 不稳定 |\n\n### 七、二分查找\n\n二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。\n\n1. 递归实现\n\n```javascript\n// 递归实现的js代码\n// 查找值为 key 所在数组中的下标\nfunction binary_search2(arr, low, high, key) {\n    if (low > high) {\n        return -1;\n    }\n    var mid = parseInt((high + low) / 2);\n    if (arr[mid] === key) {\n        return mid;\n    } else if (arr[mid] > key) {\n        high = mid -1;\n        return binary_search2(arr, low, high, key);\n    } else if (arr[mid] < key) {\n        low = mid +1;\n        return binary_search2(arr, low, high, key);\n    }\n}\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 44, 86];\nvar result2 = binary_search2(arr, 0, 13, 10);\nconsole.log(result2);   // 9\n```\n\n\n2. 非递归实现\n\n```javascript\n// 非递归实现的js代码\n// 查找值为 key 所在数组中的下标\nfunction binary_search(arr, key) {\n    var low = 0;\n    var high = arr.length - 1;\n\t // 遍历 \n    while (low <= high) {\n        var mid = parseInt((high + low) / 2);\n        if (key === arr[mid]) {\n            return mid;\n        } else if (key > arr[mid]) {\n            low = mid + 1;\n        } else if (key < arr[mid]) {\n            high = mid -1;\n        } else {\n            return -1;\n        }\n    }\n}\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 44, 86];\nvar result = binary_search(arr, 10);\nconsole.log(result);   // 9\n```\n\n以上代码是笔者参考网上，经过整理而成，有遗漏之处，欢迎指正。\n\n\n\n","slug":"sorting-by-js","published":1,"updated":"2017-08-27T00:00:00.000Z","_id":"cmduj3n460052k8sv22ia0gdv","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\">一、冒泡排序</a></li>\n<li><a href=\"#%E4%BA%8C-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\">二、选择排序</a></li>\n<li><a href=\"#%E4%B8%89-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">三、插入排序</a></li>\n<li><a href=\"#%E5%9B%9B-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">四、希尔排序</a></li>\n<li><a href=\"#%E4%BA%94-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\">五、归并排序</a></li>\n<li><a href=\"#%E5%85%AD-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">六、快速排序</a></li>\n<li><a href=\"#%E4%B8%83-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">七、二分查找</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等……当然，也问到了一些简单的算法问题，当时有点懵逼了，虽然大学的时候学过，但是时间久了，统统还给老师了，尴尬。对于算法，虽然相对后端语言来说，前端工作中还是比较少接触算法的，就算会接触，大都不会太复杂，但是一些简单的算法也是不得不知道的，大厂们都比较重视这个。</p>\n<p>排序。排序是我们最常见的算法题目，当然工作中也会遇到（前端 js API 里面已经有封装一个叫 <code>sort</code> 的方法），但，后面将要介绍几种排序是用 js 实现的方法。在这里整理一下，需要的时候可以翻看一下;</p>\n<p>查找。顺便总结一下常见的一些查找，如二分查找。</p>\n<h3><span id=\"一-冒泡排序\">一、冒泡排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BubbleSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BubleSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        [arr[j], arr[j+<span class=\"number\">1</span>]] = [arr[j+<span class=\"number\">1</span>], arr[j]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"二-选择排序\">二、选择排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SelectionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">        min = arr[j];</span><br><span class=\"line\">        index = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\">      arr[i] = arr[index];</span><br><span class=\"line\">      arr[index] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SelectionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i ; j&lt;len; j++) &#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">\t     [arr[i],arr[j]] = [arr[j],arr[i]];</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"三-插入排序\">三、插入排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">InsertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insert = arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (insert &lt; arr[j]) &#123;</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        index = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[index] = insert;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es 6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">InserttionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[j-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        [arr[j], arr[j-<span class=\"number\">1</span>]] = [arr[j-<span class=\"number\">1</span>], arr[j]];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"四-希尔排序\">四、希尔排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ShellSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gap = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> insert = arr[i];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (insert &lt; arr[j]) &#123;</span><br><span class=\"line\">          arr[j + gap] = arr[j];</span><br><span class=\"line\">          index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[index] = insert;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gap = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(gap/<span class=\"number\">2</span> - <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^1.3)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"五-归并排序\">五、归并排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">leftArr, rightArr</span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (leftArr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> &amp;&amp; rightArr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftArr[<span class=\"number\">0</span>] &lt; rightArr[<span class=\"number\">0</span>])  </span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(leftArr.<span class=\"title function_\">shift</span>()) <span class=\"comment\">// 把最小的最先取出，放到结果集中   </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>   </span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(rightArr.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"title function_\">concat</span>(leftArr).<span class=\"title function_\">concat</span>(rightArr)  <span class=\"comment\">// 剩下的就是合并，这样就排好序了  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">array</span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  <span class=\"keyword\">var</span> middle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(array.<span class=\"property\">length</span> / <span class=\"number\">2</span>)       <span class=\"comment\">// 求出中点  </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = array.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, middle)               <span class=\"comment\">// 分割数组  </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = array.<span class=\"title function_\">slice</span>(middle)  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right)) <span class=\"comment\">// 递归合并与排序  </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n*log(n)) (n乘以n的以2为底的对数)</td>\n<td>O(n*log(n))</td>\n<td>O(N*log(n))</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"六-快速排序\">六、快速排序</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = [arr[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">QuickSort</span>(smaller).<span class=\"title function_\">concat</span>(base.<span class=\"title function_\">concat</span>(<span class=\"title class_\">QuickSort</span>(bigger)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> smallers = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> biggers = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base) &#123;</span><br><span class=\"line\">        smallers.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        biggers.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...<span class=\"title class_\">QuickSort</span>(smallers), base, ...<span class=\"title class_\">QuickSort</span>(biggers)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n*log(n)) (n乘以n的以2为底的对数)</td>\n<td>O(n*log(n))</td>\n<td>O(n^2)</td>\n<td>O(log(n))~O(n)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3><span id=\"七-二分查找\">七、二分查找</span></h3><p>二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。</p>\n<ol>\n<li>递归实现</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现的js代码</span></span><br><span class=\"line\"><span class=\"comment\">// 查找值为 key 所在数组中的下标</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">binary_search2</span>(<span class=\"params\">arr, low, high, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] === key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key) &#123;</span><br><span class=\"line\">        high = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">binary_search2</span>(arr, low, high, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key) &#123;</span><br><span class=\"line\">        low = mid +<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">binary_search2</span>(arr, low, high, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">23</span>, <span class=\"number\">44</span>, <span class=\"number\">86</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"title function_\">binary_search2</span>(arr, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2);   <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>非递归实现</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归实现的js代码</span></span><br><span class=\"line\"><span class=\"comment\">// 查找值为 key 所在数组中的下标</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">arr, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> high = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t <span class=\"comment\">// 遍历 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === arr[mid]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; arr[mid]) &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) &#123;</span><br><span class=\"line\">            high = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">23</span>, <span class=\"number\">44</span>, <span class=\"number\">86</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">binary_search</span>(arr, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);   <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码是笔者参考网上，经过整理而成，有遗漏之处，欢迎指正。</p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\">一、冒泡排序</a></li>\n<li><a href=\"#%E4%BA%8C-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\">二、选择排序</a></li>\n<li><a href=\"#%E4%B8%89-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">三、插入排序</a></li>\n<li><a href=\"#%E5%9B%9B-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">四、希尔排序</a></li>\n<li><a href=\"#%E4%BA%94-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\">五、归并排序</a></li>\n<li><a href=\"#%E5%85%AD-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">六、快速排序</a></li>\n<li><a href=\"#%E4%B8%83-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">七、二分查找</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>首先，在切入正题之前，先提一下某同事前段时间的面试。前段时间某同事去某大厂面试，面的不好。面试问到的好多深入的问题，没答上来或者答得不全。大厂就是大厂，要求面试者不仅在广度上，而且在深度上也都要有一定的积累，个人理解就是你不仅要知道这是什么，而且还要知道这是为什么，甚至还要知道这样有什么好处和不好之处。一路面下来，各种被鄙视。比如，前端的优化方法有哪些，说说你在工作中做了哪些优化？Web 安全有哪些，又是如何去防御或者规避？HTTP 缓存的原理，缓存的过程是什么样子的？等等……当然，也问到了一些简单的算法问题，当时有点懵逼了，虽然大学的时候学过，但是时间久了，统统还给老师了，尴尬。对于算法，虽然相对后端语言来说，前端工作中还是比较少接触算法的，就算会接触，大都不会太复杂，但是一些简单的算法也是不得不知道的，大厂们都比较重视这个。</p>\n<p>排序。排序是我们最常见的算法题目，当然工作中也会遇到（前端 js API 里面已经有封装一个叫 <code>sort</code> 的方法），但，后面将要介绍几种排序是用 js 实现的方法。在这里整理一下，需要的时候可以翻看一下;</p>\n<p>查找。顺便总结一下常见的一些查找，如二分查找。</p>\n<h3 id=\"一、冒泡排序\"><a href=\"#一、冒泡排序\" class=\"headerlink\" title=\"一、冒泡排序\"></a>一、冒泡排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BubbleSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BubleSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        [arr[j], arr[j+<span class=\"number\">1</span>]] = [arr[j+<span class=\"number\">1</span>], arr[j]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、选择排序\"><a href=\"#二、选择排序\" class=\"headerlink\" title=\"二、选择排序\"></a>二、选择排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SelectionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">        min = arr[j];</span><br><span class=\"line\">        index = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\">      arr[i] = arr[index];</span><br><span class=\"line\">      arr[index] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SelectionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ;i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i ; j&lt;len; j++) &#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">\t     [arr[i],arr[j]] = [arr[j],arr[i]];</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、插入排序\"><a href=\"#三、插入排序\" class=\"headerlink\" title=\"三、插入排序\"></a>三、插入排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">InsertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insert = arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (insert &lt; arr[j]) &#123;</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        index = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[index] = insert;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es 6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">InserttionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[j-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        [arr[j], arr[j-<span class=\"number\">1</span>]] = [arr[j-<span class=\"number\">1</span>], arr[j]];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^2)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"四、希尔排序\"><a href=\"#四、希尔排序\" class=\"headerlink\" title=\"四、希尔排序\"></a>四、希尔排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ShellSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gap = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> insert = arr[i];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (insert &lt; arr[j]) &#123;</span><br><span class=\"line\">          arr[j + gap] = arr[j];</span><br><span class=\"line\">          index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[index] = insert;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gap = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(gap/<span class=\"number\">2</span> - <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n^1.3)</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"五、归并排序\"><a href=\"#五、归并排序\" class=\"headerlink\" title=\"五、归并排序\"></a>五、归并排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">leftArr, rightArr</span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (leftArr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> &amp;&amp; rightArr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftArr[<span class=\"number\">0</span>] &lt; rightArr[<span class=\"number\">0</span>])  </span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(leftArr.<span class=\"title function_\">shift</span>()) <span class=\"comment\">// 把最小的最先取出，放到结果集中   </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>   </span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(rightArr.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"title function_\">concat</span>(leftArr).<span class=\"title function_\">concat</span>(rightArr)  <span class=\"comment\">// 剩下的就是合并，这样就排好序了  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">array</span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array</span><br><span class=\"line\">  <span class=\"keyword\">var</span> middle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(array.<span class=\"property\">length</span> / <span class=\"number\">2</span>)       <span class=\"comment\">// 求出中点  </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = array.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, middle)               <span class=\"comment\">// 分割数组  </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = array.<span class=\"title function_\">slice</span>(middle)  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right)) <span class=\"comment\">// 递归合并与排序  </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n*log(n)) (n乘以n的以2为底的对数)</td>\n<td>O(n*log(n))</td>\n<td>O(N*log(n))</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"六、快速排序\"><a href=\"#六、快速排序\" class=\"headerlink\" title=\"六、快速排序\"></a>六、快速排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = [arr[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">QuickSort</span>(smaller).<span class=\"title function_\">concat</span>(base.<span class=\"title function_\">concat</span>(<span class=\"title class_\">QuickSort</span>(bigger)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> smallers = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> biggers = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &lt;= base) &#123;</span><br><span class=\"line\">        smallers.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        biggers.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...<span class=\"title class_\">QuickSort</span>(smallers), base, ...<span class=\"title class_\">QuickSort</span>(biggers)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度：</p>\n<table>\n<thead>\n<tr>\n<th>平均时间复杂度</th>\n<th>最好情况</th>\n<th>最坏情况</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(n*log(n)) (n乘以n的以2为底的对数)</td>\n<td>O(n*log(n))</td>\n<td>O(n^2)</td>\n<td>O(log(n))~O(n)</td>\n<td>不稳定</td>\n</tr>\n</tbody></table>\n<h3 id=\"七、二分查找\"><a href=\"#七、二分查找\" class=\"headerlink\" title=\"七、二分查找\"></a>七、二分查找</h3><p>二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。</p>\n<ol>\n<li>递归实现</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现的js代码</span></span><br><span class=\"line\"><span class=\"comment\">// 查找值为 key 所在数组中的下标</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">binary_search2</span>(<span class=\"params\">arr, low, high, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] === key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key) &#123;</span><br><span class=\"line\">        high = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">binary_search2</span>(arr, low, high, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key) &#123;</span><br><span class=\"line\">        low = mid +<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">binary_search2</span>(arr, low, high, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">23</span>, <span class=\"number\">44</span>, <span class=\"number\">86</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"title function_\">binary_search2</span>(arr, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2);   <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>非递归实现</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归实现的js代码</span></span><br><span class=\"line\"><span class=\"comment\">// 查找值为 key 所在数组中的下标</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">arr, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> high = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t <span class=\"comment\">// 遍历 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === arr[mid]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; arr[mid]) &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) &#123;</span><br><span class=\"line\">            high = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">23</span>, <span class=\"number\">44</span>, <span class=\"number\">86</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">binary_search</span>(arr, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);   <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码是笔者参考网上，经过整理而成，有遗漏之处，欢迎指正。</p>\n"},{"title":"Vue + Vuex + Bootstrap 入门实践","author":"Jelon","date":"2016-08-27T00:00:00.000Z","thumbnail":null,"blogexcerpt":"Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。---- 尤雨溪（Vue.js作者）","_content":"\n<!-- toc -->\n\n>  Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。\n> \n> ---- 尤雨溪（Vue.js 作者）\n\n### 前言\n\n这是一个优秀的框架，忍不住跃跃欲试。正好公司的周例会上，自己做了一个Demo来分享一下。但是，由于个人原因，例会上或许没有讲得太明白，因此，在这里以博文的形式，重新回顾一下例会的分享。\n\n首先，看一下成品，用的 Vue + Vuex + Bootstrap 做了一个类似博客的Demo，截图如下：\n\n![博客Demo](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/1.gif)\n\n这是一个很简单的 Demo ，主要分为文章列表页、文章页、实验室、关于、留言这几个页面。另外右边的那个 Counter 只是用来展示 Vuex 的 actions 的，和博客本身没什么联系。\n\n接下来，介绍这个 Demo 里面用到的技术：\n\n- Vue\n- Boostrap\n- Vuex\n\n### 什么是 Vue.js\n\n其实正如引言 Vue.js 的作者尤雨溪所说的，Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个前端框架。我们可以归结为以下下两点：\n\n* Vue.js 是用于构建交互式的 Web 界面库；\n* Vue.js 提供了MVVM 的数据绑定和一个可组合的组件系统，具有简单、灵活的API。\n\n![Vue 截图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/2.png)\n\n### Vue.js 的特点\n\n- **简洁** ： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。\n- **数据驱动** ： 自动追踪依赖的模板表达式和计算属性。\n- **组件化** ： 用解耦、可复用的组件来构造界面。\n- **轻量** ：  ~24kb min+gzip，无依赖。\n- **快速** ： 精确有效的异步批量 DOM 更新。\n- **模块友好** ： 通过 NPM 或 Bower 安装，无缝融入你的工作流。\n\n### Bootstrap\n\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。\n\nBootstrap 这里对于大家来说，应该都比较熟悉了，这里就不多说了。\n\n![Bootstrap](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/3.png)\n\n### Vuex\n\n什么是 Vuex ？我第一次看到这个名称的时候，我以为 Vuex 是 Vue 的升级版，有点尴尬 😓 。\n\n其实，Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。Vuex 之于 Vue 类似 Redux 之于 React ，但是 Vuex 的作者也是 Vue 的作者。\n\n每一个 Vuex 应用的核心就是 store（仓库）。\n\n对于 Vuex 介绍，只言片语应该是道不尽的，不如看一张流程图来理解更好。\n\n### Vuex 原理及流程图\n\n![Vuex 流程图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/4.png)\n\n关于这个流程图，说明一下。每一个 Vuex 应用的核心就是 store（仓库）。\"store\" 基本上就是一个容器，它包含着你应用里大部分的 状态(即 state). Vuex 和单纯的全局对象有以下两点不同：\n\n- Vuex 的状态存储是响应式的. 当 Vue 组件从 store 中读取状态的时候, 若 store 中的状态发生变化，那么相应的组件也会相应地高效地得到更新。\n- 你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地分发 状态变更事件(explicitly dispatching mutations)。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。\n\n简单地说，Vue 组件是不可以直接去改变数据 State ，而是通过 Actions 去分发状态变更，然后通过变更函数 （Mutations） 去改变数据 State ， 数据变化之后，Vue 组件可以通过 getters 去获取变更之后的数据 State 最后更新组件视图。\n\n### Vue 安装及项目构建\n\n**安装 Vue**\n\n安装 Vue 的命令如下，一般我们会选择全局安装。\n\n```bash\n$ npm install vue\n# 最新稳定 CSP 兼容版本\n$ npm install vue@csp\n# 全局安装\n$ npm install -g vue-cli\n```\n\n**下载模板**\n\n安装完 Vue 之后，接着是去下载 Vue 模板，命令行如下。\n\n```bash\n# 创建一个基于 \"webpack\" 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n\n# 安装依赖模块\n$ npm install\n# 运行项目\n$ npm run dev\n```\n\n另外，像 Vuex、还有 Vue-router 以及一些第三方插件通过 npm 安装；而 Bootstrap 下载下来直接放到项目的 static 目录下就好。\n\n### 项目代码结构\n\n完成以上工作之后，我们会得到一个 Vue 项目空模板，然后，我们就模板里面扩充 components （组件）、新建 vuex 目录，还有 Bootstrap 放在模板的 static 目录下，以我做的这个博客 Demo 为例，最终的项目结构截图如下。\n\n**项目代码结构图：**\n\n![代码结构图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/5.png)\n\n**项目树形图：**\n\n![项目树形图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/6.png)\n\n项目代码，这里就不多说，后面我会把 Demo 代码放到我的 Github 上供大家参考；这里贴一下程序入口 js （main.js） 、 主组件 （App.vue）和主入口页面 html。\n\n**main.js**\n\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport App from './App'\nimport Home from './components/routers/Home'\nimport Lab from './components/routers/Lab'\nimport About from './components/routers/About'\nimport Comment from './components/routers/Comment'\nimport My from './components/routers/My'\nimport Post from './components/routers/page/Post'\n\nVue.use(VueRouter)\nvar router = new VueRouter()\n/**\n * 路由配置\n */\nrouter.map({\n  '/home': {\n    component: Home\n  },\n  '/lab': {\n    component: Lab,\n    subRoutes: {\n      '/my': {\n        component: My\n      }\n    }\n  },\n  '/about': {\n    component: About\n  },\n  '/comment': {\n    component: Comment\n  },\n  '/post/:_id': {\n    name: 'post',\n    component: Post\n  }\n})\n\n// 设置默认情况下打开的页面\nrouter.redirect({\n  '/': '/home'\n})\n\nrouter.start(App, 'app')\n\n```\n\n**App.vue**\n\n```html\n<template>\n  <div id=\"app\">\n    <blog-header></blog-header>\n    <div class=\"container\" id=\"content\">\n      <div class=\"col-md-9\" id=\"main\">\n        <router-view></router-view>\n      </div>\n      <blog-sidebar></blog-sidebar>\n    </div>\n    <blog-footer></blog-footer>\n  </div>\n</template>\n\n<script>\nimport BlogHeader from './components/common/BlogHeader'\nimport BlogFooter from './components/common/BlogFooter'\nimport BlogSidebar from './components/common/BlogSidebar'\n\nexport default {\n  components: {\n    BlogHeader,\n    BlogFooter,\n    BlogSidebar\n  }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Jelon</title>\n    <link rel=\"shortcut icon\" href=\"./static/favicon.ico\" >\n    <link rel=\"stylesheet\" href=\"./static/css/bootstrap.min.css\" >\n    <link rel=\"stylesheet\" href=\"./static/css/bootstrap-theme.min.css\" >\n  </head>\n  <body>\n    <app></app>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\n\n### Vue 构建项目优点\n\n* 简单，上手比较快。这主要是因为 Vue 默认提供了的项目空模板，只要安装了就可以开始上手做项目了，再加上使用鼎鼎大名的 Bootstrap 就更加得心应手了；\n* 小巧，轻量级。这个主要是拿 Vue.js 跟 Angular.js 对比；\n* 模块化友好。通过 NPM 或 Bower 安装，无缝融入你的工作流；\n* 文档齐全完备。Vue 有着很优秀的中文官网文档，当然你想看英文甚至日文，也有。\n* ...\n\n### 参考\n\n- Vue 中文官网 http://cn.vuejs.org/\n\n- Bootstrap 官网 http://getbootstrap.com/\n\n- Vuex 中文教程教程 http://vuex.vuejs.org/zh-cn/index.html\n- Vue-router 中文教程 http://router.vuejs.org/zh-cn/index.html\n\n### Demo 地址\n\nDemo 已经放到 github ， 地址如下：\n[https://github.com/jangdelong/vue-blog-demo](https://github.com/jangdelong/vue-blog-demo)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue-vuex-bootstrap.md","raw":"---\ntitle: Vue + Vuex + Bootstrap 入门实践\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-08-27\ntags:\n\t- Vue.js\n\t- Vuex\n\t- Bootstrap\n\t- MVVM\nthumbnail:\nblogexcerpt: Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。---- 尤雨溪（Vue.js作者）\n\n---\n\n<!-- toc -->\n\n>  Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。\n> \n> ---- 尤雨溪（Vue.js 作者）\n\n### 前言\n\n这是一个优秀的框架，忍不住跃跃欲试。正好公司的周例会上，自己做了一个Demo来分享一下。但是，由于个人原因，例会上或许没有讲得太明白，因此，在这里以博文的形式，重新回顾一下例会的分享。\n\n首先，看一下成品，用的 Vue + Vuex + Bootstrap 做了一个类似博客的Demo，截图如下：\n\n![博客Demo](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/1.gif)\n\n这是一个很简单的 Demo ，主要分为文章列表页、文章页、实验室、关于、留言这几个页面。另外右边的那个 Counter 只是用来展示 Vuex 的 actions 的，和博客本身没什么联系。\n\n接下来，介绍这个 Demo 里面用到的技术：\n\n- Vue\n- Boostrap\n- Vuex\n\n### 什么是 Vue.js\n\n其实正如引言 Vue.js 的作者尤雨溪所说的，Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个前端框架。我们可以归结为以下下两点：\n\n* Vue.js 是用于构建交互式的 Web 界面库；\n* Vue.js 提供了MVVM 的数据绑定和一个可组合的组件系统，具有简单、灵活的API。\n\n![Vue 截图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/2.png)\n\n### Vue.js 的特点\n\n- **简洁** ： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。\n- **数据驱动** ： 自动追踪依赖的模板表达式和计算属性。\n- **组件化** ： 用解耦、可复用的组件来构造界面。\n- **轻量** ：  ~24kb min+gzip，无依赖。\n- **快速** ： 精确有效的异步批量 DOM 更新。\n- **模块友好** ： 通过 NPM 或 Bower 安装，无缝融入你的工作流。\n\n### Bootstrap\n\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。\n\nBootstrap 这里对于大家来说，应该都比较熟悉了，这里就不多说了。\n\n![Bootstrap](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/3.png)\n\n### Vuex\n\n什么是 Vuex ？我第一次看到这个名称的时候，我以为 Vuex 是 Vue 的升级版，有点尴尬 😓 。\n\n其实，Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。Vuex 之于 Vue 类似 Redux 之于 React ，但是 Vuex 的作者也是 Vue 的作者。\n\n每一个 Vuex 应用的核心就是 store（仓库）。\n\n对于 Vuex 介绍，只言片语应该是道不尽的，不如看一张流程图来理解更好。\n\n### Vuex 原理及流程图\n\n![Vuex 流程图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/4.png)\n\n关于这个流程图，说明一下。每一个 Vuex 应用的核心就是 store（仓库）。\"store\" 基本上就是一个容器，它包含着你应用里大部分的 状态(即 state). Vuex 和单纯的全局对象有以下两点不同：\n\n- Vuex 的状态存储是响应式的. 当 Vue 组件从 store 中读取状态的时候, 若 store 中的状态发生变化，那么相应的组件也会相应地高效地得到更新。\n- 你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地分发 状态变更事件(explicitly dispatching mutations)。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。\n\n简单地说，Vue 组件是不可以直接去改变数据 State ，而是通过 Actions 去分发状态变更，然后通过变更函数 （Mutations） 去改变数据 State ， 数据变化之后，Vue 组件可以通过 getters 去获取变更之后的数据 State 最后更新组件视图。\n\n### Vue 安装及项目构建\n\n**安装 Vue**\n\n安装 Vue 的命令如下，一般我们会选择全局安装。\n\n```bash\n$ npm install vue\n# 最新稳定 CSP 兼容版本\n$ npm install vue@csp\n# 全局安装\n$ npm install -g vue-cli\n```\n\n**下载模板**\n\n安装完 Vue 之后，接着是去下载 Vue 模板，命令行如下。\n\n```bash\n# 创建一个基于 \"webpack\" 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n\n# 安装依赖模块\n$ npm install\n# 运行项目\n$ npm run dev\n```\n\n另外，像 Vuex、还有 Vue-router 以及一些第三方插件通过 npm 安装；而 Bootstrap 下载下来直接放到项目的 static 目录下就好。\n\n### 项目代码结构\n\n完成以上工作之后，我们会得到一个 Vue 项目空模板，然后，我们就模板里面扩充 components （组件）、新建 vuex 目录，还有 Bootstrap 放在模板的 static 目录下，以我做的这个博客 Demo 为例，最终的项目结构截图如下。\n\n**项目代码结构图：**\n\n![代码结构图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/5.png)\n\n**项目树形图：**\n\n![项目树形图](https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/6.png)\n\n项目代码，这里就不多说，后面我会把 Demo 代码放到我的 Github 上供大家参考；这里贴一下程序入口 js （main.js） 、 主组件 （App.vue）和主入口页面 html。\n\n**main.js**\n\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport App from './App'\nimport Home from './components/routers/Home'\nimport Lab from './components/routers/Lab'\nimport About from './components/routers/About'\nimport Comment from './components/routers/Comment'\nimport My from './components/routers/My'\nimport Post from './components/routers/page/Post'\n\nVue.use(VueRouter)\nvar router = new VueRouter()\n/**\n * 路由配置\n */\nrouter.map({\n  '/home': {\n    component: Home\n  },\n  '/lab': {\n    component: Lab,\n    subRoutes: {\n      '/my': {\n        component: My\n      }\n    }\n  },\n  '/about': {\n    component: About\n  },\n  '/comment': {\n    component: Comment\n  },\n  '/post/:_id': {\n    name: 'post',\n    component: Post\n  }\n})\n\n// 设置默认情况下打开的页面\nrouter.redirect({\n  '/': '/home'\n})\n\nrouter.start(App, 'app')\n\n```\n\n**App.vue**\n\n```html\n<template>\n  <div id=\"app\">\n    <blog-header></blog-header>\n    <div class=\"container\" id=\"content\">\n      <div class=\"col-md-9\" id=\"main\">\n        <router-view></router-view>\n      </div>\n      <blog-sidebar></blog-sidebar>\n    </div>\n    <blog-footer></blog-footer>\n  </div>\n</template>\n\n<script>\nimport BlogHeader from './components/common/BlogHeader'\nimport BlogFooter from './components/common/BlogFooter'\nimport BlogSidebar from './components/common/BlogSidebar'\n\nexport default {\n  components: {\n    BlogHeader,\n    BlogFooter,\n    BlogSidebar\n  }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Jelon</title>\n    <link rel=\"shortcut icon\" href=\"./static/favicon.ico\" >\n    <link rel=\"stylesheet\" href=\"./static/css/bootstrap.min.css\" >\n    <link rel=\"stylesheet\" href=\"./static/css/bootstrap-theme.min.css\" >\n  </head>\n  <body>\n    <app></app>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\n\n### Vue 构建项目优点\n\n* 简单，上手比较快。这主要是因为 Vue 默认提供了的项目空模板，只要安装了就可以开始上手做项目了，再加上使用鼎鼎大名的 Bootstrap 就更加得心应手了；\n* 小巧，轻量级。这个主要是拿 Vue.js 跟 Angular.js 对比；\n* 模块化友好。通过 NPM 或 Bower 安装，无缝融入你的工作流；\n* 文档齐全完备。Vue 有着很优秀的中文官网文档，当然你想看英文甚至日文，也有。\n* ...\n\n### 参考\n\n- Vue 中文官网 http://cn.vuejs.org/\n\n- Bootstrap 官网 http://getbootstrap.com/\n\n- Vuex 中文教程教程 http://vuex.vuejs.org/zh-cn/index.html\n- Vue-router 中文教程 http://router.vuejs.org/zh-cn/index.html\n\n### Demo 地址\n\nDemo 已经放到 github ， 地址如下：\n[https://github.com/jangdelong/vue-blog-demo](https://github.com/jangdelong/vue-blog-demo)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue-vuex-bootstrap","published":1,"updated":"2016-08-27T00:00:00.000Z","_id":"cmduj3n470054k8sv71v92lsl","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-vuejs\">什么是 Vue.js</a></li>\n<li><a href=\"#vuejs-%E7%9A%84%E7%89%B9%E7%82%B9\">Vue.js 的特点</a></li>\n<li><a href=\"#bootstrap\">Bootstrap</a></li>\n<li><a href=\"#vuex\">Vuex</a></li>\n<li><a href=\"#vuex-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B%E5%9B%BE\">Vuex 原理及流程图</a></li>\n<li><a href=\"#vue-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA\">Vue 安装及项目构建</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\">项目代码结构</a></li>\n<li><a href=\"#vue-%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BC%98%E7%82%B9\">Vue 构建项目优点</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n<li><a href=\"#demo-%E5%9C%B0%E5%9D%80\">Demo 地址</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<blockquote>\n<p> Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。</p>\n<p>—- 尤雨溪（Vue.js 作者）</p>\n</blockquote>\n<h3><span id=\"前言\">前言</span></h3><p>这是一个优秀的框架，忍不住跃跃欲试。正好公司的周例会上，自己做了一个Demo来分享一下。但是，由于个人原因，例会上或许没有讲得太明白，因此，在这里以博文的形式，重新回顾一下例会的分享。</p>\n<p>首先，看一下成品，用的 Vue + Vuex + Bootstrap 做了一个类似博客的Demo，截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/1.gif\" alt=\"博客Demo\"></p>\n<p>这是一个很简单的 Demo ，主要分为文章列表页、文章页、实验室、关于、留言这几个页面。另外右边的那个 Counter 只是用来展示 Vuex 的 actions 的，和博客本身没什么联系。</p>\n<p>接下来，介绍这个 Demo 里面用到的技术：</p>\n<ul>\n<li>Vue</li>\n<li>Boostrap</li>\n<li>Vuex</li>\n</ul>\n<h3><span id=\"什么是-vuejs\">什么是 Vue.js</span></h3><p>其实正如引言 Vue.js 的作者尤雨溪所说的，Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个前端框架。我们可以归结为以下下两点：</p>\n<ul>\n<li>Vue.js 是用于构建交互式的 Web 界面库；</li>\n<li>Vue.js 提供了MVVM 的数据绑定和一个可组合的组件系统，具有简单、灵活的API。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/2.png\" alt=\"Vue 截图\"></p>\n<h3><span id=\"vuejs-的特点\">Vue.js 的特点</span></h3><ul>\n<li><strong>简洁</strong> ： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。</li>\n<li><strong>数据驱动</strong> ： 自动追踪依赖的模板表达式和计算属性。</li>\n<li><strong>组件化</strong> ： 用解耦、可复用的组件来构造界面。</li>\n<li><strong>轻量</strong> ：  ~24kb min+gzip，无依赖。</li>\n<li><strong>快速</strong> ： 精确有效的异步批量 DOM 更新。</li>\n<li><strong>模块友好</strong> ： 通过 NPM 或 Bower 安装，无缝融入你的工作流。</li>\n</ul>\n<h3><span id=\"bootstrap\">Bootstrap</span></h3><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p>\n<p>Bootstrap 这里对于大家来说，应该都比较熟悉了，这里就不多说了。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/3.png\" alt=\"Bootstrap\"></p>\n<h3><span id=\"vuex\">Vuex</span></h3><p>什么是 Vuex ？我第一次看到这个名称的时候，我以为 Vuex 是 Vue 的升级版，有点尴尬 😓 。</p>\n<p>其实，Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。Vuex 之于 Vue 类似 Redux 之于 React ，但是 Vuex 的作者也是 Vue 的作者。</p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。</p>\n<p>对于 Vuex 介绍，只言片语应该是道不尽的，不如看一张流程图来理解更好。</p>\n<h3><span id=\"vuex-原理及流程图\">Vuex 原理及流程图</span></h3><p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/4.png\" alt=\"Vuex 流程图\"></p>\n<p>关于这个流程图，说明一下。每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你应用里大部分的 状态(即 state). Vuex 和单纯的全局对象有以下两点不同：</p>\n<ul>\n<li>Vuex 的状态存储是响应式的. 当 Vue 组件从 store 中读取状态的时候, 若 store 中的状态发生变化，那么相应的组件也会相应地高效地得到更新。</li>\n<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地分发 状态变更事件(explicitly dispatching mutations)。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>\n</ul>\n<p>简单地说，Vue 组件是不可以直接去改变数据 State ，而是通过 Actions 去分发状态变更，然后通过变更函数 （Mutations） 去改变数据 State ， 数据变化之后，Vue 组件可以通过 getters 去获取变更之后的数据 State 最后更新组件视图。</p>\n<h3><span id=\"vue-安装及项目构建\">Vue 安装及项目构建</span></h3><p><strong>安装 Vue</strong></p>\n<p>安装 Vue 的命令如下，一般我们会选择全局安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install vue</span><br><span class=\"line\"><span class=\"comment\"># 最新稳定 CSP 兼容版本</span></span><br><span class=\"line\">$ npm install vue@csp</span><br><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>下载模板</strong></p>\n<p>安装完 Vue 之后，接着是去下载 Vue 模板，命令行如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个基于 &quot;webpack&quot; 模板的新项目</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖，走你</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖模块</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>另外，像 Vuex、还有 Vue-router 以及一些第三方插件通过 npm 安装；而 Bootstrap 下载下来直接放到项目的 static 目录下就好。</p>\n<h3><span id=\"项目代码结构\">项目代码结构</span></h3><p>完成以上工作之后，我们会得到一个 Vue 项目空模板，然后，我们就模板里面扩充 components （组件）、新建 vuex 目录，还有 Bootstrap 放在模板的 static 目录下，以我做的这个博客 Demo 为例，最终的项目结构截图如下。</p>\n<p><strong>项目代码结构图：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/5.png\" alt=\"代码结构图\"></p>\n<p><strong>项目树形图：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/6.png\" alt=\"项目树形图\"></p>\n<p>项目代码，这里就不多说，后面我会把 Demo 代码放到我的 Github 上供大家参考；这里贴一下程序入口 js （main.js） 、 主组件 （App.vue）和主入口页面 html。</p>\n<p><strong>main.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Lab</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Lab&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Comment</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Comment&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">My</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/My&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Post</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/page/Post&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>()</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 路由配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">router.<span class=\"title function_\">map</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/home&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/lab&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Lab</span>,</span><br><span class=\"line\">    <span class=\"attr\">subRoutes</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/my&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">My</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/about&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">About</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/comment&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Comment</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/post/:_id&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Post</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认情况下打开的页面</span></span><br><span class=\"line\">router.<span class=\"title function_\">redirect</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/&#x27;</span>: <span class=\"string\">&#x27;/home&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">start</span>(<span class=\"title class_\">App</span>, <span class=\"string\">&#x27;app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>App.vue</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blog-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">blog-sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blog-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogHeader</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogHeader&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogFooter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogFooter&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogSidebar</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogSidebar&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogHeader</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogFooter</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogSidebar</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>index.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Jelon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;shortcut icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/favicon.ico&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/css/bootstrap.min.css&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/css/bootstrap-theme.min.css&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"vue-构建项目优点\">Vue 构建项目优点</span></h3><ul>\n<li>简单，上手比较快。这主要是因为 Vue 默认提供了的项目空模板，只要安装了就可以开始上手做项目了，再加上使用鼎鼎大名的 Bootstrap 就更加得心应手了；</li>\n<li>小巧，轻量级。这个主要是拿 Vue.js 跟 Angular.js 对比；</li>\n<li>模块化友好。通过 NPM 或 Bower 安装，无缝融入你的工作流；</li>\n<li>文档齐全完备。Vue 有着很优秀的中文官网文档，当然你想看英文甚至日文，也有。</li>\n<li>…</li>\n</ul>\n<h3><span id=\"参考\">参考</span></h3><ul>\n<li><p>Vue 中文官网 <a href=\"http://cn.vuejs.org/\">http://cn.vuejs.org/</a></p>\n</li>\n<li><p>Bootstrap 官网 <a href=\"http://getbootstrap.com/\">http://getbootstrap.com/</a></p>\n</li>\n<li><p>Vuex 中文教程教程 <a href=\"http://vuex.vuejs.org/zh-cn/index.html\">http://vuex.vuejs.org/zh-cn/index.html</a></p>\n</li>\n<li><p>Vue-router 中文教程 <a href=\"http://router.vuejs.org/zh-cn/index.html\">http://router.vuejs.org/zh-cn/index.html</a></p>\n</li>\n</ul>\n<h3><span id=\"demo-地址\">Demo 地址</span></h3><p>Demo 已经放到 github ， 地址如下：<br><a href=\"https://github.com/jangdelong/vue-blog-demo\">https://github.com/jangdelong/vue-blog-demo</a></p>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-vuejs\">什么是 Vue.js</a></li>\n<li><a href=\"#vuejs-%E7%9A%84%E7%89%B9%E7%82%B9\">Vue.js 的特点</a></li>\n<li><a href=\"#bootstrap\">Bootstrap</a></li>\n<li><a href=\"#vuex\">Vuex</a></li>\n<li><a href=\"#vuex-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B%E5%9B%BE\">Vuex 原理及流程图</a></li>\n<li><a href=\"#vue-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA\">Vue 安装及项目构建</a></li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\">项目代码结构</a></li>\n<li><a href=\"#vue-%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BC%98%E7%82%B9\">Vue 构建项目优点</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n<li><a href=\"#demo-%E5%9C%B0%E5%9D%80\">Demo 地址</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<blockquote>\n<p> Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。</p>\n<p>—- 尤雨溪（Vue.js 作者）</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这是一个优秀的框架，忍不住跃跃欲试。正好公司的周例会上，自己做了一个Demo来分享一下。但是，由于个人原因，例会上或许没有讲得太明白，因此，在这里以博文的形式，重新回顾一下例会的分享。</p>\n<p>首先，看一下成品，用的 Vue + Vuex + Bootstrap 做了一个类似博客的Demo，截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/1.gif\" alt=\"博客Demo\"></p>\n<p>这是一个很简单的 Demo ，主要分为文章列表页、文章页、实验室、关于、留言这几个页面。另外右边的那个 Counter 只是用来展示 Vuex 的 actions 的，和博客本身没什么联系。</p>\n<p>接下来，介绍这个 Demo 里面用到的技术：</p>\n<ul>\n<li>Vue</li>\n<li>Boostrap</li>\n<li>Vuex</li>\n</ul>\n<h3 id=\"什么是-Vue-js\"><a href=\"#什么是-Vue-js\" class=\"headerlink\" title=\"什么是 Vue.js\"></a>什么是 Vue.js</h3><p>其实正如引言 Vue.js 的作者尤雨溪所说的，Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个前端框架。我们可以归结为以下下两点：</p>\n<ul>\n<li>Vue.js 是用于构建交互式的 Web 界面库；</li>\n<li>Vue.js 提供了MVVM 的数据绑定和一个可组合的组件系统，具有简单、灵活的API。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/2.png\" alt=\"Vue 截图\"></p>\n<h3 id=\"Vue-js-的特点\"><a href=\"#Vue-js-的特点\" class=\"headerlink\" title=\"Vue.js 的特点\"></a>Vue.js 的特点</h3><ul>\n<li><strong>简洁</strong> ： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。</li>\n<li><strong>数据驱动</strong> ： 自动追踪依赖的模板表达式和计算属性。</li>\n<li><strong>组件化</strong> ： 用解耦、可复用的组件来构造界面。</li>\n<li><strong>轻量</strong> ：  ~24kb min+gzip，无依赖。</li>\n<li><strong>快速</strong> ： 精确有效的异步批量 DOM 更新。</li>\n<li><strong>模块友好</strong> ： 通过 NPM 或 Bower 安装，无缝融入你的工作流。</li>\n</ul>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h3><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p>\n<p>Bootstrap 这里对于大家来说，应该都比较熟悉了，这里就不多说了。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/3.png\" alt=\"Bootstrap\"></p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>什么是 Vuex ？我第一次看到这个名称的时候，我以为 Vuex 是 Vue 的升级版，有点尴尬 😓 。</p>\n<p>其实，Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。Vuex 之于 Vue 类似 Redux 之于 React ，但是 Vuex 的作者也是 Vue 的作者。</p>\n<p>每一个 Vuex 应用的核心就是 store（仓库）。</p>\n<p>对于 Vuex 介绍，只言片语应该是道不尽的，不如看一张流程图来理解更好。</p>\n<h3 id=\"Vuex-原理及流程图\"><a href=\"#Vuex-原理及流程图\" class=\"headerlink\" title=\"Vuex 原理及流程图\"></a>Vuex 原理及流程图</h3><p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/4.png\" alt=\"Vuex 流程图\"></p>\n<p>关于这个流程图，说明一下。每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你应用里大部分的 状态(即 state). Vuex 和单纯的全局对象有以下两点不同：</p>\n<ul>\n<li>Vuex 的状态存储是响应式的. 当 Vue 组件从 store 中读取状态的时候, 若 store 中的状态发生变化，那么相应的组件也会相应地高效地得到更新。</li>\n<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地分发 状态变更事件(explicitly dispatching mutations)。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>\n</ul>\n<p>简单地说，Vue 组件是不可以直接去改变数据 State ，而是通过 Actions 去分发状态变更，然后通过变更函数 （Mutations） 去改变数据 State ， 数据变化之后，Vue 组件可以通过 getters 去获取变更之后的数据 State 最后更新组件视图。</p>\n<h3 id=\"Vue-安装及项目构建\"><a href=\"#Vue-安装及项目构建\" class=\"headerlink\" title=\"Vue 安装及项目构建\"></a>Vue 安装及项目构建</h3><p><strong>安装 Vue</strong></p>\n<p>安装 Vue 的命令如下，一般我们会选择全局安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install vue</span><br><span class=\"line\"><span class=\"comment\"># 最新稳定 CSP 兼容版本</span></span><br><span class=\"line\">$ npm install vue@csp</span><br><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>下载模板</strong></p>\n<p>安装完 Vue 之后，接着是去下载 Vue 模板，命令行如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个基于 &quot;webpack&quot; 模板的新项目</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖，走你</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖模块</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>另外，像 Vuex、还有 Vue-router 以及一些第三方插件通过 npm 安装；而 Bootstrap 下载下来直接放到项目的 static 目录下就好。</p>\n<h3 id=\"项目代码结构\"><a href=\"#项目代码结构\" class=\"headerlink\" title=\"项目代码结构\"></a>项目代码结构</h3><p>完成以上工作之后，我们会得到一个 Vue 项目空模板，然后，我们就模板里面扩充 components （组件）、新建 vuex 目录，还有 Bootstrap 放在模板的 static 目录下，以我做的这个博客 Demo 为例，最终的项目结构截图如下。</p>\n<p><strong>项目代码结构图：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/5.png\" alt=\"代码结构图\"></p>\n<p><strong>项目树形图：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/vue-vuex-bootstrap/6.png\" alt=\"项目树形图\"></p>\n<p>项目代码，这里就不多说，后面我会把 Demo 代码放到我的 Github 上供大家参考；这里贴一下程序入口 js （main.js） 、 主组件 （App.vue）和主入口页面 html。</p>\n<p><strong>main.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Lab</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Lab&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">About</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Comment</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/Comment&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">My</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/My&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Post</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/routers/page/Post&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>()</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 路由配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">router.<span class=\"title function_\">map</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/home&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/lab&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Lab</span>,</span><br><span class=\"line\">    <span class=\"attr\">subRoutes</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/my&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">My</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/about&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">About</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/comment&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Comment</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;/post/:_id&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Post</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置默认情况下打开的页面</span></span><br><span class=\"line\">router.<span class=\"title function_\">redirect</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;/&#x27;</span>: <span class=\"string\">&#x27;/home&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">start</span>(<span class=\"title class_\">App</span>, <span class=\"string\">&#x27;app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>App.vue</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blog-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">blog-sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-sidebar</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blog-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogHeader</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogHeader&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogFooter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogFooter&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">BlogSidebar</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/common/BlogSidebar&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogHeader</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogFooter</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">BlogSidebar</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>index.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Jelon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;shortcut icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/favicon.ico&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/css/bootstrap.min.css&quot;</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./static/css/bootstrap-theme.min.css&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Vue-构建项目优点\"><a href=\"#Vue-构建项目优点\" class=\"headerlink\" title=\"Vue 构建项目优点\"></a>Vue 构建项目优点</h3><ul>\n<li>简单，上手比较快。这主要是因为 Vue 默认提供了的项目空模板，只要安装了就可以开始上手做项目了，再加上使用鼎鼎大名的 Bootstrap 就更加得心应手了；</li>\n<li>小巧，轻量级。这个主要是拿 Vue.js 跟 Angular.js 对比；</li>\n<li>模块化友好。通过 NPM 或 Bower 安装，无缝融入你的工作流；</li>\n<li>文档齐全完备。Vue 有着很优秀的中文官网文档，当然你想看英文甚至日文，也有。</li>\n<li>…</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p>Vue 中文官网 <a href=\"http://cn.vuejs.org/\">http://cn.vuejs.org/</a></p>\n</li>\n<li><p>Bootstrap 官网 <a href=\"http://getbootstrap.com/\">http://getbootstrap.com/</a></p>\n</li>\n<li><p>Vuex 中文教程教程 <a href=\"http://vuex.vuejs.org/zh-cn/index.html\">http://vuex.vuejs.org/zh-cn/index.html</a></p>\n</li>\n<li><p>Vue-router 中文教程 <a href=\"http://router.vuejs.org/zh-cn/index.html\">http://router.vuejs.org/zh-cn/index.html</a></p>\n</li>\n</ul>\n<h3 id=\"Demo-地址\"><a href=\"#Demo-地址\" class=\"headerlink\" title=\"Demo 地址\"></a>Demo 地址</h3><p>Demo 已经放到 github ， 地址如下：<br><a href=\"https://github.com/jangdelong/vue-blog-demo\">https://github.com/jangdelong/vue-blog-demo</a></p>\n"},{"title":"Web 安全介绍及规避","author":"Jelon","date":"2017-08-17T00:00:00.000Z","thumbnail":null,"blogexcerpt":"一、跨站脚本攻击 (xss)1. 反射型跨站脚本攻击攻击者会通过社会工程学手段，发送一个URL连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。2. 存储型跨站脚本攻击攻击者利用web应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。3. DOM 跨站攻击由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本...","_content":"\n<!-- toc -->\n\n### 一、跨站脚本攻击 (xss)\n\n1. 反射型跨站脚本攻击\n\t\n\t攻击者会通过社会工程学手段，发送一个 URL 连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。\n\n2. 存储型跨站脚本攻击\n\n\t攻击者利用 web 应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。\n\n3. DOM 跨站攻击\n\n\t由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。\n\n\tDOM 跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用JAVASCRIPT ，才可以防御。\n\t\n4. HTML/XML 页面输出规范\n\n\t1) 在 HTML/XML 中显示“用户可控数据”前，应该进行 html escape 转义。\n\t\n\t2) 在javascript内容中输出的“用户可控数据”，需要做 javascript escape 转义。\n\t\n\t3) 对输出到富文本中的“用户可控数据”，做富文本安全过滤（允许用户输出 HTML 的情况），统一使用 ANTISAMY 过滤框架处理。\n\t\n\t4) 输出在 url 中的数据，做 url 安全输出。\n\t\n\t5) 针对 DOM 跨站的安全策略及加固措施根据实际情况进行过滤。\n\t\n\t6) 在给用户设置认证 COOKIE 时，加入 HTTPONLY。\n\t\n\t7) 在 style 内容中输出的“用户可控数据”，需要做 CSS escape 转义。\n\n### 二、FLASH 安全\n\n1. 服务端的安全\n       \n\t由于没有正确的配置域策略文件，导致客户端的 flash 文件能够绕过同源策略的限制跨域获取数据。\n\n2. 客户端安全\n\n   客户端在嵌入 flash 文件的时候没有指定 flash 文件的客户端限制策略，导致嵌入在客户端的 flash 文件可以访问 HTML 页面的 DOM 数或者发起跨域请求。\n   \n\tFlash配置规范：\n\t\n\t1) Crossdomain.xml的安全配置：\n\t\n\t如果没有 flash 应用，去掉 crossdomian.xml 文件，对有 flash 应用域的根目录下需要配置 crossdomain.xml 策略文件，设置为只允许来自特定域的请求不允许添加 `<site-control permitted-cross-domain-policies=\"by-content-type\"/>`，这样会导致客户端可能自己加载自定义策略文件。\n\t\t\n\t2) 客户端嵌入 flash 文件的安全配置：\n\t\n\t① 禁止设置 flash 的 allowscriptaccess 为 always，必须设置为 never，如果设置为 SameDomain，需要客户可以上传的flash文件要在单独的一个域下。\n\n\t② 设置 allowNetworking 选项为 none。\n\n\t③ 设置 allowfullscreen 选项为 false。\n        \n### 三、跨站请求伪造攻击 (CSRF)\n\n攻击者在用户浏览网页时，利用页面元素（例如 img 的 src），强迫受害者的浏览器向 Web 应用程序发送一个改变用户信息的请求。\n    \n由于发生 CSRF 攻击后，攻击者是强迫用户向服务器发送请求，所以会造成用户信息被迫修改，更严重者引发蠕虫攻击。\n\n要防御 CSRF 攻击，必须遵循一下三步：\n\n1. 在用户登录时，设置一个 CSRF 的随机 TOKEN ，同时种植在用户的 cookie 中，当用户浏览器关闭、或用户再次登录、或退出时，清除 token。\n\n2. 在表单中，生成一个隐藏域，它的值就是 COOKIE 中随机 TOKEN。\n\n3. 表单被提交后，就可以在接收用户请求的 web 应用中，判断表单中的 TOKEN 值是否和用户 COOKIE 中的 TOKEN 值一致，如果不一致或没有这个值，就判断为 CSRF 攻击，同时记录攻击日志。\n        \n### 四、URL 跳转攻击\n\nWeb 应用程序接收到用户提交的 URL 参数后，没有对参数做 “可信任 URL” 的验证，就向用户浏览器返回跳转到该URL的指令。\n\n为了保证用户所点击的 URL，是从 web 应用程序中生成的URL，所以要做 TOKEN 验证。\n       \n1. 当用户访问需要生成跳转URL的页面时，首先生成随机 token，并放入 cookie。\n       \n2. 在显示连接的页面上生成 URL，在 URL 参数中加入 token。\n       \n\n这两个方案都可以保证所有在应用中发出的重定向地址，都是可信任的地址。\n        \n### 五、代码注入攻击\n\nweb 应用代码中，允许接收用户输入一段代码，之后在 web 应用服务器上执行这段代码，并返回给用户。\n\n执行代码的参数，或文件名，禁止和用户输入相关，只能由开发人员定义代码内容，用户只能提交 “1、2、3” 参数，代表相应代码。\n\n### 六、XML/XXE 注入安全攻击\n\n和 SQL 注入原理一样，XML 是存储数据的地方，如果在查询或修改时，如果没有做转义，直接输入或输出数据，都将导致XML注入漏洞。攻击者可以修改XML数据格式，增加新的 XML 节点，对数据处理流程产生影响。\n\nXXE 外部实体注入攻击，当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。\n\n在XML保存和展示前，对数据部分，单独做 xml escape。\n\n按照以下列表做转义\n\n```html\n& --> &amp;\n< --> &lt;\n> --> &gt;\n\" --> &quot;\n' --> &#39;\n```\n\n方案一、使用开发语言提供的禁用外部实体的方法\n\n```java\n// JAVA:\nDocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false);\n```\n\n方案二、过滤用户提交的 XML 数据\n\n关键词：`<!DOCTYPE` 和 `<!ENTITY`，或者，`SYSTEM` 和 `PUBLIC`。\n\n### 七、任意文件上传攻击\n\nWeb 应用程序在处理用户上传的文件时，没有判断文件的扩展名是否在允许的范围内，就把文件保存在服务器上，导致恶意用户可以上传任意文件，甚至上传脚本木马到 web 服务器上，直接控制 web 服务器。\n\n处理用户上传文件，要做以下检查：\n\n1. 检查上传文件扩展名白名单，不属于白名单内，不允许上传。\n\n2. 上传文件的目录必须是 http 请求无法直接访问到的。如果需要访问的，必须上传到其他（和 web 服务器不同的）域名下，并设置该目录为不解析 jsp 等脚本语言的目录。\n\n3. 上传文件要保存的文件名和目录名由系统根据时间生成，不允许用户自定义。\n\n4. 图片上传，要通过处理（缩略图、水印等），无异常后才能保存到服务器。\n\n5. 上传文件需要做日志记录。\n\n### 八、任意文件下载攻击和目录遍历攻击\n       \n处理用户请求下载文件时，允许用户提交任意文件路径，并把服务器上对应的文件直接发送给用户，这将造成任意文件下载威胁。如果让用户提交文件目录地址，就把目录下的文件列表发给用户，会造成目录遍历安全威胁。\n       \n恶意用户会变换目录或文件地址，下载服务器上的敏感文件、数据库链接配置文件、网站源代码等。\n\n对文件操作功能，做到以下几点：\n\n1. 要下载的文件地址保存至数据库中。\n\n2. 文件路径保存至数据库，让用户提交文件对应 ID 下载文件。\n\n3. 下载文件之前做权限判断。\n\n4. 文件放在web无法直接访问的目录下。\n\n5. 记录文件下载日志（内容见日志章节）。\n\n6. 不允许提供目录遍历服务。\n\n### 九、垂直/水平权限提升攻击\n\n垂直权限安全攻击（权限提升攻击），由于 web 应用程序没有做权限控制，或仅仅在菜单上做了权限控制，导致的恶意用户只要猜测其他管理页面的 URL ，就可以访问或控制其他角色拥有的数据或页面，达到权限提升目的。\n\n这个威胁可能导致普通用户变成管理员权限。\n\n访问控制攻击(水平权限安全攻击)\n\nWeb应用程序接收到用户请求，修改某条数据时，没有判断数据的所属人，或判断数据所属人时，从用户提交的 request 参数（用户可控数据）中，获取了数据所属人 id，导致恶意攻击者可以通过变换数据 ID ，或变换所属人 id ，修改不属于自己的数据。\n\n恶意用户可以删除或修改其他人数据。\n       \n在打开管理页面URL时，首先判断当前用户是否拥有该页面的权限，如果没有权限，就判定为“权限提升”攻击，同时记录安全日志。从用户的加密认证 cookie 中，获取当前用户的 id ，并且需要在执行的 SQL 语句中，加入当前用户 id 作为条件语句。由于是web应用控制的加密算法，所以恶意用户无法修改加密信息。\n\n### 十、Cookie安全\n\n1. Cookie httponly 安全\n       \n\tCookie http only，是设置 COOKIE 时，可以设置的一个属性，如果 COOKIE 没有设置这个属性，该 COOKIE 值可以被页面脚本读取。\n\t\n\t设置 cookie 时，加入 http only 属性后， 该 COOKIE 将不可被前端脚本读取。\n\n2. Cookie Secure 安全\n\n\tCookie Secure，是设置 COOKIE 时，可以设置的一个属性，设置了这个属性后，只有在https 访问时，浏览器才会发送该 COOKIE。\n\t       \n\t在设置认证 COOKIE 时，加入 Secure。\n\n3. Session 有效期安全攻击\n\n\t由于 Session 没有在 web 应用中设置强制超时时间，攻击者一旦曾经获取过用户的Session，就可以一直使用。\n\n\t在设置认证 cookie 中，加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”。并在 web 应用中，首先判断两个时间是否已超时，再执行其他操作。\n","source":"_posts/web-security.md","raw":"---\ntitle: Web 安全介绍及规避\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-08-17\ntags:\n\t- Web安全\nthumbnail:\nblogexcerpt: 一、跨站脚本攻击 (xss)1. 反射型跨站脚本攻击攻击者会通过社会工程学手段，发送一个URL连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。2. 存储型跨站脚本攻击攻击者利用web应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。3. DOM 跨站攻击由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本...\n\n---\n\n<!-- toc -->\n\n### 一、跨站脚本攻击 (xss)\n\n1. 反射型跨站脚本攻击\n\t\n\t攻击者会通过社会工程学手段，发送一个 URL 连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。\n\n2. 存储型跨站脚本攻击\n\n\t攻击者利用 web 应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。\n\n3. DOM 跨站攻击\n\n\t由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。\n\n\tDOM 跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用JAVASCRIPT ，才可以防御。\n\t\n4. HTML/XML 页面输出规范\n\n\t1) 在 HTML/XML 中显示“用户可控数据”前，应该进行 html escape 转义。\n\t\n\t2) 在javascript内容中输出的“用户可控数据”，需要做 javascript escape 转义。\n\t\n\t3) 对输出到富文本中的“用户可控数据”，做富文本安全过滤（允许用户输出 HTML 的情况），统一使用 ANTISAMY 过滤框架处理。\n\t\n\t4) 输出在 url 中的数据，做 url 安全输出。\n\t\n\t5) 针对 DOM 跨站的安全策略及加固措施根据实际情况进行过滤。\n\t\n\t6) 在给用户设置认证 COOKIE 时，加入 HTTPONLY。\n\t\n\t7) 在 style 内容中输出的“用户可控数据”，需要做 CSS escape 转义。\n\n### 二、FLASH 安全\n\n1. 服务端的安全\n       \n\t由于没有正确的配置域策略文件，导致客户端的 flash 文件能够绕过同源策略的限制跨域获取数据。\n\n2. 客户端安全\n\n   客户端在嵌入 flash 文件的时候没有指定 flash 文件的客户端限制策略，导致嵌入在客户端的 flash 文件可以访问 HTML 页面的 DOM 数或者发起跨域请求。\n   \n\tFlash配置规范：\n\t\n\t1) Crossdomain.xml的安全配置：\n\t\n\t如果没有 flash 应用，去掉 crossdomian.xml 文件，对有 flash 应用域的根目录下需要配置 crossdomain.xml 策略文件，设置为只允许来自特定域的请求不允许添加 `<site-control permitted-cross-domain-policies=\"by-content-type\"/>`，这样会导致客户端可能自己加载自定义策略文件。\n\t\t\n\t2) 客户端嵌入 flash 文件的安全配置：\n\t\n\t① 禁止设置 flash 的 allowscriptaccess 为 always，必须设置为 never，如果设置为 SameDomain，需要客户可以上传的flash文件要在单独的一个域下。\n\n\t② 设置 allowNetworking 选项为 none。\n\n\t③ 设置 allowfullscreen 选项为 false。\n        \n### 三、跨站请求伪造攻击 (CSRF)\n\n攻击者在用户浏览网页时，利用页面元素（例如 img 的 src），强迫受害者的浏览器向 Web 应用程序发送一个改变用户信息的请求。\n    \n由于发生 CSRF 攻击后，攻击者是强迫用户向服务器发送请求，所以会造成用户信息被迫修改，更严重者引发蠕虫攻击。\n\n要防御 CSRF 攻击，必须遵循一下三步：\n\n1. 在用户登录时，设置一个 CSRF 的随机 TOKEN ，同时种植在用户的 cookie 中，当用户浏览器关闭、或用户再次登录、或退出时，清除 token。\n\n2. 在表单中，生成一个隐藏域，它的值就是 COOKIE 中随机 TOKEN。\n\n3. 表单被提交后，就可以在接收用户请求的 web 应用中，判断表单中的 TOKEN 值是否和用户 COOKIE 中的 TOKEN 值一致，如果不一致或没有这个值，就判断为 CSRF 攻击，同时记录攻击日志。\n        \n### 四、URL 跳转攻击\n\nWeb 应用程序接收到用户提交的 URL 参数后，没有对参数做 “可信任 URL” 的验证，就向用户浏览器返回跳转到该URL的指令。\n\n为了保证用户所点击的 URL，是从 web 应用程序中生成的URL，所以要做 TOKEN 验证。\n       \n1. 当用户访问需要生成跳转URL的页面时，首先生成随机 token，并放入 cookie。\n       \n2. 在显示连接的页面上生成 URL，在 URL 参数中加入 token。\n       \n\n这两个方案都可以保证所有在应用中发出的重定向地址，都是可信任的地址。\n        \n### 五、代码注入攻击\n\nweb 应用代码中，允许接收用户输入一段代码，之后在 web 应用服务器上执行这段代码，并返回给用户。\n\n执行代码的参数，或文件名，禁止和用户输入相关，只能由开发人员定义代码内容，用户只能提交 “1、2、3” 参数，代表相应代码。\n\n### 六、XML/XXE 注入安全攻击\n\n和 SQL 注入原理一样，XML 是存储数据的地方，如果在查询或修改时，如果没有做转义，直接输入或输出数据，都将导致XML注入漏洞。攻击者可以修改XML数据格式，增加新的 XML 节点，对数据处理流程产生影响。\n\nXXE 外部实体注入攻击，当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。\n\n在XML保存和展示前，对数据部分，单独做 xml escape。\n\n按照以下列表做转义\n\n```html\n& --> &amp;\n< --> &lt;\n> --> &gt;\n\" --> &quot;\n' --> &#39;\n```\n\n方案一、使用开发语言提供的禁用外部实体的方法\n\n```java\n// JAVA:\nDocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false);\n```\n\n方案二、过滤用户提交的 XML 数据\n\n关键词：`<!DOCTYPE` 和 `<!ENTITY`，或者，`SYSTEM` 和 `PUBLIC`。\n\n### 七、任意文件上传攻击\n\nWeb 应用程序在处理用户上传的文件时，没有判断文件的扩展名是否在允许的范围内，就把文件保存在服务器上，导致恶意用户可以上传任意文件，甚至上传脚本木马到 web 服务器上，直接控制 web 服务器。\n\n处理用户上传文件，要做以下检查：\n\n1. 检查上传文件扩展名白名单，不属于白名单内，不允许上传。\n\n2. 上传文件的目录必须是 http 请求无法直接访问到的。如果需要访问的，必须上传到其他（和 web 服务器不同的）域名下，并设置该目录为不解析 jsp 等脚本语言的目录。\n\n3. 上传文件要保存的文件名和目录名由系统根据时间生成，不允许用户自定义。\n\n4. 图片上传，要通过处理（缩略图、水印等），无异常后才能保存到服务器。\n\n5. 上传文件需要做日志记录。\n\n### 八、任意文件下载攻击和目录遍历攻击\n       \n处理用户请求下载文件时，允许用户提交任意文件路径，并把服务器上对应的文件直接发送给用户，这将造成任意文件下载威胁。如果让用户提交文件目录地址，就把目录下的文件列表发给用户，会造成目录遍历安全威胁。\n       \n恶意用户会变换目录或文件地址，下载服务器上的敏感文件、数据库链接配置文件、网站源代码等。\n\n对文件操作功能，做到以下几点：\n\n1. 要下载的文件地址保存至数据库中。\n\n2. 文件路径保存至数据库，让用户提交文件对应 ID 下载文件。\n\n3. 下载文件之前做权限判断。\n\n4. 文件放在web无法直接访问的目录下。\n\n5. 记录文件下载日志（内容见日志章节）。\n\n6. 不允许提供目录遍历服务。\n\n### 九、垂直/水平权限提升攻击\n\n垂直权限安全攻击（权限提升攻击），由于 web 应用程序没有做权限控制，或仅仅在菜单上做了权限控制，导致的恶意用户只要猜测其他管理页面的 URL ，就可以访问或控制其他角色拥有的数据或页面，达到权限提升目的。\n\n这个威胁可能导致普通用户变成管理员权限。\n\n访问控制攻击(水平权限安全攻击)\n\nWeb应用程序接收到用户请求，修改某条数据时，没有判断数据的所属人，或判断数据所属人时，从用户提交的 request 参数（用户可控数据）中，获取了数据所属人 id，导致恶意攻击者可以通过变换数据 ID ，或变换所属人 id ，修改不属于自己的数据。\n\n恶意用户可以删除或修改其他人数据。\n       \n在打开管理页面URL时，首先判断当前用户是否拥有该页面的权限，如果没有权限，就判定为“权限提升”攻击，同时记录安全日志。从用户的加密认证 cookie 中，获取当前用户的 id ，并且需要在执行的 SQL 语句中，加入当前用户 id 作为条件语句。由于是web应用控制的加密算法，所以恶意用户无法修改加密信息。\n\n### 十、Cookie安全\n\n1. Cookie httponly 安全\n       \n\tCookie http only，是设置 COOKIE 时，可以设置的一个属性，如果 COOKIE 没有设置这个属性，该 COOKIE 值可以被页面脚本读取。\n\t\n\t设置 cookie 时，加入 http only 属性后， 该 COOKIE 将不可被前端脚本读取。\n\n2. Cookie Secure 安全\n\n\tCookie Secure，是设置 COOKIE 时，可以设置的一个属性，设置了这个属性后，只有在https 访问时，浏览器才会发送该 COOKIE。\n\t       \n\t在设置认证 COOKIE 时，加入 Secure。\n\n3. Session 有效期安全攻击\n\n\t由于 Session 没有在 web 应用中设置强制超时时间，攻击者一旦曾经获取过用户的Session，就可以一直使用。\n\n\t在设置认证 cookie 中，加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”。并在 web 应用中，首先判断两个时间是否已超时，再执行其他操作。\n","slug":"web-security","published":1,"updated":"2017-08-17T00:00:00.000Z","_id":"cmduj3n490057k8sva3idfixg","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB-xss\">一、跨站脚本攻击 (xss)</a></li>\n<li><a href=\"#%E4%BA%8C-flash-%E5%AE%89%E5%85%A8\">二、FLASH 安全</a></li>\n<li><a href=\"#%E4%B8%89-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB-csrf\">三、跨站请求伪造攻击 (CSRF)</a></li>\n<li><a href=\"#%E5%9B%9B-url-%E8%B7%B3%E8%BD%AC%E6%94%BB%E5%87%BB\">四、URL 跳转攻击</a></li>\n<li><a href=\"#%E4%BA%94-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB\">五、代码注入攻击</a></li>\n<li><a href=\"#%E5%85%AD-xmlxxe-%E6%B3%A8%E5%85%A5%E5%AE%89%E5%85%A8%E6%94%BB%E5%87%BB\">六、XML&#x2F;XXE 注入安全攻击</a></li>\n<li><a href=\"#%E4%B8%83-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%94%BB%E5%87%BB\">七、任意文件上传攻击</a></li>\n<li><a href=\"#%E5%85%AB-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%94%BB%E5%87%BB%E5%92%8C%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%94%BB%E5%87%BB\">八、任意文件下载攻击和目录遍历攻击</a></li>\n<li><a href=\"#%E4%B9%9D-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%94%BB%E5%87%BB\">九、垂直&#x2F;水平权限提升攻击</a></li>\n<li><a href=\"#%E5%8D%81-cookie%E5%AE%89%E5%85%A8\">十、Cookie安全</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<h3><span id=\"一-跨站脚本攻击-xss\">一、跨站脚本攻击 (xss)</span></h3><ol>\n<li><p>反射型跨站脚本攻击</p>\n<p> 攻击者会通过社会工程学手段，发送一个 URL 连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。</p>\n</li>\n<li><p>存储型跨站脚本攻击</p>\n<p> 攻击者利用 web 应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。</p>\n</li>\n<li><p>DOM 跨站攻击</p>\n<p> 由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。</p>\n<p> DOM 跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用JAVASCRIPT ，才可以防御。</p>\n</li>\n<li><p>HTML&#x2F;XML 页面输出规范</p>\n<ol>\n<li><p>在 HTML&#x2F;XML 中显示“用户可控数据”前，应该进行 html escape 转义。</p>\n</li>\n<li><p>在javascript内容中输出的“用户可控数据”，需要做 javascript escape 转义。</p>\n</li>\n<li><p>对输出到富文本中的“用户可控数据”，做富文本安全过滤（允许用户输出 HTML 的情况），统一使用 ANTISAMY 过滤框架处理。</p>\n</li>\n<li><p>输出在 url 中的数据，做 url 安全输出。</p>\n</li>\n<li><p>针对 DOM 跨站的安全策略及加固措施根据实际情况进行过滤。</p>\n</li>\n<li><p>在给用户设置认证 COOKIE 时，加入 HTTPONLY。</p>\n</li>\n<li><p>在 style 内容中输出的“用户可控数据”，需要做 CSS escape 转义。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3><span id=\"二-flash-安全\">二、FLASH 安全</span></h3><ol>\n<li><p>服务端的安全</p>\n<p> 由于没有正确的配置域策略文件，导致客户端的 flash 文件能够绕过同源策略的限制跨域获取数据。</p>\n</li>\n<li><p>客户端安全</p>\n<p>客户端在嵌入 flash 文件的时候没有指定 flash 文件的客户端限制策略，导致嵌入在客户端的 flash 文件可以访问 HTML 页面的 DOM 数或者发起跨域请求。</p>\n<p> Flash配置规范：</p>\n<ol>\n<li>Crossdomain.xml的安全配置：</li>\n</ol>\n<p> 如果没有 flash 应用，去掉 crossdomian.xml 文件，对有 flash 应用域的根目录下需要配置 crossdomain.xml 策略文件，设置为只允许来自特定域的请求不允许添加 <code>&lt;site-control permitted-cross-domain-policies=&quot;by-content-type&quot;/&gt;</code>，这样会导致客户端可能自己加载自定义策略文件。</p>\n<ol start=\"2\">\n<li>客户端嵌入 flash 文件的安全配置：</li>\n</ol>\n<p> ① 禁止设置 flash 的 allowscriptaccess 为 always，必须设置为 never，如果设置为 SameDomain，需要客户可以上传的flash文件要在单独的一个域下。</p>\n<p> ② 设置 allowNetworking 选项为 none。</p>\n<p> ③ 设置 allowfullscreen 选项为 false。</p>\n</li>\n</ol>\n<h3><span id=\"三-跨站请求伪造攻击-csrf\">三、跨站请求伪造攻击 (CSRF)</span></h3><p>攻击者在用户浏览网页时，利用页面元素（例如 img 的 src），强迫受害者的浏览器向 Web 应用程序发送一个改变用户信息的请求。</p>\n<p>由于发生 CSRF 攻击后，攻击者是强迫用户向服务器发送请求，所以会造成用户信息被迫修改，更严重者引发蠕虫攻击。</p>\n<p>要防御 CSRF 攻击，必须遵循一下三步：</p>\n<ol>\n<li><p>在用户登录时，设置一个 CSRF 的随机 TOKEN ，同时种植在用户的 cookie 中，当用户浏览器关闭、或用户再次登录、或退出时，清除 token。</p>\n</li>\n<li><p>在表单中，生成一个隐藏域，它的值就是 COOKIE 中随机 TOKEN。</p>\n</li>\n<li><p>表单被提交后，就可以在接收用户请求的 web 应用中，判断表单中的 TOKEN 值是否和用户 COOKIE 中的 TOKEN 值一致，如果不一致或没有这个值，就判断为 CSRF 攻击，同时记录攻击日志。</p>\n</li>\n</ol>\n<h3><span id=\"四-url-跳转攻击\">四、URL 跳转攻击</span></h3><p>Web 应用程序接收到用户提交的 URL 参数后，没有对参数做 “可信任 URL” 的验证，就向用户浏览器返回跳转到该URL的指令。</p>\n<p>为了保证用户所点击的 URL，是从 web 应用程序中生成的URL，所以要做 TOKEN 验证。</p>\n<ol>\n<li><p>当用户访问需要生成跳转URL的页面时，首先生成随机 token，并放入 cookie。</p>\n</li>\n<li><p>在显示连接的页面上生成 URL，在 URL 参数中加入 token。</p>\n</li>\n</ol>\n<p>这两个方案都可以保证所有在应用中发出的重定向地址，都是可信任的地址。</p>\n<h3><span id=\"五-代码注入攻击\">五、代码注入攻击</span></h3><p>web 应用代码中，允许接收用户输入一段代码，之后在 web 应用服务器上执行这段代码，并返回给用户。</p>\n<p>执行代码的参数，或文件名，禁止和用户输入相关，只能由开发人员定义代码内容，用户只能提交 “1、2、3” 参数，代表相应代码。</p>\n<h3><span id=\"六-xmlx2fxxe-注入安全攻击\">六、XML&#x2F;XXE 注入安全攻击</span></h3><p>和 SQL 注入原理一样，XML 是存储数据的地方，如果在查询或修改时，如果没有做转义，直接输入或输出数据，都将导致XML注入漏洞。攻击者可以修改XML数据格式，增加新的 XML 节点，对数据处理流程产生影响。</p>\n<p>XXE 外部实体注入攻击，当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>\n<p>在XML保存和展示前，对数据部分，单独做 xml escape。</p>\n<p>按照以下列表做转义</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; --&gt; <span class=\"symbol\">&amp;amp;</span></span><br><span class=\"line\">&lt; --&gt; <span class=\"symbol\">&amp;lt;</span></span><br><span class=\"line\">&gt; --&gt; <span class=\"symbol\">&amp;gt;</span></span><br><span class=\"line\">&quot; --&gt; <span class=\"symbol\">&amp;quot;</span></span><br><span class=\"line\">&#x27; --&gt; <span class=\"symbol\">&amp;#39;</span></span><br></pre></td></tr></table></figure>\n\n<p>方案一、使用开发语言提供的禁用外部实体的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JAVA:</span></span><br><span class=\"line\"><span class=\"type\">DocumentBuilderFactory</span> <span class=\"variable\">dbf</span> <span class=\"operator\">=</span>DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">dbf.setExpandEntityReferences(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方案二、过滤用户提交的 XML 数据</p>\n<p>关键词：<code>&lt;!DOCTYPE</code> 和 <code>&lt;!ENTITY</code>，或者，<code>SYSTEM</code> 和 <code>PUBLIC</code>。</p>\n<h3><span id=\"七-任意文件上传攻击\">七、任意文件上传攻击</span></h3><p>Web 应用程序在处理用户上传的文件时，没有判断文件的扩展名是否在允许的范围内，就把文件保存在服务器上，导致恶意用户可以上传任意文件，甚至上传脚本木马到 web 服务器上，直接控制 web 服务器。</p>\n<p>处理用户上传文件，要做以下检查：</p>\n<ol>\n<li><p>检查上传文件扩展名白名单，不属于白名单内，不允许上传。</p>\n</li>\n<li><p>上传文件的目录必须是 http 请求无法直接访问到的。如果需要访问的，必须上传到其他（和 web 服务器不同的）域名下，并设置该目录为不解析 jsp 等脚本语言的目录。</p>\n</li>\n<li><p>上传文件要保存的文件名和目录名由系统根据时间生成，不允许用户自定义。</p>\n</li>\n<li><p>图片上传，要通过处理（缩略图、水印等），无异常后才能保存到服务器。</p>\n</li>\n<li><p>上传文件需要做日志记录。</p>\n</li>\n</ol>\n<h3><span id=\"八-任意文件下载攻击和目录遍历攻击\">八、任意文件下载攻击和目录遍历攻击</span></h3><p>处理用户请求下载文件时，允许用户提交任意文件路径，并把服务器上对应的文件直接发送给用户，这将造成任意文件下载威胁。如果让用户提交文件目录地址，就把目录下的文件列表发给用户，会造成目录遍历安全威胁。</p>\n<p>恶意用户会变换目录或文件地址，下载服务器上的敏感文件、数据库链接配置文件、网站源代码等。</p>\n<p>对文件操作功能，做到以下几点：</p>\n<ol>\n<li><p>要下载的文件地址保存至数据库中。</p>\n</li>\n<li><p>文件路径保存至数据库，让用户提交文件对应 ID 下载文件。</p>\n</li>\n<li><p>下载文件之前做权限判断。</p>\n</li>\n<li><p>文件放在web无法直接访问的目录下。</p>\n</li>\n<li><p>记录文件下载日志（内容见日志章节）。</p>\n</li>\n<li><p>不允许提供目录遍历服务。</p>\n</li>\n</ol>\n<h3><span id=\"九-垂直x2f水平权限提升攻击\">九、垂直&#x2F;水平权限提升攻击</span></h3><p>垂直权限安全攻击（权限提升攻击），由于 web 应用程序没有做权限控制，或仅仅在菜单上做了权限控制，导致的恶意用户只要猜测其他管理页面的 URL ，就可以访问或控制其他角色拥有的数据或页面，达到权限提升目的。</p>\n<p>这个威胁可能导致普通用户变成管理员权限。</p>\n<p>访问控制攻击(水平权限安全攻击)</p>\n<p>Web应用程序接收到用户请求，修改某条数据时，没有判断数据的所属人，或判断数据所属人时，从用户提交的 request 参数（用户可控数据）中，获取了数据所属人 id，导致恶意攻击者可以通过变换数据 ID ，或变换所属人 id ，修改不属于自己的数据。</p>\n<p>恶意用户可以删除或修改其他人数据。</p>\n<p>在打开管理页面URL时，首先判断当前用户是否拥有该页面的权限，如果没有权限，就判定为“权限提升”攻击，同时记录安全日志。从用户的加密认证 cookie 中，获取当前用户的 id ，并且需要在执行的 SQL 语句中，加入当前用户 id 作为条件语句。由于是web应用控制的加密算法，所以恶意用户无法修改加密信息。</p>\n<h3><span id=\"十-cookie安全\">十、Cookie安全</span></h3><ol>\n<li><p>Cookie httponly 安全</p>\n<p> Cookie http only，是设置 COOKIE 时，可以设置的一个属性，如果 COOKIE 没有设置这个属性，该 COOKIE 值可以被页面脚本读取。</p>\n<p> 设置 cookie 时，加入 http only 属性后， 该 COOKIE 将不可被前端脚本读取。</p>\n</li>\n<li><p>Cookie Secure 安全</p>\n<p> Cookie Secure，是设置 COOKIE 时，可以设置的一个属性，设置了这个属性后，只有在https 访问时，浏览器才会发送该 COOKIE。</p>\n<p> 在设置认证 COOKIE 时，加入 Secure。</p>\n</li>\n<li><p>Session 有效期安全攻击</p>\n<p> 由于 Session 没有在 web 应用中设置强制超时时间，攻击者一旦曾经获取过用户的Session，就可以一直使用。</p>\n<p> 在设置认证 cookie 中，加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”。并在 web 应用中，首先判断两个时间是否已超时，再执行其他操作。</p>\n</li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB-xss\">一、跨站脚本攻击 (xss)</a></li>\n<li><a href=\"#%E4%BA%8C-flash-%E5%AE%89%E5%85%A8\">二、FLASH 安全</a></li>\n<li><a href=\"#%E4%B8%89-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB-csrf\">三、跨站请求伪造攻击 (CSRF)</a></li>\n<li><a href=\"#%E5%9B%9B-url-%E8%B7%B3%E8%BD%AC%E6%94%BB%E5%87%BB\">四、URL 跳转攻击</a></li>\n<li><a href=\"#%E4%BA%94-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB\">五、代码注入攻击</a></li>\n<li><a href=\"#%E5%85%AD-xmlxxe-%E6%B3%A8%E5%85%A5%E5%AE%89%E5%85%A8%E6%94%BB%E5%87%BB\">六、XML&#x2F;XXE 注入安全攻击</a></li>\n<li><a href=\"#%E4%B8%83-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%94%BB%E5%87%BB\">七、任意文件上传攻击</a></li>\n<li><a href=\"#%E5%85%AB-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%94%BB%E5%87%BB%E5%92%8C%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%94%BB%E5%87%BB\">八、任意文件下载攻击和目录遍历攻击</a></li>\n<li><a href=\"#%E4%B9%9D-%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%94%BB%E5%87%BB\">九、垂直&#x2F;水平权限提升攻击</a></li>\n<li><a href=\"#%E5%8D%81-cookie%E5%AE%89%E5%85%A8\">十、Cookie安全</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<h3 id=\"一、跨站脚本攻击-xss\"><a href=\"#一、跨站脚本攻击-xss\" class=\"headerlink\" title=\"一、跨站脚本攻击 (xss)\"></a>一、跨站脚本攻击 (xss)</h3><ol>\n<li><p>反射型跨站脚本攻击</p>\n<p> 攻击者会通过社会工程学手段，发送一个 URL 连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。</p>\n</li>\n<li><p>存储型跨站脚本攻击</p>\n<p> 攻击者利用 web 应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。</p>\n</li>\n<li><p>DOM 跨站攻击</p>\n<p> 由于 html 页面中，定义了一段 JS，根据用户的输入，显示一段 html 代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。</p>\n<p> DOM 跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用JAVASCRIPT ，才可以防御。</p>\n</li>\n<li><p>HTML&#x2F;XML 页面输出规范</p>\n<ol>\n<li><p>在 HTML&#x2F;XML 中显示“用户可控数据”前，应该进行 html escape 转义。</p>\n</li>\n<li><p>在javascript内容中输出的“用户可控数据”，需要做 javascript escape 转义。</p>\n</li>\n<li><p>对输出到富文本中的“用户可控数据”，做富文本安全过滤（允许用户输出 HTML 的情况），统一使用 ANTISAMY 过滤框架处理。</p>\n</li>\n<li><p>输出在 url 中的数据，做 url 安全输出。</p>\n</li>\n<li><p>针对 DOM 跨站的安全策略及加固措施根据实际情况进行过滤。</p>\n</li>\n<li><p>在给用户设置认证 COOKIE 时，加入 HTTPONLY。</p>\n</li>\n<li><p>在 style 内容中输出的“用户可控数据”，需要做 CSS escape 转义。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"二、FLASH-安全\"><a href=\"#二、FLASH-安全\" class=\"headerlink\" title=\"二、FLASH 安全\"></a>二、FLASH 安全</h3><ol>\n<li><p>服务端的安全</p>\n<p> 由于没有正确的配置域策略文件，导致客户端的 flash 文件能够绕过同源策略的限制跨域获取数据。</p>\n</li>\n<li><p>客户端安全</p>\n<p>客户端在嵌入 flash 文件的时候没有指定 flash 文件的客户端限制策略，导致嵌入在客户端的 flash 文件可以访问 HTML 页面的 DOM 数或者发起跨域请求。</p>\n<p> Flash配置规范：</p>\n<ol>\n<li>Crossdomain.xml的安全配置：</li>\n</ol>\n<p> 如果没有 flash 应用，去掉 crossdomian.xml 文件，对有 flash 应用域的根目录下需要配置 crossdomain.xml 策略文件，设置为只允许来自特定域的请求不允许添加 <code>&lt;site-control permitted-cross-domain-policies=&quot;by-content-type&quot;/&gt;</code>，这样会导致客户端可能自己加载自定义策略文件。</p>\n<ol start=\"2\">\n<li>客户端嵌入 flash 文件的安全配置：</li>\n</ol>\n<p> ① 禁止设置 flash 的 allowscriptaccess 为 always，必须设置为 never，如果设置为 SameDomain，需要客户可以上传的flash文件要在单独的一个域下。</p>\n<p> ② 设置 allowNetworking 选项为 none。</p>\n<p> ③ 设置 allowfullscreen 选项为 false。</p>\n</li>\n</ol>\n<h3 id=\"三、跨站请求伪造攻击-CSRF\"><a href=\"#三、跨站请求伪造攻击-CSRF\" class=\"headerlink\" title=\"三、跨站请求伪造攻击 (CSRF)\"></a>三、跨站请求伪造攻击 (CSRF)</h3><p>攻击者在用户浏览网页时，利用页面元素（例如 img 的 src），强迫受害者的浏览器向 Web 应用程序发送一个改变用户信息的请求。</p>\n<p>由于发生 CSRF 攻击后，攻击者是强迫用户向服务器发送请求，所以会造成用户信息被迫修改，更严重者引发蠕虫攻击。</p>\n<p>要防御 CSRF 攻击，必须遵循一下三步：</p>\n<ol>\n<li><p>在用户登录时，设置一个 CSRF 的随机 TOKEN ，同时种植在用户的 cookie 中，当用户浏览器关闭、或用户再次登录、或退出时，清除 token。</p>\n</li>\n<li><p>在表单中，生成一个隐藏域，它的值就是 COOKIE 中随机 TOKEN。</p>\n</li>\n<li><p>表单被提交后，就可以在接收用户请求的 web 应用中，判断表单中的 TOKEN 值是否和用户 COOKIE 中的 TOKEN 值一致，如果不一致或没有这个值，就判断为 CSRF 攻击，同时记录攻击日志。</p>\n</li>\n</ol>\n<h3 id=\"四、URL-跳转攻击\"><a href=\"#四、URL-跳转攻击\" class=\"headerlink\" title=\"四、URL 跳转攻击\"></a>四、URL 跳转攻击</h3><p>Web 应用程序接收到用户提交的 URL 参数后，没有对参数做 “可信任 URL” 的验证，就向用户浏览器返回跳转到该URL的指令。</p>\n<p>为了保证用户所点击的 URL，是从 web 应用程序中生成的URL，所以要做 TOKEN 验证。</p>\n<ol>\n<li><p>当用户访问需要生成跳转URL的页面时，首先生成随机 token，并放入 cookie。</p>\n</li>\n<li><p>在显示连接的页面上生成 URL，在 URL 参数中加入 token。</p>\n</li>\n</ol>\n<p>这两个方案都可以保证所有在应用中发出的重定向地址，都是可信任的地址。</p>\n<h3 id=\"五、代码注入攻击\"><a href=\"#五、代码注入攻击\" class=\"headerlink\" title=\"五、代码注入攻击\"></a>五、代码注入攻击</h3><p>web 应用代码中，允许接收用户输入一段代码，之后在 web 应用服务器上执行这段代码，并返回给用户。</p>\n<p>执行代码的参数，或文件名，禁止和用户输入相关，只能由开发人员定义代码内容，用户只能提交 “1、2、3” 参数，代表相应代码。</p>\n<h3 id=\"六、XML-XXE-注入安全攻击\"><a href=\"#六、XML-XXE-注入安全攻击\" class=\"headerlink\" title=\"六、XML&#x2F;XXE 注入安全攻击\"></a>六、XML&#x2F;XXE 注入安全攻击</h3><p>和 SQL 注入原理一样，XML 是存储数据的地方，如果在查询或修改时，如果没有做转义，直接输入或输出数据，都将导致XML注入漏洞。攻击者可以修改XML数据格式，增加新的 XML 节点，对数据处理流程产生影响。</p>\n<p>XXE 外部实体注入攻击，当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>\n<p>在XML保存和展示前，对数据部分，单独做 xml escape。</p>\n<p>按照以下列表做转义</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; --&gt; <span class=\"symbol\">&amp;amp;</span></span><br><span class=\"line\">&lt; --&gt; <span class=\"symbol\">&amp;lt;</span></span><br><span class=\"line\">&gt; --&gt; <span class=\"symbol\">&amp;gt;</span></span><br><span class=\"line\">&quot; --&gt; <span class=\"symbol\">&amp;quot;</span></span><br><span class=\"line\">&#x27; --&gt; <span class=\"symbol\">&amp;#39;</span></span><br></pre></td></tr></table></figure>\n\n<p>方案一、使用开发语言提供的禁用外部实体的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JAVA:</span></span><br><span class=\"line\"><span class=\"type\">DocumentBuilderFactory</span> <span class=\"variable\">dbf</span> <span class=\"operator\">=</span>DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">dbf.setExpandEntityReferences(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方案二、过滤用户提交的 XML 数据</p>\n<p>关键词：<code>&lt;!DOCTYPE</code> 和 <code>&lt;!ENTITY</code>，或者，<code>SYSTEM</code> 和 <code>PUBLIC</code>。</p>\n<h3 id=\"七、任意文件上传攻击\"><a href=\"#七、任意文件上传攻击\" class=\"headerlink\" title=\"七、任意文件上传攻击\"></a>七、任意文件上传攻击</h3><p>Web 应用程序在处理用户上传的文件时，没有判断文件的扩展名是否在允许的范围内，就把文件保存在服务器上，导致恶意用户可以上传任意文件，甚至上传脚本木马到 web 服务器上，直接控制 web 服务器。</p>\n<p>处理用户上传文件，要做以下检查：</p>\n<ol>\n<li><p>检查上传文件扩展名白名单，不属于白名单内，不允许上传。</p>\n</li>\n<li><p>上传文件的目录必须是 http 请求无法直接访问到的。如果需要访问的，必须上传到其他（和 web 服务器不同的）域名下，并设置该目录为不解析 jsp 等脚本语言的目录。</p>\n</li>\n<li><p>上传文件要保存的文件名和目录名由系统根据时间生成，不允许用户自定义。</p>\n</li>\n<li><p>图片上传，要通过处理（缩略图、水印等），无异常后才能保存到服务器。</p>\n</li>\n<li><p>上传文件需要做日志记录。</p>\n</li>\n</ol>\n<h3 id=\"八、任意文件下载攻击和目录遍历攻击\"><a href=\"#八、任意文件下载攻击和目录遍历攻击\" class=\"headerlink\" title=\"八、任意文件下载攻击和目录遍历攻击\"></a>八、任意文件下载攻击和目录遍历攻击</h3><p>处理用户请求下载文件时，允许用户提交任意文件路径，并把服务器上对应的文件直接发送给用户，这将造成任意文件下载威胁。如果让用户提交文件目录地址，就把目录下的文件列表发给用户，会造成目录遍历安全威胁。</p>\n<p>恶意用户会变换目录或文件地址，下载服务器上的敏感文件、数据库链接配置文件、网站源代码等。</p>\n<p>对文件操作功能，做到以下几点：</p>\n<ol>\n<li><p>要下载的文件地址保存至数据库中。</p>\n</li>\n<li><p>文件路径保存至数据库，让用户提交文件对应 ID 下载文件。</p>\n</li>\n<li><p>下载文件之前做权限判断。</p>\n</li>\n<li><p>文件放在web无法直接访问的目录下。</p>\n</li>\n<li><p>记录文件下载日志（内容见日志章节）。</p>\n</li>\n<li><p>不允许提供目录遍历服务。</p>\n</li>\n</ol>\n<h3 id=\"九、垂直-水平权限提升攻击\"><a href=\"#九、垂直-水平权限提升攻击\" class=\"headerlink\" title=\"九、垂直&#x2F;水平权限提升攻击\"></a>九、垂直&#x2F;水平权限提升攻击</h3><p>垂直权限安全攻击（权限提升攻击），由于 web 应用程序没有做权限控制，或仅仅在菜单上做了权限控制，导致的恶意用户只要猜测其他管理页面的 URL ，就可以访问或控制其他角色拥有的数据或页面，达到权限提升目的。</p>\n<p>这个威胁可能导致普通用户变成管理员权限。</p>\n<p>访问控制攻击(水平权限安全攻击)</p>\n<p>Web应用程序接收到用户请求，修改某条数据时，没有判断数据的所属人，或判断数据所属人时，从用户提交的 request 参数（用户可控数据）中，获取了数据所属人 id，导致恶意攻击者可以通过变换数据 ID ，或变换所属人 id ，修改不属于自己的数据。</p>\n<p>恶意用户可以删除或修改其他人数据。</p>\n<p>在打开管理页面URL时，首先判断当前用户是否拥有该页面的权限，如果没有权限，就判定为“权限提升”攻击，同时记录安全日志。从用户的加密认证 cookie 中，获取当前用户的 id ，并且需要在执行的 SQL 语句中，加入当前用户 id 作为条件语句。由于是web应用控制的加密算法，所以恶意用户无法修改加密信息。</p>\n<h3 id=\"十、Cookie安全\"><a href=\"#十、Cookie安全\" class=\"headerlink\" title=\"十、Cookie安全\"></a>十、Cookie安全</h3><ol>\n<li><p>Cookie httponly 安全</p>\n<p> Cookie http only，是设置 COOKIE 时，可以设置的一个属性，如果 COOKIE 没有设置这个属性，该 COOKIE 值可以被页面脚本读取。</p>\n<p> 设置 cookie 时，加入 http only 属性后， 该 COOKIE 将不可被前端脚本读取。</p>\n</li>\n<li><p>Cookie Secure 安全</p>\n<p> Cookie Secure，是设置 COOKIE 时，可以设置的一个属性，设置了这个属性后，只有在https 访问时，浏览器才会发送该 COOKIE。</p>\n<p> 在设置认证 COOKIE 时，加入 Secure。</p>\n</li>\n<li><p>Session 有效期安全攻击</p>\n<p> 由于 Session 没有在 web 应用中设置强制超时时间，攻击者一旦曾经获取过用户的Session，就可以一直使用。</p>\n<p> 在设置认证 cookie 中，加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”。并在 web 应用中，首先判断两个时间是否已超时，再执行其他操作。</p>\n</li>\n</ol>\n"},{"title":"webpack打包eot、ttf、woff等字体文件问题","author":"Jelon","date":"2019-12-09T00:00:00.000Z","thumbnail":null,"blogexcerpt":"最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下...","_content":"\n<!-- toc -->\n\n> 最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下。\n\n### 下载 iconfont 相关文件到本地\n\n![image](https://user-images.githubusercontent.com/5547151/70047586-49f92880-1603-11ea-816e-4d84d663e7f4.png)\n\n去掉了一些用不到的文件剩下如图所示文件，包括`iconfont.css`、`iconfont.eot`、`iconfont.svg`、`iconfont.ttf`、`iconfont.woff`、`iconfont.woff2`，iconfont.css是字体样式，其余的为字体文件：iconfont.woff2为主要目前流行的字体文件格式，兼容性最好，其他则是为了兼容不同浏览器及不同版本浏览器。\n\n```css\n@font-face {font-family: \"iconfont_sp\";\n  src: url('iconfont.eot?t=1575340034756'); /* IE9 */\n  src: url('iconfont.eot?t=1575340034756#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('data:application/x-font-woff2;charset=utf-8;base64,此处为base64编码') format('woff2'),\n  url('iconfont.woff?t=1575340034756') format('woff'),\n  url('iconfont.ttf?t=1575340034756') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url('iconfont.svg?t=1575340034756#iconfont_sp') format('svg'); /* iOS 4.1- */\n}\n```\n\n由此可见，阿里 iconfont+ 平台给我们生成的样式里面除了 woff2 打成了 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type，其他都都是之间都是直接使用文件路径。\n\n### 改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  devtool: '#source-map',\n  entry: [ './src/index' ],\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'selectPartner.js',\n    libraryTarget: 'umd',\n    library: 'selectPartner'\n  },\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader', 'postcss-loader' ],\n        include: path.resolve(__dirname, 'src')\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 20000,\n          name: 'fonts/[name]-[hash].[ext]'\n        }\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 20000,\n          name: 'images/[name]-[hash].[ext]'\n        }\n      },\n      // ...\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json', '.html']\n  }\n};\n```\n\n使用css-loader 处理 css 文件，使用 url-loader 对 css文件中引用的字体文件进行处理，将字体文件打包成 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type。当一切都准备好，打包也ok，确定代码逻辑啥的是没问题的。虽然打包成功，但是还是要测试一下，因为将最终打包出来的 umd 模块代码导入到项目代码中测试，测试结果如下图。\n\n![image](https://user-images.githubusercontent.com/5547151/70049883-b296d400-1608-11ea-82ce-5366af741030.png)\n\n![image](https://user-images.githubusercontent.com/5547151/70105660-756c2980-167c-11ea-92c8-3b33131f4c33.png)\n\nicon图表并没有显示出来，审查一下元素查看对应样式代码，url 除了有一个 base64 是 iconfont+打包下来自带的 base64，其他的都是 `[object Module]`，这问题看起来很奇葩。\n\n### 原因排查\n\n网上兜了一圈，找了挺久，终于在 stackoverflow 上找到类型的问题。\n\n![image](https://user-images.githubusercontent.com/5547151/70123341-6f427100-16ad-11ea-944d-506a4e0e1f5e.png)\n\n大概的意思就是我打包出来的东西违反了 csp 相关内容，浏览器为了安全拒绝读取相应的DataUrl数据。\n\n什么是 csp，即内容安全策略( Content-Security-Policy )，是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。具体就不展开细说。了解 csp 可参见 [https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP)\n\n### 疑问点及尝试解决方案\n\n其实最终我打包出来的js里面是有将 eot、ttf、woff等这些文件 DataUrl （base64）数据的，但是浏览器并没有执行。\n\n![image](https://user-images.githubusercontent.com/5547151/70125045-04933480-16b1-11ea-8fd1-451b35b6b41b.png)\n\n![image](https://user-images.githubusercontent.com/5547151/70125286-82574000-16b1-11ea-9732-8823a1116334.png)\n\n综合发现，除了 woff2 的 DataUrl mineType 是 `application/x-font-woff2`，其他的都是 `font/woff` 这种方式。出于好奇，代码中把所有格式的字体 url 都去掉，只保留 `woff2`。\n\n```css\n@font-face {font-family: \"iconfont_sp\";\n  src: url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAXAAAsAAAAAC3wAAAVwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDeAqIVIcHATYCJAMoCxYABCAFhREHgQYbzwnIrrApw6/Q3XaiJEI0Mxiwx0nwjQviye6rXncP/woMj2AEMj0HoYTZk9Od/t30VSx1CzVJJ27QiaXJS6BIuJCKp5vDxICa2/7c/80Gzy2tBIfSjxJ84wF35VVS83I2ZGzwvcL+/59jqZcJlt/u2uX/615kYAVtYAPM59FFAxsWSBKMfSbi1Zucjsybx0MAnwzKkNZbdh0C5hgiv6DTZAmNA/NWAjOjFNywPbKtQTYBiqtWG84BG/OPly/UiDkoLE10ou5jN5NgXSANuZr//zJoHrzbywGMnUADZYABmTeaNxejsq4Mje/VGNMR4H+Gi0IFdlAT7PmY2xgQiPCcUZ5PHC0NCo3Bwsbx/vE8EJsoEAbuvHoPAokBBQGgIQAMBIAFAWBDoIcDQY0eAsEePVxoyE3gge2vHAdEgVSCnBfczh0FjUJAVJwWZhUuBXYUpvcbNcBKMI6u1fTzISSs5vvUYRRZpR7IDKepmsxBTSjx4KFtj1x5YPL9HT5dUPOZ68PRaPkqtYtIl+mq1xx78MG0BlcDm9+vXFPNVwVYVdRk1qb0hqSQpkU69R3eWajVuNL6nAqn4xxiEh8x9WFJ6hDEe95dhvWmYofYm4/oPqkvRR889LEqANFVuMi/FdlU1ueGarXO5fUgHoB0jGQuHgzW6w2icwtc1ujUTl0IcmCm5KYsbg0fDa2dLr7B7tzuZDuv1rYHb9XnGuQOBle2B2qr3fm8FNc3nBSjrebQHbULcmbB6NM7mLMwWl/p7KzlnQ79xw0BtglzuBHV2kdtxASFRoBtjLL3OQzPIwCX1XGjb/9NP2Gac1z315QQuoXeJmwzmryEodROXlQaTVxc9M7EpfR1dd3NOeL3LJv3xjwF3GXG91NT7luEacz4fs1OvbdU39oyR1GQEC1DhUEi4DQqbceOqrqq2h2dvozow9VU3IvYsT096sKUL3pZsiPr7bb7Vlrq2oKHaQRSvQ+A6Aaaq2Pbtnc0Eqbz/M//may0NJPE+wDRe0alWnHfut/d+uDQeaK1OY+Y1olHmZd6nVa0RU6eNNhSJDGbsMWg9TL2fE1n96HV42OYyZgFZm7LFxxRWxYIy+TusRM/XdNZ+9yNzsN9puadNn6e8sM4eCTQ4gascV6L4n771/oG+TmtNRS2iGInds8dDgpuGnKGHf9Q0DN8buDm6AyydOJDk5Ji/JAwpcRTdze9XOMF7dt0BWrLMq82s51+O0ufLou3+Q2Y6aub26ijXjULg+c0QOMG/V2n5nVr9S8d11b+0Gl16/VKnQ4EYQowqP0gsH/6ViGU+Kn/HOY+mX6fsl31z7U0ADwNfVJKWeMqA7aTcBkpR+Az7mSOML47SvrGHVzs+inVT8AIPjoxfBoHn/GiGF5uOxTP7ghCiPgaFA5ZoAlRyDTcGqbFbcK0ue3Bp5ReO4eIZQFGiPGAEjYLEBI4BooI7oAmgVdMw/3HsKRiybS5AvDpK0v3GaJAriIbWYhzkERjklAJwSgomeaQ4pWnVMoDkI6T4WyvZ6USQVYlmYzOx+aNNG6FCshubwNVPL2A4yiUYhk5ukWcDMpkDKpkmVhIcJiY45QroqIo/4kwgpEDhFawQHA4ICQoI0kCZQIEDAqoNMDdrj56v8kpVCg5AIQmDhk47PwARmxFQFhUSOYGpZoKqnjMrQEFt89jbDmLeGgWqEoOaqWxsDDIQWmLHIiM6hhQpo8vFQuEgANj/Bo1SlZQqYw1lhvAjiIkf/zdf65+ovP5okSLEUtsccQVT3wJYY2SMSpoKm+Os4TYlIVyJh6asBJazJkRYkhIIWlMMgkKizhF85JOkGBUSjFkYSTFsJExrISkoSmBKwgoAwAAAAA=') format('woff2');\n}\n\n.iconfont_sp {\n  font-family: \"iconfont_sp\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon_sp-close:before {\n  content: \"\\e632\";\n}\n/* ... */\n```\n\n试了一下，果真可以了，iconfont 字体显示出来。\n\n![image](https://user-images.githubusercontent.com/5547151/70125834-9cdde900-16b2-11ea-883d-74d968aaaa5f.png)\n\n### 总结\n\n通过 url-loader 打报出来的 eot、ttf、woff 等文件打包出来的 DataUrl 对应 MIME Types 是有问题的，违反，stackoverflow 上找到了相关内容，[https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis](https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis)。\n\n```xml\n<staticContent>\n    <remove fileExtension=\".woff\" />\n    <mimeMap fileExtension=\".woff\" mimeType=\"application/font-woff\" />\n    <remove fileExtension=\".ttf\" />\n    <mimeMap fileExtension=\".ttf\" mimeType=\"application/font-ttf\" />\n    <remove fileExtension=\".eot\" />\n    <mimeMap fileExtension=\".eot\" mimeType=\"application/vnd.ms-fontobject\" />\n    <remove fileExtension=\".otf\" />\n    <mimeMap fileExtension=\".otf\" mimeType=\"application/font-otf\" />\n    <remove fileExtension=\".svg\" />\n    <mimeMap fileExtension=\".svg\" mimeType=\"image/svg+xml\" />\n</staticContent>\n``` \n\n","source":"_posts/webpack-font-csp-problem.md","raw":"---\ntitle: webpack打包eot、ttf、woff等字体文件问题\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2019-12-09\ntags:\n\t- webpack\n\t- web font\nthumbnail:\nblogexcerpt: 最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下...\n\n---\n\n<!-- toc -->\n\n> 最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下。\n\n### 下载 iconfont 相关文件到本地\n\n![image](https://user-images.githubusercontent.com/5547151/70047586-49f92880-1603-11ea-816e-4d84d663e7f4.png)\n\n去掉了一些用不到的文件剩下如图所示文件，包括`iconfont.css`、`iconfont.eot`、`iconfont.svg`、`iconfont.ttf`、`iconfont.woff`、`iconfont.woff2`，iconfont.css是字体样式，其余的为字体文件：iconfont.woff2为主要目前流行的字体文件格式，兼容性最好，其他则是为了兼容不同浏览器及不同版本浏览器。\n\n```css\n@font-face {font-family: \"iconfont_sp\";\n  src: url('iconfont.eot?t=1575340034756'); /* IE9 */\n  src: url('iconfont.eot?t=1575340034756#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('data:application/x-font-woff2;charset=utf-8;base64,此处为base64编码') format('woff2'),\n  url('iconfont.woff?t=1575340034756') format('woff'),\n  url('iconfont.ttf?t=1575340034756') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url('iconfont.svg?t=1575340034756#iconfont_sp') format('svg'); /* iOS 4.1- */\n}\n```\n\n由此可见，阿里 iconfont+ 平台给我们生成的样式里面除了 woff2 打成了 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type，其他都都是之间都是直接使用文件路径。\n\n### 改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  devtool: '#source-map',\n  entry: [ './src/index' ],\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'selectPartner.js',\n    libraryTarget: 'umd',\n    library: 'selectPartner'\n  },\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader', 'postcss-loader' ],\n        include: path.resolve(__dirname, 'src')\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 20000,\n          name: 'fonts/[name]-[hash].[ext]'\n        }\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 20000,\n          name: 'images/[name]-[hash].[ext]'\n        }\n      },\n      // ...\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json', '.html']\n  }\n};\n```\n\n使用css-loader 处理 css 文件，使用 url-loader 对 css文件中引用的字体文件进行处理，将字体文件打包成 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type。当一切都准备好，打包也ok，确定代码逻辑啥的是没问题的。虽然打包成功，但是还是要测试一下，因为将最终打包出来的 umd 模块代码导入到项目代码中测试，测试结果如下图。\n\n![image](https://user-images.githubusercontent.com/5547151/70049883-b296d400-1608-11ea-82ce-5366af741030.png)\n\n![image](https://user-images.githubusercontent.com/5547151/70105660-756c2980-167c-11ea-92c8-3b33131f4c33.png)\n\nicon图表并没有显示出来，审查一下元素查看对应样式代码，url 除了有一个 base64 是 iconfont+打包下来自带的 base64，其他的都是 `[object Module]`，这问题看起来很奇葩。\n\n### 原因排查\n\n网上兜了一圈，找了挺久，终于在 stackoverflow 上找到类型的问题。\n\n![image](https://user-images.githubusercontent.com/5547151/70123341-6f427100-16ad-11ea-944d-506a4e0e1f5e.png)\n\n大概的意思就是我打包出来的东西违反了 csp 相关内容，浏览器为了安全拒绝读取相应的DataUrl数据。\n\n什么是 csp，即内容安全策略( Content-Security-Policy )，是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。具体就不展开细说。了解 csp 可参见 [https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP)\n\n### 疑问点及尝试解决方案\n\n其实最终我打包出来的js里面是有将 eot、ttf、woff等这些文件 DataUrl （base64）数据的，但是浏览器并没有执行。\n\n![image](https://user-images.githubusercontent.com/5547151/70125045-04933480-16b1-11ea-8fd1-451b35b6b41b.png)\n\n![image](https://user-images.githubusercontent.com/5547151/70125286-82574000-16b1-11ea-9732-8823a1116334.png)\n\n综合发现，除了 woff2 的 DataUrl mineType 是 `application/x-font-woff2`，其他的都是 `font/woff` 这种方式。出于好奇，代码中把所有格式的字体 url 都去掉，只保留 `woff2`。\n\n```css\n@font-face {font-family: \"iconfont_sp\";\n  src: url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAXAAAsAAAAAC3wAAAVwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDeAqIVIcHATYCJAMoCxYABCAFhREHgQYbzwnIrrApw6/Q3XaiJEI0Mxiwx0nwjQviye6rXncP/woMj2AEMj0HoYTZk9Od/t30VSx1CzVJJ27QiaXJS6BIuJCKp5vDxICa2/7c/80Gzy2tBIfSjxJ84wF35VVS83I2ZGzwvcL+/59jqZcJlt/u2uX/615kYAVtYAPM59FFAxsWSBKMfSbi1Zucjsybx0MAnwzKkNZbdh0C5hgiv6DTZAmNA/NWAjOjFNywPbKtQTYBiqtWG84BG/OPly/UiDkoLE10ou5jN5NgXSANuZr//zJoHrzbywGMnUADZYABmTeaNxejsq4Mje/VGNMR4H+Gi0IFdlAT7PmY2xgQiPCcUZ5PHC0NCo3Bwsbx/vE8EJsoEAbuvHoPAokBBQGgIQAMBIAFAWBDoIcDQY0eAsEePVxoyE3gge2vHAdEgVSCnBfczh0FjUJAVJwWZhUuBXYUpvcbNcBKMI6u1fTzISSs5vvUYRRZpR7IDKepmsxBTSjx4KFtj1x5YPL9HT5dUPOZ68PRaPkqtYtIl+mq1xx78MG0BlcDm9+vXFPNVwVYVdRk1qb0hqSQpkU69R3eWajVuNL6nAqn4xxiEh8x9WFJ6hDEe95dhvWmYofYm4/oPqkvRR889LEqANFVuMi/FdlU1ueGarXO5fUgHoB0jGQuHgzW6w2icwtc1ujUTl0IcmCm5KYsbg0fDa2dLr7B7tzuZDuv1rYHb9XnGuQOBle2B2qr3fm8FNc3nBSjrebQHbULcmbB6NM7mLMwWl/p7KzlnQ79xw0BtglzuBHV2kdtxASFRoBtjLL3OQzPIwCX1XGjb/9NP2Gac1z315QQuoXeJmwzmryEodROXlQaTVxc9M7EpfR1dd3NOeL3LJv3xjwF3GXG91NT7luEacz4fs1OvbdU39oyR1GQEC1DhUEi4DQqbceOqrqq2h2dvozow9VU3IvYsT096sKUL3pZsiPr7bb7Vlrq2oKHaQRSvQ+A6Aaaq2Pbtnc0Eqbz/M//may0NJPE+wDRe0alWnHfut/d+uDQeaK1OY+Y1olHmZd6nVa0RU6eNNhSJDGbsMWg9TL2fE1n96HV42OYyZgFZm7LFxxRWxYIy+TusRM/XdNZ+9yNzsN9puadNn6e8sM4eCTQ4gascV6L4n771/oG+TmtNRS2iGInds8dDgpuGnKGHf9Q0DN8buDm6AyydOJDk5Ji/JAwpcRTdze9XOMF7dt0BWrLMq82s51+O0ufLou3+Q2Y6aub26ijXjULg+c0QOMG/V2n5nVr9S8d11b+0Gl16/VKnQ4EYQowqP0gsH/6ViGU+Kn/HOY+mX6fsl31z7U0ADwNfVJKWeMqA7aTcBkpR+Az7mSOML47SvrGHVzs+inVT8AIPjoxfBoHn/GiGF5uOxTP7ghCiPgaFA5ZoAlRyDTcGqbFbcK0ue3Bp5ReO4eIZQFGiPGAEjYLEBI4BooI7oAmgVdMw/3HsKRiybS5AvDpK0v3GaJAriIbWYhzkERjklAJwSgomeaQ4pWnVMoDkI6T4WyvZ6USQVYlmYzOx+aNNG6FCshubwNVPL2A4yiUYhk5ukWcDMpkDKpkmVhIcJiY45QroqIo/4kwgpEDhFawQHA4ICQoI0kCZQIEDAqoNMDdrj56v8kpVCg5AIQmDhk47PwARmxFQFhUSOYGpZoKqnjMrQEFt89jbDmLeGgWqEoOaqWxsDDIQWmLHIiM6hhQpo8vFQuEgANj/Bo1SlZQqYw1lhvAjiIkf/zdf65+ovP5okSLEUtsccQVT3wJYY2SMSpoKm+Os4TYlIVyJh6asBJazJkRYkhIIWlMMgkKizhF85JOkGBUSjFkYSTFsJExrISkoSmBKwgoAwAAAAA=') format('woff2');\n}\n\n.iconfont_sp {\n  font-family: \"iconfont_sp\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon_sp-close:before {\n  content: \"\\e632\";\n}\n/* ... */\n```\n\n试了一下，果真可以了，iconfont 字体显示出来。\n\n![image](https://user-images.githubusercontent.com/5547151/70125834-9cdde900-16b2-11ea-883d-74d968aaaa5f.png)\n\n### 总结\n\n通过 url-loader 打报出来的 eot、ttf、woff 等文件打包出来的 DataUrl 对应 MIME Types 是有问题的，违反，stackoverflow 上找到了相关内容，[https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis](https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis)。\n\n```xml\n<staticContent>\n    <remove fileExtension=\".woff\" />\n    <mimeMap fileExtension=\".woff\" mimeType=\"application/font-woff\" />\n    <remove fileExtension=\".ttf\" />\n    <mimeMap fileExtension=\".ttf\" mimeType=\"application/font-ttf\" />\n    <remove fileExtension=\".eot\" />\n    <mimeMap fileExtension=\".eot\" mimeType=\"application/vnd.ms-fontobject\" />\n    <remove fileExtension=\".otf\" />\n    <mimeMap fileExtension=\".otf\" mimeType=\"application/font-otf\" />\n    <remove fileExtension=\".svg\" />\n    <mimeMap fileExtension=\".svg\" mimeType=\"image/svg+xml\" />\n</staticContent>\n``` \n\n","slug":"webpack-font-csp-problem","published":1,"updated":"2019-12-09T00:00:00.000Z","_id":"cmduj3n4a005ak8sv2em076kr","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%8B%E8%BD%BD-iconfont-%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0\">下载 iconfont 相关文件到本地</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0-webpack-%E9%85%8D%E7%BD%AE%E5%B0%86-css-%E6%89%93%E5%8C%85%E8%BF%9B-js%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA-%E4%B8%80%E4%B8%AA-umd-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84-npm-%E6%A8%A1%E5%9D%97-js\">改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js</a></li>\n<li><a href=\"#%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5\">原因排查</a></li>\n<li><a href=\"#%E7%96%91%E9%97%AE%E7%82%B9%E5%8F%8A%E5%B0%9D%E8%AF%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">疑问点及尝试解决方案</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<blockquote>\n<p>最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下。</p>\n</blockquote>\n<h3><span id=\"下载-iconfont-相关文件到本地\">下载 iconfont 相关文件到本地</span></h3><p><img src=\"https://user-images.githubusercontent.com/5547151/70047586-49f92880-1603-11ea-816e-4d84d663e7f4.png\" alt=\"image\"></p>\n<p>去掉了一些用不到的文件剩下如图所示文件，包括<code>iconfont.css</code>、<code>iconfont.eot</code>、<code>iconfont.svg</code>、<code>iconfont.ttf</code>、<code>iconfont.woff</code>、<code>iconfont.woff2</code>，iconfont.css是字体样式，其余的为字体文件：iconfont.woff2为主要目前流行的字体文件格式，兼容性最好，其他则是为了兼容不同浏览器及不同版本浏览器。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.eot?t=1575340034756&#x27;</span>); <span class=\"comment\">/* IE9 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.eot?t=1575340034756#iefix&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;embedded-opentype&#x27;</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;data:application/x-font-woff2;charset=utf-8;base64,此处为base64编码&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.woff?t=1575340034756&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.ttf?t=1575340034756&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;truetype&#x27;</span>), <span class=\"comment\">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.svg?t=1575340034756#iconfont_sp&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;svg&#x27;</span>); <span class=\"comment\">/* iOS 4.1- */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，阿里 iconfont+ 平台给我们生成的样式里面除了 woff2 打成了 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type，其他都都是之间都是直接使用文件路径。</p>\n<h3><span id=\"改造-webpack-配置将-css-打包进-js最终输出-一个-umd-模块化的-npm-模块-js\">改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js</span></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;#source-map&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: [ <span class=\"string\">&#x27;./src/index&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;selectPartner.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;selectPartner&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [ <span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;postcss-loader&#x27;</span> ],</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;fonts/[name]-[hash].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;images/[name]-[hash].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.html&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用css-loader 处理 css 文件，使用 url-loader 对 css文件中引用的字体文件进行处理，将字体文件打包成 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type。当一切都准备好，打包也ok，确定代码逻辑啥的是没问题的。虽然打包成功，但是还是要测试一下，因为将最终打包出来的 umd 模块代码导入到项目代码中测试，测试结果如下图。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70049883-b296d400-1608-11ea-82ce-5366af741030.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70105660-756c2980-167c-11ea-92c8-3b33131f4c33.png\" alt=\"image\"></p>\n<p>icon图表并没有显示出来，审查一下元素查看对应样式代码，url 除了有一个 base64 是 iconfont+打包下来自带的 base64，其他的都是 <code>[object Module]</code>，这问题看起来很奇葩。</p>\n<h3><span id=\"原因排查\">原因排查</span></h3><p>网上兜了一圈，找了挺久，终于在 stackoverflow 上找到类型的问题。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70123341-6f427100-16ad-11ea-944d-506a4e0e1f5e.png\" alt=\"image\"></p>\n<p>大概的意思就是我打包出来的东西违反了 csp 相关内容，浏览器为了安全拒绝读取相应的DataUrl数据。</p>\n<p>什么是 csp，即内容安全策略( Content-Security-Policy )，是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。具体就不展开细说。了解 csp 可参见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></p>\n<h3><span id=\"疑问点及尝试解决方案\">疑问点及尝试解决方案</span></h3><p>其实最终我打包出来的js里面是有将 eot、ttf、woff等这些文件 DataUrl （base64）数据的，但是浏览器并没有执行。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125045-04933480-16b1-11ea-8fd1-451b35b6b41b.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125286-82574000-16b1-11ea-9732-8823a1116334.png\" alt=\"image\"></p>\n<p>综合发现，除了 woff2 的 DataUrl mineType 是 <code>application/x-font-woff2</code>，其他的都是 <code>font/woff</code> 这种方式。出于好奇，代码中把所有格式的字体 url 都去掉，只保留 <code>woff2</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAXAAAsAAAAAC3wAAAVwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDeAqIVIcHATYCJAMoCxYABCAFhREHgQYbzwnIrrApw6/Q3XaiJEI0Mxiwx0nwjQviye6rXncP/woMj2AEMj0HoYTZk9Od/t30VSx1CzVJJ27QiaXJS6BIuJCKp5vDxICa2/7c/80Gzy2tBIfSjxJ84wF35VVS83I2ZGzwvcL+/59jqZcJlt/u2uX/615kYAVtYAPM59FFAxsWSBKMfSbi1Zucjsybx0MAnwzKkNZbdh0C5hgiv6DTZAmNA/NWAjOjFNywPbKtQTYBiqtWG84BG/OPly/UiDkoLE10ou5jN5NgXSANuZr//zJoHrzbywGMnUADZYABmTeaNxejsq4Mje/VGNMR4H+Gi0IFdlAT7PmY2xgQiPCcUZ5PHC0NCo3Bwsbx/vE8EJsoEAbuvHoPAokBBQGgIQAMBIAFAWBDoIcDQY0eAsEePVxoyE3gge2vHAdEgVSCnBfczh0FjUJAVJwWZhUuBXYUpvcbNcBKMI6u1fTzISSs5vvUYRRZpR7IDKepmsxBTSjx4KFtj1x5YPL9HT5dUPOZ68PRaPkqtYtIl+mq1xx78MG0BlcDm9+vXFPNVwVYVdRk1qb0hqSQpkU69R3eWajVuNL6nAqn4xxiEh8x9WFJ6hDEe95dhvWmYofYm4/oPqkvRR889LEqANFVuMi/FdlU1ueGarXO5fUgHoB0jGQuHgzW6w2icwtc1ujUTl0IcmCm5KYsbg0fDa2dLr7B7tzuZDuv1rYHb9XnGuQOBle2B2qr3fm8FNc3nBSjrebQHbULcmbB6NM7mLMwWl/p7KzlnQ79xw0BtglzuBHV2kdtxASFRoBtjLL3OQzPIwCX1XGjb/9NP2Gac1z315QQuoXeJmwzmryEodROXlQaTVxc9M7EpfR1dd3NOeL3LJv3xjwF3GXG91NT7luEacz4fs1OvbdU39oyR1GQEC1DhUEi4DQqbceOqrqq2h2dvozow9VU3IvYsT096sKUL3pZsiPr7bb7Vlrq2oKHaQRSvQ+A6Aaaq2Pbtnc0Eqbz/M//may0NJPE+wDRe0alWnHfut/d+uDQeaK1OY+Y1olHmZd6nVa0RU6eNNhSJDGbsMWg9TL2fE1n96HV42OYyZgFZm7LFxxRWxYIy+TusRM/XdNZ+9yNzsN9puadNn6e8sM4eCTQ4gascV6L4n771/oG+TmtNRS2iGInds8dDgpuGnKGHf9Q0DN8buDm6AyydOJDk5Ji/JAwpcRTdze9XOMF7dt0BWrLMq82s51+O0ufLou3+Q2Y6aub26ijXjULg+c0QOMG/V2n5nVr9S8d11b+0Gl16/VKnQ4EYQowqP0gsH/6ViGU+Kn/HOY+mX6fsl31z7U0ADwNfVJKWeMqA7aTcBkpR+Az7mSOML47SvrGHVzs+inVT8AIPjoxfBoHn/GiGF5uOxTP7ghCiPgaFA5ZoAlRyDTcGqbFbcK0ue3Bp5ReO4eIZQFGiPGAEjYLEBI4BooI7oAmgVdMw/3HsKRiybS5AvDpK0v3GaJAriIbWYhzkERjklAJwSgomeaQ4pWnVMoDkI6T4WyvZ6USQVYlmYzOx+aNNG6FCshubwNVPL2A4yiUYhk5ukWcDMpkDKpkmVhIcJiY45QroqIo/4kwgpEDhFawQHA4ICQoI0kCZQIEDAqoNMDdrj56v8kpVCg5AIQmDhk47PwARmxFQFhUSOYGpZoKqnjMrQEFt89jbDmLeGgWqEoOaqWxsDDIQWmLHIiM6hhQpo8vFQuEgANj/Bo1SlZQqYw1lhvAjiIkf/zdf65+ovP5okSLEUtsccQVT3wJYY2SMSpoKm+Os4TYlIVyJh6asBJazJkRYkhIIWlMMgkKizhF85JOkGBUSjFkYSTFsJExrISkoSmBKwgoAwAAAAA=&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont_sp</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">font-smoothing</span>: antialiased;</span><br><span class=\"line\">  -moz-osx-<span class=\"attribute\">font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_sp-close</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\e632&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br></pre></td></tr></table></figure>\n\n<p>试了一下，果真可以了，iconfont 字体显示出来。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125834-9cdde900-16b2-11ea-883d-74d968aaaa5f.png\" alt=\"image\"></p>\n<h3><span id=\"总结\">总结</span></h3><p>通过 url-loader 打报出来的 eot、ttf、woff 等文件打包出来的 DataUrl 对应 MIME Types 是有问题的，违反，stackoverflow 上找到了相关内容，<a href=\"https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis\">https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis</a>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">staticContent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.woff&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.woff&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-woff&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.ttf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.ttf&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-ttf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.eot&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.eot&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/vnd.ms-fontobject&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.otf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.otf&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-otf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.svg&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.svg&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;image/svg+xml&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">staticContent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%8B%E8%BD%BD-iconfont-%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0\">下载 iconfont 相关文件到本地</a></li>\n<li><a href=\"#%E6%94%B9%E9%80%A0-webpack-%E9%85%8D%E7%BD%AE%E5%B0%86-css-%E6%89%93%E5%8C%85%E8%BF%9B-js%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA-%E4%B8%80%E4%B8%AA-umd-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84-npm-%E6%A8%A1%E5%9D%97-js\">改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js</a></li>\n<li><a href=\"#%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5\">原因排查</a></li>\n<li><a href=\"#%E7%96%91%E9%97%AE%E7%82%B9%E5%8F%8A%E5%B0%9D%E8%AF%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">疑问点及尝试解决方案</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<blockquote>\n<p>最近因项目需要要将之前做的 npm 包的 css 样式，包括字体样式和字体文件（主要是使用了阿里的iconfont）打到js中，因为之前样式都是直接还是用外链的方式，要改掉，因此，花了一天的时间搞这个，碰到了些比较奇葩的事情，在此记录一下。</p>\n</blockquote>\n<h3 id=\"下载-iconfont-相关文件到本地\"><a href=\"#下载-iconfont-相关文件到本地\" class=\"headerlink\" title=\"下载 iconfont 相关文件到本地\"></a>下载 iconfont 相关文件到本地</h3><p><img src=\"https://user-images.githubusercontent.com/5547151/70047586-49f92880-1603-11ea-816e-4d84d663e7f4.png\" alt=\"image\"></p>\n<p>去掉了一些用不到的文件剩下如图所示文件，包括<code>iconfont.css</code>、<code>iconfont.eot</code>、<code>iconfont.svg</code>、<code>iconfont.ttf</code>、<code>iconfont.woff</code>、<code>iconfont.woff2</code>，iconfont.css是字体样式，其余的为字体文件：iconfont.woff2为主要目前流行的字体文件格式，兼容性最好，其他则是为了兼容不同浏览器及不同版本浏览器。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.eot?t=1575340034756&#x27;</span>); <span class=\"comment\">/* IE9 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.eot?t=1575340034756#iefix&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;embedded-opentype&#x27;</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;data:application/x-font-woff2;charset=utf-8;base64,此处为base64编码&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.woff?t=1575340034756&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff&#x27;</span>),</span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.ttf?t=1575340034756&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;truetype&#x27;</span>), <span class=\"comment\">/* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span></span><br><span class=\"line\">  <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;iconfont.svg?t=1575340034756#iconfont_sp&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;svg&#x27;</span>); <span class=\"comment\">/* iOS 4.1- */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，阿里 iconfont+ 平台给我们生成的样式里面除了 woff2 打成了 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type，其他都都是之间都是直接使用文件路径。</p>\n<h3 id=\"改造-webpack-配置，将-css-打包进-js，最终输出-一个-umd-模块化的-npm-模块-js\"><a href=\"#改造-webpack-配置，将-css-打包进-js，最终输出-一个-umd-模块化的-npm-模块-js\" class=\"headerlink\" title=\"改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js\"></a>改造 webpack 配置，将 css 打包进 js，最终输出 一个 umd 模块化的 npm 模块 js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;#source-map&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: [ <span class=\"string\">&#x27;./src/index&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;selectPartner.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;selectPartner&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [ <span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;postcss-loader&#x27;</span> ],</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;fonts/[name]-[hash].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">limit</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;images/[name]-[hash].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.html&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用css-loader 处理 css 文件，使用 url-loader 对 css文件中引用的字体文件进行处理，将字体文件打包成 DataUrl 即 转换成base64编码的字符串形式，并存储在 URL 中，冠以 mime-type。当一切都准备好，打包也ok，确定代码逻辑啥的是没问题的。虽然打包成功，但是还是要测试一下，因为将最终打包出来的 umd 模块代码导入到项目代码中测试，测试结果如下图。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70049883-b296d400-1608-11ea-82ce-5366af741030.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70105660-756c2980-167c-11ea-92c8-3b33131f4c33.png\" alt=\"image\"></p>\n<p>icon图表并没有显示出来，审查一下元素查看对应样式代码，url 除了有一个 base64 是 iconfont+打包下来自带的 base64，其他的都是 <code>[object Module]</code>，这问题看起来很奇葩。</p>\n<h3 id=\"原因排查\"><a href=\"#原因排查\" class=\"headerlink\" title=\"原因排查\"></a>原因排查</h3><p>网上兜了一圈，找了挺久，终于在 stackoverflow 上找到类型的问题。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70123341-6f427100-16ad-11ea-944d-506a4e0e1f5e.png\" alt=\"image\"></p>\n<p>大概的意思就是我打包出来的东西违反了 csp 相关内容，浏览器为了安全拒绝读取相应的DataUrl数据。</p>\n<p>什么是 csp，即内容安全策略( Content-Security-Policy )，是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。具体就不展开细说。了解 csp 可参见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></p>\n<h3 id=\"疑问点及尝试解决方案\"><a href=\"#疑问点及尝试解决方案\" class=\"headerlink\" title=\"疑问点及尝试解决方案\"></a>疑问点及尝试解决方案</h3><p>其实最终我打包出来的js里面是有将 eot、ttf、woff等这些文件 DataUrl （base64）数据的，但是浏览器并没有执行。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125045-04933480-16b1-11ea-8fd1-451b35b6b41b.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125286-82574000-16b1-11ea-9732-8823a1116334.png\" alt=\"image\"></p>\n<p>综合发现，除了 woff2 的 DataUrl mineType 是 <code>application/x-font-woff2</code>，其他的都是 <code>font/woff</code> 这种方式。出于好奇，代码中把所有格式的字体 url 都去掉，只保留 <code>woff2</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAXAAAsAAAAAC3wAAAVwAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDeAqIVIcHATYCJAMoCxYABCAFhREHgQYbzwnIrrApw6/Q3XaiJEI0Mxiwx0nwjQviye6rXncP/woMj2AEMj0HoYTZk9Od/t30VSx1CzVJJ27QiaXJS6BIuJCKp5vDxICa2/7c/80Gzy2tBIfSjxJ84wF35VVS83I2ZGzwvcL+/59jqZcJlt/u2uX/615kYAVtYAPM59FFAxsWSBKMfSbi1Zucjsybx0MAnwzKkNZbdh0C5hgiv6DTZAmNA/NWAjOjFNywPbKtQTYBiqtWG84BG/OPly/UiDkoLE10ou5jN5NgXSANuZr//zJoHrzbywGMnUADZYABmTeaNxejsq4Mje/VGNMR4H+Gi0IFdlAT7PmY2xgQiPCcUZ5PHC0NCo3Bwsbx/vE8EJsoEAbuvHoPAokBBQGgIQAMBIAFAWBDoIcDQY0eAsEePVxoyE3gge2vHAdEgVSCnBfczh0FjUJAVJwWZhUuBXYUpvcbNcBKMI6u1fTzISSs5vvUYRRZpR7IDKepmsxBTSjx4KFtj1x5YPL9HT5dUPOZ68PRaPkqtYtIl+mq1xx78MG0BlcDm9+vXFPNVwVYVdRk1qb0hqSQpkU69R3eWajVuNL6nAqn4xxiEh8x9WFJ6hDEe95dhvWmYofYm4/oPqkvRR889LEqANFVuMi/FdlU1ueGarXO5fUgHoB0jGQuHgzW6w2icwtc1ujUTl0IcmCm5KYsbg0fDa2dLr7B7tzuZDuv1rYHb9XnGuQOBle2B2qr3fm8FNc3nBSjrebQHbULcmbB6NM7mLMwWl/p7KzlnQ79xw0BtglzuBHV2kdtxASFRoBtjLL3OQzPIwCX1XGjb/9NP2Gac1z315QQuoXeJmwzmryEodROXlQaTVxc9M7EpfR1dd3NOeL3LJv3xjwF3GXG91NT7luEacz4fs1OvbdU39oyR1GQEC1DhUEi4DQqbceOqrqq2h2dvozow9VU3IvYsT096sKUL3pZsiPr7bb7Vlrq2oKHaQRSvQ+A6Aaaq2Pbtnc0Eqbz/M//may0NJPE+wDRe0alWnHfut/d+uDQeaK1OY+Y1olHmZd6nVa0RU6eNNhSJDGbsMWg9TL2fE1n96HV42OYyZgFZm7LFxxRWxYIy+TusRM/XdNZ+9yNzsN9puadNn6e8sM4eCTQ4gascV6L4n771/oG+TmtNRS2iGInds8dDgpuGnKGHf9Q0DN8buDm6AyydOJDk5Ji/JAwpcRTdze9XOMF7dt0BWrLMq82s51+O0ufLou3+Q2Y6aub26ijXjULg+c0QOMG/V2n5nVr9S8d11b+0Gl16/VKnQ4EYQowqP0gsH/6ViGU+Kn/HOY+mX6fsl31z7U0ADwNfVJKWeMqA7aTcBkpR+Az7mSOML47SvrGHVzs+inVT8AIPjoxfBoHn/GiGF5uOxTP7ghCiPgaFA5ZoAlRyDTcGqbFbcK0ue3Bp5ReO4eIZQFGiPGAEjYLEBI4BooI7oAmgVdMw/3HsKRiybS5AvDpK0v3GaJAriIbWYhzkERjklAJwSgomeaQ4pWnVMoDkI6T4WyvZ6USQVYlmYzOx+aNNG6FCshubwNVPL2A4yiUYhk5ukWcDMpkDKpkmVhIcJiY45QroqIo/4kwgpEDhFawQHA4ICQoI0kCZQIEDAqoNMDdrj56v8kpVCg5AIQmDhk47PwARmxFQFhUSOYGpZoKqnjMrQEFt89jbDmLeGgWqEoOaqWxsDDIQWmLHIiM6hhQpo8vFQuEgANj/Bo1SlZQqYw1lhvAjiIkf/zdf65+ovP5okSLEUtsccQVT3wJYY2SMSpoKm+Os4TYlIVyJh6asBJazJkRYkhIIWlMMgkKizhF85JOkGBUSjFkYSTFsJExrISkoSmBKwgoAwAAAAA=&#x27;</span>) <span class=\"built_in\">format</span>(<span class=\"string\">&#x27;woff2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont_sp</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;iconfont_sp&quot;</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">font-smoothing</span>: antialiased;</span><br><span class=\"line\">  -moz-osx-<span class=\"attribute\">font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_sp-close</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\e632&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br></pre></td></tr></table></figure>\n\n<p>试了一下，果真可以了，iconfont 字体显示出来。</p>\n<p><img src=\"https://user-images.githubusercontent.com/5547151/70125834-9cdde900-16b2-11ea-883d-74d968aaaa5f.png\" alt=\"image\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过 url-loader 打报出来的 eot、ttf、woff 等文件打包出来的 DataUrl 对应 MIME Types 是有问题的，违反，stackoverflow 上找到了相关内容，<a href=\"https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis\">https://stackoverflow.com/questions/26177849/mime-types-for-woff-ttf-svg-and-eot-404ing-despite-being-setup-in-iis</a>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">staticContent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.woff&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.woff&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-woff&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.ttf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.ttf&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-ttf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.eot&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.eot&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/vnd.ms-fontobject&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.otf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.otf&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;application/font-otf&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.svg&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mimeMap</span> <span class=\"attr\">fileExtension</span>=<span class=\"string\">&quot;.svg&quot;</span> <span class=\"attr\">mimeType</span>=<span class=\"string\">&quot;image/svg+xml&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">staticContent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于 github issues 实现第三方评论系统","author":"Jelon","date":"2017-08-10T00:00:00.000Z","thumbnail":null,"blogexcerpt":"个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高...","_content":"\n<!-- toc -->\n\n> 本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《[静态博客框架 Hexo 入门](http://jelon.top/posts/start-hexo/) 》，或者直接访问 Hexo 官网 [https://hexo.io/](https://hexo.io/)\n\n### 一、事情起因\n\n个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。\n\n什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。所以除了社区平台外，评论也成为一般博客和cms系统必备功能。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高。而且垃圾评论和过滤非法关键字难度较大，所以在国内外都有第三评论系统。以下是曾经流行或者正在流行的一些第三方评论系统。\n\n- 多说。多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。多说已经成为国内份额最大的所谓“社交评论框”服务，但是这个行业第一并没有给它带来更多的收益和发展空间。不过可惜，现在已经停止服务了。\n\n- 搜狐畅言。搜狐畅言是由搜狐推出的一个简单而强大的社会化评论及聚合平台。用户可以直接用自己的社会化网络账户在第三方网站发表评论，并且一键评论同步至社交网络将网站内容和自己的评论分享给好友。增加第三方网站用户活跃度，调动好友参与评论，帮助网站实现社会化网络优化，有效提升网站社会化流量。现在还健在。\n\n- 友言。友言是国内专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持10个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。现在还健在。\n\n- 网易云跟帖。网易云跟贴是网易公司推出的强大而又简单的评论聚合与分享平台。坑爹的，在多说发布停止服务声明之后不久，网易云跟帖也分出了停止服务声明。\n\n- Disqus。说到第三放评论系统，当然不得不提国外第三方评论系统界的老大 Disqus，只可惜由于天朝网络原因，Disqus 加载很慢，甚至有时候加载不出来，建议用户自备梯子。\n\n那么回归主题，市面上那么多第三方评论系统，就算有那么一两个挂掉了，还是有很多选择呢，为什么还要自己去做一个呢，这不是造轮子吗？其实，一开始我一直用多说的，用的不亦乐乎，突然有一天说挂就挂了，没办法，那我就选择其他的呗，然后就改成网易云，坑爹的，刚改造好没多久，网易云也挂了。\n\n后面我就在网上找啊找啊，发现居然有人用 GitHub Issue 做了一个评论系统，这无疑是一个很好的想法，很有创意啊。当然，我也拿来用了，但是始终觉得有点丑，跟我自己的博客主题不搭，才用了两天，撤了，打算自己做一个。说干就干，程序员总喜欢造轮子。\n\n### 二、什么是 GitHub Issues\n\n经常逛 GitHub 的童鞋，都应该知道这个功能，有人理解 GitHub 的 issue 功能，就如同 TODO list。你可以把所有想要在下一步完成的工作，如 feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。具体可以看一下知乎里面别人对 《[github issue是做什么的？](https://www.zhihu.com/question/22969033/answer/25927363) 》的解答。而本博客的评论数据存储 issues 仓库地址为 [https://github.com/jangdelong/blog_comments/issues](https://github.com/jangdelong/blog_comments/issues)，仓库里面并没有放置托管代码。总之，像我现在要用 github Issues 来制作评论系统的，其实就是把数据存储到 github issues，简单的说可以把 github issues 理解为一个免费的数据库。\n\n### 三、评论系统实现\n\n**预备工作**\n\n- 创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 [OAuth 2.0 标准](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)。OAuth applications 创建如下图所示，填写上面相应的内容。\n\n![OAuth](https://jangdelong.github.io/blog_img/images/xups-comment-box/1.jpg?v=2)\n\nApplication name：你的站点名称；\nHomepage URL：你的站点主页链接；\nApplication description：站点描述；\nAuthorization callback URL：GitHub 授权成功后返回地址\n\n创建成功之后会生成一个 Client ID 和一个 Client Secret。\n\n- GitHub REST API v3\n\nGitHub 提供了很多方便第三方开发的 API，当然，github issues 的增删改查 API 也在其中，有了这些 API，你才能各种施展奇技淫巧，比如我们现在要写的评论系统。另外，有人怀疑我们应不应该“滥用”这些 API，但是，个人觉得，既然，GitHub 提供了这些 API，就是说明要开放给大家这些权限，应该就不怕你“滥用”。那么，要满足我们现在的需求需要哪些 API 呢，下面我列举一下，以我的账号为例，jangdelong 为 Github 名，blog_comments 为仓库名。\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues`                         获取所有issues信息\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11`                   获取某个issue下的信息 （11 为 issue 编号 ）\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11/`comments  获取某个issue下的评论\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions` 获取评论 ID 为 111 下的所有 reactions（reactions 包含顶[+1]、踩[-1]、喜欢[heart]等字段）\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues` 创建一个 issue\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues/11/comments` 在编号为 11 的 issue 下创建一条评论\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions` 在 ID 为 111 的评论下创建一条 reactions（如 heart）\n\n`POST：https://developer.github.com/v3/markdown/`  markdown 语法解析接口\n\n**整体设计**\n\n流程图：\n\n```\n                                             |--> 显示已登录    \n                              |--> 已登录 --> |--> 加载评论列表 --> 分页加载 \n                              |              |--> 其他 \n                              |              |--> 评论操作 --> 成功/失败            |\n 开始 --> GitHub 授权登录 ? --> |                                                   |--> 结束\n                              |              |--> 显示未登录                       |\n                              |--> 未登录 --> |--> 加载评论列表 --> 分页加载          \n                                             |--> 其他\n                                             |--> 评论操作 --> 提示未登录状态\n\n```\n\n效果图：\n\n![OAuth](https://jangdelong.github.io/blog_img/images/xups-comment-box/2.jpg)\n\n因此，我们可以将评论系统分为列表（list）、评论框（box）、顶部登录状态栏（signbar）等部分。View 部分的代码组织为：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Renders = {\n\t\t// 列表模块\n\t\tlist: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t// 评论框模块\n\t\tbox: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t// 顶部登录状态栏\n\t\tsignBar: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t... // 其他模块视图\n\t};\n\t...\n})(JELON);\n```\n\n视图部分的代码组织好之后，根据 GitHub 提供的各种 API，我们将其封装到 Requests 里面去，组织如下：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Requests = {\n\t\t// 根据 label 获取 issue 编号\n\t\tgetIssueNumberByLabel: function () { ... },\n\t\t// 创建 issue\n\t\tcreateIssue: function () { ... },\n\t\t// 根据 issue 编号获取评论列表\n\t\tgetCommentListByIssueNumber: function () { ... },\n\t\t// 根据评论 ID 获取 reactions （即点赞数据）\n\t\tgetReactionsByCommentId: function () { ... },\n\t\t// markdown 解析\n\t\tmarkdown: function () { ... },\n\t\t// 通过 code 获取 access_token\n\t\tgetAccessToken: function () { ... },\n\t\t// 利用 access_token 去获取 GitHub 用户信息\n\t\tgetUserInfo: function () { ... },\n\t\t// 创建评论\n\t\tcreateComment: function () { ... },\n\t\t// 创建 reactions （点赞）\n\t\tcreateReaction: function () { ... }\n\t};\n\t...\n})(JELON);\n```\n\n接下来是封装事件操作，我们将其封装到 Actions 里面去，代码组织如下：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Actions = {\n\t\t// 初始加载，如列表、登录状态等\n\t\tinit: function () { ... },\n\t\t// 登出操作\n\t\tsignOut: function () { ... },\n\t\t// 列表翻页跳转\n\t\tpageJump: function () { ... },\n\t\t// 编辑预览\n\t\teditPreviewSwitch: function () { ... },\n\t\t// 提交评论操作\n\t\tpostComment: function () { ... },\n\t\t// 点赞操作\n\t\tlike: function () { ... }\n\t};\n\t...\n})(JELON);\n```\n\n程序入口：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Comment = function (options) {\n\t\tJL.options = options || {};\n\t\t$('comments').innerHTML = [\n\t\t\tthis.Renders.signBar.tpl,\n\t\t\tthis.Renders.box.tpl,\n\t\t\tthis.Renders.tips,\n\t\t\tthis.Renders.list.tpl\n\t\t].join('');\n\t\tJL.Actions.init();\n\t};\n\t...\n})(JELON);\n```\n\n**登录流程**\n\nGitHub 授权登录是不可或缺的功能，用只有登录之后才能进行评论。前面有提到，GitHub 授权登录是遵循一个 OAuth 2.0 标准。以下是 OAuth 2.0 的一个运作流程，可以让我们更好的理解它。\n\n![OAuth 2.0 运行流程](https://jangdelong.github.io/blog_img/images/xups-comment-box/3.png)\n\n那么，GitHub 授权登录是怎么样按照这个标准来运作的呢，接下来简单介绍一下，如果要更加详细深入了解的话，你也可以访问 [GitHub 官方文档](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/)。\n\n1. 用户发起重定向请求授权服务器换取 code\n\t`GET http://github.com/login/oauth/authorize`\n2. 拿到 code 之后，利用 client_id、client_secret 和 code 去换取 token_access。（client_id 和 client_secret 前面的预备工作里有提到）\n\t`POST https://github.com/login/oauth/access_token`\n3. 获取到 token_access 之后，我们就可以用 token_access 去获取已登录的用户的信息了\n\t`GET https://api.github.com/user`\n\n通过以上3个步骤，GitHub 授权登录就算是完成了。\n\n### 四、评论系统如何使用\n\n1. 引入评论系统相关的 css、js 。引入相关样式和脚本之后，在你的页面加入以下代码：\n\t```html\n\t<link rel=\"stylesheet\" href=\"样式路径\">\n\t<script src=\"脚本路径\"></script>\n\t<div id=\"comment\" class=\"comment\">\n\t</div>\n\t<script>\n\tJELON.Comment({\n\t\tcontainer: 'comments', // 评论框容器id或对象，留空是默认为 comments \n\t\tlabel: '<%- post.slug %>' || '<%- post.path %>', // 文章标签\n\t\towner: '<%- theme.comment.owner %>', // GitHub application 创建者\n\t\trepo: '<%- theme.comment.repo %>', // issue 所在仓库名\n\t\tclientId: '<%- theme.comment.client_id %>', // GitHub application client_id\n\t\tclientSecret: '<%- theme.comment.client_secret %>' // GitHub application client_secret\n\t});\n\t</script>\n\t```\n2. 由于这个评论系统是要集成到个人的主题上去的，所以要跟 hexo-theme-xups 搭配使用，hexo-theme-xups 主题链接为 [https://github.com/jangdelong/hexo-theme-xups](https://github.com/jangdelong/hexo-theme-xups)，目前最新的主题（带有GitHub 登录评论功能），后面会更新上去，往后当然也会陆续进行更新和优化，欢迎多多 star。\n\n### 五、遇到的问题\n\n遇到的问题主要有三个，一个是创建 label 权限问题，一个是跨域问题，另外一个 GitHub 授权登录兼容性问题。\n\n1. 创建 label 权限问题（目前未解决）。label 是一个连接文章和 issue 关系的纽带，因为我们要用 label 去查询 issue number，后面的流程才能走下去。如今遇到的问题是，对于新文章来说，只能是我自己本人账号（GitHub Application）创建者才能创建带有 label 的 issue。参考了 GitHub 的接口（`POST /repos/:owner/:repo/issues`）文档，上面说\n\n\t> Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.\n2. 跨域问题（暂时解决了）。主要是通过 code 去换取 token_access 的 `POST https://github.com/login/oauth/access_token` 这个接口跨域，暂时解决方案是用 Node 去转发，但是，我没有服务器资源，这里不得不感谢 @imsun 提供的服务`https://gh-oauth.imsun.net`了，敬礼😁！！\n\t\n\t以下是更新于 2017.10.11\n\t`POST https://github.com/login/oauth/access_token` 接口转发路径已由 `https://gh-oauth.imsun.net/` 迁移至 `https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token`。\n\t \n3. GitHub 授权登录兼容性问题（暂时不解决）。经过简单的测试，发现 PC 端兼容性问题主要是一些老版本的浏览器，其中包括一些老版本的谷歌浏览器（版本号55.x.xxxx.xx）；而移动端的主要是 UC 浏览器无法实现 GitHub 授权登录。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/xups-comment-box.md","raw":"---\ntitle: 基于 github issues 实现第三方评论系统 \ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2017-08-10\ntags:\n\t- gitHub issue\n\t- 第三方评论框\nthumbnail:\nblogexcerpt: 个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高...\n\n---\n\n<!-- toc -->\n\n> 本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《[静态博客框架 Hexo 入门](http://jelon.top/posts/start-hexo/) 》，或者直接访问 Hexo 官网 [https://hexo.io/](https://hexo.io/)\n\n### 一、事情起因\n\n个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。\n\n什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。所以除了社区平台外，评论也成为一般博客和cms系统必备功能。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高。而且垃圾评论和过滤非法关键字难度较大，所以在国内外都有第三评论系统。以下是曾经流行或者正在流行的一些第三方评论系统。\n\n- 多说。多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。多说已经成为国内份额最大的所谓“社交评论框”服务，但是这个行业第一并没有给它带来更多的收益和发展空间。不过可惜，现在已经停止服务了。\n\n- 搜狐畅言。搜狐畅言是由搜狐推出的一个简单而强大的社会化评论及聚合平台。用户可以直接用自己的社会化网络账户在第三方网站发表评论，并且一键评论同步至社交网络将网站内容和自己的评论分享给好友。增加第三方网站用户活跃度，调动好友参与评论，帮助网站实现社会化网络优化，有效提升网站社会化流量。现在还健在。\n\n- 友言。友言是国内专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持10个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。现在还健在。\n\n- 网易云跟帖。网易云跟贴是网易公司推出的强大而又简单的评论聚合与分享平台。坑爹的，在多说发布停止服务声明之后不久，网易云跟帖也分出了停止服务声明。\n\n- Disqus。说到第三放评论系统，当然不得不提国外第三方评论系统界的老大 Disqus，只可惜由于天朝网络原因，Disqus 加载很慢，甚至有时候加载不出来，建议用户自备梯子。\n\n那么回归主题，市面上那么多第三方评论系统，就算有那么一两个挂掉了，还是有很多选择呢，为什么还要自己去做一个呢，这不是造轮子吗？其实，一开始我一直用多说的，用的不亦乐乎，突然有一天说挂就挂了，没办法，那我就选择其他的呗，然后就改成网易云，坑爹的，刚改造好没多久，网易云也挂了。\n\n后面我就在网上找啊找啊，发现居然有人用 GitHub Issue 做了一个评论系统，这无疑是一个很好的想法，很有创意啊。当然，我也拿来用了，但是始终觉得有点丑，跟我自己的博客主题不搭，才用了两天，撤了，打算自己做一个。说干就干，程序员总喜欢造轮子。\n\n### 二、什么是 GitHub Issues\n\n经常逛 GitHub 的童鞋，都应该知道这个功能，有人理解 GitHub 的 issue 功能，就如同 TODO list。你可以把所有想要在下一步完成的工作，如 feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。具体可以看一下知乎里面别人对 《[github issue是做什么的？](https://www.zhihu.com/question/22969033/answer/25927363) 》的解答。而本博客的评论数据存储 issues 仓库地址为 [https://github.com/jangdelong/blog_comments/issues](https://github.com/jangdelong/blog_comments/issues)，仓库里面并没有放置托管代码。总之，像我现在要用 github Issues 来制作评论系统的，其实就是把数据存储到 github issues，简单的说可以把 github issues 理解为一个免费的数据库。\n\n### 三、评论系统实现\n\n**预备工作**\n\n- 创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 [OAuth 2.0 标准](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)。OAuth applications 创建如下图所示，填写上面相应的内容。\n\n![OAuth](https://jangdelong.github.io/blog_img/images/xups-comment-box/1.jpg?v=2)\n\nApplication name：你的站点名称；\nHomepage URL：你的站点主页链接；\nApplication description：站点描述；\nAuthorization callback URL：GitHub 授权成功后返回地址\n\n创建成功之后会生成一个 Client ID 和一个 Client Secret。\n\n- GitHub REST API v3\n\nGitHub 提供了很多方便第三方开发的 API，当然，github issues 的增删改查 API 也在其中，有了这些 API，你才能各种施展奇技淫巧，比如我们现在要写的评论系统。另外，有人怀疑我们应不应该“滥用”这些 API，但是，个人觉得，既然，GitHub 提供了这些 API，就是说明要开放给大家这些权限，应该就不怕你“滥用”。那么，要满足我们现在的需求需要哪些 API 呢，下面我列举一下，以我的账号为例，jangdelong 为 Github 名，blog_comments 为仓库名。\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues`                         获取所有issues信息\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11`                   获取某个issue下的信息 （11 为 issue 编号 ）\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11/`comments  获取某个issue下的评论\n\n`GET: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions` 获取评论 ID 为 111 下的所有 reactions（reactions 包含顶[+1]、踩[-1]、喜欢[heart]等字段）\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues` 创建一个 issue\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues/11/comments` 在编号为 11 的 issue 下创建一条评论\n\n`POST: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions` 在 ID 为 111 的评论下创建一条 reactions（如 heart）\n\n`POST：https://developer.github.com/v3/markdown/`  markdown 语法解析接口\n\n**整体设计**\n\n流程图：\n\n```\n                                             |--> 显示已登录    \n                              |--> 已登录 --> |--> 加载评论列表 --> 分页加载 \n                              |              |--> 其他 \n                              |              |--> 评论操作 --> 成功/失败            |\n 开始 --> GitHub 授权登录 ? --> |                                                   |--> 结束\n                              |              |--> 显示未登录                       |\n                              |--> 未登录 --> |--> 加载评论列表 --> 分页加载          \n                                             |--> 其他\n                                             |--> 评论操作 --> 提示未登录状态\n\n```\n\n效果图：\n\n![OAuth](https://jangdelong.github.io/blog_img/images/xups-comment-box/2.jpg)\n\n因此，我们可以将评论系统分为列表（list）、评论框（box）、顶部登录状态栏（signbar）等部分。View 部分的代码组织为：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Renders = {\n\t\t// 列表模块\n\t\tlist: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t// 评论框模块\n\t\tbox: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t// 顶部登录状态栏\n\t\tsignBar: {\n\t\t\ttpl: ...,\n\t\t\t...\n\t\t},\n\t\t... // 其他模块视图\n\t};\n\t...\n})(JELON);\n```\n\n视图部分的代码组织好之后，根据 GitHub 提供的各种 API，我们将其封装到 Requests 里面去，组织如下：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Requests = {\n\t\t// 根据 label 获取 issue 编号\n\t\tgetIssueNumberByLabel: function () { ... },\n\t\t// 创建 issue\n\t\tcreateIssue: function () { ... },\n\t\t// 根据 issue 编号获取评论列表\n\t\tgetCommentListByIssueNumber: function () { ... },\n\t\t// 根据评论 ID 获取 reactions （即点赞数据）\n\t\tgetReactionsByCommentId: function () { ... },\n\t\t// markdown 解析\n\t\tmarkdown: function () { ... },\n\t\t// 通过 code 获取 access_token\n\t\tgetAccessToken: function () { ... },\n\t\t// 利用 access_token 去获取 GitHub 用户信息\n\t\tgetUserInfo: function () { ... },\n\t\t// 创建评论\n\t\tcreateComment: function () { ... },\n\t\t// 创建 reactions （点赞）\n\t\tcreateReaction: function () { ... }\n\t};\n\t...\n})(JELON);\n```\n\n接下来是封装事件操作，我们将其封装到 Actions 里面去，代码组织如下：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Actions = {\n\t\t// 初始加载，如列表、登录状态等\n\t\tinit: function () { ... },\n\t\t// 登出操作\n\t\tsignOut: function () { ... },\n\t\t// 列表翻页跳转\n\t\tpageJump: function () { ... },\n\t\t// 编辑预览\n\t\teditPreviewSwitch: function () { ... },\n\t\t// 提交评论操作\n\t\tpostComment: function () { ... },\n\t\t// 点赞操作\n\t\tlike: function () { ... }\n\t};\n\t...\n})(JELON);\n```\n\n程序入口：\n\n```javascript\n// 为了减少全局变量，整个网站就暴露一个全局变量 JELON\nvar JELON = JELON || {};\n;(function (JL) {\n\t...\n\tJL.Comment = function (options) {\n\t\tJL.options = options || {};\n\t\t$('comments').innerHTML = [\n\t\t\tthis.Renders.signBar.tpl,\n\t\t\tthis.Renders.box.tpl,\n\t\t\tthis.Renders.tips,\n\t\t\tthis.Renders.list.tpl\n\t\t].join('');\n\t\tJL.Actions.init();\n\t};\n\t...\n})(JELON);\n```\n\n**登录流程**\n\nGitHub 授权登录是不可或缺的功能，用只有登录之后才能进行评论。前面有提到，GitHub 授权登录是遵循一个 OAuth 2.0 标准。以下是 OAuth 2.0 的一个运作流程，可以让我们更好的理解它。\n\n![OAuth 2.0 运行流程](https://jangdelong.github.io/blog_img/images/xups-comment-box/3.png)\n\n那么，GitHub 授权登录是怎么样按照这个标准来运作的呢，接下来简单介绍一下，如果要更加详细深入了解的话，你也可以访问 [GitHub 官方文档](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/)。\n\n1. 用户发起重定向请求授权服务器换取 code\n\t`GET http://github.com/login/oauth/authorize`\n2. 拿到 code 之后，利用 client_id、client_secret 和 code 去换取 token_access。（client_id 和 client_secret 前面的预备工作里有提到）\n\t`POST https://github.com/login/oauth/access_token`\n3. 获取到 token_access 之后，我们就可以用 token_access 去获取已登录的用户的信息了\n\t`GET https://api.github.com/user`\n\n通过以上3个步骤，GitHub 授权登录就算是完成了。\n\n### 四、评论系统如何使用\n\n1. 引入评论系统相关的 css、js 。引入相关样式和脚本之后，在你的页面加入以下代码：\n\t```html\n\t<link rel=\"stylesheet\" href=\"样式路径\">\n\t<script src=\"脚本路径\"></script>\n\t<div id=\"comment\" class=\"comment\">\n\t</div>\n\t<script>\n\tJELON.Comment({\n\t\tcontainer: 'comments', // 评论框容器id或对象，留空是默认为 comments \n\t\tlabel: '<%- post.slug %>' || '<%- post.path %>', // 文章标签\n\t\towner: '<%- theme.comment.owner %>', // GitHub application 创建者\n\t\trepo: '<%- theme.comment.repo %>', // issue 所在仓库名\n\t\tclientId: '<%- theme.comment.client_id %>', // GitHub application client_id\n\t\tclientSecret: '<%- theme.comment.client_secret %>' // GitHub application client_secret\n\t});\n\t</script>\n\t```\n2. 由于这个评论系统是要集成到个人的主题上去的，所以要跟 hexo-theme-xups 搭配使用，hexo-theme-xups 主题链接为 [https://github.com/jangdelong/hexo-theme-xups](https://github.com/jangdelong/hexo-theme-xups)，目前最新的主题（带有GitHub 登录评论功能），后面会更新上去，往后当然也会陆续进行更新和优化，欢迎多多 star。\n\n### 五、遇到的问题\n\n遇到的问题主要有三个，一个是创建 label 权限问题，一个是跨域问题，另外一个 GitHub 授权登录兼容性问题。\n\n1. 创建 label 权限问题（目前未解决）。label 是一个连接文章和 issue 关系的纽带，因为我们要用 label 去查询 issue number，后面的流程才能走下去。如今遇到的问题是，对于新文章来说，只能是我自己本人账号（GitHub Application）创建者才能创建带有 label 的 issue。参考了 GitHub 的接口（`POST /repos/:owner/:repo/issues`）文档，上面说\n\n\t> Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.\n2. 跨域问题（暂时解决了）。主要是通过 code 去换取 token_access 的 `POST https://github.com/login/oauth/access_token` 这个接口跨域，暂时解决方案是用 Node 去转发，但是，我没有服务器资源，这里不得不感谢 @imsun 提供的服务`https://gh-oauth.imsun.net`了，敬礼😁！！\n\t\n\t以下是更新于 2017.10.11\n\t`POST https://github.com/login/oauth/access_token` 接口转发路径已由 `https://gh-oauth.imsun.net/` 迁移至 `https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token`。\n\t \n3. GitHub 授权登录兼容性问题（暂时不解决）。经过简单的测试，发现 PC 端兼容性问题主要是一些老版本的浏览器，其中包括一些老版本的谷歌浏览器（版本号55.x.xxxx.xx）；而移动端的主要是 UC 浏览器无法实现 GitHub 授权登录。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"xups-comment-box","published":1,"updated":"2017-08-10T00:00:00.000Z","_id":"cmduj3n4b005ek8svfolr2bbc","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E4%BA%8B%E6%83%85%E8%B5%B7%E5%9B%A0\">一、事情起因</a></li>\n<li><a href=\"#%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-github-issues\">二、什么是 GitHub Issues</a></li>\n<li><a href=\"#%E4%B8%89-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0\">三、评论系统实现</a></li>\n<li><a href=\"#%E5%9B%9B-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">四、评论系统如何使用</a></li>\n<li><a href=\"#%E4%BA%94-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">五、遇到的问题</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<blockquote>\n<p>本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《<a href=\"http://jelon.top/posts/start-hexo/\">静态博客框架 Hexo 入门</a> 》，或者直接访问 Hexo 官网 <a href=\"https://hexo.io/\">https://hexo.io/</a></p>\n</blockquote>\n<h3><span id=\"一-事情起因\">一、事情起因</span></h3><p>个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。</p>\n<p>什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。所以除了社区平台外，评论也成为一般博客和cms系统必备功能。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高。而且垃圾评论和过滤非法关键字难度较大，所以在国内外都有第三评论系统。以下是曾经流行或者正在流行的一些第三方评论系统。</p>\n<ul>\n<li><p>多说。多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。多说已经成为国内份额最大的所谓“社交评论框”服务，但是这个行业第一并没有给它带来更多的收益和发展空间。不过可惜，现在已经停止服务了。</p>\n</li>\n<li><p>搜狐畅言。搜狐畅言是由搜狐推出的一个简单而强大的社会化评论及聚合平台。用户可以直接用自己的社会化网络账户在第三方网站发表评论，并且一键评论同步至社交网络将网站内容和自己的评论分享给好友。增加第三方网站用户活跃度，调动好友参与评论，帮助网站实现社会化网络优化，有效提升网站社会化流量。现在还健在。</p>\n</li>\n<li><p>友言。友言是国内专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持10个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。现在还健在。</p>\n</li>\n<li><p>网易云跟帖。网易云跟贴是网易公司推出的强大而又简单的评论聚合与分享平台。坑爹的，在多说发布停止服务声明之后不久，网易云跟帖也分出了停止服务声明。</p>\n</li>\n<li><p>Disqus。说到第三放评论系统，当然不得不提国外第三方评论系统界的老大 Disqus，只可惜由于天朝网络原因，Disqus 加载很慢，甚至有时候加载不出来，建议用户自备梯子。</p>\n</li>\n</ul>\n<p>那么回归主题，市面上那么多第三方评论系统，就算有那么一两个挂掉了，还是有很多选择呢，为什么还要自己去做一个呢，这不是造轮子吗？其实，一开始我一直用多说的，用的不亦乐乎，突然有一天说挂就挂了，没办法，那我就选择其他的呗，然后就改成网易云，坑爹的，刚改造好没多久，网易云也挂了。</p>\n<p>后面我就在网上找啊找啊，发现居然有人用 GitHub Issue 做了一个评论系统，这无疑是一个很好的想法，很有创意啊。当然，我也拿来用了，但是始终觉得有点丑，跟我自己的博客主题不搭，才用了两天，撤了，打算自己做一个。说干就干，程序员总喜欢造轮子。</p>\n<h3><span id=\"二-什么是-github-issues\">二、什么是 GitHub Issues</span></h3><p>经常逛 GitHub 的童鞋，都应该知道这个功能，有人理解 GitHub 的 issue 功能，就如同 TODO list。你可以把所有想要在下一步完成的工作，如 feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。具体可以看一下知乎里面别人对 《<a href=\"https://www.zhihu.com/question/22969033/answer/25927363\">github issue是做什么的？</a> 》的解答。而本博客的评论数据存储 issues 仓库地址为 <a href=\"https://github.com/jangdelong/blog_comments/issues\">https://github.com/jangdelong/blog_comments&#x2F;issues</a>，仓库里面并没有放置托管代码。总之，像我现在要用 github Issues 来制作评论系统的，其实就是把数据存储到 github issues，简单的说可以把 github issues 理解为一个免费的数据库。</p>\n<h3><span id=\"三-评论系统实现\">三、评论系统实现</span></h3><p><strong>预备工作</strong></p>\n<ul>\n<li>创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 <a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">OAuth 2.0 标准</a>。OAuth applications 创建如下图所示，填写上面相应的内容。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/1.jpg?v=2\" alt=\"OAuth\"></p>\n<p>Application name：你的站点名称；<br>Homepage URL：你的站点主页链接；<br>Application description：站点描述；<br>Authorization callback URL：GitHub 授权成功后返回地址</p>\n<p>创建成功之后会生成一个 Client ID 和一个 Client Secret。</p>\n<ul>\n<li>GitHub REST API v3</li>\n</ul>\n<p>GitHub 提供了很多方便第三方开发的 API，当然，github issues 的增删改查 API 也在其中，有了这些 API，你才能各种施展奇技淫巧，比如我们现在要写的评论系统。另外，有人怀疑我们应不应该“滥用”这些 API，但是，个人觉得，既然，GitHub 提供了这些 API，就是说明要开放给大家这些权限，应该就不怕你“滥用”。那么，要满足我们现在的需求需要哪些 API 呢，下面我列举一下，以我的账号为例，jangdelong 为 Github 名，blog_comments 为仓库名。</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues</code>                         获取所有issues信息</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11</code>                   获取某个issue下的信息 （11 为 issue 编号 ）</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11/</code>comments  获取某个issue下的评论</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 获取评论 ID 为 111 下的所有 reactions（reactions 包含顶[+1]、踩[-1]、喜欢[heart]等字段）</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues</code> 创建一个 issue</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/11/comments</code> 在编号为 11 的 issue 下创建一条评论</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 在 ID 为 111 的评论下创建一条 reactions（如 heart）</p>\n<p><code>POST：https://developer.github.com/v3/markdown/</code>  markdown 语法解析接口</p>\n<p><strong>整体设计</strong></p>\n<p>流程图：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">显示已登录</span>    </span><br><span class=\"line\">                             <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">已登录</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">加载评论列表</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">分页加载</span> </span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">其他</span> </span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">评论操作</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">成功/失败            |</span></span><br><span class=\"line\"><span class=\"comment\">开始</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">GitHub 授权登录 ?</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|                                                   |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">结束</span></span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">显示未登录                       |</span></span><br><span class=\"line\">                             <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">未登录</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">加载评论列表</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">分页加载</span>          </span><br><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">其他</span></span><br><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">评论操作</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">提示未登录状态</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/2.jpg\" alt=\"OAuth\"></p>\n<p>因此，我们可以将评论系统分为列表（list）、评论框（box）、顶部登录状态栏（signbar）等部分。View 部分的代码组织为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Renders</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 列表模块</span></span><br><span class=\"line\">\t\t<span class=\"attr\">list</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 评论框模块</span></span><br><span class=\"line\">\t\t<span class=\"attr\">box</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 顶部登录状态栏</span></span><br><span class=\"line\">\t\t<span class=\"attr\">signBar</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t... <span class=\"comment\">// 其他模块视图</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>视图部分的代码组织好之后，根据 GitHub 提供的各种 API，我们将其封装到 Requests 里面去，组织如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Requests</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据 label 获取 issue 编号</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getIssueNumberByLabel</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建 issue</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createIssue</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据 issue 编号获取评论列表</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getCommentListByIssueNumber</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据评论 ID 获取 reactions （即点赞数据）</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getReactionsByCommentId</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// markdown 解析</span></span><br><span class=\"line\">\t\t<span class=\"attr\">markdown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过 code 获取 access_token</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getAccessToken</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 利用 access_token 去获取 GitHub 用户信息</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getUserInfo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建评论</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createComment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建 reactions （点赞）</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createReaction</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接下来是封装事件操作，我们将其封装到 Actions 里面去，代码组织如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Actions</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始加载，如列表、登录状态等</span></span><br><span class=\"line\">\t\t<span class=\"attr\">init</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 登出操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">signOut</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 列表翻页跳转</span></span><br><span class=\"line\">\t\t<span class=\"attr\">pageJump</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 编辑预览</span></span><br><span class=\"line\">\t\t<span class=\"attr\">editPreviewSwitch</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提交评论操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">postComment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 点赞操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">like</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>程序入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Comment</span> = <span class=\"keyword\">function</span> (<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">options</span> = options || &#123;&#125;;</span><br><span class=\"line\">\t\t$(<span class=\"string\">&#x27;comments&#x27;</span>).<span class=\"property\">innerHTML</span> = [</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">signBar</span>.<span class=\"property\">tpl</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">box</span>.<span class=\"property\">tpl</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">tips</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">list</span>.<span class=\"property\">tpl</span></span><br><span class=\"line\">\t\t].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Actions</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>登录流程</strong></p>\n<p>GitHub 授权登录是不可或缺的功能，用只有登录之后才能进行评论。前面有提到，GitHub 授权登录是遵循一个 OAuth 2.0 标准。以下是 OAuth 2.0 的一个运作流程，可以让我们更好的理解它。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/3.png\" alt=\"OAuth 2.0 运行流程\"></p>\n<p>那么，GitHub 授权登录是怎么样按照这个标准来运作的呢，接下来简单介绍一下，如果要更加详细深入了解的话，你也可以访问 <a href=\"https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/\">GitHub 官方文档</a>。</p>\n<ol>\n<li>用户发起重定向请求授权服务器换取 code<br> <code>GET http://github.com/login/oauth/authorize</code></li>\n<li>拿到 code 之后，利用 client_id、client_secret 和 code 去换取 token_access。（client_id 和 client_secret 前面的预备工作里有提到）<br> <code>POST https://github.com/login/oauth/access_token</code></li>\n<li>获取到 token_access 之后，我们就可以用 token_access 去获取已登录的用户的信息了<br> <code>GET https://api.github.com/user</code></li>\n</ol>\n<p>通过以上3个步骤，GitHub 授权登录就算是完成了。</p>\n<h3><span id=\"四-评论系统如何使用\">四、评论系统如何使用</span></h3><ol>\n<li>引入评论系统相关的 css、js 。引入相关样式和脚本之后，在你的页面加入以下代码： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;样式路径&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;脚本路径&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;comment&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable constant_\">JELON</span>.<span class=\"title class_\">Comment</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">container</span>: <span class=\"string\">&#x27;comments&#x27;</span>, <span class=\"comment\">// 评论框容器id或对象，留空是默认为 comments </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">label</span>: <span class=\"string\">&#x27;&lt;%- post.slug %&gt;&#x27;</span> || <span class=\"string\">&#x27;&lt;%- post.path %&gt;&#x27;</span>, <span class=\"comment\">// 文章标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">owner</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.owner %&gt;&#x27;</span>, <span class=\"comment\">// GitHub application 创建者</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">repo</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.repo %&gt;&#x27;</span>, <span class=\"comment\">// issue 所在仓库名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">clientId</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.client_id %&gt;&#x27;</span>, <span class=\"comment\">// GitHub application client_id</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.client_secret %&gt;&#x27;</span> <span class=\"comment\">// GitHub application client_secret</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>由于这个评论系统是要集成到个人的主题上去的，所以要跟 hexo-theme-xups 搭配使用，hexo-theme-xups 主题链接为 <a href=\"https://github.com/jangdelong/hexo-theme-xups\">https://github.com/jangdelong/hexo-theme-xups</a>，目前最新的主题（带有GitHub 登录评论功能），后面会更新上去，往后当然也会陆续进行更新和优化，欢迎多多 star。</li>\n</ol>\n<h3><span id=\"五-遇到的问题\">五、遇到的问题</span></h3><p>遇到的问题主要有三个，一个是创建 label 权限问题，一个是跨域问题，另外一个 GitHub 授权登录兼容性问题。</p>\n<ol>\n<li><p>创建 label 权限问题（目前未解决）。label 是一个连接文章和 issue 关系的纽带，因为我们要用 label 去查询 issue number，后面的流程才能走下去。如今遇到的问题是，对于新文章来说，只能是我自己本人账号（GitHub Application）创建者才能创建带有 label 的 issue。参考了 GitHub 的接口（<code>POST /repos/:owner/:repo/issues</code>）文档，上面说</p>\n<blockquote>\n<p>Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.</p>\n</blockquote>\n</li>\n<li><p>跨域问题（暂时解决了）。主要是通过 code 去换取 token_access 的 <code>POST https://github.com/login/oauth/access_token</code> 这个接口跨域，暂时解决方案是用 Node 去转发，但是，我没有服务器资源，这里不得不感谢 @imsun 提供的服务<code>https://gh-oauth.imsun.net</code>了，敬礼😁！！</p>\n<p> 以下是更新于 2017.10.11<br> <code>POST https://github.com/login/oauth/access_token</code> 接口转发路径已由 <code>https://gh-oauth.imsun.net/</code> 迁移至 <code>https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</code>。</p>\n</li>\n<li><p>GitHub 授权登录兼容性问题（暂时不解决）。经过简单的测试，发现 PC 端兼容性问题主要是一些老版本的浏览器，其中包括一些老版本的谷歌浏览器（版本号55.x.xxxx.xx）；而移动端的主要是 UC 浏览器无法实现 GitHub 授权登录。</p>\n</li>\n</ol>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E4%BA%8B%E6%83%85%E8%B5%B7%E5%9B%A0\">一、事情起因</a></li>\n<li><a href=\"#%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-github-issues\">二、什么是 GitHub Issues</a></li>\n<li><a href=\"#%E4%B8%89-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0\">三、评论系统实现</a></li>\n<li><a href=\"#%E5%9B%9B-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">四、评论系统如何使用</a></li>\n<li><a href=\"#%E4%BA%94-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">五、遇到的问题</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<blockquote>\n<p>本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《<a href=\"http://jelon.top/posts/start-hexo/\">静态博客框架 Hexo 入门</a> 》，或者直接访问 Hexo 官网 <a href=\"https://hexo.io/\">https://hexo.io/</a></p>\n</blockquote>\n<h3 id=\"一、事情起因\"><a href=\"#一、事情起因\" class=\"headerlink\" title=\"一、事情起因\"></a>一、事情起因</h3><p>个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。</p>\n<p>什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。所以除了社区平台外，评论也成为一般博客和cms系统必备功能。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高。而且垃圾评论和过滤非法关键字难度较大，所以在国内外都有第三评论系统。以下是曾经流行或者正在流行的一些第三方评论系统。</p>\n<ul>\n<li><p>多说。多说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。多说已经成为国内份额最大的所谓“社交评论框”服务，但是这个行业第一并没有给它带来更多的收益和发展空间。不过可惜，现在已经停止服务了。</p>\n</li>\n<li><p>搜狐畅言。搜狐畅言是由搜狐推出的一个简单而强大的社会化评论及聚合平台。用户可以直接用自己的社会化网络账户在第三方网站发表评论，并且一键评论同步至社交网络将网站内容和自己的评论分享给好友。增加第三方网站用户活跃度，调动好友参与评论，帮助网站实现社会化网络优化，有效提升网站社会化流量。现在还健在。</p>\n</li>\n<li><p>友言。友言是国内专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持10个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。现在还健在。</p>\n</li>\n<li><p>网易云跟帖。网易云跟贴是网易公司推出的强大而又简单的评论聚合与分享平台。坑爹的，在多说发布停止服务声明之后不久，网易云跟帖也分出了停止服务声明。</p>\n</li>\n<li><p>Disqus。说到第三放评论系统，当然不得不提国外第三方评论系统界的老大 Disqus，只可惜由于天朝网络原因，Disqus 加载很慢，甚至有时候加载不出来，建议用户自备梯子。</p>\n</li>\n</ul>\n<p>那么回归主题，市面上那么多第三方评论系统，就算有那么一两个挂掉了，还是有很多选择呢，为什么还要自己去做一个呢，这不是造轮子吗？其实，一开始我一直用多说的，用的不亦乐乎，突然有一天说挂就挂了，没办法，那我就选择其他的呗，然后就改成网易云，坑爹的，刚改造好没多久，网易云也挂了。</p>\n<p>后面我就在网上找啊找啊，发现居然有人用 GitHub Issue 做了一个评论系统，这无疑是一个很好的想法，很有创意啊。当然，我也拿来用了，但是始终觉得有点丑，跟我自己的博客主题不搭，才用了两天，撤了，打算自己做一个。说干就干，程序员总喜欢造轮子。</p>\n<h3 id=\"二、什么是-GitHub-Issues\"><a href=\"#二、什么是-GitHub-Issues\" class=\"headerlink\" title=\"二、什么是 GitHub Issues\"></a>二、什么是 GitHub Issues</h3><p>经常逛 GitHub 的童鞋，都应该知道这个功能，有人理解 GitHub 的 issue 功能，就如同 TODO list。你可以把所有想要在下一步完成的工作，如 feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。具体可以看一下知乎里面别人对 《<a href=\"https://www.zhihu.com/question/22969033/answer/25927363\">github issue是做什么的？</a> 》的解答。而本博客的评论数据存储 issues 仓库地址为 <a href=\"https://github.com/jangdelong/blog_comments/issues\">https://github.com/jangdelong/blog_comments&#x2F;issues</a>，仓库里面并没有放置托管代码。总之，像我现在要用 github Issues 来制作评论系统的，其实就是把数据存储到 github issues，简单的说可以把 github issues 理解为一个免费的数据库。</p>\n<h3 id=\"三、评论系统实现\"><a href=\"#三、评论系统实现\" class=\"headerlink\" title=\"三、评论系统实现\"></a>三、评论系统实现</h3><p><strong>预备工作</strong></p>\n<ul>\n<li>创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 <a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">OAuth 2.0 标准</a>。OAuth applications 创建如下图所示，填写上面相应的内容。</li>\n</ul>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/1.jpg?v=2\" alt=\"OAuth\"></p>\n<p>Application name：你的站点名称；<br>Homepage URL：你的站点主页链接；<br>Application description：站点描述；<br>Authorization callback URL：GitHub 授权成功后返回地址</p>\n<p>创建成功之后会生成一个 Client ID 和一个 Client Secret。</p>\n<ul>\n<li>GitHub REST API v3</li>\n</ul>\n<p>GitHub 提供了很多方便第三方开发的 API，当然，github issues 的增删改查 API 也在其中，有了这些 API，你才能各种施展奇技淫巧，比如我们现在要写的评论系统。另外，有人怀疑我们应不应该“滥用”这些 API，但是，个人觉得，既然，GitHub 提供了这些 API，就是说明要开放给大家这些权限，应该就不怕你“滥用”。那么，要满足我们现在的需求需要哪些 API 呢，下面我列举一下，以我的账号为例，jangdelong 为 Github 名，blog_comments 为仓库名。</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues</code>                         获取所有issues信息</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11</code>                   获取某个issue下的信息 （11 为 issue 编号 ）</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11/</code>comments  获取某个issue下的评论</p>\n<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 获取评论 ID 为 111 下的所有 reactions（reactions 包含顶[+1]、踩[-1]、喜欢[heart]等字段）</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues</code> 创建一个 issue</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/11/comments</code> 在编号为 11 的 issue 下创建一条评论</p>\n<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 在 ID 为 111 的评论下创建一条 reactions（如 heart）</p>\n<p><code>POST：https://developer.github.com/v3/markdown/</code>  markdown 语法解析接口</p>\n<p><strong>整体设计</strong></p>\n<p>流程图：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">显示已登录</span>    </span><br><span class=\"line\">                             <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">已登录</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">加载评论列表</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">分页加载</span> </span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">其他</span> </span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">评论操作</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">成功/失败            |</span></span><br><span class=\"line\"><span class=\"comment\">开始</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">GitHub 授权登录 ?</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|                                                   |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">结束</span></span><br><span class=\"line\">                             <span class=\"comment\">|              |</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">显示未登录                       |</span></span><br><span class=\"line\">                             <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">未登录</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">加载评论列表</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">分页加载</span>          </span><br><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">其他</span></span><br><span class=\"line\">                                            <span class=\"comment\">|</span><span class=\"literal\">--</span>&gt; <span class=\"comment\">评论操作</span> <span class=\"literal\">--</span>&gt; <span class=\"comment\">提示未登录状态</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/2.jpg\" alt=\"OAuth\"></p>\n<p>因此，我们可以将评论系统分为列表（list）、评论框（box）、顶部登录状态栏（signbar）等部分。View 部分的代码组织为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Renders</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 列表模块</span></span><br><span class=\"line\">\t\t<span class=\"attr\">list</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 评论框模块</span></span><br><span class=\"line\">\t\t<span class=\"attr\">box</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 顶部登录状态栏</span></span><br><span class=\"line\">\t\t<span class=\"attr\">signBar</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tpl</span>: ...,</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t... <span class=\"comment\">// 其他模块视图</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>视图部分的代码组织好之后，根据 GitHub 提供的各种 API，我们将其封装到 Requests 里面去，组织如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Requests</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据 label 获取 issue 编号</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getIssueNumberByLabel</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建 issue</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createIssue</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据 issue 编号获取评论列表</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getCommentListByIssueNumber</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据评论 ID 获取 reactions （即点赞数据）</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getReactionsByCommentId</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// markdown 解析</span></span><br><span class=\"line\">\t\t<span class=\"attr\">markdown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过 code 获取 access_token</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getAccessToken</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 利用 access_token 去获取 GitHub 用户信息</span></span><br><span class=\"line\">\t\t<span class=\"attr\">getUserInfo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建评论</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createComment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建 reactions （点赞）</span></span><br><span class=\"line\">\t\t<span class=\"attr\">createReaction</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接下来是封装事件操作，我们将其封装到 Actions 里面去，代码组织如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Actions</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始加载，如列表、登录状态等</span></span><br><span class=\"line\">\t\t<span class=\"attr\">init</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 登出操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">signOut</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 列表翻页跳转</span></span><br><span class=\"line\">\t\t<span class=\"attr\">pageJump</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 编辑预览</span></span><br><span class=\"line\">\t\t<span class=\"attr\">editPreviewSwitch</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提交评论操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">postComment</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 点赞操作</span></span><br><span class=\"line\">\t\t<span class=\"attr\">like</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; ... &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p>程序入口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">JELON</span> = <span class=\"variable constant_\">JELON</span> || &#123;&#125;;</span><br><span class=\"line\">;(<span class=\"keyword\">function</span> (<span class=\"params\">JL</span>) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Comment</span> = <span class=\"keyword\">function</span> (<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">options</span> = options || &#123;&#125;;</span><br><span class=\"line\">\t\t$(<span class=\"string\">&#x27;comments&#x27;</span>).<span class=\"property\">innerHTML</span> = [</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">signBar</span>.<span class=\"property\">tpl</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">box</span>.<span class=\"property\">tpl</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">tips</span>,</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">Renders</span>.<span class=\"property\">list</span>.<span class=\"property\">tpl</span></span><br><span class=\"line\">\t\t].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">JL</span>.<span class=\"property\">Actions</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)(<span class=\"variable constant_\">JELON</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>登录流程</strong></p>\n<p>GitHub 授权登录是不可或缺的功能，用只有登录之后才能进行评论。前面有提到，GitHub 授权登录是遵循一个 OAuth 2.0 标准。以下是 OAuth 2.0 的一个运作流程，可以让我们更好的理解它。</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/xups-comment-box/3.png\" alt=\"OAuth 2.0 运行流程\"></p>\n<p>那么，GitHub 授权登录是怎么样按照这个标准来运作的呢，接下来简单介绍一下，如果要更加详细深入了解的话，你也可以访问 <a href=\"https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/\">GitHub 官方文档</a>。</p>\n<ol>\n<li>用户发起重定向请求授权服务器换取 code<br> <code>GET http://github.com/login/oauth/authorize</code></li>\n<li>拿到 code 之后，利用 client_id、client_secret 和 code 去换取 token_access。（client_id 和 client_secret 前面的预备工作里有提到）<br> <code>POST https://github.com/login/oauth/access_token</code></li>\n<li>获取到 token_access 之后，我们就可以用 token_access 去获取已登录的用户的信息了<br> <code>GET https://api.github.com/user</code></li>\n</ol>\n<p>通过以上3个步骤，GitHub 授权登录就算是完成了。</p>\n<h3 id=\"四、评论系统如何使用\"><a href=\"#四、评论系统如何使用\" class=\"headerlink\" title=\"四、评论系统如何使用\"></a>四、评论系统如何使用</h3><ol>\n<li>引入评论系统相关的 css、js 。引入相关样式和脚本之后，在你的页面加入以下代码： <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;样式路径&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;脚本路径&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;comment&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable constant_\">JELON</span>.<span class=\"title class_\">Comment</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">container</span>: <span class=\"string\">&#x27;comments&#x27;</span>, <span class=\"comment\">// 评论框容器id或对象，留空是默认为 comments </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">label</span>: <span class=\"string\">&#x27;&lt;%- post.slug %&gt;&#x27;</span> || <span class=\"string\">&#x27;&lt;%- post.path %&gt;&#x27;</span>, <span class=\"comment\">// 文章标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">owner</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.owner %&gt;&#x27;</span>, <span class=\"comment\">// GitHub application 创建者</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">repo</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.repo %&gt;&#x27;</span>, <span class=\"comment\">// issue 所在仓库名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">clientId</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.client_id %&gt;&#x27;</span>, <span class=\"comment\">// GitHub application client_id</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"attr\">clientSecret</span>: <span class=\"string\">&#x27;&lt;%- theme.comment.client_secret %&gt;&#x27;</span> <span class=\"comment\">// GitHub application client_secret</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>由于这个评论系统是要集成到个人的主题上去的，所以要跟 hexo-theme-xups 搭配使用，hexo-theme-xups 主题链接为 <a href=\"https://github.com/jangdelong/hexo-theme-xups\">https://github.com/jangdelong/hexo-theme-xups</a>，目前最新的主题（带有GitHub 登录评论功能），后面会更新上去，往后当然也会陆续进行更新和优化，欢迎多多 star。</li>\n</ol>\n<h3 id=\"五、遇到的问题\"><a href=\"#五、遇到的问题\" class=\"headerlink\" title=\"五、遇到的问题\"></a>五、遇到的问题</h3><p>遇到的问题主要有三个，一个是创建 label 权限问题，一个是跨域问题，另外一个 GitHub 授权登录兼容性问题。</p>\n<ol>\n<li><p>创建 label 权限问题（目前未解决）。label 是一个连接文章和 issue 关系的纽带，因为我们要用 label 去查询 issue number，后面的流程才能走下去。如今遇到的问题是，对于新文章来说，只能是我自己本人账号（GitHub Application）创建者才能创建带有 label 的 issue。参考了 GitHub 的接口（<code>POST /repos/:owner/:repo/issues</code>）文档，上面说</p>\n<blockquote>\n<p>Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.</p>\n</blockquote>\n</li>\n<li><p>跨域问题（暂时解决了）。主要是通过 code 去换取 token_access 的 <code>POST https://github.com/login/oauth/access_token</code> 这个接口跨域，暂时解决方案是用 Node 去转发，但是，我没有服务器资源，这里不得不感谢 @imsun 提供的服务<code>https://gh-oauth.imsun.net</code>了，敬礼😁！！</p>\n<p> 以下是更新于 2017.10.11<br> <code>POST https://github.com/login/oauth/access_token</code> 接口转发路径已由 <code>https://gh-oauth.imsun.net/</code> 迁移至 <code>https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</code>。</p>\n</li>\n<li><p>GitHub 授权登录兼容性问题（暂时不解决）。经过简单的测试，发现 PC 端兼容性问题主要是一些老版本的浏览器，其中包括一些老版本的谷歌浏览器（版本号55.x.xxxx.xx）；而移动端的主要是 UC 浏览器无法实现 GitHub 授权登录。</p>\n</li>\n</ol>\n"},{"title":"Yarn, 全新的 JavaScript 包管理器","author":"Jelon","date":"2016-10-17T00:00:00.000Z","thumbnail":"https://jangdelong.github.io/blog_img/images/yarn/yarn_thumbnail.png","blogexcerpt":"前阵子，Facebook 开源了一款新的 Node.js 包管理器 ---- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的...","_content":"\n<!-- toc -->\n\n前阵子，Facebook 开源了一款新的 Node.js 包管理器 ---- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的，不是吗？\n\n废话呢，就不多说了，直接进入主题。今天就来认识一下它，作为菜鸟的我，（wen）水（cai）平（hen）有（shui）限，写的不对的地方，欢迎指正。😝\n\n![yarn-kitten-full](https://jangdelong.github.io/blog_img/images/yarn/1.png?v=2)\n\n### Yarn 是什么\n\nYarn 是 Node.js 代码的包管理器（类似 NPM ）。 它允许你使用世界各地开发人员开发的代码，当然也可以共享你的代码。 Yarn 的优点是速度快，同时可以做到安全，可靠这一点，所以你不必担心。Yarn 允许你使用其他开发人员的解决方案来解决不同的问题，使你更容易开发自己的产品。因为，Yarn 令开发者可以更加迅捷和从容地享受前人栽种的果实，进而集中精力打造自己的产品 ---- 这才是更加重要的事情。\n\n在使用 Yarn 时，开发者们还像以前一样从 NPM 仓库那里获取资源，但安装速度更快，不同的机器的安装结果完全一致，甚至还可以在安全的离线环境中使用。代码通过称为包（有时称为模块）的东西共享。 包包含所有共享的代码以及描述包的package.json文件。\n\n在Facebook，Yarn 作为 NPM 的替代物以解决随着代码体积的不断增长和团队规模的不断壮大，在一致性、安全性和性能方面遇到的问题，现在以开源的方式发布这个成果，它是由 Exponent、 Google、Tilde 与 Facebook 合作完成的。\n\n### 安装\n\n在使用 Yarn 之前，需要先在你的系统上安装 Yarn。Yarn 提供各种平台的安装包，无论你是使用 Mac、Windows 还是 Linux，甚至 Unix，都可以安装 Yarn。这里给大家介绍两种常用的系统安装 Yarn， Mac 和 Windows。\n\n**Mac OS**\n\n首先，你的电脑上得先安装 Node.js，如果没有没有安装，请去[Node.js 官网](https://nodejs.org/en/)下载自行安装。\n\n- Homebrew\n\n[Homebrew（http://brew.sh/）](http://brew.sh/)，是 Mac 上强烈推荐的套件管理器，你可以通过 Homebrew 安装 Yarn，同时也可以通过 Homebrew 安装 Node。\n\n```bash\nbrew update\nbrew install\n```\n\n- 设置路径\n\n您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。\n\n在你的配置文件（如 .profile, .bashrc, .zshrc等）里面加上 `export PATH=\"$PATH:$HOME/.yarn/bin\"`。\n\n最后测试一下，Yarn 是否已经安装成功。\n\n```bash\nyarn --version\n```\n\n**Windows**\n\nWindows 安装 Yarn 可以通过以下两种方法安装。\n\n- 第一种，可以直接下载安装程序\n\nYarn 官网提供 .msi 安装文件供 Windows 用户进行下载安装。同样，你在安装 Yarn 之前，要先保证你已经安装了 Node.js。Yarn for Windows 最新安装包下载链接如下：\n\n[Download Installer](https://yarnpkg.com/latest.msi)\n\n- 第二种，通过 Chocolatey 安装\n\nChocolatey 是 Windows 的包管理器，您可以按照这些[说明](https://chocolatey.org/install)安装 Chocolatey 。\n\n好了，安装完了 Chocolatey 之后就开始安装 Yarn 吧，在控制台里面输入以下命令：\n\n```bash\nchoco install yarn\n```\n\n- 路径设置\n\n您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。将 `set PATH =％PATH％; C：\\。yarn \\ bin` 添加到您的 shell 环境中。\n\n### 用 NPM 的方式去安装 Yarn\n\n![这就很尴尬了](https://jangdelong.github.io/blog_img/images/yarn/2.jpg?v=2)\n\n这就很尴尬了，想要取代别人，却要通过别人安装，难道这就是传说中的青出于蓝而胜于蓝。😝虽然，这很尴尬，但比 Yarn 官网提供的那些安装方法真是爽的要死，另外，在我也是通过这种方式安装的，哎😌。来吧，我们开始通过 NPM 安装 Yarn吧。\n\n```bash\nnpm install -g yarn\n```\n\nMac 上安装成功截图如下：\n\n![Mac OS](https://jangdelong.github.io/blog_img/images/yarn/3.jpeg)\n\nWindows 上安装截图如下：\n\n![Windows](https://jangdelong.github.io/blog_img/images/yarn/4.png)\n\n![Windows](https://jangdelong.github.io/blog_img/images/yarn/5.png)\n\n### 使用\n\nYarn 的使用很简单，虽然和 NPM 相似，但是又有所区别。\n\n- 初始化新项目\n\n```bash\nyarn init\n```\n\n- 下载依赖包\n\n```bash\nyarn add [package]\nyarn add [package]@[version]\nyarn add [package]@[tag]\n```\n\n- 更新依赖包\n\n```bash\nyarn upgrade [package]\nyarn upgrade [package]@[version]\nyarn upgrade [package]@[tag]\n```\n\n- 删除依赖包\n\n```bash\nyarn remove [package]\n```\n\n- 下载项目所有的依赖包\n\n```bash\nyarn       # or yarn install\n```\n\n### NPM vs Yarn 速查表\n \n**你需要知道的**\n\n- `npm install === yarn` `install` 关键字可以省略。\n\n- `npm install react --save === yarn add react` React 包信息立即保存到你的package.json中。\n\n- `npm uninstall react --save === yarn remove react` `--save` 可以通过`npm config set save true` 在NPM中默认设置，但这对大多数开发人员来说是不明显的。 从`package.json` 中添加和删除是Yarn中的默认值。\n\n- `npm install react --save-dev === yarn add react --dev`\n\n- `npm update react --save === yarn upgrade react` \n强烈建议用 upgrade 来替代 update，因为这更能体现版本号变更。 \n\n- `npm install react --global === yarn global add react` 对于全局安装，我们都会很谨慎。\n\n**你已经知道的**\n\n- `npm init === yarn init`\n- `npm link === yarn link`\n- `npm outdated === yarn outdated`\n- `npm publish === yarn publish`\n- `npm run === yarn run`\n- `npm cache clean === yarn cache clean`\n- `npm login === yarn login (and logout)`\n- `npm test === yarn test`\n\n**Yarn 拥有，NPM 没有**\n\n- `yarn licenses` — 允许您检查依赖项的许可证。\n- `yarn licenses generate` — 自动创建许可证依赖性免责声明。\n- 支持 Emojis\n- 支持速度滚动条\n- 自动生成 lock 文件（.lock 保存所有依赖包的版本信息）\n- 为安全而生\n\n**NPM 拥有，Yarn 没有**\n\n- `npm xmas`\n- `npm visnup`\n\n### 以下载 React 为例，实践一下\n\n![yarn react](https://jangdelong.github.io/blog_img/images/yarn/6.png)\n\n### 参考\n\n- [https://yarnpkg.com/](https://yarnpkg.com/)\n- [https://github.com/yarnpkg/yarn](https://github.com/yarnpkg/yarn)\n- [http://www.tuicool.com/articles/eMRJVvU](http://www.tuicool.com/articles/eMRJVvU)\n- [https://zhuanlan.zhihu.com/p/22892675](https://zhuanlan.zhihu.com/p/22892675)\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n","source":"_posts/yarn.md","raw":"---\ntitle: Yarn, 全新的 JavaScript 包管理器\ncategories:\n  - Web技术\nauthor: Jelon\ndate: 2016-10-17\ntags:\n\t- Yarn\n\t- Node.js\n\t- npm\nthumbnail: https://jangdelong.github.io/blog_img/images/yarn/yarn_thumbnail.png\nblogexcerpt: 前阵子，Facebook 开源了一款新的 Node.js 包管理器 ---- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的...\n\n---\n\n<!-- toc -->\n\n前阵子，Facebook 开源了一款新的 Node.js 包管理器 ---- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的，不是吗？\n\n废话呢，就不多说了，直接进入主题。今天就来认识一下它，作为菜鸟的我，（wen）水（cai）平（hen）有（shui）限，写的不对的地方，欢迎指正。😝\n\n![yarn-kitten-full](https://jangdelong.github.io/blog_img/images/yarn/1.png?v=2)\n\n### Yarn 是什么\n\nYarn 是 Node.js 代码的包管理器（类似 NPM ）。 它允许你使用世界各地开发人员开发的代码，当然也可以共享你的代码。 Yarn 的优点是速度快，同时可以做到安全，可靠这一点，所以你不必担心。Yarn 允许你使用其他开发人员的解决方案来解决不同的问题，使你更容易开发自己的产品。因为，Yarn 令开发者可以更加迅捷和从容地享受前人栽种的果实，进而集中精力打造自己的产品 ---- 这才是更加重要的事情。\n\n在使用 Yarn 时，开发者们还像以前一样从 NPM 仓库那里获取资源，但安装速度更快，不同的机器的安装结果完全一致，甚至还可以在安全的离线环境中使用。代码通过称为包（有时称为模块）的东西共享。 包包含所有共享的代码以及描述包的package.json文件。\n\n在Facebook，Yarn 作为 NPM 的替代物以解决随着代码体积的不断增长和团队规模的不断壮大，在一致性、安全性和性能方面遇到的问题，现在以开源的方式发布这个成果，它是由 Exponent、 Google、Tilde 与 Facebook 合作完成的。\n\n### 安装\n\n在使用 Yarn 之前，需要先在你的系统上安装 Yarn。Yarn 提供各种平台的安装包，无论你是使用 Mac、Windows 还是 Linux，甚至 Unix，都可以安装 Yarn。这里给大家介绍两种常用的系统安装 Yarn， Mac 和 Windows。\n\n**Mac OS**\n\n首先，你的电脑上得先安装 Node.js，如果没有没有安装，请去[Node.js 官网](https://nodejs.org/en/)下载自行安装。\n\n- Homebrew\n\n[Homebrew（http://brew.sh/）](http://brew.sh/)，是 Mac 上强烈推荐的套件管理器，你可以通过 Homebrew 安装 Yarn，同时也可以通过 Homebrew 安装 Node。\n\n```bash\nbrew update\nbrew install\n```\n\n- 设置路径\n\n您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。\n\n在你的配置文件（如 .profile, .bashrc, .zshrc等）里面加上 `export PATH=\"$PATH:$HOME/.yarn/bin\"`。\n\n最后测试一下，Yarn 是否已经安装成功。\n\n```bash\nyarn --version\n```\n\n**Windows**\n\nWindows 安装 Yarn 可以通过以下两种方法安装。\n\n- 第一种，可以直接下载安装程序\n\nYarn 官网提供 .msi 安装文件供 Windows 用户进行下载安装。同样，你在安装 Yarn 之前，要先保证你已经安装了 Node.js。Yarn for Windows 最新安装包下载链接如下：\n\n[Download Installer](https://yarnpkg.com/latest.msi)\n\n- 第二种，通过 Chocolatey 安装\n\nChocolatey 是 Windows 的包管理器，您可以按照这些[说明](https://chocolatey.org/install)安装 Chocolatey 。\n\n好了，安装完了 Chocolatey 之后就开始安装 Yarn 吧，在控制台里面输入以下命令：\n\n```bash\nchoco install yarn\n```\n\n- 路径设置\n\n您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。将 `set PATH =％PATH％; C：\\。yarn \\ bin` 添加到您的 shell 环境中。\n\n### 用 NPM 的方式去安装 Yarn\n\n![这就很尴尬了](https://jangdelong.github.io/blog_img/images/yarn/2.jpg?v=2)\n\n这就很尴尬了，想要取代别人，却要通过别人安装，难道这就是传说中的青出于蓝而胜于蓝。😝虽然，这很尴尬，但比 Yarn 官网提供的那些安装方法真是爽的要死，另外，在我也是通过这种方式安装的，哎😌。来吧，我们开始通过 NPM 安装 Yarn吧。\n\n```bash\nnpm install -g yarn\n```\n\nMac 上安装成功截图如下：\n\n![Mac OS](https://jangdelong.github.io/blog_img/images/yarn/3.jpeg)\n\nWindows 上安装截图如下：\n\n![Windows](https://jangdelong.github.io/blog_img/images/yarn/4.png)\n\n![Windows](https://jangdelong.github.io/blog_img/images/yarn/5.png)\n\n### 使用\n\nYarn 的使用很简单，虽然和 NPM 相似，但是又有所区别。\n\n- 初始化新项目\n\n```bash\nyarn init\n```\n\n- 下载依赖包\n\n```bash\nyarn add [package]\nyarn add [package]@[version]\nyarn add [package]@[tag]\n```\n\n- 更新依赖包\n\n```bash\nyarn upgrade [package]\nyarn upgrade [package]@[version]\nyarn upgrade [package]@[tag]\n```\n\n- 删除依赖包\n\n```bash\nyarn remove [package]\n```\n\n- 下载项目所有的依赖包\n\n```bash\nyarn       # or yarn install\n```\n\n### NPM vs Yarn 速查表\n \n**你需要知道的**\n\n- `npm install === yarn` `install` 关键字可以省略。\n\n- `npm install react --save === yarn add react` React 包信息立即保存到你的package.json中。\n\n- `npm uninstall react --save === yarn remove react` `--save` 可以通过`npm config set save true` 在NPM中默认设置，但这对大多数开发人员来说是不明显的。 从`package.json` 中添加和删除是Yarn中的默认值。\n\n- `npm install react --save-dev === yarn add react --dev`\n\n- `npm update react --save === yarn upgrade react` \n强烈建议用 upgrade 来替代 update，因为这更能体现版本号变更。 \n\n- `npm install react --global === yarn global add react` 对于全局安装，我们都会很谨慎。\n\n**你已经知道的**\n\n- `npm init === yarn init`\n- `npm link === yarn link`\n- `npm outdated === yarn outdated`\n- `npm publish === yarn publish`\n- `npm run === yarn run`\n- `npm cache clean === yarn cache clean`\n- `npm login === yarn login (and logout)`\n- `npm test === yarn test`\n\n**Yarn 拥有，NPM 没有**\n\n- `yarn licenses` — 允许您检查依赖项的许可证。\n- `yarn licenses generate` — 自动创建许可证依赖性免责声明。\n- 支持 Emojis\n- 支持速度滚动条\n- 自动生成 lock 文件（.lock 保存所有依赖包的版本信息）\n- 为安全而生\n\n**NPM 拥有，Yarn 没有**\n\n- `npm xmas`\n- `npm visnup`\n\n### 以下载 React 为例，实践一下\n\n![yarn react](https://jangdelong.github.io/blog_img/images/yarn/6.png)\n\n### 参考\n\n- [https://yarnpkg.com/](https://yarnpkg.com/)\n- [https://github.com/yarnpkg/yarn](https://github.com/yarnpkg/yarn)\n- [http://www.tuicool.com/articles/eMRJVvU](http://www.tuicool.com/articles/eMRJVvU)\n- [https://zhuanlan.zhihu.com/p/22892675](https://zhuanlan.zhihu.com/p/22892675)\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n","slug":"yarn","published":1,"updated":"2016-10-17T00:00:00.000Z","_id":"cmduj3n4d005gk8sv1uzx2o1o","comments":1,"layout":"post","photos":[],"content":"<div class=\"toc\">\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#yarn-%E6%98%AF%E4%BB%80%E4%B9%88\">Yarn 是什么</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E7%94%A8-npm-%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8E%BB%E5%AE%89%E8%A3%85-yarn\">用 NPM 的方式去安装 Yarn</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#npm-vs-yarn-%E9%80%9F%E6%9F%A5%E8%A1%A8\">NPM vs Yarn 速查表</a></li>\n<li><a href=\"#%E4%BB%A5%E4%B8%8B%E8%BD%BD-react-%E4%B8%BA%E4%BE%8B%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B\">以下载 React 为例，实践一下</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n</div>\n\n<p>前阵子，Facebook 开源了一款新的 Node.js 包管理器 —- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的，不是吗？</p>\n<p>废话呢，就不多说了，直接进入主题。今天就来认识一下它，作为菜鸟的我，（wen）水（cai）平（hen）有（shui）限，写的不对的地方，欢迎指正。😝</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/1.png?v=2\" alt=\"yarn-kitten-full\"></p>\n<h3><span id=\"yarn-是什么\">Yarn 是什么</span></h3><p>Yarn 是 Node.js 代码的包管理器（类似 NPM ）。 它允许你使用世界各地开发人员开发的代码，当然也可以共享你的代码。 Yarn 的优点是速度快，同时可以做到安全，可靠这一点，所以你不必担心。Yarn 允许你使用其他开发人员的解决方案来解决不同的问题，使你更容易开发自己的产品。因为，Yarn 令开发者可以更加迅捷和从容地享受前人栽种的果实，进而集中精力打造自己的产品 —- 这才是更加重要的事情。</p>\n<p>在使用 Yarn 时，开发者们还像以前一样从 NPM 仓库那里获取资源，但安装速度更快，不同的机器的安装结果完全一致，甚至还可以在安全的离线环境中使用。代码通过称为包（有时称为模块）的东西共享。 包包含所有共享的代码以及描述包的package.json文件。</p>\n<p>在Facebook，Yarn 作为 NPM 的替代物以解决随着代码体积的不断增长和团队规模的不断壮大，在一致性、安全性和性能方面遇到的问题，现在以开源的方式发布这个成果，它是由 Exponent、 Google、Tilde 与 Facebook 合作完成的。</p>\n<h3><span id=\"安装\">安装</span></h3><p>在使用 Yarn 之前，需要先在你的系统上安装 Yarn。Yarn 提供各种平台的安装包，无论你是使用 Mac、Windows 还是 Linux，甚至 Unix，都可以安装 Yarn。这里给大家介绍两种常用的系统安装 Yarn， Mac 和 Windows。</p>\n<p><strong>Mac OS</strong></p>\n<p>首先，你的电脑上得先安装 Node.js，如果没有没有安装，请去<a href=\"https://nodejs.org/en/\">Node.js 官网</a>下载自行安装。</p>\n<ul>\n<li>Homebrew</li>\n</ul>\n<p><a href=\"http://brew.sh/\">Homebrew（http://brew.sh/）</a>，是 Mac 上强烈推荐的套件管理器，你可以通过 Homebrew 安装 Yarn，同时也可以通过 Homebrew 安装 Node。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置路径</li>\n</ul>\n<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。</p>\n<p>在你的配置文件（如 .profile, .bashrc, .zshrc等）里面加上 <code>export PATH=&quot;$PATH:$HOME/.yarn/bin&quot;</code>。</p>\n<p>最后测试一下，Yarn 是否已经安装成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>Windows</strong></p>\n<p>Windows 安装 Yarn 可以通过以下两种方法安装。</p>\n<ul>\n<li>第一种，可以直接下载安装程序</li>\n</ul>\n<p>Yarn 官网提供 .msi 安装文件供 Windows 用户进行下载安装。同样，你在安装 Yarn 之前，要先保证你已经安装了 Node.js。Yarn for Windows 最新安装包下载链接如下：</p>\n<p><a href=\"https://yarnpkg.com/latest.msi\">Download Installer</a></p>\n<ul>\n<li>第二种，通过 Chocolatey 安装</li>\n</ul>\n<p>Chocolatey 是 Windows 的包管理器，您可以按照这些<a href=\"https://chocolatey.org/install\">说明</a>安装 Chocolatey 。</p>\n<p>好了，安装完了 Chocolatey 之后就开始安装 Yarn 吧，在控制台里面输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install yarn</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路径设置</li>\n</ul>\n<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。将 <code>set PATH =％PATH％; C：\\。yarn \\ bin</code> 添加到您的 shell 环境中。</p>\n<h3><span id=\"用-npm-的方式去安装-yarn\">用 NPM 的方式去安装 Yarn</span></h3><p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/2.jpg?v=2\" alt=\"这就很尴尬了\"></p>\n<p>这就很尴尬了，想要取代别人，却要通过别人安装，难道这就是传说中的青出于蓝而胜于蓝。😝虽然，这很尴尬，但比 Yarn 官网提供的那些安装方法真是爽的要死，另外，在我也是通过这种方式安装的，哎😌。来吧，我们开始通过 NPM 安装 Yarn吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yarn</span><br></pre></td></tr></table></figure>\n\n<p>Mac 上安装成功截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/3.jpeg\" alt=\"Mac OS\"></p>\n<p>Windows 上安装截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/4.png\" alt=\"Windows\"></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/5.png\" alt=\"Windows\"></p>\n<h3><span id=\"使用\">使用</span></h3><p>Yarn 的使用很简单，虽然和 NPM 相似，但是又有所区别。</p>\n<ul>\n<li>初始化新项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add [package]</span><br><span class=\"line\">yarn add [package]@[version]</span><br><span class=\"line\">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn upgrade [package]</span><br><span class=\"line\">yarn upgrade [package]@[version]</span><br><span class=\"line\">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn remove [package]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载项目所有的依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn       <span class=\"comment\"># or yarn install</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"npm-vs-yarn-速查表\">NPM vs Yarn 速查表</span></h3><p><strong>你需要知道的</strong></p>\n<ul>\n<li><p><code>npm install === yarn</code> <code>install</code> 关键字可以省略。</p>\n</li>\n<li><p><code>npm install react --save === yarn add react</code> React 包信息立即保存到你的package.json中。</p>\n</li>\n<li><p><code>npm uninstall react --save === yarn remove react</code> <code>--save</code> 可以通过<code>npm config set save true</code> 在NPM中默认设置，但这对大多数开发人员来说是不明显的。 从<code>package.json</code> 中添加和删除是Yarn中的默认值。</p>\n</li>\n<li><p><code>npm install react --save-dev === yarn add react --dev</code></p>\n</li>\n<li><p><code>npm update react --save === yarn upgrade react</code><br>强烈建议用 upgrade 来替代 update，因为这更能体现版本号变更。 </p>\n</li>\n<li><p><code>npm install react --global === yarn global add react</code> 对于全局安装，我们都会很谨慎。</p>\n</li>\n</ul>\n<p><strong>你已经知道的</strong></p>\n<ul>\n<li><code>npm init === yarn init</code></li>\n<li><code>npm link === yarn link</code></li>\n<li><code>npm outdated === yarn outdated</code></li>\n<li><code>npm publish === yarn publish</code></li>\n<li><code>npm run === yarn run</code></li>\n<li><code>npm cache clean === yarn cache clean</code></li>\n<li><code>npm login === yarn login (and logout)</code></li>\n<li><code>npm test === yarn test</code></li>\n</ul>\n<p><strong>Yarn 拥有，NPM 没有</strong></p>\n<ul>\n<li><code>yarn licenses</code> — 允许您检查依赖项的许可证。</li>\n<li><code>yarn licenses generate</code> — 自动创建许可证依赖性免责声明。</li>\n<li>支持 Emojis</li>\n<li>支持速度滚动条</li>\n<li>自动生成 lock 文件（.lock 保存所有依赖包的版本信息）</li>\n<li>为安全而生</li>\n</ul>\n<p><strong>NPM 拥有，Yarn 没有</strong></p>\n<ul>\n<li><code>npm xmas</code></li>\n<li><code>npm visnup</code></li>\n</ul>\n<h3><span id=\"以下载-react-为例实践一下\">以下载 React 为例，实践一下</span></h3><p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/6.png\" alt=\"yarn react\"></p>\n<h3><span id=\"参考\">参考</span></h3><ul>\n<li><a href=\"https://yarnpkg.com/\">https://yarnpkg.com/</a></li>\n<li><a href=\"https://github.com/yarnpkg/yarn\">https://github.com/yarnpkg/yarn</a></li>\n<li><a href=\"http://www.tuicool.com/articles/eMRJVvU\">http://www.tuicool.com/articles/eMRJVvU</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22892675\">https://zhuanlan.zhihu.com/p/22892675</a></li>\n</ul>\n","excerpt":"","more":"<div class=\"tocStart\"></div>\n\n<!-- toc -->\n\n<ul>\n<li><a href=\"#yarn-%E6%98%AF%E4%BB%80%E4%B9%88\">Yarn 是什么</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E7%94%A8-npm-%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8E%BB%E5%AE%89%E8%A3%85-yarn\">用 NPM 的方式去安装 Yarn</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n<li><a href=\"#npm-vs-yarn-%E9%80%9F%E6%9F%A5%E8%A1%A8\">NPM vs Yarn 速查表</a></li>\n<li><a href=\"#%E4%BB%A5%E4%B8%8B%E8%BD%BD-react-%E4%B8%BA%E4%BE%8B%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B\">以下载 React 为例，实践一下</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n<!-- tocstop -->\n\n<div class=\"tocEnd\"></div>\n\n<p>前阵子，Facebook 开源了一款新的 Node.js 包管理器 —- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的，不是吗？</p>\n<p>废话呢，就不多说了，直接进入主题。今天就来认识一下它，作为菜鸟的我，（wen）水（cai）平（hen）有（shui）限，写的不对的地方，欢迎指正。😝</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/1.png?v=2\" alt=\"yarn-kitten-full\"></p>\n<h3 id=\"Yarn-是什么\"><a href=\"#Yarn-是什么\" class=\"headerlink\" title=\"Yarn 是什么\"></a>Yarn 是什么</h3><p>Yarn 是 Node.js 代码的包管理器（类似 NPM ）。 它允许你使用世界各地开发人员开发的代码，当然也可以共享你的代码。 Yarn 的优点是速度快，同时可以做到安全，可靠这一点，所以你不必担心。Yarn 允许你使用其他开发人员的解决方案来解决不同的问题，使你更容易开发自己的产品。因为，Yarn 令开发者可以更加迅捷和从容地享受前人栽种的果实，进而集中精力打造自己的产品 —- 这才是更加重要的事情。</p>\n<p>在使用 Yarn 时，开发者们还像以前一样从 NPM 仓库那里获取资源，但安装速度更快，不同的机器的安装结果完全一致，甚至还可以在安全的离线环境中使用。代码通过称为包（有时称为模块）的东西共享。 包包含所有共享的代码以及描述包的package.json文件。</p>\n<p>在Facebook，Yarn 作为 NPM 的替代物以解决随着代码体积的不断增长和团队规模的不断壮大，在一致性、安全性和性能方面遇到的问题，现在以开源的方式发布这个成果，它是由 Exponent、 Google、Tilde 与 Facebook 合作完成的。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在使用 Yarn 之前，需要先在你的系统上安装 Yarn。Yarn 提供各种平台的安装包，无论你是使用 Mac、Windows 还是 Linux，甚至 Unix，都可以安装 Yarn。这里给大家介绍两种常用的系统安装 Yarn， Mac 和 Windows。</p>\n<p><strong>Mac OS</strong></p>\n<p>首先，你的电脑上得先安装 Node.js，如果没有没有安装，请去<a href=\"https://nodejs.org/en/\">Node.js 官网</a>下载自行安装。</p>\n<ul>\n<li>Homebrew</li>\n</ul>\n<p><a href=\"http://brew.sh/\">Homebrew（http://brew.sh/）</a>，是 Mac 上强烈推荐的套件管理器，你可以通过 Homebrew 安装 Yarn，同时也可以通过 Homebrew 安装 Node。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置路径</li>\n</ul>\n<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。</p>\n<p>在你的配置文件（如 .profile, .bashrc, .zshrc等）里面加上 <code>export PATH=&quot;$PATH:$HOME/.yarn/bin&quot;</code>。</p>\n<p>最后测试一下，Yarn 是否已经安装成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>Windows</strong></p>\n<p>Windows 安装 Yarn 可以通过以下两种方法安装。</p>\n<ul>\n<li>第一种，可以直接下载安装程序</li>\n</ul>\n<p>Yarn 官网提供 .msi 安装文件供 Windows 用户进行下载安装。同样，你在安装 Yarn 之前，要先保证你已经安装了 Node.js。Yarn for Windows 最新安装包下载链接如下：</p>\n<p><a href=\"https://yarnpkg.com/latest.msi\">Download Installer</a></p>\n<ul>\n<li>第二种，通过 Chocolatey 安装</li>\n</ul>\n<p>Chocolatey 是 Windows 的包管理器，您可以按照这些<a href=\"https://chocolatey.org/install\">说明</a>安装 Chocolatey 。</p>\n<p>好了，安装完了 Chocolatey 之后就开始安装 Yarn 吧，在控制台里面输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install yarn</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路径设置</li>\n</ul>\n<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。将 <code>set PATH =％PATH％; C：\\。yarn \\ bin</code> 添加到您的 shell 环境中。</p>\n<h3 id=\"用-NPM-的方式去安装-Yarn\"><a href=\"#用-NPM-的方式去安装-Yarn\" class=\"headerlink\" title=\"用 NPM 的方式去安装 Yarn\"></a>用 NPM 的方式去安装 Yarn</h3><p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/2.jpg?v=2\" alt=\"这就很尴尬了\"></p>\n<p>这就很尴尬了，想要取代别人，却要通过别人安装，难道这就是传说中的青出于蓝而胜于蓝。😝虽然，这很尴尬，但比 Yarn 官网提供的那些安装方法真是爽的要死，另外，在我也是通过这种方式安装的，哎😌。来吧，我们开始通过 NPM 安装 Yarn吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yarn</span><br></pre></td></tr></table></figure>\n\n<p>Mac 上安装成功截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/3.jpeg\" alt=\"Mac OS\"></p>\n<p>Windows 上安装截图如下：</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/4.png\" alt=\"Windows\"></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/5.png\" alt=\"Windows\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Yarn 的使用很简单，虽然和 NPM 相似，但是又有所区别。</p>\n<ul>\n<li>初始化新项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add [package]</span><br><span class=\"line\">yarn add [package]@[version]</span><br><span class=\"line\">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn upgrade [package]</span><br><span class=\"line\">yarn upgrade [package]@[version]</span><br><span class=\"line\">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn remove [package]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载项目所有的依赖包</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn       <span class=\"comment\"># or yarn install</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NPM-vs-Yarn-速查表\"><a href=\"#NPM-vs-Yarn-速查表\" class=\"headerlink\" title=\"NPM vs Yarn 速查表\"></a>NPM vs Yarn 速查表</h3><p><strong>你需要知道的</strong></p>\n<ul>\n<li><p><code>npm install === yarn</code> <code>install</code> 关键字可以省略。</p>\n</li>\n<li><p><code>npm install react --save === yarn add react</code> React 包信息立即保存到你的package.json中。</p>\n</li>\n<li><p><code>npm uninstall react --save === yarn remove react</code> <code>--save</code> 可以通过<code>npm config set save true</code> 在NPM中默认设置，但这对大多数开发人员来说是不明显的。 从<code>package.json</code> 中添加和删除是Yarn中的默认值。</p>\n</li>\n<li><p><code>npm install react --save-dev === yarn add react --dev</code></p>\n</li>\n<li><p><code>npm update react --save === yarn upgrade react</code><br>强烈建议用 upgrade 来替代 update，因为这更能体现版本号变更。 </p>\n</li>\n<li><p><code>npm install react --global === yarn global add react</code> 对于全局安装，我们都会很谨慎。</p>\n</li>\n</ul>\n<p><strong>你已经知道的</strong></p>\n<ul>\n<li><code>npm init === yarn init</code></li>\n<li><code>npm link === yarn link</code></li>\n<li><code>npm outdated === yarn outdated</code></li>\n<li><code>npm publish === yarn publish</code></li>\n<li><code>npm run === yarn run</code></li>\n<li><code>npm cache clean === yarn cache clean</code></li>\n<li><code>npm login === yarn login (and logout)</code></li>\n<li><code>npm test === yarn test</code></li>\n</ul>\n<p><strong>Yarn 拥有，NPM 没有</strong></p>\n<ul>\n<li><code>yarn licenses</code> — 允许您检查依赖项的许可证。</li>\n<li><code>yarn licenses generate</code> — 自动创建许可证依赖性免责声明。</li>\n<li>支持 Emojis</li>\n<li>支持速度滚动条</li>\n<li>自动生成 lock 文件（.lock 保存所有依赖包的版本信息）</li>\n<li>为安全而生</li>\n</ul>\n<p><strong>NPM 拥有，Yarn 没有</strong></p>\n<ul>\n<li><code>npm xmas</code></li>\n<li><code>npm visnup</code></li>\n</ul>\n<h3 id=\"以下载-React-为例，实践一下\"><a href=\"#以下载-React-为例，实践一下\" class=\"headerlink\" title=\"以下载 React 为例，实践一下\"></a>以下载 React 为例，实践一下</h3><p><img src=\"https://jangdelong.github.io/blog_img/images/yarn/6.png\" alt=\"yarn react\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://yarnpkg.com/\">https://yarnpkg.com/</a></li>\n<li><a href=\"https://github.com/yarnpkg/yarn\">https://github.com/yarnpkg/yarn</a></li>\n<li><a href=\"http://www.tuicool.com/articles/eMRJVvU\">http://www.tuicool.com/articles/eMRJVvU</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22892675\">https://zhuanlan.zhihu.com/p/22892675</a></li>\n</ul>\n"},{"title":"【每日一题】206. 反转链表","author":"Jelon","date":"2020-05-20T00:00:00.000Z","thumbnail":null,"blogexcerpt":"反转一个单链表。示例：输入：1->2->3->4->5->NULL 输出：5->4->3->2->1->NULL 进阶：你可以迭代或递归地反转链表。你能否用两种方法解决这道题...","_content":"\n反转一个单链表。\n\n**示例:**\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n**进阶:**\n\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n// 双指针\nvar reverseList = function(head) {\n  var prev = null\n  var cur = head\n  var tmp = null\n  while (cur) {\n    tmp = cur.next\n    cur.next = prev\n    prev = cur\n    cur = tmp\n  }\n\n  return prev\n};\n```\n\n##### 参考思路\n\n双指针\n\n![双指针解法](https://jangdelong.github.io/blog_img/images/leetcode-206/1.gif)\n","source":"_posts/leetcode-206.md","raw":"---\ntitle: 【每日一题】206. 反转链表\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-20\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 反转一个单链表。示例：输入：1->2->3->4->5->NULL 输出：5->4->3->2->1->NULL 进阶：你可以迭代或递归地反转链表。你能否用两种方法解决这道题...\n\n---\n\n反转一个单链表。\n\n**示例:**\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n**进阶:**\n\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n// 双指针\nvar reverseList = function(head) {\n  var prev = null\n  var cur = head\n  var tmp = null\n  while (cur) {\n    tmp = cur.next\n    cur.next = prev\n    prev = cur\n    cur = tmp\n  }\n\n  return prev\n};\n```\n\n##### 参考思路\n\n双指针\n\n![双指针解法](https://jangdelong.github.io/blog_img/images/leetcode-206/1.gif)\n","slug":"leetcode-206","published":1,"updated":"2020-05-20T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n4f005jk8svca4y9i8x","content":"<p>反转一个单链表。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>进阶:</strong></p>\n<p>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 双指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">    tmp = cur.next</span><br><span class=\"line\">    cur.next = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\">    cur = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>双指针</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-206/1.gif\" alt=\"双指针解法\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>反转一个单链表。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<p><strong>进阶:</strong></p>\n<p>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 双指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cur = head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">    tmp = cur.next</span><br><span class=\"line\">    cur.next = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\">    cur = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参考思路\"><a href=\"#参考思路\" class=\"headerlink\" title=\"参考思路\"></a>参考思路</h5><p>双指针</p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-206/1.gif\" alt=\"双指针解法\"></p>\n"},{"title":"【每日一题】141. 环形链表","author":"Jelon","date":"2020-05-07T00:00:00.000Z","thumbnail":null,"blogexcerpt":"给定一个链表，判断链表中是否有环。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。示例 1：输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点...","_content":"\n给定一个链表，判断链表中是否有环。\n\n为了表示给定链表中的环，我们使用整数 `pos` 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 `pos` 是 `-1`，则在该链表中没有环。\n\n\n**示例 1：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png)\n\n```\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n```\n\n\n**示例 2：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png)\n\n```\n输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n```\n\n\n**示例 3：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test3.png)\n\n```\n输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n```\n\n\n \n\n**进阶：**\n\n你能用 O(1)（即，常量）内存解决此问题吗？\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n  // 快慢指针\n  let slow = head;\n  let fast = head;\n\n  while (slow && fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n    if (slow === fast) return true; \n  }\n\n  return false;\n};\n```\n\n##### 解题思路\n\n通过使用具有 不同速度 的快、慢两个指针遍历链表，空间复杂度可以被降低至 O(1)。慢指针每次移动一步，而快指针每次移动两步。\n\n如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。\n\n现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。这是为什么呢？考虑下面这种情况（记作情况 A）- 假如快跑者只落后慢跑者一步，在下一次迭代中，它们就会分别跑了一步或两步并相遇。\n\n- 时间复杂度：O(n)；\n- 空间复杂度：O(1)。\n","source":"_posts/leetcode-141.md","raw":"---\ntitle: 【每日一题】141. 环形链表\ncategories:\n  - 算法练习\nauthor: Jelon\ndate: 2020-05-07\ntags:\n  - LeetCode\n  - 算法\nthumbnail:\nblogexcerpt: 给定一个链表，判断链表中是否有环。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。示例 1：输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点...\n\n---\n\n给定一个链表，判断链表中是否有环。\n\n为了表示给定链表中的环，我们使用整数 `pos` 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 `pos` 是 `-1`，则在该链表中没有环。\n\n\n**示例 1：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png)\n\n```\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n```\n\n\n**示例 2：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png)\n\n```\n输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n```\n\n\n**示例 3：**\n\n![https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png](https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test3.png)\n\n```\n输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n```\n\n\n \n\n**进阶：**\n\n你能用 O(1)（即，常量）内存解决此问题吗？\n\n##### 个人解答\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n  // 快慢指针\n  let slow = head;\n  let fast = head;\n\n  while (slow && fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n    if (slow === fast) return true; \n  }\n\n  return false;\n};\n```\n\n##### 解题思路\n\n通过使用具有 不同速度 的快、慢两个指针遍历链表，空间复杂度可以被降低至 O(1)。慢指针每次移动一步，而快指针每次移动两步。\n\n如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。\n\n现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。这是为什么呢？考虑下面这种情况（记作情况 A）- 假如快跑者只落后慢跑者一步，在下一次迭代中，它们就会分别跑了一步或两步并相遇。\n\n- 时间复杂度：O(n)；\n- 空间复杂度：O(1)。\n","slug":"leetcode-141","published":1,"updated":"2020-05-07T00:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmduj3n4g005mk8sv5zgdcw9w","content":"<p>给定一个链表，判断链表中是否有环。</p>\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,-<span class=\"number\">4</span>], <span class=\"attr\">pos</span> = <span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>], <span class=\"attr\">pos</span> = <span class=\"number\">0</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test3.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">1</span>], <span class=\"attr\">pos</span> = -<span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br><span class=\"line\">解释：链表中没有环。</span><br></pre></td></tr></table></figure>\n\n\n<p> </p>\n<p><strong>进阶：</strong></p>\n<p>你能用 O(1)（即，常量）内存解决此问题吗？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 快慢指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow &amp;&amp; fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow === fast) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>通过使用具有 不同速度 的快、慢两个指针遍历链表，空间复杂度可以被降低至 O(1)。慢指针每次移动一步，而快指针每次移动两步。</p>\n<p>如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。</p>\n<p>现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。这是为什么呢？考虑下面这种情况（记作情况 A）- 假如快跑者只落后慢跑者一步，在下一次迭代中，它们就会分别跑了一步或两步并相遇。</p>\n<ul>\n<li>时间复杂度：O(n)；</li>\n<li>空间复杂度：O(1)。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个链表，判断链表中是否有环。</p>\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,-<span class=\"number\">4</span>], <span class=\"attr\">pos</span> = <span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>], <span class=\"attr\">pos</span> = <span class=\"number\">0</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test3.png\" alt=\"https://jangdelong.github.io/blog_img/images/leetcode-141/circularlinkedlist_test2.png\"></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"attr\">head</span> = [<span class=\"number\">1</span>], <span class=\"attr\">pos</span> = -<span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br><span class=\"line\">解释：链表中没有环。</span><br></pre></td></tr></table></figure>\n\n\n<p> </p>\n<p><strong>进阶：</strong></p>\n<p>你能用 O(1)（即，常量）内存解决此问题吗？</p>\n<h5 id=\"个人解答\"><a href=\"#个人解答\" class=\"headerlink\" title=\"个人解答\"></a>个人解答</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 快慢指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow &amp;&amp; fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow === fast) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>通过使用具有 不同速度 的快、慢两个指针遍历链表，空间复杂度可以被降低至 O(1)。慢指针每次移动一步，而快指针每次移动两步。</p>\n<p>如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。</p>\n<p>现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。这是为什么呢？考虑下面这种情况（记作情况 A）- 假如快跑者只落后慢跑者一步，在下一次迭代中，它们就会分别跑了一步或两步并相遇。</p>\n<ul>\n<li>时间复杂度：O(n)；</li>\n<li>空间复杂度：O(1)。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmduj3n1x0008k8sv9v29amw7","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n25000ek8svhwjo6tl3"},{"post_id":"cmduj3n1j0001k8sv3wpxelhb","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n27000ik8svds9p5q70"},{"post_id":"cmduj3n1z0009k8sv75r9hnvz","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n29000kk8sv6qj0hhox"},{"post_id":"cmduj3n23000ck8sv07kk7p6w","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2b000nk8sv5v05471i"},{"post_id":"cmduj3n1q0003k8sv26bsaf25","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2c000qk8svepyhfmh7"},{"post_id":"cmduj3n24000dk8sv1kkxdo54","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2f000uk8sveu502pbt"},{"post_id":"cmduj3n27000hk8sv2klv0ipz","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2g000xk8svc9fv8or1"},{"post_id":"cmduj3n1u0007k8sv1cx7f3iy","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2i000zk8sv4a4y2sn7"},{"post_id":"cmduj3n28000jk8svdd9ca3ii","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2k0013k8sv9i65gnme"},{"post_id":"cmduj3n2a000mk8sv3j7rcv2o","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2l0017k8svekjb4zfq"},{"post_id":"cmduj3n2b000pk8svh2zi9r2u","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2m001ak8sv3x3h6yz7"},{"post_id":"cmduj3n2e000tk8sv29wff89o","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2n001dk8svc5vbfw8p"},{"post_id":"cmduj3n2g000wk8sv5s6f5731","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2o001gk8sv2ccjfgbr"},{"post_id":"cmduj3n2j0012k8sv2p700sw4","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2q001jk8sv2o4efkl0"},{"post_id":"cmduj3n2l0016k8svbmmlfww0","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n2r001mk8sv76t21ynb"},{"post_id":"cmduj3n2m0019k8svfnhldfh1","category_id":"cmduj3n2k0014k8sv9a8p3exv","_id":"cmduj3n2s001qk8sv64nl21q4"},{"post_id":"cmduj3n2h000yk8sv29ete0ga","category_id":"cmduj3n2k0014k8sv9a8p3exv","_id":"cmduj3n2t001tk8svgymbguhl"},{"post_id":"cmduj3n2q001lk8svanc94z4j","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n2w001xk8svfrjd16rj"},{"post_id":"cmduj3n2n001ck8sv3c0od7l0","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n2x001zk8svfp6dcunc"},{"post_id":"cmduj3n2r001ok8svf6k4bk0a","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n2z0022k8sv3x3s4b29"},{"post_id":"cmduj3n2s001sk8sv07jy5env","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n300025k8svgu6kejyr"},{"post_id":"cmduj3n2o001fk8sv28nja3lo","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n310029k8svbhf136cw"},{"post_id":"cmduj3n2v001vk8svd2vma0bx","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n32002bk8sv0xipc9vh"},{"post_id":"cmduj3n2x001yk8svbqvr97hn","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n33002ek8svflntgsq8"},{"post_id":"cmduj3n2p001ik8sv3lo6dvfm","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n34002hk8sv3d1a55gf"},{"post_id":"cmduj3n2y0021k8svbhg08d3w","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n35002kk8sv18vv1ibh"},{"post_id":"cmduj3n300024k8sv5pov6b7h","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n37002nk8svbw7m4w86"},{"post_id":"cmduj3n310028k8svcjjf6s2x","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n38002pk8sv6vz373oi"},{"post_id":"cmduj3n32002ak8sv3z2rgxa6","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n39002sk8svbhdb0ad6"},{"post_id":"cmduj3n32002dk8sv6eyvfly7","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3g002vk8sv4yyg0b25"},{"post_id":"cmduj3n33002gk8sv3oicb1lk","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3i002zk8sv673aazv0"},{"post_id":"cmduj3n34002jk8svct9h78zi","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3i0032k8svbetlfe5w"},{"post_id":"cmduj3n36002mk8sv7s2gfmuq","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3k0035k8svfin21pg7"},{"post_id":"cmduj3n37002ok8sv9fbq1qg7","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3l0038k8sv68ejff1i"},{"post_id":"cmduj3n38002rk8sv0z177e0y","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3m003bk8sv4lnc718b"},{"post_id":"cmduj3n3a002uk8sv0tbn8njl","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3n003ek8svausjauxm"},{"post_id":"cmduj3n3h002yk8sv6n29hdj9","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3n003hk8svbekp9kry"},{"post_id":"cmduj3n3i0031k8sv9186fdzy","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3o003kk8svavoz5v69"},{"post_id":"cmduj3n3j0034k8sv7he13kii","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3p003nk8sv1tnqckg8"},{"post_id":"cmduj3n3k0037k8sveef7fop5","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3q003pk8sv0gm8cxeg"},{"post_id":"cmduj3n3l003ak8sv0uav9ldj","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3s003rk8svhhedcuwo"},{"post_id":"cmduj3n3m003dk8sv790930vw","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3t003vk8sv52w1cxid"},{"post_id":"cmduj3n3n003gk8sv3b4v19vi","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3t003yk8sv5vzy6x67"},{"post_id":"cmduj3n3o003jk8sv6ugl75bv","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3u0041k8sveb0ka1ry"},{"post_id":"cmduj3n3p003mk8sv344h1ssi","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3v0043k8svamb22bv1"},{"post_id":"cmduj3n3p003ok8svb2fb9ejq","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n3x0046k8svbl9k5w6w"},{"post_id":"cmduj3n3q003qk8sv080xeq4k","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n3x0049k8sv19lhe69v"},{"post_id":"cmduj3n3s003uk8svgq8c6td5","category_id":"cmduj3n2k0014k8sv9a8p3exv","_id":"cmduj3n3y004dk8sv0hv50lr8"},{"post_id":"cmduj3n3t003xk8sv5j517b27","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n3z004fk8sv849phhz6"},{"post_id":"cmduj3n3u0040k8svdod6eosl","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n40004ik8svbjfl1jga"},{"post_id":"cmduj3n3u0042k8svdtr952zd","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n41004lk8sv3yqn80ln"},{"post_id":"cmduj3n3w0045k8sv5rkm03tm","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n42004ok8sv6gvnfwbp"},{"post_id":"cmduj3n3x0048k8svba39a42g","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n43004rk8sv1f818m4h"},{"post_id":"cmduj3n3y004ck8svgacr6q5w","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n44004tk8sv8cer0q9k"},{"post_id":"cmduj3n3z004ek8svhwpghsqx","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n45004wk8sveqyp6k6f"},{"post_id":"cmduj3n40004hk8sv910femsy","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n45004zk8sv898tffuf"},{"post_id":"cmduj3n41004kk8svb0fr5aj5","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n470053k8svc94bb10b"},{"post_id":"cmduj3n41004nk8svaivdg42r","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n480055k8sv6g3n9rcv"},{"post_id":"cmduj3n42004qk8sv8z9nghkt","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4a0058k8sv0tmg2v1t"},{"post_id":"cmduj3n43004sk8sv3vetdfe3","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4b005bk8sv86u7gbp2"},{"post_id":"cmduj3n44004vk8sv3omcepqh","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4d005fk8sv5fbbdsnb"},{"post_id":"cmduj3n45004yk8sv8shg45wo","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4e005hk8svfvy46grt"},{"post_id":"cmduj3n460052k8sv22ia0gdv","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4f005kk8svd69r0nfg"},{"post_id":"cmduj3n470054k8sv71v92lsl","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4g005nk8sv3hal4mjg"},{"post_id":"cmduj3n490057k8sva3idfixg","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4h005pk8sv3ylmckb4"},{"post_id":"cmduj3n4a005ak8sv2em076kr","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4h005rk8svey254ipu"},{"post_id":"cmduj3n4b005ek8svfolr2bbc","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4h005sk8svhujb2006"},{"post_id":"cmduj3n4d005gk8sv1uzx2o1o","category_id":"cmduj3n1r0004k8sv5q76087d","_id":"cmduj3n4h005uk8svcu2d0kdc"},{"post_id":"cmduj3n4f005jk8svca4y9i8x","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n4i005wk8svb320e5gc"},{"post_id":"cmduj3n4g005mk8sv5zgdcw9w","category_id":"cmduj3n2p001hk8sv3osw0m1k","_id":"cmduj3n4i005zk8sv8ni63szl"}],"PostTag":[{"post_id":"cmduj3n1j0001k8sv3wpxelhb","tag_id":"cmduj3n1t0005k8svb5tg3kbq","_id":"cmduj3n2b000ok8sv9su33ae4"},{"post_id":"cmduj3n1j0001k8sv3wpxelhb","tag_id":"cmduj3n20000bk8svepq5b9nu","_id":"cmduj3n2d000rk8sv9ew71blu"},{"post_id":"cmduj3n1j0001k8sv3wpxelhb","tag_id":"cmduj3n26000gk8sv5152c5fy","_id":"cmduj3n2g000vk8sv2n0d175l"},{"post_id":"cmduj3n1q0003k8sv26bsaf25","tag_id":"cmduj3n29000lk8sv3ojv1hpg","_id":"cmduj3n2j0011k8sv9gun2x6t"},{"post_id":"cmduj3n1q0003k8sv26bsaf25","tag_id":"cmduj3n2d000sk8svhczc3njq","_id":"cmduj3n2k0015k8sv9tt92mu5"},{"post_id":"cmduj3n1u0007k8sv1cx7f3iy","tag_id":"cmduj3n2i0010k8svfue540wu","_id":"cmduj3n2m001bk8svbd9rf0y2"},{"post_id":"cmduj3n1x0008k8sv9v29amw7","tag_id":"cmduj3n2l0018k8svebfn4pm0","_id":"cmduj3n2r001nk8svay2d1jmi"},{"post_id":"cmduj3n1x0008k8sv9v29amw7","tag_id":"cmduj3n2n001ek8sv4dc6bnc6","_id":"cmduj3n2s001rk8svhpahbyns"},{"post_id":"cmduj3n1z0009k8sv75r9hnvz","tag_id":"cmduj3n2q001kk8svahihhtx6","_id":"cmduj3n2z0023k8sv2xg78cky"},{"post_id":"cmduj3n1z0009k8sv75r9hnvz","tag_id":"cmduj3n2u001uk8svbpxvb9ld","_id":"cmduj3n300026k8sv50stcmep"},{"post_id":"cmduj3n23000ck8sv07kk7p6w","tag_id":"cmduj3n2x0020k8svaw3g1dmr","_id":"cmduj3n33002fk8sv434m5dpd"},{"post_id":"cmduj3n23000ck8sv07kk7p6w","tag_id":"cmduj3n310027k8svcp5hh8wv","_id":"cmduj3n34002ik8sv76nv5ele"},{"post_id":"cmduj3n24000dk8sv1kkxdo54","tag_id":"cmduj3n32002ck8sv3tm34eb7","_id":"cmduj3n39002tk8sv4ul5h6oi"},{"post_id":"cmduj3n24000dk8sv1kkxdo54","tag_id":"cmduj3n36002lk8sv2yuw36z8","_id":"cmduj3n3g002wk8svc9ox5vsy"},{"post_id":"cmduj3n27000hk8sv2klv0ipz","tag_id":"cmduj3n38002qk8svetfmfpab","_id":"cmduj3n3i0030k8svd9ytclrt"},{"post_id":"cmduj3n28000jk8svdd9ca3ii","tag_id":"cmduj3n38002qk8svetfmfpab","_id":"cmduj3n3k0036k8sv155wh061"},{"post_id":"cmduj3n2a000mk8sv3j7rcv2o","tag_id":"cmduj3n38002qk8svetfmfpab","_id":"cmduj3n3m003ck8sv1787gvzq"},{"post_id":"cmduj3n2b000pk8svh2zi9r2u","tag_id":"cmduj3n2q001kk8svahihhtx6","_id":"cmduj3n3o003ik8svcqpfhzk3"},{"post_id":"cmduj3n2e000tk8sv29wff89o","tag_id":"cmduj3n3n003fk8sv43ecap8n","_id":"cmduj3n3s003tk8svh2ydat5i"},{"post_id":"cmduj3n2e000tk8sv29wff89o","tag_id":"cmduj3n3o003lk8sv6gvk3dzi","_id":"cmduj3n3t003wk8sv6lg8dxqn"},{"post_id":"cmduj3n2g000wk8sv5s6f5731","tag_id":"cmduj3n3s003sk8svebli7piz","_id":"cmduj3n3x0047k8svgwd43sa6"},{"post_id":"cmduj3n2g000wk8sv5s6f5731","tag_id":"cmduj3n3u003zk8svf5syapt1","_id":"cmduj3n3y004ak8sv3u3q13vs"},{"post_id":"cmduj3n2h000yk8sv29ete0ga","tag_id":"cmduj3n3v0044k8sv3q9x6lsf","_id":"cmduj3n41004jk8svbe98fbna"},{"post_id":"cmduj3n2h000yk8sv29ete0ga","tag_id":"cmduj3n32002ck8sv3tm34eb7","_id":"cmduj3n41004mk8svaursa3vu"},{"post_id":"cmduj3n2j0012k8sv2p700sw4","tag_id":"cmduj3n40004gk8sv1jtt7z0b","_id":"cmduj3n45004xk8svfhb28wq9"},{"post_id":"cmduj3n2j0012k8sv2p700sw4","tag_id":"cmduj3n42004pk8sv2oi37rzv","_id":"cmduj3n460050k8svhtu120sj"},{"post_id":"cmduj3n2l0016k8svbmmlfww0","tag_id":"cmduj3n2q001kk8svahihhtx6","_id":"cmduj3n4a0059k8svbokh8fvu"},{"post_id":"cmduj3n2l0016k8svbmmlfww0","tag_id":"cmduj3n2n001ek8sv4dc6bnc6","_id":"cmduj3n4b005ck8sv3md49a9y"},{"post_id":"cmduj3n2m0019k8svfnhldfh1","tag_id":"cmduj3n490056k8sv2v8mfopb","_id":"cmduj3n4g005lk8svb32b9oka"},{"post_id":"cmduj3n2m0019k8svfnhldfh1","tag_id":"cmduj3n4b005dk8sv8cr7bbyi","_id":"cmduj3n4g005ok8sv0kdpgae3"},{"post_id":"cmduj3n2n001ck8sv3c0od7l0","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4i005vk8sv2mmqdic7"},{"post_id":"cmduj3n2n001ck8sv3c0od7l0","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4i005xk8svd4s065gk"},{"post_id":"cmduj3n2o001fk8sv28nja3lo","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4i0061k8svggkz8i16"},{"post_id":"cmduj3n2o001fk8sv28nja3lo","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4i0062k8svfm63b93i"},{"post_id":"cmduj3n2p001ik8sv3lo6dvfm","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4j0065k8svf812gj7r"},{"post_id":"cmduj3n2p001ik8sv3lo6dvfm","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4j0066k8svebbf4jx0"},{"post_id":"cmduj3n2q001lk8svanc94z4j","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4k0069k8svdh6udf5p"},{"post_id":"cmduj3n2q001lk8svanc94z4j","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4k006ak8sv491v386z"},{"post_id":"cmduj3n2r001ok8svf6k4bk0a","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4l006dk8svburd5lo7"},{"post_id":"cmduj3n2r001ok8svf6k4bk0a","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4l006ek8sva2207icy"},{"post_id":"cmduj3n2s001sk8sv07jy5env","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4l006hk8sv9kyv6grr"},{"post_id":"cmduj3n2s001sk8sv07jy5env","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4l006ik8svdydl85lc"},{"post_id":"cmduj3n2v001vk8svd2vma0bx","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4m006lk8sv2pqv7vp6"},{"post_id":"cmduj3n2v001vk8svd2vma0bx","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4m006mk8sv6yj56eym"},{"post_id":"cmduj3n2x001yk8svbqvr97hn","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4n006pk8sv8hcibyne"},{"post_id":"cmduj3n2x001yk8svbqvr97hn","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4n006qk8svfk9t68nb"},{"post_id":"cmduj3n2y0021k8svbhg08d3w","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4n006tk8sv6pcd0nx8"},{"post_id":"cmduj3n2y0021k8svbhg08d3w","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4n006uk8svdtqycim8"},{"post_id":"cmduj3n300024k8sv5pov6b7h","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4q006xk8svfexcds9x"},{"post_id":"cmduj3n300024k8sv5pov6b7h","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4q006yk8sv4mfp95z8"},{"post_id":"cmduj3n310028k8svcjjf6s2x","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4q0071k8sveaaf9h9q"},{"post_id":"cmduj3n310028k8svcjjf6s2x","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4r0072k8sv7sqxeqb9"},{"post_id":"cmduj3n32002ak8sv3z2rgxa6","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4r0075k8sv9ygc23b9"},{"post_id":"cmduj3n32002ak8sv3z2rgxa6","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4r0076k8svgr3tb9z3"},{"post_id":"cmduj3n32002dk8sv6eyvfly7","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4s0079k8sv2a3kfv8k"},{"post_id":"cmduj3n32002dk8sv6eyvfly7","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4s007ak8sv4qu65z6f"},{"post_id":"cmduj3n33002gk8sv3oicb1lk","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4u007dk8svc2np6t8d"},{"post_id":"cmduj3n33002gk8sv3oicb1lk","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4u007ek8svd4avgmqu"},{"post_id":"cmduj3n34002jk8svct9h78zi","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4v007hk8svhs097gvx"},{"post_id":"cmduj3n34002jk8svct9h78zi","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4v007ik8svde6yaj9w"},{"post_id":"cmduj3n36002mk8sv7s2gfmuq","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4w007lk8svgui80axu"},{"post_id":"cmduj3n36002mk8sv7s2gfmuq","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4w007mk8sv5qji0jmh"},{"post_id":"cmduj3n37002ok8sv9fbq1qg7","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4x007pk8svepokek14"},{"post_id":"cmduj3n37002ok8sv9fbq1qg7","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4x007qk8svhd6x9qgy"},{"post_id":"cmduj3n38002rk8sv0z177e0y","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4y007tk8svgkd67258"},{"post_id":"cmduj3n38002rk8sv0z177e0y","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4y007uk8svbiu1h9t5"},{"post_id":"cmduj3n3a002uk8sv0tbn8njl","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4y007xk8sv8kxu8q33"},{"post_id":"cmduj3n3a002uk8sv0tbn8njl","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4z007yk8sv0put0u1q"},{"post_id":"cmduj3n3h002yk8sv6n29hdj9","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n4z0081k8svejxmhbyg"},{"post_id":"cmduj3n3h002yk8sv6n29hdj9","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n4z0082k8sv29rnc0m1"},{"post_id":"cmduj3n3i0031k8sv9186fdzy","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n500085k8sv5g5m7z7p"},{"post_id":"cmduj3n3i0031k8sv9186fdzy","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n500086k8sv0w95awdm"},{"post_id":"cmduj3n3j0034k8sv7he13kii","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n510089k8svha7ne4h6"},{"post_id":"cmduj3n3j0034k8sv7he13kii","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n51008ak8sv320w8amv"},{"post_id":"cmduj3n3k0037k8sveef7fop5","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n52008dk8svbcxdea0d"},{"post_id":"cmduj3n3k0037k8sveef7fop5","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n52008ek8svf60dfzj9"},{"post_id":"cmduj3n3l003ak8sv0uav9ldj","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n53008hk8sv1sxm4iyq"},{"post_id":"cmduj3n3l003ak8sv0uav9ldj","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n53008ik8sv3qh619tz"},{"post_id":"cmduj3n3m003dk8sv790930vw","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n53008lk8sv432abz2s"},{"post_id":"cmduj3n3m003dk8sv790930vw","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n54008mk8svfhzd27om"},{"post_id":"cmduj3n3n003gk8sv3b4v19vi","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n54008pk8sv6wgh8h1b"},{"post_id":"cmduj3n3n003gk8sv3b4v19vi","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n54008qk8sv78mxbgkg"},{"post_id":"cmduj3n3o003jk8sv6ugl75bv","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n56008tk8sv4m1f5gla"},{"post_id":"cmduj3n3o003jk8sv6ugl75bv","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n56008uk8sv3emrcu5u"},{"post_id":"cmduj3n3p003mk8sv344h1ssi","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n57008xk8sv5kws8191"},{"post_id":"cmduj3n3p003mk8sv344h1ssi","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n57008yk8svcr0z9sxd"},{"post_id":"cmduj3n3p003ok8svb2fb9ejq","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n580091k8svcliedbry"},{"post_id":"cmduj3n3p003ok8svb2fb9ejq","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n580092k8svf249dwpu"},{"post_id":"cmduj3n3q003qk8sv080xeq4k","tag_id":"cmduj3n580090k8sv271rerho","_id":"cmduj3n580095k8sv8gqj4col"},{"post_id":"cmduj3n3q003qk8sv080xeq4k","tag_id":"cmduj3n580093k8sv4xg18770","_id":"cmduj3n590096k8svge1pbntp"},{"post_id":"cmduj3n3s003uk8svgq8c6td5","tag_id":"cmduj3n580094k8svbcu875mu","_id":"cmduj3n590099k8svcu19djhl"},{"post_id":"cmduj3n3s003uk8svgq8c6td5","tag_id":"cmduj3n590097k8sv4onp6yx8","_id":"cmduj3n59009ak8svgqfmclgr"},{"post_id":"cmduj3n3t003xk8sv5j517b27","tag_id":"cmduj3n590098k8sv0mrr3z32","_id":"cmduj3n5a009dk8sv80i89wov"},{"post_id":"cmduj3n3t003xk8sv5j517b27","tag_id":"cmduj3n59009bk8svcmj080iu","_id":"cmduj3n5a009ek8sv4osvh8pd"},{"post_id":"cmduj3n3u0040k8svdod6eosl","tag_id":"cmduj3n5a009ck8svgcrngf71","_id":"cmduj3n5c009ik8svb8l55y4a"},{"post_id":"cmduj3n3u0040k8svdod6eosl","tag_id":"cmduj3n580090k8sv271rerho","_id":"cmduj3n5c009jk8sv6su28b4v"},{"post_id":"cmduj3n3u0040k8svdod6eosl","tag_id":"cmduj3n59009bk8svcmj080iu","_id":"cmduj3n5c009lk8sve4cdbqf2"},{"post_id":"cmduj3n3u0042k8svdtr952zd","tag_id":"cmduj3n59009bk8svcmj080iu","_id":"cmduj3n5c009mk8svcysycmr8"},{"post_id":"cmduj3n3w0045k8sv5rkm03tm","tag_id":"cmduj3n5c009kk8svdvryb1m2","_id":"cmduj3n5c009ok8svbuhh3b7t"},{"post_id":"cmduj3n3x0048k8svba39a42g","tag_id":"cmduj3n5c009nk8sv29kl3kyy","_id":"cmduj3n5d009qk8sve9p3dunz"},{"post_id":"cmduj3n3y004ck8svgacr6q5w","tag_id":"cmduj3n5c009kk8svdvryb1m2","_id":"cmduj3n5d009tk8svhfbwbvo7"},{"post_id":"cmduj3n3y004ck8svgacr6q5w","tag_id":"cmduj3n5d009rk8sv2l7c355z","_id":"cmduj3n5d009uk8sv3weohvgn"},{"post_id":"cmduj3n3z004ek8svhwpghsqx","tag_id":"cmduj3n5d009sk8sv68ux8bz4","_id":"cmduj3n5e009yk8svgez1h6yq"},{"post_id":"cmduj3n3z004ek8svhwpghsqx","tag_id":"cmduj3n5d009vk8sv8jd79sok","_id":"cmduj3n5e009zk8sv5ues5dxn"},{"post_id":"cmduj3n3z004ek8svhwpghsqx","tag_id":"cmduj3n5e009wk8svbo523hg0","_id":"cmduj3n5e00a1k8sv7g4g0ft5"},{"post_id":"cmduj3n40004hk8sv910femsy","tag_id":"cmduj3n5e009xk8sve0m2enz4","_id":"cmduj3n5f00a4k8svd27k2s2j"},{"post_id":"cmduj3n40004hk8sv910femsy","tag_id":"cmduj3n5e00a0k8sva6krdlep","_id":"cmduj3n5f00a5k8sv2e679rpb"},{"post_id":"cmduj3n40004hk8sv910femsy","tag_id":"cmduj3n5e00a2k8sv9nd66xld","_id":"cmduj3n5f00a7k8svauu3cvju"},{"post_id":"cmduj3n41004kk8svb0fr5aj5","tag_id":"cmduj3n5f00a3k8svbdaf3vqn","_id":"cmduj3n5f00a9k8svcxeh18f5"},{"post_id":"cmduj3n41004kk8svb0fr5aj5","tag_id":"cmduj3n5f00a6k8sv7x0q66t6","_id":"cmduj3n5f00aak8sv1pvn37it"},{"post_id":"cmduj3n41004nk8svaivdg42r","tag_id":"cmduj3n5f00a8k8sv7s2zf14d","_id":"cmduj3n5g00adk8sv2yk62w34"},{"post_id":"cmduj3n41004nk8svaivdg42r","tag_id":"cmduj3n580094k8svbcu875mu","_id":"cmduj3n5g00aek8svh7u0aox0"},{"post_id":"cmduj3n42004qk8sv8z9nghkt","tag_id":"cmduj3n32002ck8sv3tm34eb7","_id":"cmduj3n5g00agk8svbptx2yk0"},{"post_id":"cmduj3n42004qk8sv8z9nghkt","tag_id":"cmduj3n2d000sk8svhczc3njq","_id":"cmduj3n5h00ahk8sv2vbqg7ev"},{"post_id":"cmduj3n42004qk8sv8z9nghkt","tag_id":"cmduj3n59009bk8svcmj080iu","_id":"cmduj3n5h00ajk8svfarj79mt"},{"post_id":"cmduj3n43004sk8sv3vetdfe3","tag_id":"cmduj3n5g00afk8svdlqidogl","_id":"cmduj3n5h00alk8sv0ed044r8"},{"post_id":"cmduj3n43004sk8sv3vetdfe3","tag_id":"cmduj3n5h00aik8sv80u306sn","_id":"cmduj3n5i00amk8sv69ql1m1y"},{"post_id":"cmduj3n44004vk8sv3omcepqh","tag_id":"cmduj3n5c009kk8svdvryb1m2","_id":"cmduj3n5i00apk8sva6pyhvwa"},{"post_id":"cmduj3n44004vk8sv3omcepqh","tag_id":"cmduj3n5i00ank8svg1q12who","_id":"cmduj3n5i00aqk8svd6m7apcx"},{"post_id":"cmduj3n45004yk8sv8shg45wo","tag_id":"cmduj3n5i00aok8sv9irwdp3l","_id":"cmduj3n5j00atk8sv3ijc7jsd"},{"post_id":"cmduj3n45004yk8sv8shg45wo","tag_id":"cmduj3n5i00ark8sv704r6j64","_id":"cmduj3n5j00auk8sv15gghaf2"},{"post_id":"cmduj3n460052k8sv22ia0gdv","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n5k00awk8svgg6n6rso"},{"post_id":"cmduj3n460052k8sv22ia0gdv","tag_id":"cmduj3n2q001kk8svahihhtx6","_id":"cmduj3n5k00axk8sv2ta33vrr"},{"post_id":"cmduj3n470054k8sv71v92lsl","tag_id":"cmduj3n5j00avk8sv02uw6xxl","_id":"cmduj3n5m00b2k8sv7tv59i2q"},{"post_id":"cmduj3n470054k8sv71v92lsl","tag_id":"cmduj3n5k00ayk8svaqzggw80","_id":"cmduj3n5m00b3k8svb5cn0di5"},{"post_id":"cmduj3n470054k8sv71v92lsl","tag_id":"cmduj3n5k00azk8sv9vmc28zk","_id":"cmduj3n5n00b5k8svd3ia9m6m"},{"post_id":"cmduj3n470054k8sv71v92lsl","tag_id":"cmduj3n5k00b0k8svao0s9n2a","_id":"cmduj3n5n00b6k8sv4o5o3ilg"},{"post_id":"cmduj3n490057k8sva3idfixg","tag_id":"cmduj3n5l00b1k8svd9fe7iz1","_id":"cmduj3n5n00b8k8svgzi47l4j"},{"post_id":"cmduj3n4a005ak8sv2em076kr","tag_id":"cmduj3n5m00b4k8svc9qa60zb","_id":"cmduj3n5n00bak8svb0r3hvzl"},{"post_id":"cmduj3n4a005ak8sv2em076kr","tag_id":"cmduj3n5n00b7k8svbmsvepee","_id":"cmduj3n5n00bbk8sv33zrbu7b"},{"post_id":"cmduj3n4b005ek8svfolr2bbc","tag_id":"cmduj3n5n00b9k8svgyilcvgs","_id":"cmduj3n5o00bek8sv2up1cl2a"},{"post_id":"cmduj3n4b005ek8svfolr2bbc","tag_id":"cmduj3n5n00bck8sv75ue5xlk","_id":"cmduj3n5o00bfk8svfmxuaw7n"},{"post_id":"cmduj3n4d005gk8sv1uzx2o1o","tag_id":"cmduj3n5o00bdk8svbbeadwm6","_id":"cmduj3n5p00bjk8sv21w815jo"},{"post_id":"cmduj3n4d005gk8sv1uzx2o1o","tag_id":"cmduj3n59009bk8svcmj080iu","_id":"cmduj3n5p00bkk8sv4f7bbz4g"},{"post_id":"cmduj3n4d005gk8sv1uzx2o1o","tag_id":"cmduj3n5c009kk8svdvryb1m2","_id":"cmduj3n5p00bmk8sv5dkjgfpe"},{"post_id":"cmduj3n4f005jk8svca4y9i8x","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n5q00bok8sv0xaj98y7"},{"post_id":"cmduj3n4f005jk8svca4y9i8x","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n5q00bpk8sv2qbfbcpk"},{"post_id":"cmduj3n4g005mk8sv5zgdcw9w","tag_id":"cmduj3n4e005ik8sv7tzt7sp4","_id":"cmduj3n5q00bqk8svd11t6l9d"},{"post_id":"cmduj3n4g005mk8sv5zgdcw9w","tag_id":"cmduj3n4h005qk8sv9qes9w8u","_id":"cmduj3n5q00brk8svbic68gvu"}],"Tag":[{"name":"gulp","_id":"cmduj3n1t0005k8svb5tg3kbq"},{"name":"Electron","_id":"cmduj3n20000bk8svepq5b9nu"},{"name":"构建工具","_id":"cmduj3n26000gk8sv5152c5fy"},{"name":"HTTPS","_id":"cmduj3n29000lk8sv3ojv1hpg"},{"name":"静态博客","_id":"cmduj3n2d000sk8svhczc3njq"},{"name":"vscode","_id":"cmduj3n2i0010k8svfue540wu"},{"name":"css","_id":"cmduj3n2l0018k8svebfn4pm0"},{"name":"编码规范","_id":"cmduj3n2n001ek8sv4dc6bnc6"},{"name":"js","_id":"cmduj3n2q001kk8svahihhtx6"},{"name":"eslint","_id":"cmduj3n2u001uk8svbpxvb9ld"},{"name":"文件上传","_id":"cmduj3n2x0020k8svaw3g1dmr"},{"name":"content-type","_id":"cmduj3n310027k8svcp5hh8wv"},{"name":"Hexo","_id":"cmduj3n32002ck8sv3tm34eb7"},{"name":"github pages","_id":"cmduj3n36002lk8sv2yuw36z8"},{"name":"前端","_id":"cmduj3n38002qk8svetfmfpab"},{"name":"Github","_id":"cmduj3n3n003fk8sv43ecap8n"},{"name":"Git","_id":"cmduj3n3o003lk8sv6gvk3dzi"},{"name":"HTTP","_id":"cmduj3n3s003sk8svebli7piz"},{"name":"网络状态码","_id":"cmduj3n3u003zk8svf5syapt1"},{"name":"新博客","_id":"cmduj3n3v0044k8sv3q9x6lsf"},{"name":"jQuery","_id":"cmduj3n40004gk8sv1jtt7z0b"},{"name":"浏览器高度","_id":"cmduj3n42004pk8sv2oi37rzv"},{"name":"js类型","_id":"cmduj3n490056k8sv2v8mfopb"},{"name":"隐式转换","_id":"cmduj3n4b005dk8sv8cr7bbyi"},{"name":"LeetCode","_id":"cmduj3n4e005ik8sv7tzt7sp4"},{"name":"算法","_id":"cmduj3n4h005qk8sv9qes9w8u"},{"name":"Mac OSX","_id":"cmduj3n580090k8sv271rerho"},{"name":"命令大全","_id":"cmduj3n580093k8sv4xg18770"},{"name":"Mac","_id":"cmduj3n580094k8svbcu875mu"},{"name":"开机变慢","_id":"cmduj3n590097k8sv4onp6yx8"},{"name":"Mongoose","_id":"cmduj3n590098k8sv0mrr3z32"},{"name":"Node.js","_id":"cmduj3n59009bk8svcmj080iu"},{"name":"MongoDB","_id":"cmduj3n5a009ck8svgcrngf71"},{"name":"npm","_id":"cmduj3n5c009kk8svdvryb1m2"},{"name":"开源许可证","_id":"cmduj3n5c009nk8sv29kl3kyy"},{"name":"node","_id":"cmduj3n5d009rk8sv2l7c355z"},{"name":"pnpm","_id":"cmduj3n5d009sk8sv68ux8bz4"},{"name":"monorepo","_id":"cmduj3n5d009vk8sv8jd79sok"},{"name":"changesets","_id":"cmduj3n5e009wk8svbo523hg0"},{"name":"react","_id":"cmduj3n5e009xk8sve0m2enz4"},{"name":"react-native","_id":"cmduj3n5e00a0k8sva6krdlep"},{"name":"iOS","_id":"cmduj3n5e00a2k8sv9nd66xld"},{"name":"Selenium","_id":"cmduj3n5f00a3k8svbdaf3vqn"},{"name":"测试","_id":"cmduj3n5f00a6k8sv7x0q66t6"},{"name":"MySQL","_id":"cmduj3n5f00a8k8sv7s2zf14d"},{"name":"小程序","_id":"cmduj3n5g00afk8svdlqidogl"},{"name":"WeChat","_id":"cmduj3n5h00aik8sv80u306sn"},{"name":"淘宝npm","_id":"cmduj3n5i00ank8svg1q12who"},{"name":"vue","_id":"cmduj3n5i00aok8sv9irwdp3l"},{"name":"nextTick","_id":"cmduj3n5i00ark8sv704r6j64"},{"name":"Vue.js","_id":"cmduj3n5j00avk8sv02uw6xxl"},{"name":"Vuex","_id":"cmduj3n5k00ayk8svaqzggw80"},{"name":"Bootstrap","_id":"cmduj3n5k00azk8sv9vmc28zk"},{"name":"MVVM","_id":"cmduj3n5k00b0k8svao0s9n2a"},{"name":"Web安全","_id":"cmduj3n5l00b1k8svd9fe7iz1"},{"name":"webpack","_id":"cmduj3n5m00b4k8svc9qa60zb"},{"name":"web font","_id":"cmduj3n5n00b7k8svbmsvepee"},{"name":"gitHub issue","_id":"cmduj3n5n00b9k8svgyilcvgs"},{"name":"第三方评论框","_id":"cmduj3n5n00bck8sv75ue5xlk"},{"name":"Yarn","_id":"cmduj3n5o00bdk8svbbeadwm6"}]}}